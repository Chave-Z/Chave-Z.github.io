<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>ElasticSearch分词及中文分词器</title>
    <url>/posts/a0be6b60.html</url>
    <content><![CDATA[<h1 id="Elasticsearch默认分词"><a href="#Elasticsearch默认分词" class="headerlink" title="Elasticsearch默认分词"></a>Elasticsearch默认分词</h1><h2 id="什么是分词"><a href="#什么是分词" class="headerlink" title="什么是分词?"></a><strong>什么是分词?</strong></h2><p>​        分词就是把文本转换为一个个的单词，分词称之为analysis。 es默认只对英文语句做分词，中文不支持，每个中文字都会被拆分为独立的个体。</p>
<p>​        分词api为</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">POST /_analyze</span><br><span class="line">&#123;</span><br><span class="line">  	<span class="attr">&quot;analyzer&quot;</span>: <span class="string">&quot;standard&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;text&quot;</span>: <span class="string">&quot;text文本&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">POST /my_doc/_analyze</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;analyzer&quot;</span>: <span class="string">&quot;standard&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;field&quot;</span>: <span class="string">&quot;name&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;text&quot;</span>: <span class="string">&quot;text文本&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="es内置分词器"><a href="#es内置分词器" class="headerlink" title="es内置分词器"></a>es内置分词器</h2><ul>
<li><strong>standard</strong>：默认分词，区分中英文。英文按照空格切分同时大小转小写，中文按照单个词分词。</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/image-20210222170851901.png" alt="image-20210222170851901"></p>
<ul>
<li><strong>simple</strong>：先按空格分词，大写转为小写，不是英文不再分词，数字会被剔除。</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/image-20210222171108770.png" alt="image-20210222171108770"></p>
<ul>
<li><strong>whitespace</strong>：按空格分词，英文不区分大小写，中文不再分词。</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/image-20210222170739694.png" alt="image-20210222170739694"></p>
<ul>
<li><strong>stop</strong>：去除无意义单词，比如the/a/ an/ is …</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/image-20210222170646715.png" alt="image-20210222170646715"></p>
<ul>
<li><strong>keyword</strong>：不做分词。把整个文本作为一个单独的关键词。</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/image-20210222171220096.png" alt="image-20210222171220096"></p>
<h1 id="中文分词"><a href="#中文分词" class="headerlink" title="中文分词"></a>中文分词</h1><p>​        在ES中，使用较多的中文分词器是 elasticsearch-analysis-ik，这个是 es 的一个第三方插件，代码托管在 GitHub 上：<a href="https://github.com/medcl/elasticsearch-analysis-ik%EF%BC%8C%E6%8F%92%E4%BB%B6%E5%AE%89%E8%A3%85%E6%9C%89%E4%B8%A4%E7%A7%8D%E6%96%B9%E5%BC%8F%EF%BC%9A">https://github.com/medcl/elasticsearch-analysis-ik，插件安装有两种方式：</a></p>
<h2 id="第一种安装方式："><a href="#第一种安装方式：" class="headerlink" title="第一种安装方式："></a><strong>第一种安装方式：</strong></h2><ol>
<li>首先打开分词器官网：<a href="https://github.com/medcl/elasticsearch-analysis-ik%E3%80%82">https://github.com/medcl/elasticsearch-analysis-ik。</a></li>
<li>在 <a href="https://github.com/medcl/elasticsearch-analysis-ik/releases">https://github.com/medcl/elasticsearch-analysis-ik/releases</a> 页面找到elasticsearch对应的正式版，下载下来。</li>
<li>将下载文件解压。</li>
<li>在 es/plugins 目录下，新建analysis-ik目录，并将解压后的所有文件拷贝到analysis-ik目录下。</li>
<li>重启 es 服务。</li>
</ol>
<h2 id="第二种安装方式："><a href="#第二种安装方式：" class="headerlink" title="第二种安装方式："></a><strong>第二种安装方式：</strong></h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./bin/elasticsearch-plugin install https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v7.4.2/elasticsearch-analysis-ik-7.4.2.zip</span><br></pre></td></tr></table></figure>

<p>安装完成后重启es即可。</p>
<p><strong>注：第一种安装方式，配置文件在es根目录/plugins/analysis-ik/config/下，而第二种方式安装，配置文件在es根目录/config/analysis-ik/下</strong></p>
<h2 id="分词类型介绍"><a href="#分词类型介绍" class="headerlink" title="分词类型介绍"></a>分词类型介绍</h2><p>​        ik分词有两种模式，分别为，<code>ik_max_word</code>和<code>ik_smart</code>，区别如下：</p>
<p><strong>ik_max_word</strong>：会将文本做最细粒度的拆分，例如「中华人民共和国国歌」会被拆分为「中华人民共和国、中华人民、中华、华人、人民共和国、人民、人、民、共和国、共和、和、国国、国歌」，会穷尽各种可能的组合</p>
<p><strong>ik_smart</strong>：会将文本做最粗粒度的拆分，例如「中华人民共和国国歌」会被拆分为「中华人民共和国、国歌」</p>
<h2 id="自定义拓展词库"><a href="#自定义拓展词库" class="headerlink" title="自定义拓展词库"></a>自定义拓展词库</h2><p>​        ik分词有时候不会认识一些网络词或者自定义词，例如马小跳猴赛雷会被分为马小跳、小跳、猴、赛、雷，要支持这些词就需要自定义拓展词库了，首先在<code>es根目录/plugins/analysis-ik/config/</code>（在第一种安装方式）或者<code>es根目录/config/analysis-ik/</code>（第二种方式安装方式）目录下，新建 custom.dic 文件（文件名可以任意），在该文件中可以配置自定义的词库，如果有多个词，换行即可。</p>
<p><img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/image-20210222173339490.png" alt="image-20210222173339490"></p>
<p>然后修改对应安装方式的IKAnalyzer.cfg.xml中配置扩展词典的位置：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/image-20210223094033410.png" alt="image-20210223094033410"></p>
<p>此时测试马小跳猴赛雷就会由原来的马小跳、小跳、猴、赛、雷变为马小跳、猴赛雷</p>
<p><img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/image-20210223094135307.png" alt="image-20210223094135307"></p>
<h2 id="远程词库"><a href="#远程词库" class="headerlink" title="远程词库"></a>远程词库</h2><p>​        也可以配置远程词库，远程词库支持热更新（设置完重启一次，之后不用重启 es 就可以生效），热更新只需要提供一个接口，接口返回扩展词即可，我们只需要在对应的IKAnalyzer.cfg.xml 文件中配置远程扩展词接口**(remote_ext_dicts属性)**即可：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;remote_ext_dict&quot;</span>&gt;</span>http://abc.com/custom.dic<span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>ElasticSearch</category>
      </categories>
      <tags>
        <tag>ElasticSearch</tag>
      </tags>
  </entry>
  <entry>
    <title>ELK分布式日志解决方案</title>
    <url>/posts/c6024536.html</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><blockquote>
<p>ELK，包含三款产品，Elasticsearch、Logstash、Kibana，可在项目中作为日志框架使用。</p>
</blockquote>
<p>各模块的功能如下：</p>
<ul>
<li>应用服务<br>生产日志，通过Logger产生日志并输出。</li>
<li>Logstash<br>收集日志，通过http接收应用服务产生的日志。</li>
<li>Elasticsearch<br>为日志提供全文检索功能。</li>
<li>kibana<br>为Elasticsearch提供图形化界面。</li>
</ul>
<h1 id="安装过程"><a href="#安装过程" class="headerlink" title="安装过程"></a>安装过程</h1><h2 id="elasticsearch、logstash、kibana安装"><a href="#elasticsearch、logstash、kibana安装" class="headerlink" title="elasticsearch、logstash、kibana安装"></a>elasticsearch、logstash、kibana安装</h2><p>为了简化安装步骤，本文使用docker-compose安装elk，所以需要先安装好docker与docker-compose。如果想自主安装，可以自行百度。</p>
<h4 id="1-新建logstash配置文件"><a href="#1-新建logstash配置文件" class="headerlink" title="1. 新建logstash配置文件"></a>1. 新建logstash配置文件</h4><p>我创建的为<code>/opt/elk/logstash/logstash-springboot.conf</code>文件，可以自行调整，但是要和下文docker-compose中的对应上</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">  tcp &#123;</span><br><span class="line">    mode =&gt; <span class="string">&quot;server&quot;</span></span><br><span class="line">    host =&gt; <span class="string">&quot;0.0.0.0&quot;</span></span><br><span class="line">    port =&gt; 4560</span><br><span class="line">    codec =&gt; json_lines</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">output &#123;</span><br><span class="line">  elasticsearch &#123;</span><br><span class="line">    hosts =&gt; <span class="string">&quot;es:9200&quot;</span></span><br><span class="line">    index =&gt; <span class="string">&quot;springboot-logstash-%&#123;+YYYY.MM.dd&#125;&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-编写docker-compose-yml"><a href="#2-编写docker-compose-yml" class="headerlink" title="2. 编写docker-compose.yml"></a>2. 编写docker-compose.yml</h4><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">elasticsearch:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">elasticsearch:7.4.2</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">elasticsearch</span></span><br><span class="line">    <span class="attr">privileged:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">user:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;cluster.name=elasticsearch&quot;</span> <span class="comment">#设置集群名称为elasticsearch</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;discovery.type=single-node&quot;</span> <span class="comment">#以单一节点模式启动</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;ES_JAVA_OPTS=-Xms512m -Xmx512m&quot;</span> <span class="comment">#设置使用jvm内存大小</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/opt/elk/elasticsearch/plugins:/usr/share/elasticsearch/plugins</span> <span class="comment">#插件文件挂载</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/opt/elk/elasticsearch/data:/usr/share/elasticsearch/data</span> <span class="comment">#数据文件挂载</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">9200</span><span class="string">:9200</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">9300</span><span class="string">:9300</span></span><br><span class="line">  <span class="attr">logstash:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">logstash:7.4.2</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">logstash</span></span><br><span class="line">    <span class="attr">privileged:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">TZ=Asia/Shanghai</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/opt/elk/logstash/logstash-springboot.conf:/usr/share/logstash/pipeline/logstash.conf</span> <span class="comment">#挂载logstash的配置文件</span></span><br><span class="line">     <span class="comment"># - /opt/elk/logstash/Gemfile:/usr/share/logstash/Gemfile</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">elasticsearch</span> <span class="comment">#logstash在elasticsearch启动之后再启动</span></span><br><span class="line">    <span class="attr">links:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">elasticsearch:es</span> <span class="comment">#可以用es这个域名访问elasticsearch服务</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">4560</span><span class="string">:4560</span></span><br><span class="line">  <span class="attr">kibana:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">kibana:7.4.2</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">kibana</span></span><br><span class="line">    <span class="attr">privileged:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">links:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">elasticsearch:es</span> <span class="comment">#可以用es这个域名访问elasticsearch服务</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">elasticsearch</span> <span class="comment">#kchinaibana在elasticsearch启动之后再启动</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;elasticsearch.hosts=http://es:9200&quot;</span> <span class="comment">#设置访问elasticsearch的地址</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">5601</span><span class="string">:5601</span></span><br></pre></td></tr></table></figure>

<p><strong>注：</strong><code>/opt/elk</code>和elk版本可以换成自己想要的版本，<strong>上面还有一行注释掉的Gemfile，这个等会有用，先别取消注释。</strong></p>
<h4 id="3-执行docker-compose文件"><a href="#3-执行docker-compose文件" class="headerlink" title="3. 执行docker-compose文件"></a>3. 执行docker-compose文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在上述docker-compose.yml的目录下执行docker-compose文件</span></span><br><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure>

<p>启动成功稍等一会，你就能通过<code>http://127.0.0.1:5601/</code>访问Kibana了。</p>
<h4 id="4-修改Gemfile文件"><a href="#4-修改Gemfile文件" class="headerlink" title="4. 修改Gemfile文件"></a>4. 修改Gemfile文件</h4><p>（当然，你要是能挂梯子，可以直接看第五步）</p>
<p>logstash的Gemfile文件默认镜像地址为<code>https://rubygems.org</code>，但是国内好像很能下载成功，所以我们要改一下，直接在docker里修改也始终不行，所以还是用挂载的吧，操作如下：</p>
<ul>
<li>首先拷贝docker中的文件到本机：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker cp logstash:/usr/share/logstash/Gemfile /opt/elk/logstash</span><br></pre></td></tr></table></figure>

<ul>
<li>修改文件中的source为<code>https://gems.ruby-china.com/</code></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># source &quot;https://rubygems.org&quot;</span></span><br><span class="line"><span class="built_in">source</span> <span class="string">&quot;https://gems.ruby-china.com/&quot;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>此时停止容器并移除通过创建的容器</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在上述docker-compose.yml的目录下执行下面的语句</span></span><br><span class="line">docker-compose down</span><br></pre></td></tr></table></figure>

<ul>
<li>然后取消<code>docker-compose.yml</code>文件中的<code>Gemfile</code>注释，重新执行下面的语句</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在上述docker-compose.yml的目录下执行docker-compose文件</span></span><br><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure>

<h4 id="5-安装logstash插件"><a href="#5-安装logstash插件" class="headerlink" title="5.  安装logstash插件"></a>5.  安装logstash插件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进入logstash容器</span></span><br><span class="line">docker <span class="built_in">exec</span> -it logstash /bin/bash</span><br><span class="line"><span class="comment"># 进入bin目录</span></span><br><span class="line"><span class="built_in">cd</span> /bin/</span><br><span class="line"><span class="comment"># 安装插件</span></span><br><span class="line">logstash-plugin install logstash-codec-json_lines</span><br><span class="line"><span class="comment"># 退出容器</span></span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line"><span class="comment"># 重启logstash服务</span></span><br><span class="line">docker restart logstash</span><br></pre></td></tr></table></figure>

<p>logstash-plugin install 以后，不出意外的话，你就会看到下面的成功提示：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/image-20210323113549551.png" alt="image-20210323113549551"></p>
<p>当然，要是出现下面的OpenTimeout提示，还是去看看第四步吧</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ERROR: Something went wrong when installing logstash-codec-json_lines, message: Net::OpenTimeout</span><br></pre></td></tr></table></figure>

<h2 id="Spring-Boot-项目搭建"><a href="#Spring-Boot-项目搭建" class="headerlink" title="Spring Boot 项目搭建"></a>Spring Boot 项目搭建</h2><h4 id="1-新建logback-spring-xml文件"><a href="#1-新建logback-spring-xml文件" class="headerlink" title="1. 新建logback-spring.xml文件"></a>1. 新建logback-spring.xml文件</h4><p>新建springboot项目，然后在<code>resources/log/</code>下新建<code>logback-spring.xml</code>文件，<strong>下面的ip端口改成自己的</strong>：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">resource</span>=<span class="string">&quot;org/springframework/boot/logging/logback/base.xml&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;LOGSTASH&quot;</span> <span class="attr">class</span>=<span class="string">&quot;net.logstash.logback.appender.LogstashTcpSocketAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">destination</span>&gt;</span>192.168.50.97:4560<span class="tag">&lt;/<span class="name">destination</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> <span class="attr">class</span>=<span class="string">&quot;net.logstash.logback.encoder.LogstashEncoder&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 日志输出编码</span></span><br><span class="line"><span class="comment">        &lt;encoder charset=&quot;UTF-8&quot;</span></span><br><span class="line"><span class="comment">                 class=&quot;net.logstash.logback.encoder.LoggingEventCompositeJsonEncoder&quot;&gt;</span></span><br><span class="line"><span class="comment">            &lt;providers&gt;</span></span><br><span class="line"><span class="comment">                &lt;timestamp&gt;</span></span><br><span class="line"><span class="comment">                    &lt;timeZone&gt;UTC&lt;/timeZone&gt;</span></span><br><span class="line"><span class="comment">                &lt;/timestamp&gt;</span></span><br><span class="line"><span class="comment">                &lt;pattern&gt;</span></span><br><span class="line"><span class="comment">                    &lt;pattern&gt;</span></span><br><span class="line"><span class="comment">                        &#123;</span></span><br><span class="line"><span class="comment">                        &quot;logLevel&quot;: &quot;%level&quot;,</span></span><br><span class="line"><span class="comment">                        &quot;serviceName&quot;: &quot;$&#123;springAppName:-&#125;&quot;,</span></span><br><span class="line"><span class="comment">                        &quot;pid&quot;: &quot;$&#123;PID:-&#125;&quot;,</span></span><br><span class="line"><span class="comment">                        &quot;thread&quot;: &quot;%thread&quot;,</span></span><br><span class="line"><span class="comment">                        &quot;class&quot;: &quot;%logger&#123;40&#125;&quot;,</span></span><br><span class="line"><span class="comment">                        &quot;rest&quot;: &quot;%message&quot;</span></span><br><span class="line"><span class="comment">                        &#125;</span></span><br><span class="line"><span class="comment">                    &lt;/pattern&gt;</span></span><br><span class="line"><span class="comment">                &lt;/pattern&gt;</span></span><br><span class="line"><span class="comment">            &lt;/providers&gt;</span></span><br><span class="line"><span class="comment">        &lt;/encoder&gt; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;INFO&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;LOGSTASH&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;CONSOLE&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="2-修改application-yml文件"><a href="#2-修改application-yml文件" class="headerlink" title="2. 修改application.yml文件"></a>2. 修改application.yml文件</h4><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 加入下面的配置，引入日志文件</span></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">config:</span> <span class="string">classpath:log/logback-spring.xml</span></span><br></pre></td></tr></table></figure>

<h4 id="3-随便写一个测试接口"><a href="#3-随便写一个测试接口" class="headerlink" title="3. 随便写一个测试接口"></a>3. 随便写一个测试接口</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  logger.error(<span class="string">&quot;一条错误信息&quot;</span>);</span><br><span class="line">  logger.warn(<span class="string">&quot;一条warn信息&quot;</span>);</span><br><span class="line">  logger.info(<span class="string">&quot;一条warn信息&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Kibana配置"><a href="#Kibana配置" class="headerlink" title="Kibana配置"></a>Kibana配置</h2><p>浏览器输入<a href="http://127.0.0.1:5601，访问Kibana">http://127.0.0.1:5601，访问Kibana</a> web界面。进入Management界面，点击<code>index Patterns</code>，然后点击创建一个索引</p>
<p><img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/image-20210323134225736.png" alt="image-20210323134225736"></p>
<p>在下面的界面中输入<code>springboot-logstash-*</code>然后点击<code>Next step</code>，这个<code>springboot-logstash-*</code>是根据上面<code>logstash-springboot.conf</code>中<code>output</code>模块的<code>index</code>属性确定的，要是你修改了，这边也需要做对应的修改。如果这边输入以后，提示没有任何匹配，可以试着先访问一下<code>logstash</code>的地址：<code>http://127.0.0.1:4560/</code>，然后刷新下界面，一般出现箭头处的索引，就基本没啥问题了。</p>
<p><img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/image-20210323134937180.png" alt="image-20210323134937180"></p>
<p>在接下来的页面选择<code>@timestamp</code>，然后点击<code>Create index pattern</code></p>
<p><img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/image-20210323135147928.png" alt="image-20210323135147928"></p>
<p>此时，访问一下接口，然后就能在<code>Discover</code>模块看到记录的日志信息了。</p>
<p><img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/image-20210323135515617.png" alt="image-20210323135515617"></p>
<h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h2 id="kibana汉化"><a href="#kibana汉化" class="headerlink" title="kibana汉化"></a>kibana汉化</h2><p>要是你不习惯<code>kibana</code>的英文页面，需要汉化，也比较简单，<code>kibana 7.*</code>以上的版本都带了中文语言包，只需要设置一下即可：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 进入kibana容器</span></span><br><span class="line">docker exec -it kibana /bin/bash</span><br><span class="line"><span class="meta">#</span><span class="bash"> 进入config文件夹</span></span><br><span class="line">bash-4.2$ cd config/</span><br><span class="line"><span class="meta">#</span><span class="bash"> 编辑vi kibana.yml 并加入 i18n.locale: <span class="string">&quot;zh-CN&quot;</span></span></span><br><span class="line">bash-4.2$ vi kibana.yml</span><br><span class="line"><span class="meta">#</span><span class="bash"> 编辑保存完毕 退出容器</span></span><br><span class="line">bash-4.2$ exit</span><br><span class="line"><span class="meta">#</span><span class="bash"> 重启kibana</span></span><br><span class="line">docker restart kibana</span><br></pre></td></tr></table></figure>

<p>修改完的<code>kibana.yml</code>如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/image-20210323140549131.png" alt="image-20210323140549131"></p>
<p>等待<code>kibana</code>重启完能看到中文界面了。</p>
]]></content>
      <categories>
        <category>ElasticSearch</category>
      </categories>
      <tags>
        <tag>ElasticSearch</tag>
      </tags>
  </entry>
  <entry>
    <title>ElasticSearch基础查询</title>
    <url>/posts/8c3e686f.html</url>
    <content><![CDATA[<p>注：本内容参考的是江南一点雨的这个公众号的，需要数据源可以直接在他的微信公众号后台回复 <strong>bookdata.json</strong> 下载脚本。</p>
<h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><ul>
<li><p>下载数据源</p>
</li>
<li><p>创建索引</p>
</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">PUT books</span><br><span class="line">&#123;</span><br><span class="line"> <span class="attr">&quot;mappings&quot;</span>: &#123;</span><br><span class="line">   <span class="attr">&quot;properties&quot;</span>: &#123;</span><br><span class="line">     <span class="attr">&quot;name&quot;</span>:&#123;</span><br><span class="line">       <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;text&quot;</span>,</span><br><span class="line">       <span class="attr">&quot;analyzer&quot;</span>: <span class="string">&quot;ik_max_word&quot;</span></span><br><span class="line">     &#125;,</span><br><span class="line">     <span class="attr">&quot;publish&quot;</span>:&#123;</span><br><span class="line">       <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;text&quot;</span>,</span><br><span class="line">       <span class="attr">&quot;analyzer&quot;</span>: <span class="string">&quot;ik_max_word&quot;</span></span><br><span class="line">     &#125;,</span><br><span class="line">     <span class="attr">&quot;type&quot;</span>:&#123;</span><br><span class="line">       <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;text&quot;</span>,</span><br><span class="line">       <span class="attr">&quot;analyzer&quot;</span>: <span class="string">&quot;ik_max_word&quot;</span></span><br><span class="line">     &#125;,</span><br><span class="line">     <span class="attr">&quot;author&quot;</span>:&#123;</span><br><span class="line">       <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;keyword&quot;</span></span><br><span class="line">     &#125;,</span><br><span class="line">     <span class="attr">&quot;info&quot;</span>:&#123;</span><br><span class="line">       <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;text&quot;</span>,</span><br><span class="line">       <span class="attr">&quot;analyzer&quot;</span>: <span class="string">&quot;ik_max_word&quot;</span></span><br><span class="line">     &#125;,</span><br><span class="line">     <span class="attr">&quot;price&quot;</span>:&#123;</span><br><span class="line">       <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;double&quot;</span></span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>在文件目录下执行如下脚本导入命令</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl -XPOST &quot;http:&#x2F;&#x2F;localhost:9200&#x2F;books&#x2F;_bulk?pretty&quot; -H &quot;content-type:application&#x2F;json&quot; --data-binary @bookdata.json</span><br></pre></td></tr></table></figure>

<p>查询分为两个过程：</p>
<ol>
<li>当向索引中保存文档时，默认情况下，es 会保存两份内容，一份是 <code>_source</code> 中的数据，另一份则是通过分词、排序等一系列过程生成的倒排索引文件，倒排索引中保存了词项和文档之间的对应关系。</li>
<li>搜索时，当 es 接收到用户的搜索请求之后，就会去倒排索引中查询，通过的倒排索引中维护的倒排记录表找到关键词对应的文档集合，然后对文档进行评分、排序、高亮等处理，处理完成后返回文档。</li>
</ol>
<h1 id="基础查询"><a href="#基础查询" class="headerlink" title="基础查询"></a>基础查询</h1><h3 id="简单查询-会返回10条记录-："><a href="#简单查询-会返回10条记录-：" class="headerlink" title="简单查询(会返回10条记录)："></a>简单查询(会返回10条记录)：</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">GET books/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;match_all&quot;</span>: &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"># 或者直接GET books/_search</span><br></pre></td></tr></table></figure>

<h3 id="词项查询"><a href="#词项查询" class="headerlink" title="词项查询"></a>词项查询</h3><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET books/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;term&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;数学&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"># 或者使用terms设置多个查询条件</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;terms&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>:  [<span class="string">&quot;计算机&quot;</span>,<span class="string">&quot;数学&quot;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h3><p>默认返回前 10 条数据，es 中也可以像关系型数据库一样，给一个分页参数：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET books&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;term&quot;: &#123;</span><br><span class="line">      &quot;name&quot;: &quot;数学&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;size&quot;: 10,</span><br><span class="line">  &quot;from&quot;: 10</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="过滤返回字段"><a href="#过滤返回字段" class="headerlink" title="过滤返回字段"></a>过滤返回字段</h3><p>​        如果返回的字段比较多，又不需要这么多字段，此时可以指定返回的字段，如下文中这么设置，则结果就只返回name和author了：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET books&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;term&quot;: &#123;</span><br><span class="line">      &quot;name&quot;: &quot;数学&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;size&quot;: 10,</span><br><span class="line">  &quot;from&quot;: 10,</span><br><span class="line">  &quot;_source&quot;: [&quot;name&quot;,&quot;author&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="最小评分"><a href="#最小评分" class="headerlink" title="最小评分"></a>最小评分</h3><p>​        有的文档得分特别低，说明这个文档和我们查询的关键字相关度很低。我们可以设置一个最低分，只有得分超过最低分的文档才会被返回，如下查询条件中得分低于 1.75 的文档将直接被舍弃。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET books&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;term&quot;: &#123;</span><br><span class="line">      &quot;name&quot;: &quot;数学&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;min_score&quot;:1.75,</span><br><span class="line">  &quot;_source&quot;: [&quot;name&quot;,&quot;author&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="高亮"><a href="#高亮" class="headerlink" title="高亮"></a>高亮</h3><p>查询关键字高亮：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET books/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;<span class="attr">&quot;term&quot;</span>: &#123;<span class="attr">&quot;name&quot;</span>: <span class="string">&quot;数学&quot;</span>&#125;&#125;,</span><br><span class="line">  <span class="attr">&quot;highlight&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;fields&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 也可以设置高亮类型</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;query&quot;</span>:&#123;</span><br><span class="line">        <span class="attr">&quot;term&quot;</span>:&#123;</span><br><span class="line">            <span class="attr">&quot;name&quot;</span>:<span class="string">&quot;数学&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;highlight&quot;</span>:&#123;</span><br><span class="line">        <span class="attr">&quot;fields&quot;</span>:&#123;</span><br><span class="line">            <span class="attr">&quot;name&quot;</span>:&#123;</span><br><span class="line">                <span class="attr">&quot;pre_tags&quot;</span>:[</span><br><span class="line">                    <span class="string">&quot;&lt;strong&gt;&quot;</span></span><br><span class="line">                ],</span><br><span class="line">                <span class="attr">&quot;post_tags&quot;</span>:[</span><br><span class="line">                    <span class="string">&quot;&lt;/strong&gt;&quot;</span></span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"># 当然，name 字段中搜索的，但是我们希望 info 字段中，相关的关键字也能高亮</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;match&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;数学&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;highlight&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;require_field_match&quot;</span>: <span class="string">&quot;false&quot;</span>, </span><br><span class="line">    <span class="attr">&quot;fields&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;pre_tags&quot;</span>: [<span class="string">&quot;&lt;strong&gt;&quot;</span>],</span><br><span class="line">        <span class="attr">&quot;post_tags&quot;</span>: [<span class="string">&quot;&lt;/strong&gt;&quot;</span>]</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">&quot;info&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;pre_tags&quot;</span>: [<span class="string">&quot;&lt;strong&gt;&quot;</span>],</span><br><span class="line">        <span class="attr">&quot;post_tags&quot;</span>: [<span class="string">&quot;&lt;/strong&gt;&quot;</span>]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><p>排序很简单，默认是按照查询文档的相关度来排序的，即（<code>_score</code> 字段）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET books&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;term&quot;: &#123;</span><br><span class="line">      &quot;name&quot;: &#123;</span><br><span class="line">        &quot;value&quot;: &quot;java&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>等价于：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET books&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;term&quot;: &#123;</span><br><span class="line">      &quot;name&quot;: &#123;</span><br><span class="line">        &quot;value&quot;: &quot;java&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;sort&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;_score&quot;: &#123;</span><br><span class="line">        &quot;order&quot;: &quot;desc&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>match_all 查询只是返回所有文档，不评分，默认按照添加顺序返回，可以通过 <code>_doc</code> 字段对其进行排序：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET books&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match_all&quot;: &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;sort&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;_doc&quot;: &#123;</span><br><span class="line">        &quot;order&quot;: &quot;desc&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  &quot;size&quot;: 20</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>es同时也支持多字段排序。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET books&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match_all&quot;: &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;sort&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;price&quot;: &#123;</span><br><span class="line">        &quot;order&quot;: &quot;asc&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;_doc&quot;: &#123;</span><br><span class="line">        &quot;order&quot;: &quot;desc&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  &quot;size&quot;: 20</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="全文查询"><a href="#全文查询" class="headerlink" title="全文查询"></a>全文查询</h1><h3 id="match"><a href="#match" class="headerlink" title="match"></a>match</h3><p>​        match query 会对查询语句进行分词，分词后，如果查询语句中的任何一个词项被匹配，则文档就会被索引到。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET books&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;name&quot;: &quot;美术计算机&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​        这个查询首先会对 <code>美术计算机</code> 进行分词，分词之后，再去查询，只要文档中包含一个分词结果，就回返回文档。换句话说，默认词项之间是 OR 的关系，如果想要修改，也可以改为 AND。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET books&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;name&quot;: &#123;</span><br><span class="line">        &quot;query&quot;: &quot;美术计算机&quot;,</span><br><span class="line">        &quot;operator&quot;: &quot;and&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此时就回要求文档中必须同时包含 <strong>美术</strong> 和 <strong>计算机</strong> 两个词。</p>
<h3 id="match-phrase"><a href="#match-phrase" class="headerlink" title="match_phrase"></a>match_phrase</h3><p>match_phrase query 也会对查询的关键字进行分词，但是它分词后有两个特点：</p>
<ul>
<li><strong>分词后的词项顺序必须和文档中词项的顺序一致</strong></li>
<li><strong>所有的词都必须出现在文档中</strong></li>
</ul>
<p>示例如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET books&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match_phrase&quot;: &#123;</span><br><span class="line">        &quot;name&quot;: &#123;</span><br><span class="line">          &quot;query&quot;: &quot;高等教育计算机&quot;,</span><br><span class="line">          &quot;slop&quot;: 100</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>query 是查询的关键字，会被分词器进行分解，分解之后去倒排索引中进行匹配。</p>
<p>slop是指关键字之间的最小距离，但是注意不是关键之间间隔的字数。文档中的字段被分词器解析之后，解析出来的词项都包含一个 position 字段表示词项的位置，查询短语分词之后的 position 之间的间隔要满足 slop 的要求。</p>
<h3 id="match-phrase-prefix"><a href="#match-phrase-prefix" class="headerlink" title="match_phrase_prefix"></a>match_phrase_prefix</h3><p>​        这个类似于 match_phrase，只不过这里多了一个通配符，match_phrase_prefix 支持最后一个词项的前缀匹配，但是由于<strong>这种匹配方式效率较低</strong>，因此大家作为了解即可。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET books&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match_phrase_prefix&quot;: &#123;</span><br><span class="line">      &quot;name&quot;: &quot;计&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​        这个查询过程，会自动进行单词匹配，会自动查找以<strong>计</strong>开始的单词，默认是 50 个，可以自己控制：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET books&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match_phrase_prefix&quot;: &#123;</span><br><span class="line">      &quot;name&quot;: &#123;</span><br><span class="line">        &quot;query&quot;: &quot;计&quot;,</span><br><span class="line">        &quot;max_expansions&quot;: 3</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​        match_phrase_prefix 是针对分片级别的查询，假设 max_expansions 为 1，可能返回多个文档，但是只有一个词，这是我们预期的结果。有的时候实际返回结果和我们预期结果并不一致，原因在于这个查询是分片级别的，不同的分片确实只返回了一个词，但是结果可能来自不同的分片，所以最终会看到多个词。</p>
<h3 id="multi-match"><a href="#multi-match" class="headerlink" title="multi_match"></a>multi_match</h3><p>match 查询的升级版，可以指定多个查询域：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET books&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;multi_match&quot;: &#123;</span><br><span class="line">      &quot;query&quot;: &quot;java&quot;,</span><br><span class="line">      &quot;fields&quot;: [&quot;name&quot;,&quot;info&quot;]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这种查询方式还可以指定字段的权重：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET books&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;multi_match&quot;: &#123;</span><br><span class="line">      &quot;query&quot;: &quot;阳光&quot;,</span><br><span class="line">      &quot;fields&quot;: [&quot;name^4&quot;,&quot;info&quot;]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个表示关键字出现在 name 中的权重是出现在 info 中权重的 4 倍。</p>
<h3 id="query-string"><a href="#query-string" class="headerlink" title="query_string"></a>query_string</h3><p>query_string 是一种紧密结合 Lucene 的查询方式，在一个查询语句中可以用到 Lucene 的一些查询语法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET books&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;query_string&quot;: &#123;</span><br><span class="line">      &quot;default_field&quot;: &quot;name&quot;,</span><br><span class="line">      &quot;query&quot;: &quot;(十一五) AND (计算机)&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="simple-query-string"><a href="#simple-query-string" class="headerlink" title="simple_query_string"></a>simple_query_string</h3><p>这个是 query_string 的升级，可以直接使用 +、|、- 代替 AND、OR、NOT 等，查询结果和 query_string相同。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET books&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;simple_query_string&quot;: &#123;</span><br><span class="line">      &quot;fields&quot;: [&quot;name&quot;],</span><br><span class="line">      &quot;query&quot;: &quot;(十一五) + (计算机)&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="其他查询"><a href="#其他查询" class="headerlink" title="其他查询"></a>其他查询</h1><h3 id="range"><a href="#range" class="headerlink" title="range"></a>range</h3><p>​        范围查询，可以按照日期范围、数字范围等查询，range query 中的参数主要有四个：gt (大于)、lt (小于)、gte (大于等于)、lte (小于等于)</p>
<p>案例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET books&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;range&quot;: &#123;</span><br><span class="line">      &quot;price&quot;: &#123;</span><br><span class="line">        &quot;gte&quot;: 10,</span><br><span class="line">        &quot;lt&quot;: 20</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;sort&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;price&quot;: &#123;</span><br><span class="line">        &quot;order&quot;: &quot;desc&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="exists"><a href="#exists" class="headerlink" title="exists"></a>exists</h3><p>​        exists query 会返回指定字段中至少有一个非空值的文档：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET books&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;exists&quot;: &#123;</span><br><span class="line">      &quot;field&quot;: &quot;计算机&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>注意，空字符串也是有值。null 是空值。</strong></p>
<h3 id="Prefix"><a href="#Prefix" class="headerlink" title="Prefix"></a>Prefix</h3><blockquote>
<p>前缀查询，效率略低，除非必要，一般不太建议使用。</p>
</blockquote>
<p>给定关键词的前缀去查询：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET books&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;prefix&quot;: &#123;</span><br><span class="line">      &quot;name&quot;: &#123;</span><br><span class="line">        &quot;value&quot;: &quot;计算机&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="wildcard"><a href="#wildcard" class="headerlink" title="wildcard"></a>wildcard</h3><p>wildcard query 即通配符查询。支持单字符和多字符通配符：</p>
<ul>
<li>？表示一个任意字符。</li>
<li><code>*</code> 表示零个或者多个字符。</li>
</ul>
<p>查询所有姓张的作者的书：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET books&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;wildcard&quot;: &#123;</span><br><span class="line">      &quot;author&quot;: &#123;</span><br><span class="line">        &quot;value&quot;: &quot;张*&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>查询所有姓张并且名字只有两个字的作者的书：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET books&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;wildcard&quot;: &#123;</span><br><span class="line">      &quot;author&quot;: &#123;</span><br><span class="line">        &quot;value&quot;: &quot;张?&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="regexp"><a href="#regexp" class="headerlink" title="regexp"></a>regexp</h3><p>支持正则表达式查询。</p>
<p>查询所有姓张并且名字只有两个字的作者的书：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET books&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;regexp&quot;: &#123;</span><br><span class="line">      &quot;author&quot;: &quot;张.&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="fuzzy"><a href="#fuzzy" class="headerlink" title="fuzzy"></a>fuzzy</h3><p>​        在实际搜索中，有时我们可能会打错字，从而导致搜索不到，在 match query 中，可以通过 fuzziness 属性实现模糊查询。</p>
<p>​        fuzzy query 返回与搜索关键字相似的文档。怎么样就算相似？以LevenShtein 编辑距离为准。编辑距离是指将一个字符变为另一个字符所需要更改字符的次数，更改主要包括四种：</p>
<ul>
<li>更改字符（javb–&gt;java）</li>
<li>删除字符（javva–&gt;java）</li>
<li>插入字符（jaa–&gt;java）</li>
<li>转置字符（ajva–&gt;java）</li>
</ul>
<p>​        为了找到相似的词，模糊查询会在指定的编辑距离中创建搜索关键词的所有可能变化或者扩展的集合，然后进行搜索匹配。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET books&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;fuzzy&quot;: &#123;</span><br><span class="line">      &quot;name&quot;: &quot;javva&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="ids-query"><a href="#ids-query" class="headerlink" title="ids query"></a>ids query</h3><p>根据指定的 id 查询。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET books&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;ids&quot;:&#123;</span><br><span class="line">      &quot;values&quot;:  [1,2,3]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>参考：<a href="https://www.bilibili.com/video/BV1ft4y1e7tq">https://www.bilibili.com/video/BV1ft4y1e7tq</a></p>
]]></content>
      <categories>
        <category>ElasticSearch</category>
      </categories>
      <tags>
        <tag>ElasticSearch</tag>
      </tags>
  </entry>
  <entry>
    <title>ElasticSearch开篇</title>
    <url>/posts/a9e5c1e9.html</url>
    <content><![CDATA[<h1 id="Lucene、ElasticSearch和solr"><a href="#Lucene、ElasticSearch和solr" class="headerlink" title="Lucene、ElasticSearch和solr"></a>Lucene、ElasticSearch和solr</h1><h2 id="Lucene"><a href="#Lucene" class="headerlink" title="Lucene"></a>Lucene</h2><p>​        Lucene 是一个开源、免费、高性能、纯 Java 编写的全文检索引擎，可以算作是开源领域最好的全文检索工具包。</p>
<p>​        在实际开发中，Lucene 几乎适用于任何需要全文检索的场景，所以 Lucene 先后发展出好多语言版本，例如 C++、C#、Python 等。</p>
<p>​        早在 2005 年，Lucene 就升级为 Apache 顶级开源项目。它的作者是 Doug Cutting，有的人可能没听过这这个人，不过你肯定听过他的另一个大名鼎鼎的作品 Hadoop。</p>
<p>​        不过需要注意的是，<strong>Lucene 只是一个工具包，并非一个完整的搜索引擎</strong>，开发者可以基于 Lucene 来开发完整的搜索引擎。比较著名的有 Solr、ElasticSearch，不过在分布式和大数据环境下，ElasticSearch 更胜一筹。</p>
<p>Lucene 主要有如下特点：</p>
<ul>
<li>简单</li>
<li>跨语言</li>
<li>强大的搜索引擎</li>
<li>索引速度快</li>
<li>索引文件兼容不同平台</li>
</ul>
<h2 id="ElasticSearch"><a href="#ElasticSearch" class="headerlink" title="ElasticSearch"></a>ElasticSearch</h2><p>​        ElasticSearch 是一个分布式、可扩展、近实时性的高性能搜索与数据分析引擎。ElasticSearch 基于 Java 编写，通过进一步封装 Lucene，将搜索的复杂性屏蔽起来，开发者只需要一套简单的 RESTful API 就可以操作全文检索。</p>
<p>​        ElasticSearch 在分布式环境下表现优异，这也是它比较受欢迎的原因之一。它支持 PB 级别的结构化或非结构化海量数据处理</p>
<p>整体上来说，ElasticSearch 有三大功能：</p>
<ul>
<li>数据搜集</li>
<li>数据分析</li>
<li>数据存储</li>
</ul>
<p><strong>ElasticSearch 的主要特点：</strong></p>
<ol>
<li>分布式文件存储。</li>
<li>实时分析的分布式搜索引擎。</li>
<li>高可拓展性。</li>
<li>可插拔的插件支持。</li>
</ol>
<h1 id="ElasticSearch安装"><a href="#ElasticSearch安装" class="headerlink" title="ElasticSearch安装"></a>ElasticSearch安装</h1><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>​        首先到<a href="https://www.elastic.co/cn/downloads/elasticsearch">elastic.co</a>或者<a href="https://elasticsearch.cn/download/">elasticsearch.cn</a>下载自己系统版本的Elasticsearch，这里用的是7.4.2。可以根据自己的需要下载不同的版本。直接解压放到电脑中间就行。压缩包中的目录结构如下：</p>
<ul>
<li>bin：可执行文件在里面，运行es的命令就在这个里面，包含了一些脚本文件等</li>
<li>config 配置文件目录</li>
<li>jdk： java环境</li>
<li>lib：依赖的jar, 类库</li>
<li>logs：日志文件</li>
<li>modules：es相关的模块</li>
<li>plugins：可以自己开发的插件</li>
<li>data：这个目录没有，自己新建一下, 这个作为索引目录</li>
</ul>
<h2 id="修改elasticsearch-yml文件"><a href="#修改elasticsearch-yml文件" class="headerlink" title="修改elasticsearch.yml文件"></a>修改elasticsearch.yml文件</h2><ul>
<li>修改集群名称和节点名称</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/image-20210222154417314.png" alt="image-20210222154417314"></p>
<ul>
<li>修改集群节点</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/image-20210222154604361.png" alt="image-20210222154604361"></p>
<ul>
<li><strong>修改data和log的保存地址</strong></li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/image-20210222150846587.png" alt="image-20210222150846587"></p>
<ul>
<li><strong>修改es的网络ip</strong></li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/image-20210222151050200.png" alt="image-20210222151050200"></p>
<h2 id="修改JVM参数"><a href="#修改JVM参数" class="headerlink" title="修改JVM参数"></a><strong>修改JVM参数</strong></h2><p>​        Elasticsearsh默认的Xms和Xmx都是1G，如果虚拟机或者电脑内存不够大，可以修改这个参数，保证Elasticsearch能正常使用。还是进入config文件夹，找到JVM.properties文件，打开并修改到自己想要的大小。</p>
<p><img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/image-20210222151500543.png" alt="image-20210222151500543"></p>
<h2 id="添加用户（Mac用户忽略）"><a href="#添加用户（Mac用户忽略）" class="headerlink" title="添加用户（Mac用户忽略）"></a>添加用户（Mac用户忽略）</h2><p>​        es不允许root用户操作它，所以我们要新建一个用户，具体操作如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">useradd esuser</span><br><span class="line">chown -R esuser:esuser /usr/local/elasticsearch-7.4.2</span><br><span class="line">su esuser</span><br><span class="line">whoami # 显示自身用户名称</span><br></pre></td></tr></table></figure>

<h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><p>​        直接进入Elasticsearch的bin目录，执行<code>./elasticsearch</code>即可，如果要后台启动则执行<code>./elasticsearch -d</code>，启动成功以后，访问<a href="http://localhost:9200/%E7%9C%8B%E5%88%B0%E7%B1%BB%E4%BC%BC%E5%A6%82%E4%B8%8B%E4%BF%A1%E6%81%AF%E7%9A%84%EF%BC%8C%E5%B0%B1%E8%AF%B4%E6%98%8E%E6%88%90%E5%8A%9F%E4%BA%86%E3%80%82">http://localhost:9200/看到类似如下信息的，就说明成功了。</a></p>
<p><img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/image-20210222155212549.png" alt="image-20210222155212549"></p>
<h2 id="停止"><a href="#停止" class="headerlink" title="停止"></a><strong>停止</strong></h2><p>​    如果是前台启动，那么执行Ctrl+C即可，如果是后台启动，可以执行如下操作：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[esuser@xxx bin]$ jps</span><br><span class="line">45413 RemoteMavenServer36</span><br><span class="line">20470 Launcher</span><br><span class="line">86937 Elasticsearch</span><br><span class="line">89372 Jps</span><br><span class="line">[esuser@xxx bin]$ kill 86937</span><br><span class="line">[esuser@xxx bin]$ jps</span><br><span class="line">89557 Jps</span><br><span class="line">45413 RemoteMavenServer36</span><br><span class="line">20470 Launcher</span><br></pre></td></tr></table></figure>

<h1 id="HEAD-插件安装"><a href="#HEAD-插件安装" class="headerlink" title="HEAD 插件安装"></a>HEAD 插件安装</h1><p>​        为了方便的看到Elasticsearch上的信息，我们可以安装Elasticsearch-head插件。安装方法如下：</p>
<h2 id="方式一："><a href="#方式一：" class="headerlink" title="方式一："></a>方式一：</h2><p>​        直接在谷歌插件商店搜索浏览器插件安装Elasticsearch-head，点击安装即可。</p>
<h2 id="方式二-需要git和nodejs-："><a href="#方式二-需要git和nodejs-：" class="headerlink" title="方式二(需要git和nodejs)："></a>方式二(需要git和nodejs)：</h2><p>​        访问<a href="https://github.com/mobz/elasticsearch-head">elasticsearch-head</a>下载安装，操作如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone git:&#x2F;&#x2F;github.com&#x2F;mobz&#x2F;elasticsearch-head.git</span><br><span class="line">cd elasticsearch-head</span><br><span class="line">npm install</span><br><span class="line">npm run start</span><br></pre></td></tr></table></figure>

<p>​        启动成功以后，访问<a href="http://localhost:9100/%E5%8D%B3%E5%8F%AF%EF%BC%8C%E4%BD%86%E6%98%AF%E8%A6%81%E6%B3%A8%E6%84%8F%EF%BC%8C%E6%AD%A4%E6%97%B6%E7%9C%8B%E4%B8%8D%E5%88%B0%E9%9B%86%E7%BE%A4%E6%95%B0%E6%8D%AE%E3%80%82%E5%8E%9F%E5%9B%A0%E5%9C%A8%E4%BA%8E%E8%BF%99%E9%87%8C%E9%80%9A%E8%BF%87%E8%B7%A8%E5%9F%9F%E7%9A%84%E6%96%B9%E5%BC%8F%E8%AF%B7%E6%B1%82%E9%9B%86%E7%BE%A4%E6%95%B0%E6%8D%AE%E7%9A%84%EF%BC%8C%E9%BB%98%E8%AE%A4%E6%83%85%E5%86%B5%E4%B8%8B%EF%BC%8C%E9%9B%86%E7%BE%A4%E4%B8%8D%E6%94%AF%E6%8C%81%E8%B7%A8%E5%9F%9F%EF%BC%8C%E6%89%80%E4%BB%A5%E8%BF%99%E9%87%8C%E5%B0%B1%E7%9C%8B%E4%B8%8D%E5%88%B0%E9%9B%86%E7%BE%A4%E6%95%B0%E6%8D%AE%E3%80%82%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95%E5%A6%82%E4%B8%8B%EF%BC%8C%E4%BF%AE%E6%94%B9">http://localhost:9100/即可，但是要注意，此时看不到集群数据。原因在于这里通过跨域的方式请求集群数据的，默认情况下，集群不支持跨域，所以这里就看不到集群数据。解决办法如下，修改</a> es 的 config/elasticsearch.yml 配置文件，添加如下内容，使之支持跨域：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">http.cors.enabled: true</span><br><span class="line">http.cors.allow-origin: &quot;*&quot;</span><br></pre></td></tr></table></figure>

<p>​        配置完成后，重启 es，此时 head 上就有数据了。</p>
<p><img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/image-20210222160730730.png" alt="image-20210222160730730"></p>
<h1 id="kibana安装"><a href="#kibana安装" class="headerlink" title="kibana安装"></a>kibana安装</h1><p>​        Kibana 是一个 Elastic 公司推出的一个针对 es 的分析以及数据可视化平台，可以搜索、查看存放在 es 中的数据。</p>
<p>安装步骤如下：</p>
<ol>
<li>下载 Kibana：<a href="https://www.elastic.co/cn/downloads/kibana">https://www.elastic.co/cn/downloads/kibana</a></li>
<li>解压</li>
<li>配置 es 的地址信息（可选，如果es是默认地址以及端口，可以不用配置，具体的配置文件是 config/kibana.yml）</li>
<li>执行 ./bin/kibana 文件启动</li>
<li>localhost:5601访问即可</li>
</ol>
<h1 id="Elasticsearch分布式安装"><a href="#Elasticsearch分布式安装" class="headerlink" title="Elasticsearch分布式安装"></a>Elasticsearch分布式安装</h1><p>此为本地模拟，作出如下假设：</p>
<ul>
<li>一主二从</li>
<li>master 的端口是 9200，slave 端口分别是 9201 和 9202</li>
</ul>
<p>首先修改 master 的 config/elasticsearch.yml 配置文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">node.master: true</span><br><span class="line">network.host: 127.0.0.1</span><br></pre></td></tr></table></figure>

<p>配置完成后，重启 master。</p>
<p>将 es 的压缩包解压两份，分别命名为 slave01 和 slave02，代表两个从机。</p>
<p>分别对其进行配置。</p>
<p><strong>slave01/config/elasticsearch.yml</strong>：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"># 集群名称必须保持一致</span><br><span class="line">cluster.name: my-elasticsearch</span><br><span class="line">node.name: slave01</span><br><span class="line">network.host: 127.0.0.1</span><br><span class="line">http.port: 9201</span><br><span class="line">discovery.zen.ping.unicast.hosts: [&quot;127.0.0.1&quot;]</span><br></pre></td></tr></table></figure>

<p><strong>slave02/config/elasticsearch.yml</strong>：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"># 集群名称必须保持一致</span><br><span class="line">cluster.name: my-elasticsearch</span><br><span class="line">node.name: slave02</span><br><span class="line">network.host: 127.0.0.1</span><br><span class="line">http.port: 9202</span><br><span class="line">discovery.zen.ping.unicast.hosts: [&quot;127.0.0.1&quot;]</span><br></pre></td></tr></table></figure>

<p>然后分别启动 slave01 和 slave02。启动后，可以在 head 插件上查看集群信息。</p>
<p><img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/image-20210222161119543.png" alt="image-20210222161119543"></p>
<h2 id="ElasticSearch-核心概念"><a href="#ElasticSearch-核心概念" class="headerlink" title="ElasticSearch 核心概念"></a>ElasticSearch 核心概念</h2><h2 id="集群（Cluster）"><a href="#集群（Cluster）" class="headerlink" title="集群（Cluster）"></a>集群（Cluster）</h2><p>​        一个或者多个安装了 es 节点的服务器组织在一起，就是集群，这些节点共同持有数据，共同提供搜索服务。一个集群有一个名字，这个名字是集群的唯一标识，该名字为 cluster name，默认的集群名称是elasticsearch，<strong>具有相同名称的节点才会组成一个集群</strong>。</p>
<p>可以在 config/elasticsearch.yml 文件中配置集群名称：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">cluster.name: javaboy-es</span><br></pre></td></tr></table></figure>

<p>在集群中，节点的状态有三种：<strong>绿色、黄色、红色</strong>：</p>
<ul>
<li><strong>绿色</strong>：节点运行状态为健康状态。所有的主分片、副本分片都可以正常工作。</li>
<li><strong>黄色</strong>：表示节点的运行状态为警告状态，<strong>所有的主分片目前都可以直接运行，但是至少有一个副本分片是不能正常工作的。</strong></li>
<li><strong>红色</strong>：表示集群无法正常工作。</li>
</ul>
<h2 id="节点（Node）"><a href="#节点（Node）" class="headerlink" title="节点（Node）"></a>节点（Node）</h2><p>​        集群中的一个服务器就是一个节点，节点中会存储数据，同时参与集群的索引以及搜索功能。一个节点想要加入一个集群，只需要配置一下集群名称即可。默认情况下，如果我们启动了多个节点，多个节点还能够互相发现彼此，那么它们会自动组成一个集群，这是 es 默认提供的，但是这种方式并不可靠，有可能会发生脑裂现象。所以在实际使用中，建议一定手动配置一下集群信息。</p>
<h2 id="索引（Index）"><a href="#索引（Index）" class="headerlink" title="索引（Index）"></a>索引（Index）</h2><p>索引可以从两方面来理解：</p>
<p><strong>名词解释</strong>：具有相似特征文档的集合。</p>
<p><strong>动词解释：</strong>索引数据以及对数据进行索引操作。</p>
<h2 id="类型（Type）"><a href="#类型（Type）" class="headerlink" title="类型（Type）"></a>类型（Type）</h2><p>​        类型是索引上的逻辑分类或者分区。在 es6 之前，一个索引中可以有多个类型，从 es7 开始，一个索引中，只能有一个类型。在 es6.x 中，依然保持了兼容，依然支持单 index 多个 type 结构，但是已经不建议这么使用。</p>
<h2 id="文档（Document）"><a href="#文档（Document）" class="headerlink" title="文档（Document）"></a>文档（Document）</h2><p>​        一个可以被索引的数据单元。例如一个用户的文档、一个产品的文档等等。文档都是 JSON 格式的。</p>
<h2 id="分片（Shards）"><a href="#分片（Shards）" class="headerlink" title="分片（Shards）"></a>分片（Shards）</h2><p>​        索引都是存储在节点上的，但是受限于节点的空间大小以及数据处理能力，单个节点的处理效果可能不理想，此时我们可以对索引进行分片。当我们创建一个索引的时候，就需要指定分片的数量。每个分片本身也是一个功能完善并且独立的索引。</p>
<p>默认情况下，一个索引会自动创建 1 个分片，并且为每一个分片创建一个副本。</p>
<h2 id="副本（Replicas）"><a href="#副本（Replicas）" class="headerlink" title="副本（Replicas）"></a>副本（Replicas）</h2><p>​        副本也就是备份，是对主分片的一个备份。</p>
<h2 id="Settings"><a href="#Settings" class="headerlink" title="Settings"></a>Settings</h2><p>​        集群中对索引的定义信息，例如索引的分片数、副本数等等。</p>
<h2 id="Mapping"><a href="#Mapping" class="headerlink" title="Mapping"></a>Mapping</h2><p>​        Mapping 保存了定义索引字段的存储类型、分词方式、是否存储等信息。</p>
<h2 id="Analyzer"><a href="#Analyzer" class="headerlink" title="Analyzer"></a>Analyzer</h2><p>​        字段分词方式的定义。</p>
<h1 id="ElasticSearch-Vs-关系型数据库"><a href="#ElasticSearch-Vs-关系型数据库" class="headerlink" title="ElasticSearch Vs 关系型数据库"></a>ElasticSearch Vs 关系型数据库</h1><table>
<thead>
<tr>
<th align="left">关系型数据库</th>
<th align="left">ElasticSearch</th>
</tr>
</thead>
<tbody><tr>
<td align="left">数据库</td>
<td align="left">索引</td>
</tr>
<tr>
<td align="left">表</td>
<td align="left">类型</td>
</tr>
<tr>
<td align="left">行</td>
<td align="left">文档</td>
</tr>
<tr>
<td align="left">列</td>
<td align="left">字段</td>
</tr>
<tr>
<td align="left">表结构</td>
<td align="left">映射（Mapping）</td>
</tr>
<tr>
<td align="left">SQL</td>
<td align="left">DSL(Domain Specific Language)</td>
</tr>
<tr>
<td align="left">delect * from xxx</td>
<td align="left">GET http://</td>
</tr>
<tr>
<td align="left">update xxx set xx=xxx</td>
<td align="left">PUT http://</td>
</tr>
<tr>
<td align="left">delete xxx</td>
<td align="left">DELETE http://</td>
</tr>
<tr>
<td align="left">索引</td>
<td align="left">全文索引</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>ElasticSearch</category>
      </categories>
      <tags>
        <tag>ElasticSearch</tag>
      </tags>
  </entry>
  <entry>
    <title>ElasticSearch相关api介绍</title>
    <url>/posts/c378945.html</url>
    <content><![CDATA[<p><strong>注：</strong>本文中的均为Elasticsearch的地址，例如本地环境为<a href="http://localhost:9200/">http://localhost:9200</a></p>
<h1 id="集群"><a href="#集群" class="headerlink" title="集群"></a>集群</h1><h2 id="查看集群健康度"><a href="#查看集群健康度" class="headerlink" title="查看集群健康度"></a>查看集群健康度</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET &#123;&#123;domain&#125;&#125;&#x2F;_cluster&#x2F;health </span><br></pre></td></tr></table></figure>

<h2 id="查看集群状态"><a href="#查看集群状态" class="headerlink" title="查看集群状态"></a>查看集群状态</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#123;domain&#125;&#125;&#x2F;_cluster&#x2F;state</span><br></pre></td></tr></table></figure>

<h1 id="索引-Index"><a href="#索引-Index" class="headerlink" title="索引 Index"></a>索引 Index</h1><p>​        ES会索引所有字段，经过处理后写入一个倒排索引。查找数据的时候，直接查找该索引。所以，ES数据管理的顶层单位就叫做 Index（索引）。它是单个数据库的同义词。每个 Index （即数据库）的名字必须是小写。</p>
<h2 id="查看所有索引"><a href="#查看所有索引" class="headerlink" title="查看所有索引"></a>查看所有索引</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET _cat&#x2F;indices?v</span><br><span class="line"></span><br><span class="line">health status index      uuid                   pri rep docs.count docs.deleted store.size pri.store.size</span><br><span class="line">yellow open   index_test OQnPg2LhRbyZ5b5FcFO4lw   3   1          0            0       849b           849b</span><br></pre></td></tr></table></figure>

<h2 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h2><p>​        如果要创建一个index_test的索引可以有如下两种方式，但是要注意索引不能重复并且索引名称不能有大写字母，不然会报错。</p>
<ul>
<li>直接创建</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">PUT &#123;&#123;domain&#125;&#125;/index_test</span><br></pre></td></tr></table></figure>

<ul>
<li>创建的时候带上分片数和副本数</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">PUT &#123;&#123;domain&#125;&#125;/index_test</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;settings&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;index&quot;</span>: &#123;</span><br><span class="line">        # 分片数量，类似于数据库里面分库分表，一经定义不可更改。主要响应写操作</span><br><span class="line">        &quot;number_of_shards&quot; : &quot;3&quot;,</span><br><span class="line">        # 副本数，用于备份分片的，和分片里面的数据保持一致，主要响应读操作，副本越多读取就越快。</span><br><span class="line">        &quot;number_of_replicas&quot; : &quot;0&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="更新索引"><a href="#更新索引" class="headerlink" title="更新索引"></a>更新索引</h2><p>​        索引创建好之后，可以修改其属性，修改索引的副本数：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">PUT &#123;&#123;domain&#125;&#125;/index_test/_settings</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;number_of_replicas&quot;</span>: <span class="number">2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="查询索引的基本信息"><a href="#查询索引的基本信息" class="headerlink" title="查询索引的基本信息"></a>查询索引的基本信息</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET &#123;&#123;domain&#125;&#125;&#x2F;index_test&#x2F;</span><br></pre></td></tr></table></figure>

<h2 id="获取索引信息"><a href="#获取索引信息" class="headerlink" title="获取索引信息"></a>获取索引信息</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">GET &#123;&#123;domain&#125;&#125;/test1/_settings 		# 获取单个索引信息</span><br><span class="line">GET &#123;&#123;domain&#125;&#125;/test1,test2/_settings		# 获取多个索引信息</span><br><span class="line">GET &#123;&#123;domain&#125;&#125;/_all/_settings				# 获取所有索引信息</span><br></pre></td></tr></table></figure>

<h2 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DELETE &#123;&#123;domain&#125;&#125;&#x2F;index_test&#x2F;</span><br></pre></td></tr></table></figure>

<h2 id="打开关闭索引"><a href="#打开关闭索引" class="headerlink" title="打开关闭索引"></a>打开关闭索引</h2><ul>
<li>关闭索引：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST &#123;&#123;domain&#125;&#125;&#x2F;index_test&#x2F;_close</span><br></pre></td></tr></table></figure>

<ul>
<li>打开索引：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST &#123;&#123;domain&#125;&#125;&#x2F;index_test&#x2F;_open</span><br></pre></td></tr></table></figure>

<h3 id="复制索引"><a href="#复制索引" class="headerlink" title="复制索引"></a>复制索引</h3><p>​        索引复制，只会复制数据，不会复制索引配置，复制的时候，可以添加查询条件。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">POST &#123;&#123;domain&#125;&#125;/_reindex</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;source&quot;</span>: &#123;<span class="attr">&quot;index&quot;</span>:<span class="string">&quot;index_test&quot;</span>&#125;,</span><br><span class="line">  <span class="attr">&quot;dest&quot;</span>: &#123;<span class="attr">&quot;index&quot;</span>:<span class="string">&quot;index_test_new&quot;</span>&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="索引别名"><a href="#索引别名" class="headerlink" title="索引别名"></a>索引别名</h2><h3 id="添加修改别名"><a href="#添加修改别名" class="headerlink" title="添加修改别名"></a>添加修改别名</h3><p>​        可以为索引创建别名，如果这个别名是唯一的，该别名可以代替索引名称，<strong>将 add 改为 remove 就表示移除别名</strong>。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">POST &#123;&#123;domain&#125;&#125;/_aliases</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;actions&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;add&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;index&quot;</span>: <span class="string">&quot;index_test&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;alias&quot;</span>: <span class="string">&quot;index_test_alias&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="查看索引别名"><a href="#查看索引别名" class="headerlink" title="查看索引别名"></a>查看索引别名</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET &#123;&#123;domain&#125;&#125;&#x2F;index_test&#x2F;_alias</span><br></pre></td></tr></table></figure>

<h3 id="查看别名对应的索引"><a href="#查看别名对应的索引" class="headerlink" title="查看别名对应的索引"></a>查看别名对应的索引</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">GET /index_test_alias/_alias   # index_test_alias 表示一个别名</span><br></pre></td></tr></table></figure>

<h3 id="查看集群上所有可用别名"><a href="#查看集群上所有可用别名" class="headerlink" title="查看集群上所有可用别名"></a>查看集群上所有可用别名</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET &#123;&#123;domain&#125;&#125;&#x2F;_alias</span><br></pre></td></tr></table></figure>

<h1 id="文档-Document"><a href="#文档-Document" class="headerlink" title="文档 Document"></a>文档 Document</h1><h2 id="创建文档"><a href="#创建文档" class="headerlink" title="创建文档"></a>创建文档</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">POST &#123;&#123;domain&#125;&#125;/index_test/_doc  		# es自动生成id</span><br><span class="line">POST &#123;&#123;domain&#125;&#125;/index_test/_doc/1 	# 指定生成的id，返回结果的_id就为我们指定的数字1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;title&quot;:&quot;操作系统&quot;</span><br><span class="line">  ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​        创建成功以后会得到下面的数据，<code>_id</code>为该记录id，如果没指定的话 es 会帮我生成这种随机id，<code>result</code>为我们执行的操作，<code>_index</code>为所属索引</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;_index&quot;</span>: <span class="string">&quot;index_test&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;_type&quot;</span>: <span class="string">&quot;_doc&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;_id&quot;</span>: <span class="string">&quot;PRf3zHcB3ahjxE10X5G-&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;_version&quot;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">&quot;result&quot;</span>: <span class="string">&quot;created&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;_shards&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;total&quot;</span>: <span class="number">3</span>,</span><br><span class="line">        <span class="attr">&quot;successful&quot;</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">&quot;failed&quot;</span>: <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;_seq_no&quot;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">&quot;_primary_term&quot;</span>: <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>注1：</strong>如果创建时报 [FORBIDDEN/12/index read-only / allow delete (api)];这个错可以尝试使用更新索引内容的方法，修改索引<code>read_only_allow_delete</code>属性为false.</p>
<p><strong>注2：</strong>Document 可以分组，比如<code>index_test</code>这个 Index 里面，可以按类型分组（比如分为动物或者植物等），这种分组就叫做 Type，它是虚拟的逻辑分组，用来过滤 Document。</p>
<p>在 es7.x 之后取消了 <code>type</code>，均使用<code>_doc</code>同一文档类型。向指定的 <code>/Index/Type</code> 发送 PUT 请求，就可以在 Index 里面新增一条记录。比如，向<code>/idx1/_doc</code>发送请求，就可以新增一条人员记录</p>
<h2 id="更新文档"><a href="#更新文档" class="headerlink" title="更新文档"></a>更新文档</h2><ul>
<li>局部替换（存在就修改，不存在就追加）</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;&#123;domain&#125;&#125;/index_test/_doc/2/_update  # 修改index_test下_id为2的文档的name为小明</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;doc&quot;</span>:&#123;</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>:<span class="string">&quot;小明&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>全量替换（直接全部覆盖文档内容）</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">PUT &#123;&#123;domain&#125;&#125;/index_test/_doc/_id   # 根据_id更新文档，_id不存在则创建一个</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;title&quot;</span>:<span class="string">&quot;操作系统2&quot;</span></span><br><span class="line">  ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​        每次更新以后，记录的 Id 没变，但是版本<code>_version</code>会＋1，操作类型（result）从<code>created</code>变成<code>updated</code>。</p>
<h2 id="查询文档"><a href="#查询文档" class="headerlink" title="查询文档"></a>查询文档</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">GET &#123;&#123;domain&#125;&#125;/index_test/_doc/PRf3zHcB # 查询_id为PRf3zHcB的数据</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查询_id为PRf3zHcB的数据,且_source中只返回name和title</span></span><br><span class="line">GET &#123;&#123;domain&#125;&#125;/index_test/_doc/PRf3zHcB?_source=name,title</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">GET &#123;&#123;domain&#125;&#125;/index_test/_search  			# 查询index_test下的所有数据</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查询index_test下的所有数据,且_source中只返回name和title</span></span><br><span class="line">GET &#123;&#123;domain&#125;&#125;/index_test/_search?_source=name,title			</span><br></pre></td></tr></table></figure>

<p>​        返回结果的 <code>took</code>字段表示该操作的耗时（单位为毫秒），<code>timed_out</code>字段表示是否超时，<code>hits</code>字段表示命中的记录，里面子字段的含义如下。</p>
<ul>
<li><code>total</code>：返回记录数，本例是2条。</li>
<li><code>max_score</code>：最高的匹配程度。</li>
<li><code>hits</code>：返回的记录组成的数组。</li>
</ul>
<p>返回的记录中，每条记录都有一个<code>_score</code>字段，表示匹配的程序，默认是按照这个字段降序排列。</p>
<h2 id="删除文档"><a href="#删除文档" class="headerlink" title="删除文档"></a>删除文档</h2><ul>
<li>根据_id删除</li>
</ul>
<p>删除一个 id 为 PRf3zHcB3ahjxE10X5G- 的文档。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">DELETE &#123;&#123;domain&#125;&#125;/index_test/_doc/PRf3zHcB3ahjxE10X5G-</span><br></pre></td></tr></table></figure>

<p>如果在添加文档时指定了路由，则删除文档时也需要指定路由，否则删除失败。</p>
<ul>
<li>查询删除</li>
</ul>
<p>查询删除是 POST 请求，例如删除 title 中包含三国演义的文档：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">POST index_test/_delete_by_query</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>:&#123;</span><br><span class="line">    <span class="attr">&quot;match&quot;</span>:&#123;</span><br><span class="line">      <span class="attr">&quot;title&quot;</span>:<span class="string">&quot;三国演义&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>删除某一个索引下的所有文档：</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">POST index_test/_delete_by_query</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>:&#123;</span><br><span class="line">    <span class="attr">&quot;match_all&quot;</span>:&#123;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="判断文档是否存在"><a href="#判断文档是否存在" class="headerlink" title="判断文档是否存在"></a>判断文档是否存在</h2><p>​        下面的请求就是判断_id为1的文档是否存在的操作，存在http status会返回200，否则会返回404</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">HEAD &#123;&#123;domain&#125;&#125;/index_test/_doc/1</span><br></pre></td></tr></table></figure>

<h1 id="版本控制"><a href="#版本控制" class="headerlink" title="版本控制"></a>版本控制</h1><h2 id="es6-7之前"><a href="#es6-7之前" class="headerlink" title="es6.7之前"></a><strong>es6.7之前</strong></h2><p>​        在es6.7之前，使用 version+version_type 来进行乐观并发控制。根据前面的介绍，文档每被修改一个，version 就会自增一次，es 通过 version 字段来确保所有的操作都有序进行。version 分为内部版本控制和外部版本控制。</p>
<h3 id="内部版本"><a href="#内部版本" class="headerlink" title="内部版本"></a>内部版本</h3><p>​        es 自己维护的就是内部版本，当创建一个文档时，es 会给文档的版本赋值为 1，每当用户修改一次文档，版本号会＋1。如果使用内部版本，es 要求version 参数的值必须和 es 文档中 version 的值相当，才能操作成功。</p>
<h3 id="外部版本"><a href="#外部版本" class="headerlink" title="外部版本"></a>外部版本</h3><p>​        在添加文档时，就指定版本号就是外部版本：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PUT index_test&#x2F;_doc&#x2F;1?version&#x3D;2&amp;version_type&#x3D;external</span><br><span class="line">&#123;</span><br><span class="line">  &quot;title&quot;:&quot;JAVA&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以后更新的时候，版本要大于已有的版本号。</p>
<ul>
<li>vertion_type=external 或者 vertion_type=external_gt 表示以后更新的时候，版本要大于已有的版本号。</li>
<li>vertion_type=external_gte 表示以后更新的时候，版本要大于等于已有的版本号。</li>
</ul>
<h3 id="最新方案（Es6-7-之后）"><a href="#最新方案（Es6-7-之后）" class="headerlink" title="最新方案（Es6.7 之后）"></a>最新方案（Es6.7 之后）</h3><p>​        现在使用 <code>if_seq_no</code> 和 <code>if_primary_term</code> 两个参数来做并发控制。<code>seq_no</code> 不属于某一个文档，它是属于整个索引的（version 则是属于某一个文档的，每个文档的 version 互不影响）。现在更新文档时，使用<code>seq_no</code> 来做并发。由于 <code>seq_no</code> 是属于整个 index 的，所以任何文档的修改或者新增，<code>seq_no</code> 都会自增。现在就可以通过 <code>seq_no</code> 和 <code>primary_term</code> 来做乐观并发控制。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PUT index_test&#x2F;_doc&#x2F;2?if_seq_no&#x3D;5&amp;if_primary_term&#x3D;1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;title&quot;:&quot;JAVA&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>ElasticSearch</category>
      </categories>
      <tags>
        <tag>ElasticSearch</tag>
      </tags>
  </entry>
  <entry>
    <title>Java整合ElasticSearch</title>
    <url>/posts/ddf54e92.html</url>
    <content><![CDATA[<h1 id="ElasticSearch-Java-API-选择"><a href="#ElasticSearch-Java-API-选择" class="headerlink" title="ElasticSearch Java API 选择"></a>ElasticSearch Java API 选择</h1><ul>
<li><p>直接使用 HTTP 请求</p>
<p>这个太繁琐了，不介绍。</p>
</li>
<li><p><strong>Low Level REST Client</strong></p>
</li>
</ul>
<p>​        用于 Es 的官方的低级客户端。这种方式允许通过 HTTP 与 Es 集群进行通信，但是请求时候的 JSON 参数和响应的 JSON 参数交给用户去处理。这种方式好处就是兼容所有的 Es 版本。但是就是数据处理比较麻烦。</p>
<ul>
<li><strong>High Level REST Client</strong></li>
</ul>
<p>​        用户 Es 的官方的高级客户端。这种方式允许通过 HTTP 与 Es 集群进行通信，它是基于 Low Level REST Client，但是提供了很多 API，开发者不需要自己去组装参数，也不需要自己去解析响应 JSON 。这种方式使用起来更加直接。但是需要注意，这种方式，所使用的依赖库的版本要和 Es 对应。</p>
<ul>
<li><p>TransportClient</p>
<p>TransportClient 在 Es7 中已经被弃用，在 Es8 中将被完全删除。</p>
</li>
<li><p>spring-data-elasticsearch</p>
<p>印象里这个更新比较慢，经常跟不上elasticsearch的版本，所以暂时不考虑了。</p>
</li>
</ul>
<p>通过上面的分析以及<a href="https://www.elastic.co/guide/en/elasticsearch/client/java-rest/7.x/index.html">官网</a>的推荐，所以还是选择High Level REST Client吧。</p>
<h1 id="整合-high-level-rest-client"><a href="#整合-high-level-rest-client" class="headerlink" title="整合 high level rest client"></a>整合 high level rest client</h1><h2 id="建项目"><a href="#建项目" class="headerlink" title="建项目"></a>建项目</h2><p>​        这个其实不太难，新建一个springboot项目或者maven项目，然后添加自己es对应版本的high level rest client依赖即可。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.elasticsearch.client<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>elasticsearch-rest-high-level-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.4.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>记一个坑：</strong>这里我用spring boot创建了demo，虽然引用的是和本地一样的7.4.2版本，但是你在下面测试功能的时候可能会报这么一个错</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Exception in thread <span class="string">&quot;main&quot;</span> java.lang.IncompatibleClassChangeError: Found <span class="class"><span class="keyword">interface</span> <span class="title">org</span>.<span class="title">elasticsearch</span>.<span class="title">common</span>.<span class="title">bytes</span>.<span class="title">BytesReference</span>, <span class="title">but</span> <span class="title">class</span> <span class="title">was</span> <span class="title">expected</span></span></span><br></pre></td></tr></table></figure>

<p>查看版本依赖发现</p>
<img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/image-20210225095607466.png" alt="image-20210225095607466" style="zoom:50%;" />

<p>初步怀疑是spring boot自己内部版本依赖造成的，然后查看默认版本依赖，发现果然如此：</p>
<img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/image-20210225095838773.png" alt="image-20210225095838773" style="zoom:50%;" />

<p>所以修改一下pom文件，统一一下依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">  	<span class="comment">&lt;!-- 修改为对应版本 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">elasticsearch.version</span>&gt;</span>7.4.2<span class="tag">&lt;/<span class="name">elasticsearch.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>然后刷新一下maven依赖，就会发现版本统一了</p>
<img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/image-20210225100350403.png" alt="image-20210225100350403" style="zoom:50%;" />

<h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><p><strong>创建一个通用方法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> RestHighLevelClient <span class="title">createClient</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  RestHighLevelClient client = <span class="keyword">new</span> RestHighLevelClient(RestClient.builder(</span><br><span class="line">    <span class="keyword">new</span> HttpHost(<span class="string">&quot;localhost&quot;</span>, <span class="number">9200</span>, <span class="string">&quot;http&quot;</span>)</span><br><span class="line">    <span class="comment">//,new HttpHost(&quot;localhost&quot;, 9201, &quot;http&quot;),</span></span><br><span class="line">    <span class="comment">//new HttpHost(&quot;localhost&quot;, 9202, &quot;http&quot;)</span></span><br><span class="line">  ));</span><br><span class="line">  <span class="keyword">return</span> client;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="索引操作"><a href="#索引操作" class="headerlink" title="索引操作"></a>索引操作</h3><h4 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h4><p>索引中创建mappings有json、map和XContentBuilder构建三种方式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    RestHighLevelClient client = createClient();</span><br><span class="line">    <span class="comment">//删除已经存在的索引</span></span><br><span class="line">    <span class="comment">// DeleteIndexRequest deleteIndexRequest = new DeleteIndexRequest(&quot;demo_test&quot;);</span></span><br><span class="line">    <span class="comment">// client.indices().delete(deleteIndexRequest, RequestOptions.DEFAULT);</span></span><br><span class="line">    <span class="comment">//创建一个索引</span></span><br><span class="line">    CreateIndexRequest demoTest = <span class="keyword">new</span> CreateIndexRequest(<span class="string">&quot;demo_test&quot;</span>);</span><br><span class="line">    <span class="comment">//配置 settings，分片、副本等信息</span></span><br><span class="line">    demoTest.settings(Settings.builder().put(<span class="string">&quot;index.number_of_shards&quot;</span>, <span class="number">4</span>).put(<span class="string">&quot;index.number_of_replicas&quot;</span>, <span class="number">1</span>));</span><br><span class="line">    <span class="comment">//配置字段类型，字段类型可以通过 JSON 字符串、Map 以及 XContentBuilder 三种方式来构建</span></span><br><span class="line">    <span class="comment">// -------------- 方式一：json 字符串的方式 --------------</span></span><br><span class="line">    demoTest.mapping(<span class="string">&quot;&#123;\&quot;properties\&quot;: &#123;\&quot;title\&quot;: &#123;\&quot;type\&quot;: \&quot;text\&quot;&#125;&#125;&#125;&quot;</span>, XContentType.JSON);</span><br><span class="line">    <span class="comment">// -------------- 方式二：map 的方式 --------------</span></span><br><span class="line">    <span class="comment">//Map&lt;String, String&gt; title = new HashMap&lt;&gt;();</span></span><br><span class="line">    <span class="comment">//title.put(&quot;type&quot;, &quot;text&quot;);</span></span><br><span class="line">    <span class="comment">//Map&lt;String, Object&gt; properties = new HashMap&lt;&gt;();</span></span><br><span class="line">    <span class="comment">//properties.put(&quot;title&quot;, title);</span></span><br><span class="line">    <span class="comment">//Map&lt;String, Object&gt; mappings = new HashMap&lt;&gt;();</span></span><br><span class="line">    <span class="comment">//mappings.put(&quot;properties&quot;, properties);</span></span><br><span class="line">    <span class="comment">//demoTest.mapping(mappings);</span></span><br><span class="line">    <span class="comment">// -------------- 方式三 XContentBuilder构建 --------------</span></span><br><span class="line">    <span class="comment">//XContentBuilder builder = XContentFactory.jsonBuilder();</span></span><br><span class="line">    <span class="comment">//builder.startObject();</span></span><br><span class="line">    <span class="comment">//builder.startObject(&quot;properties&quot;);</span></span><br><span class="line">    <span class="comment">//builder.startObject(&quot;title&quot;);</span></span><br><span class="line">    <span class="comment">//builder.field(&quot;type&quot;, &quot;text&quot;);</span></span><br><span class="line">    <span class="comment">//builder.endObject();</span></span><br><span class="line">    <span class="comment">//builder.endObject();</span></span><br><span class="line">    <span class="comment">//builder.endObject();</span></span><br><span class="line">    <span class="comment">//demoTest.mapping(builder);</span></span><br><span class="line">  	<span class="comment">//配置别名</span></span><br><span class="line">    demoTest.alias(<span class="keyword">new</span> Alias(<span class="string">&quot;demo_index_alias&quot;</span>));</span><br><span class="line">    <span class="comment">//执行请求，创建索引</span></span><br><span class="line">    client.indices().create(demoTest, RequestOptions.DEFAULT);</span><br><span class="line">    <span class="comment">//关闭 client</span></span><br><span class="line">    client.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当然，还有其他的方式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    RestHighLevelClient client = createClient();</span><br><span class="line">    <span class="comment">//创建一个索引</span></span><br><span class="line">    CreateIndexRequest demoTest = <span class="keyword">new</span> CreateIndexRequest(<span class="string">&quot;demo_test&quot;</span>);</span><br><span class="line">    <span class="comment">//直接同构 JSON 配置索引</span></span><br><span class="line">    demoTest.source(<span class="string">&quot;&#123;\&quot;settings\&quot;: &#123;\&quot;number_of_shards\&quot;: 3,\&quot;number_of_replicas\&quot;: 2&#125;,\&quot;mappings\&quot;: &#123;\&quot;properties\&quot;: &#123;\&quot;title\&quot;: &#123;\&quot;type\&quot;: \&quot;keyword\&quot;&#125;&#125;&#125;,\&quot;aliases\&quot;: &#123;\&quot;blog_alias_javaboy\&quot;: &#123;&#125;&#125;&#125;&quot;</span>, XContentType.JSON);</span><br><span class="line">    <span class="comment">//请求超时时间，连接所有节点的超时时间</span></span><br><span class="line">    demoTest.setTimeout(TimeValue.timeValueMinutes(<span class="number">2</span>));</span><br><span class="line">    <span class="comment">//连接 master 节点的超时时间</span></span><br><span class="line">    demoTest.setMasterTimeout(TimeValue.timeValueMinutes(<span class="number">1</span>));</span><br><span class="line">    <span class="comment">//执行请求，创建索引</span></span><br><span class="line">    client.indices().create(demoTest, RequestOptions.DEFAULT);</span><br><span class="line">    <span class="comment">//关闭 client</span></span><br><span class="line">    client.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面的都是同步创建的，当然也能异步创建</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    RestHighLevelClient client = createClient();</span><br><span class="line">    <span class="comment">//删除已经存在的索引</span></span><br><span class="line">    DeleteIndexRequest deleteIndexRequest = <span class="keyword">new</span> DeleteIndexRequest(<span class="string">&quot;demo_test&quot;</span>);</span><br><span class="line">    client.indices().delete(deleteIndexRequest, RequestOptions.DEFAULT);</span><br><span class="line">    <span class="comment">//创建一个索引</span></span><br><span class="line">    CreateIndexRequest demoTest = <span class="keyword">new</span> CreateIndexRequest(<span class="string">&quot;demo_test&quot;</span>);</span><br><span class="line">    <span class="comment">//直接同构 JSON 配置索引</span></span><br><span class="line">    demoTest.source(<span class="string">&quot;&#123;\&quot;settings\&quot;: &#123;\&quot;number_of_shards\&quot;: 3,\&quot;number_of_replicas\&quot;: 2&#125;,\&quot;mappings\&quot;: &#123;\&quot;properties\&quot;: &#123;\&quot;title\&quot;: &#123;\&quot;type\&quot;: \&quot;keyword\&quot;&#125;&#125;&#125;,\&quot;aliases\&quot;: &#123;\&quot;demo_test_alias\&quot;: &#123;&#125;&#125;&#125;&quot;</span>, XContentType.JSON);</span><br><span class="line">    <span class="comment">//请求超时时间，连接所有节点的超时时间</span></span><br><span class="line">    demoTest.setTimeout(TimeValue.timeValueMinutes(<span class="number">2</span>));</span><br><span class="line">    <span class="comment">//连接 master 节点的超时时间</span></span><br><span class="line">    demoTest.setMasterTimeout(TimeValue.timeValueMinutes(<span class="number">1</span>));</span><br><span class="line">    <span class="comment">//执行请求，创建索引</span></span><br><span class="line">    <span class="comment">//client.indices().create(demoTest, RequestOptions.DEFAULT);</span></span><br><span class="line">    <span class="comment">//关闭 client</span></span><br><span class="line">    <span class="comment">//client.close();</span></span><br><span class="line">    <span class="comment">//异步创建索引</span></span><br><span class="line">    client.indices().createAsync(demoTest, RequestOptions.DEFAULT, <span class="keyword">new</span> ActionListener&lt;CreateIndexResponse&gt;() &#123;</span><br><span class="line">        <span class="comment">//请求成功</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(CreateIndexResponse createIndexResponse)</span> </span>&#123;</span><br><span class="line">            <span class="comment">//关闭 client</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                client.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//请求失败</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Exception e)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="判断索引是否存在"><a href="#判断索引是否存在" class="headerlink" title="判断索引是否存在"></a>判断索引是否存在</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">existsIndex</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    RestHighLevelClient client = createClient();</span><br><span class="line">    GetIndexRequest getIndexRequest = <span class="keyword">new</span> GetIndexRequest(<span class="string">&quot;demo_test&quot;</span>);</span><br><span class="line">    <span class="keyword">boolean</span> exists = client.indices().exists(getIndexRequest, RequestOptions.DEFAULT);</span><br><span class="line">    System.out.println(<span class="string">&quot;索引demo_test是否存在：&quot;</span> + exists);</span><br><span class="line">    client.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="关闭-打开索引"><a href="#关闭-打开索引" class="headerlink" title="关闭/打开索引"></a>关闭/打开索引</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 打开或者关闭索引</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> indexName</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> isOpen</span></span><br><span class="line"><span class="comment">* <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">openOrCloseIndex</span><span class="params">(String indexName, <span class="keyword">boolean</span> isOpen)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        RestHighLevelClient client = createClient();</span><br><span class="line">        <span class="keyword">if</span> (!isOpen) &#123;</span><br><span class="line">            CloseIndexRequest request = <span class="keyword">new</span> CloseIndexRequest(indexName);</span><br><span class="line">            client.indices().close(request, RequestOptions.DEFAULT);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            OpenIndexRequest request = <span class="keyword">new</span> OpenIndexRequest(indexName);</span><br><span class="line">            client.indices().open(request, RequestOptions.DEFAULT);</span><br><span class="line">        &#125;</span><br><span class="line">        client.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用</span></span><br><span class="line">String indexName = <span class="string">&quot;demo_test&quot;</span>;</span><br><span class="line"><span class="comment">// 打开索引</span></span><br><span class="line">openOrCloseIndex(indexName, <span class="keyword">true</span>);</span><br><span class="line"><span class="comment">// 关闭索引</span></span><br></pre></td></tr></table></figure>

<h4 id="索引修改"><a href="#索引修改" class="headerlink" title="索引修改"></a>索引修改</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 修改索引</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> indexName</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">updateIndex</span><span class="params">(String indexName)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    RestHighLevelClient client = createClient();</span><br><span class="line">    UpdateSettingsRequest request = <span class="keyword">new</span> UpdateSettingsRequest(indexName);</span><br><span class="line">    request.settings(Settings.builder().put(<span class="string">&quot;index.blocks.write&quot;</span>, <span class="keyword">true</span>).build());</span><br><span class="line">    client.indices().putSettings(request, RequestOptions.DEFAULT);</span><br><span class="line">    <span class="comment">//关闭 client</span></span><br><span class="line">    client.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="克隆索引"><a href="#克隆索引" class="headerlink" title="克隆索引"></a>克隆索引</h4><p><strong>被克隆的索引需要是只读索引</strong>，可以通过上面的方式设置索引为只读。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">public static void main(String[] args) throws IOException &#123;</span><br><span class="line">RestHighLevelClient client &#x3D; new RestHighLevelClient(RestClient.builder(</span><br><span class="line">new HttpHost(&quot;localhost&quot;, 9200, &quot;http&quot;),</span><br><span class="line">new HttpHost(&quot;localhost&quot;, 9201, &quot;http&quot;),</span><br><span class="line">new HttpHost(&quot;localhost&quot;, 9202, &quot;http&quot;)</span><br><span class="line">));</span><br><span class="line">ResizeRequest request &#x3D; new ResizeRequest(&quot;blog2&quot;, &quot;blog&quot;);</span><br><span class="line">client.indices().clone(request, RequestOptions.DEFAULT);</span><br><span class="line">&#x2F;&#x2F;关闭 client</span><br><span class="line">client.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="查看索引"><a href="#查看索引" class="headerlink" title="查看索引"></a>查看索引</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取索引数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> indexName</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getIndex</span><span class="params">(String indexName)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    RestHighLevelClient client = createClient();</span><br><span class="line">    GetSettingsRequest request = <span class="keyword">new</span> GetSettingsRequest().indices(indexName);</span><br><span class="line">    <span class="comment">//设置需要获取的具体的参数，不设置则返回所有参数</span></span><br><span class="line">    <span class="comment">//request.names(&quot;index.blocks.write&quot;);</span></span><br><span class="line">    GetSettingsResponse response = client.indices().getSettings(request, RequestOptions.DEFAULT);</span><br><span class="line">    ImmutableOpenMap&lt;String, Settings&gt; indexToSettings = response.getIndexToSettings();</span><br><span class="line">    System.out.println(indexToSettings);</span><br><span class="line">    String s = response.getSetting(indexName, <span class="string">&quot;index.number_of_replicas&quot;</span>);</span><br><span class="line">    System.out.println(s);</span><br><span class="line">    <span class="comment">//关闭 client</span></span><br><span class="line">    client.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="创建索引别名"><a href="#创建索引别名" class="headerlink" title="创建索引别名"></a>创建索引别名</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建一个普通别名</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">createAlias</span><span class="params">(String indexName)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    RestHighLevelClient client = createClient();</span><br><span class="line">    <span class="comment">// 删除方法一</span></span><br><span class="line">    IndicesAliasesRequest indicesAliasesRequest = <span class="keyword">new</span> IndicesAliasesRequest();</span><br><span class="line">    IndicesAliasesRequest.AliasActions aliasAction = <span class="keyword">new</span> IndicesAliasesRequest.AliasActions(IndicesAliasesRequest.AliasActions.Type.REMOVE);</span><br><span class="line">        aliasAction.index(indexName).alias(indexName + <span class="string">&quot;_alias&quot;</span>);</span><br><span class="line">		indicesAliasesRequest.addAliasAction(aliasAction);</span><br><span class="line">		client.indices().updateAliases(indicesAliasesRequest, RequestOptions.DEFAULT);</span><br><span class="line">		<span class="comment">// 说是还有删除方式二，但是我这个7.4.2的找不到这个类 </span></span><br><span class="line">		<span class="comment">// DeleteAliasRequest deleteAliasRequest = new DeleteAliasRequest(&quot;books&quot;, &quot;books_alias2&quot;);</span></span><br><span class="line">		<span class="comment">// client.indices().deleteAlias(deleteAliasRequest, RequestOptions.DEFAULT);</span></span><br><span class="line">    client.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="判断别名是否存在"><a href="#判断别名是否存在" class="headerlink" title="判断别名是否存在"></a>判断别名是否存在</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 判断别名是否存在</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> indexName</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">existsAlias</span><span class="params">(String indexName)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    RestHighLevelClient client = createClient();</span><br><span class="line">    GetAliasesRequest request = <span class="keyword">new</span> GetAliasesRequest(indexName + <span class="string">&quot;_alias&quot;</span>);</span><br><span class="line">    <span class="keyword">boolean</span> exists = client.indices().existsAlias(request, RequestOptions.DEFAULT);</span><br><span class="line">    System.out.println(<span class="string">&quot;别名是否存在：&quot;</span> + exists);</span><br><span class="line">    client.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="查看别名"><a href="#查看别名" class="headerlink" title="查看别名"></a>查看别名</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取别名</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> indexName</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getAlias</span><span class="params">(String indexName)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    RestHighLevelClient client = createClient();</span><br><span class="line">    GetAliasesRequest aliasRequest = <span class="keyword">new</span> GetAliasesRequest(indexName + <span class="string">&quot;_alias&quot;</span>);</span><br><span class="line">    <span class="comment">//指定查看某一个索引的别名，不指定，则会搜索所有的别名</span></span><br><span class="line">    aliasRequest.indices(indexName);</span><br><span class="line">    GetAliasesResponse response = client.indices().getAlias(aliasRequest, RequestOptions.DEFAULT);</span><br><span class="line">    Map&lt;String, Set&lt;AliasMetaData&gt;&gt; aliases = response.getAliases();</span><br><span class="line">    System.out.println(<span class="string">&quot;aliases = &quot;</span> + aliases);</span><br><span class="line">    <span class="comment">//关闭 client</span></span><br><span class="line">    client.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="文档操作"><a href="#文档操作" class="headerlink" title="文档操作"></a>文档操作</h3><h4 id="新建文档"><a href="#新建文档" class="headerlink" title="新建文档"></a>新建文档</h4><p>和创建索引一样，构建，也有三种方式：JSON 字符串、Map 对象、XContentBuilder</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建一个文档</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">createDoc</span><span class="params">(String indexName)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    RestHighLevelClient client = createClient();</span><br><span class="line">    <span class="comment">//构建一个 IndexRequest 请求，参数就是索引名称</span></span><br><span class="line">    IndexRequest request = <span class="keyword">new</span> IndexRequest(indexName);</span><br><span class="line">    <span class="comment">//给请求配置一个 id，这个就是文档 id。如果指定了 id，相当于 put book/_doc/id ，也可以不指定 id，相当于 post book/_doc</span></span><br><span class="line"><span class="comment">//        request.id(&quot;1&quot;);</span></span><br><span class="line">    <span class="comment">//构建索引文本，有三种方式：JSON 字符串、Map 对象、XContentBuilder</span></span><br><span class="line">    request.source(<span class="string">&quot;&#123;\&quot;name\&quot;: \&quot;Tom\&quot;,\&quot;age\&quot;: 12&#125;&quot;</span>, XContentType.JSON);</span><br><span class="line">    <span class="comment">//执行请求，有同步和异步两种方式</span></span><br><span class="line">    <span class="comment">//同步</span></span><br><span class="line">    IndexResponse indexResponse = client.index(request, RequestOptions.DEFAULT);</span><br><span class="line">    <span class="comment">//获取文档id</span></span><br><span class="line">    String id = indexResponse.getId();</span><br><span class="line">    System.out.println(<span class="string">&quot;id = &quot;</span> + id);</span><br><span class="line">    <span class="comment">//获取索引名称</span></span><br><span class="line">    String index = indexResponse.getIndex();</span><br><span class="line">    System.out.println(<span class="string">&quot;index = &quot;</span> + index);</span><br><span class="line">    <span class="comment">//判断文档是否添加成功</span></span><br><span class="line">    <span class="keyword">if</span> (indexResponse.getResult() == DocWriteResponse.Result.CREATED) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;文档添加成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//判断文档是否更新成功（如果 id 已经存在）</span></span><br><span class="line">    <span class="keyword">if</span> (indexResponse.getResult() == DocWriteResponse.Result.UPDATED) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;文档更新成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    ReplicationResponse.ShardInfo shardInfo = indexResponse.getShardInfo();</span><br><span class="line">    <span class="comment">//判断分片操作是否都成功</span></span><br><span class="line">    <span class="keyword">if</span> (shardInfo.getTotal() != shardInfo.getSuccessful()) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;有存在问题的分片&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//有存在失败的分片</span></span><br><span class="line">    <span class="keyword">if</span> (shardInfo.getFailed() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">//打印错误信息</span></span><br><span class="line">        <span class="keyword">for</span> (ReplicationResponse.ShardInfo.Failure failure : shardInfo.getFailures()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;failure.reason() = &quot;</span> + failure.reason());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//异步</span></span><br><span class="line"><span class="comment">//        client.indexAsync(request, RequestOptions.DEFAULT, new ActionListener&lt;IndexResponse&gt;() &#123;</span></span><br><span class="line"><span class="comment">//            @Override</span></span><br><span class="line"><span class="comment">//            public void onResponse(IndexResponse indexResponse) &#123;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//            @Override</span></span><br><span class="line"><span class="comment">//            public void onFailure(Exception e) &#123;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//        &#125;);</span></span><br><span class="line">    client.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>参考：<a href="https://www.bilibili.com/video/BV1ft4y1e7tq%E5%AF%B9%E5%BA%94%E7%9A%84%E7%AC%94%E8%AE%B0%E3%80%82">https://www.bilibili.com/video/BV1ft4y1e7tq对应的笔记。</a></p>
]]></content>
      <categories>
        <category>ElasticSearch</category>
      </categories>
      <tags>
        <tag>ElasticSearch</tag>
      </tags>
  </entry>
  <entry>
    <title>ElasticSearch目录</title>
    <url>/posts/5fe89e0e.html</url>
    <content><![CDATA[<p>ES聚合TODO</p>
]]></content>
      <categories>
        <category>ElasticSearch</category>
      </categories>
      <tags>
        <tag>ElasticSearch</tag>
      </tags>
  </entry>
  <entry>
    <title>JVM-垃圾收集01【垃圾对象的判定】</title>
    <url>/posts/9125293f.html</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="密码不正确，请重新输入！" data-whm="文章不能被校验, 不过您还是能看看解密后的内容！">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">该文章未完成或暂不公开, 请输入密码查看。</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="91fdff185d97d6bd117ff0451f6280a07702727033e24adf05e7c61c63e82054">249d63f61f66a83e2cce6900f57704ca0dfceed793e38fd205dc88f783a92fd2cd0e868bf594155ac43e54869d5344de7ac344e2d67499079bbd1e89a264cdb61101c5b2e06b35f5e5d36f9615d58a1ff75857868735d415ccffe6ba922aba1a228a1e88482315b73e17d314959c7039bfa0b9fe36174bd561a538c3a55ce9738b0839c69997b1a828be206509cede9b5c25190500a76ceb6e2a08504348b0b8044c6ff0fa50272d2e1cc13f44da302d4c57462e06461d8d98bbe66f0274e181ee9c3b61d0df30414b2ba755c2e810f360b60e450bad73769dc7a5e3641bb7b37c7fe878a29a7b40787717144d2dc7277d4bc746591607af9a81ba43d0d691cab819485de72315c1a6148e211807aeef9b908bd039ec0983c3d556f2dc3b25571127fd73f36eaa524665f38bea0a426a13e6b68abde2389ef286192df8563956bfc4947145474f29deb88014aad1e855798d8c7ff121c4be9967459c93ff5dc8ab20203878f5104e7461bd30fcc46cb28f6ebb42a30ba29be5f1bedf685e964a613b18404dc631796424655dac977684a8847ddfd8d16ade5b4eeefab3f8ba2cd8f22d10ba3ed93cbb731b1496d1631e7c2bd59984f4cee90c6869e5be52be147d531acb038d3f31664c9654fb7537d55f3a87cfabbdbba870d22495bac4489db9c62e3dc1941884376c2a1b949cff19ededfa64b4106594e0a7e5b10bc84b130e76954c6dab079f1fd7a95e197ca637a5680360b5ef98cd6341455fef76425251e0bbb5611daad9c48902d9fd3349d05149bd661414a4cb33c5c1a55932f2665191222bbb27546abf4934b8ebda607fe744e83ac2d140ad629cef0406d55a8def537906d0b75875f39b026df5da73924f0c73c2a77d6515508449ff57cc85d7195b9688e0ef246d15d4395b11004f6e5d75a1bd1de3254a3b35663c66da9ff12e9e45b4916cc32229118aecc81e5837060d5b5ee5d02b65433009adea66fd7ccf3628fc839be6561f8160d73cc1c9c9d55c01f31a28f74c3ceb0640f38d3fd38dbb74b0a041148505a09dec3c7314bc6fe5f324567a5618c3471d97ec5b29b5b93867a2489f4d174281246015fde965b480a2331e13faa404d11114b507bbd8ed6bf87f7b7cd6bc0c3a05e610a699fbf18ca01f6a213ae8d8a4d675f11989154d855835200b060f65996f6210506f492aa01ce421b3e3d5d2f09087e26dd6e03bded3027588d893c7564967a8445d77f6ee2252efaa888296509d9a37937bb8e2824cddfbeaeec24d0266d678d7619b0b85fcc42e0517bb99686ba82cdb65984f819e3b55372906d80c40f7880ac846c99d818df9bf0a9bebb298354b98a42d780cf1bba5e21c78f71cddd840bc327ecbf2aef43d6a8dfa7877665adb45c618c9138ffd06956acaa05ad7cc9cc7c4e80dbdcc1c6492b1d6db8069e0c8293149f94a0c83f18cf94f0de576a8730e9e37401abfb50de1dd395a7c65a329ecad6e0b5c2a60ce190d6f6583b6a645691afe79af2dcf3afb28f9241dc81aeaef59c75bdd555c446fd28fc6da3b83ad2ef3e1f0b4b0c7d58d828005b89843cabbbf7f121b705a631cb3608da3e856a4e89948083d90b62ba85e40f354fdc9722ba84ff97a4dcec76439164a5fe5c5d2bef1174f525eacbb00cafd3efb9295fe0b6164d60464f609ef507813282a5415620dae390e709f4003167f4b1a463a1c48a21ca7add7cec9e50c557fb2a0614faa30a8459e16719695d8bff44f4a87a925afc0afec06afa63f69f21c5682d7562247a32ac81de25c67449b16c8182001d8376b678a72427a56e80d0f2f72a60cfcd2440ba89b6ec14a5de991754ad63513c0491255e6b453e77dc3dd83335ce90c919c6fab9d36c961e2ea2ee20b2ee4405dbe2ba00d0e0eb4269cb6e65e0bec5f04f480aeecfeed61c262d743fe11f35f46cada1cb9a7a26ee73824b11c5fe9ee592d9a8ac712281bddb48d818e9c4d498d10127f1b3c85371df88d9e193174b31a6be0be7663485efe11b9a11a7c0158d00066a4b30c22a83591fc013e8aa396b7a6458f73619c6ebb82fb6f5c1c2d6cbc4fbdfcce3a8168730933efbff2bea91565f1308d3ca992c7d684ee1b9a40e2d596be10b2769d22023f66af3768c9fb8beea521b91020e6bb3bf73d15212c557a5b3499ee3de307b03d07d95b4b9c574ced5c34df2ba7a03fa0411d0aa1392740705d3ee06d9cdb36ea9a0995e9c26136132446f3ee583fe4d160dd087d2315cc04455d350db5f27d18678e29639c2d52fb71ab4ae34198c30bf182ecd0bcbbbb18d99e638d8cc83b29659192f209cf4b24464561fa3130b8090403352bd71422cf27c40d7f49ae08b5d1e77349299522f0368c56f3384c870f59d160e9e2432c937c96848457633f0a6294e17a7bca3b717bf0e86c18b3d6b1708f3f147184da0cabcb533fadad8c54fd8dde350f403178b00900c57e35bf79ee127ccc84368bb51e65c57edf5e998e90bb24c5f8ef5701242a6e26d28a99b13b69cf48a2237a1757f0aea0e58fc0564c75bcd6d01ca4cfb6bc9c0c0dc45984b8afe5e306f09822429d2d75f63cf74bfec546c3cd9e2edede45ef9c58d554e153f00f7a3d7e171703a9bb2805ca3ee921a5202dd5d4fc7ed34e50364b1ec52f2bd2957c79ae968611f67ee40e40b6959463ec656a61031482f36f47ea35c0ade670b197fd3dc918e8ed4308c84d1bdd79f661f778fe9e4c182490fb673f7656261673e0f4b111d8b3aaf24bbef1c7f83da6fbaaa0d69caaf29fd3c74fbd687121015a7b46707e08ccf51bba6c9f13edbe2647f70a4548e841ba4fac89a6710aecd25062e354605818936f05beaa2dba1bc53a303fb496b570025b52ca6336b59bd42209162247a96d16918fb1958fe5094bb1da51e45cf9013dcd40a79080a4de41388f3cd4eee0d402e4487b17b0b933fc6ed43c4ce6aad90d63e0f473d82a995811eaf5937d40eaca0e7e13880ac8e881375745810830e2d5ea610598a629d5a8ba1fa81e42dd09fc560c9d6a48dc0907ea1e0e9d30405aa90e7ea453b4701f024a62a2e2fd5881e6b75369d9e2bf0b64d8de38a5c33bedbad6ca138911abeacd8662a5504ca28c01da2f94dd469bd805ffd7842e2d1007e5e561a20ad99fc0ce3f398eda40ef3f5ebcb94c4a3ef4b25d3ef013ded98665bcab14dd7b9a863218fb11347735d25cec5192c6ea987b7a5ff243a45bff74d2e4e5feb1b0ed92b9edb1665c767381e3327a6429136e6ac41d119bbbf238497f75ff04e595149ac4c2622b8e003e704e3a01c9add5f5b147c9dcc4d441d9206c9d07964302f746def627aaf043a3754a91043b4bf97e4ff80e90e6b2c929134f89dea6afa88f1c541d65518f285eada22717e4da2ac3fc0645b4666f53db2eacbc2f16ddcd15578f5a7ac5b11d0668a985c1a1b3ae61ee9007a7eaff094606cf2fa5905811e2a2714be23218f1d9ff45689b669a0586ea46166a815e8f600268c5f27b030bd1d0cca052baad27873603e6903d770f5662366feffe6195e35ad7b8ca49765b71bdc26df0f130288d665edf7e54ef6562605626a9bd97a40bb0b71cca0008df490ac517eeda524e9b44944cd69d69b19eea42bf47a71330baa59f90748c40926df8d2cc9842e98b6c3271705ddf3a4d92bc6a9a1bc39dc86702ff55c3cafc0f355a0e33ec0bff05d074e662d666e5ab1d41ce9ddbe4f4ab77f8d3b182043420838cd1108eecee2c4ec163d05f736fcdae887d5582c4fe318eb464f0f1a358a6bcd9149e54f26ab95cfa2c89846cde5a4e15df1d6045eddd00c6665e3ad537d0df8ea17b7dfff405c91e66a7618fae0de4ace6ca562331426e1a8395aafca4fe165e4a51811be250c6fec69eae055d80c33c5d5ac3e96a6f3cd763e59c8f42fe2455179c1fd9afd51b3df4ea201c3b2421b57b25eaf5fcbd8441bea2381b52ecdc64b91ddbf996f6a7936815d484ca063c3876ddfc352dad4856cb452057862ca6cbcadaefd98aea87f66e082a39c982da6b71eec0b8c8ccefa25c43d704d1034874e957b829597a9dc71333ab04728083f58dba7b6f3ab328f56051fb591cdb7010773266bc0435c253b77b9897e5d408d4d5fce2f98048b26c09c1f50c61c261526ada164b82f87fae27c9c2d5511754f06235607cb8ddcb62858f679c10c86060ca0d7999a929f28fa365938eeb2c6b3c268f1d146de48e8a2d16b61b231a7592fef8fdcbfa995c4f69ce34cff617a605701c0730b01397165f5a6af97557a4fedb69d6fe6819a3f5b327c184cac185453b47f3a33ab9847ad5ddffc2e9722f9395b130bb3696e4daf244e44be748f2ab8cbf103ef9c0d833bdb5287e51df9ea5685f2d1675c586f7325b455187f823d5ce668a9494815823cb79fbb047f2d06beceb337a3392d17e11faf598ba0dc544b41f7fd1de2db0734edabdd84841641d221312fc2cf711305479e4d46634ae1de50794309c7e9b7c74601a8d523546d52d464d5fed076dda6d917eb003f2be1f03f88c5382550b478439dee3da6f3cb44c2857e7ac172e9c531239fa5f054e1880c4841ff43d8ffc3ab57b757f03f6121aa45d09fb610a073c47d7cc173ef030d0cbcdfc8cb2b70cbf34d584f458283c27f33a20bbb72b520cbadc91bc40fc82f858cf18c13b0e4cc8e0aa1f424ba5e8be965d2f94eb010d4630f205e880e86640861ba895dd4c3b2166c9a3526cfb3e6a693911a76b759817e6b42c0e3dba31634fe92309bfc199b7e8d512066ee610d99b989d9219f070008ee903a57aec66dbc5050b393c648463c96f16357f4aa1ddf59fe9d199b84016060411df8e27309af3cdc475a05bb6b4cabcf2bad1d06e9b73a41b190f8d46b83c9af376a68995cf76b770e3858a5344de659ba23e05d0cc7a1bf7113c9d3b42bc5ac8bd9ec2c7cea450f729fac6ea1607d0872592301f2302d8937d8f75f429c8edcbd0184d14a54f52d64ce85d3a868a29a93b76c439248c36eb4997a8f7e29cff7715c159edc63f38923b2f9ffca499447a1a2ebbd1998c6bddf8fcb3a5f0f7a5f76a564192f4031ddbd60eb3245db2a921959014cc7ac2e07e1e17d34537200f6bfb4347208261026981c43dad6155e7a58694954788a84938fa3d9b2b09ac1453547e6ebab6d1135331c38f8e41516c230c885a6c5a21110b2de4a61924dade8782bc4f702bf4bd02e8526d91f607ecb24668cf588c04f28093647c0d58229150e73b6ef356530c0f8ba331109a83b4f740b95334cc5b559e0043a608dbcee475a509af4c4fc267e6d5dba17986dc528a982cdaabbfd21b9b537993adcb9f4507fae73af00d56f9be31fca9570d1955d4e972d517161de83de89c7b31c3cfd2ff77761f7a97c781d33c5d69a25fdebab493415a95b32dbe026641f8686de970285e3e4fe0b97773b5403b10aea9d3a5694c5db634b19cae4928a67a0caed32a46805899094a3f65da0622bf342ed92452a303c6fd89ece9162000e472daaea7703d899bfb7d94d3ca7f2ca24bea9eacce67e78d5ef91f02cefa03549f2b9cc380776aa1d82d0733ad49511c52f5183de8f8804edc7c63ec9e42cec4cc2930515616002cdce41d00bb7e79f0e4a2b8680ffa1811973c4849aeabc6fa4a8e4f0c3ad304f1196b0e900c8389fc4f2770c19b0474f17639190a079c10957f7134cdced6f543227d7bfeebd84f87e5f901d9ebdcdad45368803369391f958c61df1fc7c3fd45c9d1e85d99332c10ce6a5edf1270bf04213c44921cafc50b0a5405c6a65fdbdc9e4a820fa1c992a946ac82e8e9caa247c23f90c8ea0fa60b58965d35023fa509138554333e4abfd3af233d505897f7295561577e34422fca6a21aa89872cd04586ad72d200ed6b51853c024d19af711db6a4405101231641f2d32c891a986c43bae44cb27652d545a33640b0917f18d56960acbec315a97cf4db532399ccf700550182df947b08839777c4b2becfd640fad9d18626056c60ea55468a708887a52fae267a636a97705081906c3743f9b574e6e9edbb8a7d670c19a6da433734c18fce61f6c4026e3b6f288f995c5bd2c5b1d1465e3d8aeca78d92ebc2682ce92178c16a46233434cd1fdea7f98be67fa7ec4a115b7eb24684c5744d23b84fa45a6aec2caf825a019630e99724355ed8326a24f84d5e0bf6530d5c376c7769576c843bb756db95a093f9d22d266dd40641c451fcc7acfeac37d4bbdaa393da1b488cc3dbdf6c873fc4025aab9b4a5380ca98879340705f1a0040135ef9e02a4424932356a5afd26ba253a825d89a7d04ed21339eb13b48fa5cefb34efa49ab1c05b7b47c234ed6276591634eea7a5f6d23209c2ecc77de83fb72645a5e95d2a2f17afa3ba9d0810f4db848c2381248576efc5f1987647ac1bdfa16bcfad57b78c2b3347fe66ba3a567999417d835421e72ef864a16f32f3eff955307d9712ecc02baa75d3ac752d453eb204b404fad7747221b840aa493f8a4ef3f274554e13768e3c92176b1a099184ca003b55b4e2e3832a5c5fe48656dee361049046f46e63f1d4157d9f89aa385ef093eb4abee075803782db348812f2878fdc62f7d1a2ec3a1a047337bc958a249e0bed9676fb65cc2a2948edc0c52e8bb883003a2a17fa435eeb4709e5e6ca601870fd211d13b190d358cf3cbd23d38b58f161f7d9614d7a43794c7fb7f21dbcb6d5bdefc41500382aa00e2d2a6e5c354529680f530b94b4d3bd8f8a687fa4bf03dc97141f3cb6571ce9310f1117a3012414d33b9d9807e52db9a9600e66047a069b411ba175f4e45d90fc2883264764146260d1eb6d8822b10c003437c31b05754ed296fdec7e2ec00a36aebe5b6ea5a2441cf054cb457dd7dafaf40bdb9787ab1af82ee06f4a8ae752f200ca1d7990991df5acdec0ceefafccec6c2e23d8916e22fca64baff187f67eed21f9fa70048372c99913c5c34069f25fa8915c1bf616ad8fe8e89eca556a62550faaf50fc79492e6fa42db7040c18d0f95ea0f98047ee570e866783be0cc9ce20fc3a6649fed87aa72f4db3da3613e318494e2b45818f1c8a133fb7414044045920ab238f4dc4c6c8fe00f8f22e59b4ac31128ea1ffdfbe5168f344eeaa50b34c5cc32ba3e12b473dec5b6fd9a77ca34f9bc2b363bb739c9a8ba0ffb662f21146d8edc9633c71542db6c1bb37d4aee86d31eabbb9a777afe4cb78f20d4184066dc98606c3dccb7e91396c5c48dd990fc0e005676c8fe84aa647095621430edcfa8576d2c2065da05bc7f554139b46df5c3ce81331418f45b25eacdb94c53396df932e22239f0bb000074d3335c9dd387bac2ead2f81f5e3f7b1b0d7194a624d326cd97eab0b7c08ca82fe194ec2e4363de9a12ed4848ac92a57069ccfd94e4e8df241870038a4cffbaa00745588a4522704ff980b2905937c8ea4015330febb427cb0c54a56db2a67a80a9fe7e98286ecb527e0bad101fc56d64e0f1981ae9a5bea00c75563df0a02f2d751e5efa9da484ec60c9a3060906e1655e2092b7f391bc3c75f3592265e760d4c4b6d22b09bd3169d99f33adf1db20f311ba110fae84b06f30355b5c48335689be647e4b3b4255979a57c3c95af84a76bb63bff9e4e37489fdc6b87ac0f479f58a7935319e738eb48ec0c0150b5e4c5b6adbcd74b9cedb6c2ba76563d768ee4fd8ad77065e77dd1ba8d372618d455451e7f2a400743a061894e17d8002f452053bc2dd618d552c5cf2954eb528578a863cdb26f77c520d5f9267dc609dda08145ce36b15774000489dceaf225c2f8b8b6bcd86749069ea9e6c4ec2cd542893281df19b56b8a8a9cf2777e2d1fbf88307a137c6434fa86f9979038ed0a55a1dae61f27fc1613b04a73c0a5bf53f9af06228d2e92d42ba8a6088e377b53462897fbe10ee9ef2b8009edbe225844b1b2e410b7cfd943db782bbb23e377b5635ccac80b4f1dd6bad96a609559e46ed1cfa36c3fd7c9a9c0ab723ca022596657e1914ec61cdb3a21537cb83cb5a272ce9b8b6dab26241a44d7bcb2b8cf85c1845773ccb4a92ecbd40e175512623c2969a1750aff72b9ebe1a39b6de46825a5b43a7fa7ac903ba8f72402cdf575de4a9195d41b6ba245f49f9bfbea32460a1936f2dd5bc0b4a4c62ef1d564567205592968b7ad659374fd5a8b1db61a51481eba2ec54925cb3bb19d1a313614ae9f1350f9fc3ad1320640c300774fd1efab4380cb489a286ceabdd63fd99bba6f9b685a702d34756dde067c4386d624a63ac3137f5bc08ea0e3c3be554b6893cd7c4ed93c4723694465ba1f94b7cc61d1342e21e96a6a47b0838b17ed03d57ac8619b0fddeedf098406b144784c6f75175c3b50bb7d90d9c08ddedb4f499c9c96a04a82a24353a4f97b7dca8819f295458af0a8702ac29ad65edc6693ecf1d8ba5fbec418c2681d144840939a32407b7ec97890d8d6fc9e21344509026a8545bea0fd144f2c2762e82303a079f5a29f7fd7fb30af3325d89e15720a77cdbf2b22a20597ef8fa37ff8c2ca12490c24f199d98b2e651dcd30eb7d553de64d19bdf40e676a30974b29ff633e22ce4804933c49c44e1e6b49aa70700ac759efb926011f272257c5ad0d5588091b92e1a2411867bfce3b5174125f51be2843a67651472e180358e2bac1273d30b3c315ec981ff2e6fdc8b42143cd2a235a9db66ac6b25995df6985d13e94a793b64a7c91f9db300c4a3b9aed7095494a7cb768c2d94bec24cb07ea74af316781a5a542fbc0a672601155ee2da9a35edc85d75b7b4906a51caae4acecda02a11d3212c6fdae4e4ac9f39e8cb56e7a83b99cc237d9304b78c885d4d7bd2b91d366c72985356b2e46f71503b9469fbb9185abd03f08394cd78335873de591feb3cc8e015a807dfe265864bd3f17178e851deffdcad4770cfe0cd92bac11ad07f6a316607a76275288c7bbcd22270c1248ee1c79fe76078ff39d9d806e3d426620680f9a705dae6b587a2a856a94effd2fec8d874589fdada4904111c7afdc54d7ca2f62c1198092fe8ef0aca3564dfee1b29e9ed2e4eae53d804cd3be84572ca6e03fef934263583f64a75a96675a3f29024df43dc01badd0910169e9d2cd4c52e92246be1f611e42440f5f720d2df0add44959ca9c53731ff9c19d29806a9b3384b12649fd641230aa6e1d19e9384e2f290122f9131d67ce85da182d14bd1f3559628713f02c4bb43a7ffe9660d73af0ed9aef31fe95f5ad05b8cc9a96f244ec69636cb13bc8ab9046c2f7a70b24e2df00a50299bc9f7a93dddc1e098a6e71da6f0f6d7d3576453e6cd71cee738dcb3ae1870d4370b9105ef0c7fdfc7fdcbc62f43842f27e5f4d26504f013a05d8b378cdc3953c710e1c2215f28a3a0b39833969b75e898aefe1f379ac9dcd20209a56cb3ab5ca974e273ed0ae2ee5c2ed10d9215c5e9b56579d9877b4647d826babbdd3e9a60c42615d8189debabde76f3c9a5e0712f8c93f6eddb3a514c18a96c940eac4c53af3abebfa6acb32d2427db5bc44d4d415f86e98d9803e11696d5d2304dc3b354e0f2876e62e99dc8165d79f1cfa37f18bc80b96b3f1485ec2f0070975243dc3a0edffbbd42140a559b4ce037faa056d1ce6138cdee98592bcbd8fb4da26bf3fa7c3db919731287bff479375cc496c7eec49527bcf355075e2e7c823f7e6d28d9253439a939ddf83a2cecc6268efdbd0704cdfc909ac4b8763bd2ad734c2b7a7fe3798db148d3f84723dafe7d9ccca921f22a5a432ceba4fad8912709f39d7bf3c8076ba4a57ea99e8ac82126b511f145db2d958a0dccb4d3ba1f81e5b9ed5ad9df0ebba1c8008ef4be4cbbd6d069355de1146c1598afcf8ccd59c3c2cfd55e49cff2ea364f630ca084403206e7b700b4005d9f6e4589d2f2a2c7012c3e8229ee4860ec5665aba4f14eeefa17e2c2147194502af64524b8f621042a4181b24185b7984c196823fbb83d09406180e96d0441afac24f56cc6b9369ec2cdd0ff302c8bb10e2dba3e1324b8d0863d4399779e254709976e36583561e0099098ef256536d4af2a031360f82260353b6b9c7a597ca5e1ac7172721f5eff181e8cdc9c8b0651cbbfd088cc99f3151ba1b6a556763f7a7399b36b3162004af610b2ecf64dbeb76cc30d0f2dd57f8a39e1d40dd423c4e53932719ed2ddf83c75f25026dcdffe48d0530493ac5c8a376e02b1670312b7ac3221f7a9966e44ee18e657d039c1b802a996092eceec581fcd9990eb3389c0c62f0c110090c9c8ac51bc543f7b2f0c4e380a74fe2f16c31b27e1f4da24ab8c6911c6c6021b4b97f4454e1de283457acdf938aa6aaa88bfdef6f1f9568b0944529a69f4fb83ac2590be15f8805606ecbdb89a2ea504e6ee6c551498bb78d4212733e336bb2f73b19f4d5ec8e24ea820bae550fef593703c4eef1bd9cdae89f843d3332e18aa91367af44fda7a381613a27e21a89769aa9a04bd21ea6045934ccf548207bb08bcca1e9f0ac557750e9bf220af912ee0b83cdcebe3f31383516ec498eb8c3b20f607bba93928083f92187163e5a94fb534633a89c7e8a6b903dcacee3d6ea8dfe822c4984121e020a6e834ebf05bad44f09e54a52448116a3bfea60299b8d933087f165e482d26070cc503e1dd79fe66be9524fee6bef3f02496a4bb1cd771fafbe148030c0785b329494442595807d0459cc377e97cbcc6da8e949d748d2c0f060221c79dfedc34b932a540e24e1910233461714130432500363b1c1340f1934314f6c36b0cfca17f19dbc8dfaacfee719983f11319d15ef50984e2250f2805a527ee5ad16f1d27d0c606644a987faff784b7449e91298596dc169ca93f4a6be79049c817a34d0ce271650de497ea1084cb05528e0503e90bf6bfb74740e798198063d63dd7dead44269b7cb212af5ef5ab126ebf2c9cd000f6b632045da3a71d68d917b4a4b22fc278d6e81a8ea695acabeb96055e3d28b99de0205f07534b7e3a6f9ec874dd6324993bd18f9adc5601ee3df3a50de3a75920fd46c54d4c1952fc99a1e998dab8b8eaf0ef63b6c3a0fcfe053e5989f643ffbe294d0937a73123dacb90bba6b431609b0cadf8b51c6176d1537a739a19397ee8856a95bd3b932c4a0270b85900e79e3766ba778241e8ed4dfbd0da498128cfd2d7a67c047798cb9a548dd2bed44b66994d016ea807d9f1d9c0d59997dcb04ac6554568ade29d2a20b762f207b9016d4010fc3311abc415f0fbcf95c84d836a0fff8ffcea1b459e372fbca767c37c56bc70d04df6d3bc23e8f6de65c73dfead5111aa9a38f7bede66eac341982d4e9c8f9f62db162655ac54e1dfeb57af050f65a872c3bbf01ced6b0604202d02dfefce8a45213b903238a36e6e9c1ecf80d1d96fb46c3c92c85ad248e17c6980ddbe8961c2684a0d0d9f5a8c8b5a0c561b31433c116e7f5738d0b9393d51dfb855547fc92f4af7016604209e975ea8dc151d0c1d53c9a0c5bcfc54ab9b23118c66f980bed41f638f62ef50d45cec0182bc54dbc04f2bf35087f3034cd5415d25b8b54579f60ab90684012a44fc23e7894214f3efd9ec365910f49f8cc284bcde34529377d1c0fa3de1a3b4b248e01e592ab8c411b3958489d18ec2a8330c99e3d67b7c872beac4bb62179f72f131d8c9dee9c0827cce0da4755f1a30b5d2111ab4836ca165d887c3cd0ff066ba6a930a01ae7f575504399bb884dcf3043db13e211ccf82b9d2d04177d2e5444426a7e7b603c563ff1cc30f4fd6346b7dbdba3ca00323b34fac6fddee1b870b2deef3828768f59d31f365896898668dd6d4309b62163aef5a6c06b268cacc277ef219050b214ca4232a5d3144fdfa675c077764f77f70293f01d46192331b41c0752fb76ef20f5bc4fd948bc87492832286ef46d6917933fa4b4e4fcf1a9463de1269e770e7ac28d936d3e6228b0dbab62cb3adafdc6994e5d09c5594e68f2214e28702402111c0f0e638fc0c169d15f2dab1170f913f5c14a4772de6d44ed5f16ec68dee3bd1ccf609205c5884fe179001cf6a430fe7a4dcd23ea0ff7fb4ef41b3aa43ff199a2b76c8bb5559da429fa2d67a7bbd4eded7320802286928414df0a282aec21400e21658bc65bde41aed157492b27d3733ceb8888f3ad71a3a7f29cd8b71b115d9d6d9d9b3eb7000c5168e8b69607b98e177f8642ff5ca1443ce1736376bae37804f11ae313384d8635e216ec1460285c76dd2671f1961a80d24c7c68253676b9f3a03e1580cfb1447f1293ad1f8c4c44df2eee0e8f7a54d6ce3d50691268f33a844a8b7aa5cca055dce9454e7cc5d65b55fcaf74c559f6db44be5086c4b0a292fe1430a2e95525b250ba2c2a31d4c57671647ccd33f8e832f4c4990331efd8fc9d2ac1f86466bd237511a0cc0b55096f8473ed437a82ee98a699d7cd734de1c57f821d37bf966cc62d3612b0db723c39219348165b4049741ac16ec456e61822db1c06a8567a68c763d9d30892f371b1d54ed4ec5b11e799202604788602bd174563be2eda15c3c4d7423751734e79bf9071f970f5a2cb724be163245bc1a425155fc66b02be735bfa9058e96464f3e43f9229c4e39540c9ca3f8178e7912870c70f2efb35a80614485d1658a17f98262d4fce2add4eb2322c32a3340ac25b20774faae93c505ad00f8586a4ccc43e2abe490e589314d8e7a664089a217b4cb3e27b50a5ca091f2d2c099de7baf60f89c595657c04fd12635879915147fb85f949fe22388e3640c14a354c66d81de9c2072a2de341f38d7b52b6986367de4568e5f36cdde05becc39da0bcb88537bbefe50400c6d1fc068858d02adec382a0203f158488bffc54ac62b5e270286572a0271a54b8644327070ffd69079e87084b531045d43c43154536e589532c19a6eb37413ab88b78bf9b276de449e6cffd138ba5298ed4f98e838cb3666d253b7e3e8d23a9540ea41d689ceb4c31ce6a81ff22ffd23437b6f57f370ef5fc2ac55f5591944da7b033f7c57a45601778f719271d5207199826b28917c8649d91962ec87f6429e80df3587fd097824474cca98eb4ca3bbc64a144e4390a44fb7505fe782341350441afe8316672d9472e99487eaab782140dc11a63fdb55d13d3af43960cb15fa23023ab251ccab6d62b90b6f1d944718a7a5cd4d6b7bb2cdd7db5e26c27cef31afcf48f7f4c6fbc8929d363bd7e3909ed80ec13898fb6857c868c672c4750a2f2472658795481899157fc600c06a86216e279a91208492bedbc482dd1d3ec4d3981efd2cb5179eb3b98b546fe7b4fa3d1b0c13e9c923d25686e357f27284be1a54e439ff6d6fdae3338d7006f1c6a6af20a7de7c6458e32ab42d11693475b5799ffecdc58c0db5834e56a91f2b4830f1b35f3eb5be42e503e813cde4999e8d7044ae79f0848efe1ca9c969a246c643463161401614b23718cfc3f53a64fdb1a67ed2e3013235760bca2326443cb9ff5181051ee54104dfa8cde13ba77eae8f2bf11244068bbe93a546315b7ee3f4cb11c3801ec9428aa613416ae621c90bbcf86c8e0bd6d1f0c208841bba24ad0438f0b584adf266752ea2fa459e45b402fa173d652753fd8a7e15777f7c792e07be0f50c1849daae3b0a2b6c825ad58f31e434d42f83c41763b9862fd8e6395fce729212040cae78b0336a746f06cb4eaaec5bb16d274a7a42c8993219e0dda615a09d354402c740056c36b6533d483a478734b9c90c759438e8a2c611b415c1d53dd20892d10d85c3a713cac60be90fbf0880126e0edc8dc9d812f0a508b20d96d32dc5523d2c0ddc982be1497352689ae970f6ffc6f6412be41f1571b174d7ed01a2d512ccfdb4f1b252b986edf872d2e91ffd270724cbef71369850b0a00a2c80d57ac7d17ccaea5954f782bb961744c79de6da224d814187734e269db4e3810f55b61835ae2346ad0f3330aa5ff70f8a09866a07a622ee328c139d22b94f9c6d0ea9d528501fb3de1b432eaa32a76f8ba9ae691855b9ab6f4a2dc759c450e84d46f770e72193d785761f45d748294edb13c9096d983716a15ccc1327781d8344e2de724b8b329665a49f93194687d6f382077891fd1d5dcba561ebb39ed0a559af7c2fe404f668c9988099b9c807412a7eee54ad717bcc41739896821c51aaf0242f68c760db82531d9a00113d3b362930d30e0c107f8239f855262277e9b770daf4bbc6d2e71d6c72cabd85a95b5fd1e82697aedc27f14548b7ebff23fdb027aeb08d96dd2534bf35119e56503847689378cb2265e4a20043a1373507ca71018d8698a1d1b79db84fbf3a0ab3fb954cadc5fd875d42fccf3571e201a521842c4956eca7db66d32f5f1873434d7fedb6d2c8778c596f8a9513f606f761ad00c7ee89331684533762c6619d5c29e0efe0b388b7f4b3322c53e65e34bf160fa4a13c86214ab1886693beeffba6871a4f1437290086e18c26d18049f2bd773efc3ec43e264e29a10dfc298cd5fd8c9aa63eca202ac34d60e103427dd9f1f3f35b04b547295598585828cae43ae8036dd3a31b8ab60fc97f1b792ab775e90d153a9923c52ca681deb77a0d0cbb2f5869e0ab0a012e43ca5a0283a832ff35b7c5635c0d275774fa65c670791ccff9032e5fda6962e281b9e8c3b4f9426c92c8ce44df6bd00d563bb90a34f6448475e268b8965a018eb15eaa37ee758b26d386cdf7a973fe37fa773c1b1f52fe6c5a963285bc0061d81b79d20cbcd088e51d0c7162ff52cf5582de3ce30f48edc970a8124ab3567a291b5e8ba221bf6816ff48b4b0adc4cc45fc2cf3342ccbfbdc8e719d16acfc5d50036854bb7747aa75203c8ca1b1988bf942fbe82932ba4b6e4f6c678ad141e2e0fd1c85f6e4914e5422e75ad7064dd9d36b77eaa9a9add5bcf15dbdd22e6210a48b2f9e4c93ee11d8492c002f069f61dc58f1fe69861a7983f5880dcd4853738eee87a37c02fe0519ddfbcf867ec3fcd60d0cb9026bc8356cfcb2197cec0ca1b7ea470abca2b37ec32d9925fef3482d878f4bf6093c4bc78a5048190d79a1559f5425ddba7ead06110040eec546862ee45bb634741b31e7599355b76337f92449cffeaa449bab96bb52f5aaf55874987975f79e631a1b3073c774f27ff93aa6a330a317299e32e3cae8abebcccb65568a1c986e0a2e86e512f76eced2c96aed6e25bdd3b5fdac1c1dcc5e4b47624eee78309665edc427ed8769a8d862849141b453aa132f0c5fe899753ff1094c9d8b4b18343c40df364342d3328da57fd5bbaa5b107911e3dd5d7f9f495f7ac0bb7bd06b3badb9193f1a8dac9ae2887fbc9b602c3186a761dfeae985e48594236d916211f2b9ee719b9425b914afea823debdddf427cdc7e48b985aee89df45c76741940409db86df9e453b0b25b12d0c39dbf863fd93dc6b074e6e71053f55f7918502036a6141ac68691b8fcbbf6802b3d770441316d1c219cf79ac79c1e7eda75f153c29775a8339880406130894533bce836b8636a7a6475a1ba675b4a828a6db72f7dc263e183b19f3a31aa8992949c19d2109a24fa509e77def8c9601cd6335d0fb8286b9c12454f5a991b6a78331d055feb0da6e83025206bbc9ef7642908b22ffa1639dbd8e8440c3efe501db22749040530cfdc55534a2a9afec0c21e1d6b1ce0ba968791215a756b078eff7caf093a30aa7f5c43aa74dedd936f9046647ee15cc9f02469ee277987ce43cc2ad9b7fa190a704542539e3426d2f418340177a50dfaeca1d135bd7d73f21dd0a9564fb4de62c13dcb672ea16c0e672175ee8a6f2c8ded5f5b1770f5bff3cfd7026f582c5046fabac9b55da63f119144292ff1418e6d3ca47c66d6bdfa6a870cc16e6d167784c24d3b5868ce55fba910e0f382b8bfb25ef336d2f08f9e406aa794c8736cca50d8452c6b8cca2916d87416684e88efef751c57a252a7c7c0b0056081119776f1b8415b8cbe202eaecbffad433a0c3e89dd64197ea6d189123d678af9af7ee2f2457c12c0dcffd2f823459938dc206a61f7dbb2d8d65c0da8103a2b1a3b409d522cff1f4fc7f8c36720bdd09e48476763fb77bef18058084c5ab0175c0e240737fdc6cd826b2e7a8938e1cca50117e343b049d67ffb3ea0fe0bf4ebb5a90cd67692d0116790e09c3999602b1b2133b1b763439f02bc73985b4252c1a9134bd36a80f18075408ac809906502dfb8f653aa80c9b0ae5b56db83f12f1c7378231d27b3ec8fa70eece3021458d3e304a601057011f920f4f2e3d13763f14bac6445e3d2e311161ad65ebe24246eb82b828485f0cbf174a6046bca440ed8893afe7f5303690dc413db0ddd904de323b2f02dd5272c5cdffd7e1da054f03fe882818dc898268eb980dbcc44f1bc335e4891fa9a89b469aae25d635c800103abdd1d896e1f6497e4643cbd1ca14685960584f3ffcda6c3f8c35834fe69cdeabfcf6885f70fe02c759283658a8f6e041bc542de66c01a3b10257d81bd00936db2ce5e31ef36d716270a2ce518deb430bd2d737ee1700af48ec209503d0b98ebeae1753e5a1c075f4eff084c7941d1cbb1fd4f8a9192b8e85e993bb185643028981ef69ff086169a2b2d991bd504debc4949164e4fa02c767db028cde1534d56d2cc75a68f2c6371bc6d7f80ab25d592a0c1b90590edf2c705aa8447e43b93cb823afb64815fde2a2bd851e3e6b60bb511dcc925ee222d8086cd08646ea12eefd1fee27bebe4d945feeefe7c824890e9c42e30c1e10bfc30b7156fd4d4a990872a5ec8639013e74c9d05b83fe57a00f034f0a5c8621546223f48aff2b9d8927e825b563e5f04d305522701f2e486d59bd6fb49a5e4af5bf31c24c529778e126a9af9304c1e2ccf39f1e8bdbeb1d57aeadd5618b61b62aba6450a316e41f64a3fd27ecf0eef9457c4bbfe146f280f9eb9ee4ca6b9562f80548c56a653d9d884df759bfa804bb49073e4ccc31b46256a164fe18c57d50e29e78f1165b4f92008f59d27dc72ee87274c5d3851cc5f752422ef0f6b8348a2ef6e25d34cb468fafaf3b972ff76dd1506d8902f5b12efebb323ca5fcf2663142f4a639002b36c72e8eeb75b1cdbaeb894ddd2eaade28b20627fc8e2a0264b0e25fbd836f8102905e28b6a65c92ae75d1d41b233c432f7ca8719acbab1f067f19a58d4dca61914dbe47f43e5fdaeb5d0d15b3e2ea9292e06abbc38ab8090be53d6262aa45ac697273c894b5ba5166623db7b6edd79bab218edd53b0954eaa4454751fb1f4dd7add12d72ad0422f5d728a7305fd0f251fb664f416d8b585dcaf988c802a62c76486799bf1bfa1542f55a97fb84a877ad27c9bfdae349303b8644b28d30c8ee650fa72fad5b465683355af2e0d6b114200a7f12ec661dbd721c95fe3e0c588086e4c75feb4b0ab048cf5e44aba910449869f151f6e75d8c140aae35d2c45a0ebd19f58d84bec474c2c8a08ec7fd14bc7f6b11723e88a4b2fe37b857cdc2432fe19a95e3cceb985491ee2eda707d4968bb2200f92fa019c97c647c94b3fc7a4efb6be3af95d05c438bcb3c590e561639e5bde302ab9967d3f0e217bbdaf8ff75e73fcf43b6e72979ce03c2c1b019657b492e4caa3c8dff955cb9ea8bfbc13967d82a637302e8d33d6313e95a06365098a70e634c287262f1f5af9907c02799faa5c33094b70ec44c6855d0327218ce9f45f519c64438c5e1536c3812f1caf976486d7a552e862beea7ce3cb048aeee7b802630687715276893c0eee26bc7686df4c374c6967635e9988afbf75a88b6b5dd555f8ddfe38b7bec8065232fad5277430bef306b925a15a1cc3f3291c0286e93f19b0545d8f57e6e2f6ad1a30ff808b1d8f1ae4fa3f444d25c32e6f3eb0f0171921cb7cc4b21ca56a4ef274683f296338c739b3eb0e178c7d81ca8190e36a03fcb20b9a49f6573b05477f1939ed953cbdfe8a452021697e188fcfa2bb9df1172d93132da1434752a983363827a47281d7e83aca9d2f96231a116159693c510f9e38b2e47b8b84873979ca3beddcd99af655a2c233ee77167d804513d719f1c32acdff40ee6c30b327c92fb273fd4859d1d7777e579469067036e656766a533db1a2ff60f30cdbce665c828d7b5268376aa8b7ef3e5dfdae07f1ac50bb28285d5fc86ca9ba765d98ac4c27ef4cad2eb19020fbcb197207f254af1651c63475cfcc34f9ae3d952d53610f8e2d299c8dee43d9d69d01a0b1d25350197d8d2cec12e07fe456678f696671026cda6bdd017d355a64486426ba28880ceccda6b341f306e33de32b10e1e6f645f7506ee619ee6bacbe82e0c1ad323876055dfabdf408fd68231c1e4ffd3bfe4b7116184a618179544089ec66c54595e097b167eab5cd688190f617614b37dbde52ca9b359e2ba2ecba1bda03ec46b547de51f6f4b0c619e719078b9dfe2ad58895166ab217f97df8883900b6193eb01794362676d139289e20bf82ee10ef2d4ca2eca4d2afe96937a7025c239c7724478116a7a7c0298f75ef9a2a3e1287f7c5812c69fd83330bf062c8dd0b9225c0c4ec6491c74aae5122dae126c6712a0432e839e7aa1ff3c330147ce89159b17df22a67219704a6778cace560c1467388941cf5566df08215cdeb58899011e02cf6a699d403d916ff1ff154f48d2592ae9b8e63a44bd150f4bc81d2250161f5c46a66e52ff5d69a0614b71c3c4def17f0b3a517589afb8903a3ebf141e2355388c34ad744f5b79496e5a43670c950df3b3c72a13e801ab22e0116a5faae6da6404da61c1444e8315dc97c747b47592b73e6a1a4966f6804d3d440b96889dba05a4d762af75381f176bf0a2038e0f555fb98911bf98a9bf186436ba47f1556ce29b32b8548feb60f7a8059723a79e3948b4fd6f82e011c8be044667312dcd832c40f43b4ad0db911207c7c79480fe3ff3d579500b10782f9c2dcd7d5a658798b579ce448049aaa5edd96c1ca3999d2c541d792186ab579f4d610c4e00ca2bd624a6b5cd197ceaccb1209fdfb6aff08cbb187a67a6fc9d71e0d2adb8512bee309cc9365c187aed6ddc806c46047fefc166f7d96ea36a48b4ffc35d73fe5e94aa0f3beec303d7ceefdedc6c6444fccb1eaa22bfa1a776cbdd868c4735c151bd2e7d9ba36a48f358b0d20b01ca7d5286765d2267b087e72b365d25fa158d44a2681a77ba6630a715d4fa63bb5ed8607aef2b93677e46bb1f1f2b2eba2c9a2896d7e8fc1bc04dc897c84205d2ab58a2d6e3225e8b816d8ca10a380d2f7660c0c057c15ca1f850aed19d35342933a0113ca8fbbeaafaf365eaa7f8ebc257319872d5c266b41667769ceb860bc23fc8c2d7e5d6478c77bcbd1d8714f2c4d7a97956b6b0004874a9dc1ef72e9a657143938e4097f1a813e7a24dcfa4dc955df15fdd7c58a5079e8f1bca295abf7b9ce0c31bb1d66ac0d5307ad8dac152f3dae14865a6a00d3a461894cc59298146c14f5e76e4528252241ccf7261ee1e06f1f0e8c11960f6aea6e3e488e21c11ecfb01f2d64d4cefe7c4a7af8e4c3ae8c7d8412c5ad756b5d2eb4f4321fa67ff04919ff2866087136a72facc7332d3cbe5a93db91d568909eac892d277fa1aaca1cd5120c140f40c8eae3e162d095c8a837cba1f2f39cc13946e3458ec31d54aec8b8f68f392185a9d431045dff6efa211d5d47826585e0b082f7a8bead2ce1e8ae6fb620895cfc09133532b4762b43fb3b1b35c87358548a819db37d628461467bca45ffe9a328690acbbac2415529b1ffac045683375c6b754436992f11d8ba1ccbc0edb1cc9e49f703793c557ed8d2156df52b17fd28880c65abe68a40e47b2ab823241158dc568e820d18a9695bfc39d9064d8c0f585f58aba498f79ccf668831af12a879039925996e97ab212cecfeab6ce4718f44e0019a5aa116c0aaf0743c646bfce14ecdafa214e839cb0f695e95c36b5a62a675d4ed30d27260a932bc009cfc22da4d4cd1c4bcfc8a2ac90337e8bee5d5667c80705f1a3bedf55372f9276e87d356d3d4f7fffca7a926eb03c7297ca2bef6e044d6a6f3ce55fb42c787f420e9ed2360ece003b50b295a0fc286385622cb8f3377f432a4e0d7262d6348e8a06720cfc6b63a1cb24b015b14239cfac011105373204c6e07ec05acc5bf6c6ce666c70980a67bbe2c7ee1586a7d061495e857de74f071df5398cfc0ed6b9671008598c4d88007ec0ba240f341adcbf2541ff0d3515dad02234e2715fd1380db5e2d1b6175f6deae9400db20c3bf551f66bfdba37780298f31aab2cf87f53f4b68f651ec2733a9c3ac8c22c639b91b5ec624943f301c0bf3eef18811cdfe7ccbba9310cbf78e02612b2d973c17face0ba57da20bc23ab037ac541c1c334d7b6518c292f4ce8dbba18eb5271be5b01376190dcffa759e404f97976c39797caae4f1c506a9bc5579b1456fe3e70e20c4e852205e4e65bff2958d6d906f1767b0805c3a7d8c948ed119376b16dc435f6c7b6ca5dae3a394382ecb4efff6abedddf427d76f8a3403740783bb1961dd031567a96a16a216b64ba7dd017c3a2143dbf5672823cf71f5ef867fbb58bd2b26325611e7b1467c9b60645e61f8e5dbaaf8ea4df9e8500cb6e32ff2577e452c52c9dc996601b4cc1488987db2c74b9f3e4a4381b2a0e8b1ed34bc3676d9bc16a9e786e578018e8f50b5fc6b4f1aef312ecd7fc64626fe9b98947dc91e0cf346851ee7a4bc0c82990cbd5ba4de4798952f10f9d0b7834adeb577a177ddec77e44b81e102d498f8d5ff75f59ed7b39939554cb6c7ae2ac79ad63faaf917d3cf461be86b4f29d26758a0c7ba4ee8b2b0cf873dd7783e55fca301695d08d42632eb27fdb14df07579ad27fb4783ef05dea787fc0994d848e65326befa0c1134ebdaa597636835e8cc17f72cdffc04c7a1300fe9ebcfbc077b9af479f4b1b1c6549589adb377648067ba646ceff05d0af89df4a5ace35111f5fb567ea30e4abf7b988146367f5a7e785b7f7c029c5fc248dfff261b76f8816b20763c6ce77f8deddc73271249b1bfd6a77664f380f319a238b4b52b7333139656b854f2ab90b84d54d0018a14dd686597e9bab4fdc53e776008e5af26c714b8b549946ba17326c70e828d6f50ea3ddce668a4d1e3eef5b74df0df9996a210c5dc5ff034e80601b38c397d78f94e1836db6084b949e2462e06fa97e00330b6b1133115d83e385be0c2fd31b6d034f579bc1fc83403900c0485a1f842e11e600c1b7bda975f67c8437ab2def165c277c8830e21e2645d194ad1fd458112633888770a40684e0d9820049d910982a26225341d2220a97573a12d93a90773b475c2f3e3e0dd16c9f580669a8c1286865919429491e80eaf42c2c337f63ad6fa9933e2692bb7d9a3955a7c9891e4bcc9452ce33d453c12ac3cbc79aeddffca71b1b42a67a603c38f6f5558aec9b51a4927de8fe088e74a12c5c9dc564f23666eb3c65aaaf0c5b4d0a01587d8bb0b76fd47dca1c45664c79efedc59591134045f36332077f259de02082b6fbfc69ddbdfb54bf429e445d8c70f14d2c39f65240ade73fede139b8359058275356d63452bd6f1a009266e5e7d401ca45ed23a6770751829851cfc2f811760368da117008ee930437ea643cc27f1b394c0fd854ed5f74ea272e9a44eb8424d8f25a30bb61d1dc6d0c541941afd1d6e5743d966e87072b813f4a3168f53668ca219625cf976db82b31fdd919c91e9648fed41e48f6c7af3f373481d0c16fef5395ee8e02be7e4d28a54be1f35e0ab030d0be65e0754a1e4a5158c76607e940cc7c0c8f33408e04543634960d13ff5731f757305f4c6b29e5539a0f755f17210931fe15dc84b2f99529bca0f7ae9436e74d05624f214db94200a7396e334b2ecfedb502d60ca9e8f3778a53ffda40e5a903784b9689a7b504eae81d75f584befb607fda78b8bc56f37085489f76c1603a04a2c3ca57c358eeb40f7227440ccc757d0f406a019a0ac41c2175de6035cb9d2f61ea3f42ddf6d19e555dcb9f28e4bec6a90793887e46014e744058bff3f9c9deee6c89bd09b4067ce140c72755dbe7c3f76523e76b68ca637b10fbd7824e8754eee02b4b3280c8625ded1a099e15b6a59307c9868113be9c62ed449c68f8ada35d3e5e525846c044a4c879c9c902bf3fcc1eba16c03566275e7809a81f45f4671ab9ba337c3d6a5faba0f7c9056b737335d9b4b97c97c40dd6fcf93cdcb2158c023033c9d16e4868b6c8f6b540260710d2780d4c913c23a02a4cd54d7f5dc9fd1f06467dbe95b9b1e94606ead7d68a2685d436b3c3d7ba4523192c9d7c2494a4c274b7a3732d2841243fb6c60b1a4e063411fca4f001c1a77fb28c0d9eb9baeb2f34d2fe9f6b9c4d2fc57272b15e5c05b9afdcc089f11409c8de4cab8de2e7699d8d0f9c7067dc664744d7ef1d1b1244f50d59de8828b46771346eb909200a2fdc97b90d2fdd7b40fec94c1425b7dd6b365580caf53c8bd6fbc58c422eddf391430c27d15068045afe7d944f6e1d43ac744ba93cb3ff40217db8f607b7808777f5e7ccd5000f45d265f07fc1507d534dfebb3a4822a2bbeae06cf45a221edc3861582f9bb24136ffae416bcc60a065dc8b1c2b9c49c160b4473b9d42e399265df9ac2098859fac4c48c52717baf3cd0e6d1c868e5095afa00feea80201345a42edb0ae495c4c3b66d60c734cd8212cd8d661ece4e2b6ff9d676ee1439ace8b123b5449efb7551eaa069af1d0ad93f6f71ce0db01471675d9d5859160758e48037bc588e67eb7cce386ee74f253f68a2cfb31532b8ff8df860fe41a05d88884e73dbac735f5a04625a075eb4ea217541c8d1ab651e446f81d808dcdacdc6a28b0d9938cc778798693954d1d8a41c617e108ef4c38561894a2af9330fb48cbc3126c6da254b529f3a013b7058be987222c323e078dedfda5cd48dcb52f9a796c496b306cb565af542a3b19fc8b65cb5b71067519c530d72ff512a269805111c9257bbf56086a6a38c0040809a76d0e7d1709f94ec4e550f41ce171e2936587c78f8b83e9dd1cb6c9f6bb8f2812a3124cecf2469beab467ceb358164e455a147e3ef90dcd03dddea30422a5ccc86148dae632d9cddf066ed5f026dcac7b759faa8f5e60a7a6f4c6e3be7566d85923b4931857f8729772311b937e5bcc26d995d57f83f02f1251e14c8475f8200d3303db62c618c18561191ddb8bc4f0ff0fb3cef2c412c669509ca452969dfc164eb7842710c0b39a6a4654f1d96188779395a4887fdaf55ab32295a5b039d6f775b836785bbc845ef9b63f433f90b47f8618901f5e77b8bba2cdf73a22808b501b514e4f08307ff4e22158d053261281d59dddacb23e08984416dbaf6aeb6e23d66b6f9ec671f18b81228accd2720b423b1ea3fd82b058f7e5f33d790492df32b481a80348bd22a54c410f0a4e6958af150f44447d7553771b9b76d91e74cfdce6bb7d6a6def4f26344812f244d28e6e93262d8396d525538c76c787ab53fb323e0a1989d5347afe2675a235e19f8c2eaff2f607737fc5c2254d31fa119550f61f1f37d9c68c0033948e295417da2af7fd2ba4c1cdddc5e3608a67e22e29d3a1fe6d063f7123c0b9b42768aff9078296a69361a0c143c8fd73467ea30e849c6d20742f804fdd2f3696e59b198eca2b9e99fdc52ff2a2cd8f430dfc132785e8c3412954b502b730819c18f5075a211180b626ad1b528fb818e4444f31e5bda5d966cd9c800d7635ed68849f7573ddc8e8162e128ef86ba4b728bf9eed918f4983fe92bae451d25b5c473da470b5c83669a63b50bd94a96569c757db19b5c6158e3b6bca8e5b5b3cae7488fedf622d97395290119457a0c39a7a6456c2b144f32612ec525770812772438d197bd3e9ab0fda8ec6c9d0c7347bd719077f73f03f609dc33f5ed9af621cdfa2020ffb5561451477d6d3544f512ff2766a35fa3effb945df41110ce69ca02f0ae796930d723879f39a7914ae95d0d83f2fe10ece177199f4d82a3a07d67c942546998699a807c67dae8a2851c79da3d20efc9da5aae5cf80b4b4ece2d1ebb434c057726f6f24c8b6ecb283bc0f86f1d7c8e585e181ef4fc195baca71c52712b951f4f81b2615c7bbf231a57e234c0c307875f953fd90d56cf15e51086d31d3e25c69ce9ebc400a16c985fb7529176b00b181204b06d2a02a9a5f5c7b094cb95bac2db52ea92933dc9af27616efb86357df70a0dd688ed232aa25925dd70af5ab0de4fd0139731098ccdf36e02703f8fd731ee7fab26f6c9b4048b89562350efce327b319e6373bc09de3fb2f89ee5976b21c73750630a2ddd0d84237596c035379d74e62e3cccc85b18eff3d6a78449f419a60950c70546e645f7e3da1823e089f65f31f500c052b25ec53a1d8a0147c782e63bef433ae70d11d6b5dd796ab7b0343d674692fd18a345df4ff9800738540711f982d161e9f0fcbca05d629730394f20afb075db824bc42b2053fc2d2aec4334bb59cc149efd503e110024dc3753f13d96f8ddde774f12e552c1b90f7a645414fb723dcf6db1ecad1e103bc24779d99eb86374a4c61059c9bbb3e9b9a128fcd29a59cf1d3561d18a0a3d3264ac8254fe3831783d491009291ceb0851180ee0018016488c899964f8d0a4c82067094b1f494cd0bf08437827de0e2fa2dbcc33a19127a864d749fcfc00150c1bcd6574135d5fdc0eb56715556b351db6aface28611b1e45bba6553f9c0b42d385a41e940a32f7f183d835100fe1caf03c5e91dd34fa391e70453f0dbd8063294c5893f4992b2714ecd8ad9c008df6c2d5335828c3bc38912631d09059bedc6172b2d35616d6a423b8fb3e51a44209cc4458be60a504828ba44bd0cef5f8d3b43cb36f4560c12d88f09bafb061c7381a3940dcc521076870db9d8564e5499caaa33a42ad1932da4f51af4dabc3d016216ee5c03a1b16843d63e918615d2c54c715ed8d424dfdbe3482d14547eef189cfbde4733913a4cb747afae4c5ce62f6ea1db9e81d5ebaf01388f63a915fd4607100cb1233c7a223e45bfb2075723f50f3a0ababf4679c1af09db00c191c6697e9f988e0ebcb9b9e16cc721512f64daa0f76b76753c190093960a4012db3b09968e1a75207b0c974d385359dfe91d4af3bec78ddb12e2142315ae2dcdb2a921395ea53e8edab949cc80b3dcf55d3c7e7747ae6099bb5bd557d0f320a752453b58e6a81f21aa9b272b41f693037b0bc4e50a56e04c4183f7c7ba08f17ddd65d438aa06ceaad9dcfd51ad261fad817f21ac3aa3db7bfaf8b6cea6d0d42b5d6db9f2d4093208e8d0804798d0c0fe3cdc5c9d2d9a0f9157cba516b2b6baca2d9cca65542273fb20ea0ea5e9108659de01ce593367fc9cf6de77ac604a945969ff6f5e883bb8c0905443fad4139f750fcf5a1ef94f3890ea3f1b33ae428e8e07398679cba5b309138269b69daf479185fb84a5f018e2c62cbff9a1e014a75728c3eead5009667b54bbb0d5b2e4f0a59c01d664ddd966a204a4f3d397f5a62008a3f013c1a55acb4873fa0488132b95b8ea014b96e2649b1cf5b34cbda6fd27f604076dd0c05762824a31f8d9b60b9707aaf776baca21e3031d870d58ac7dd1895955d47976c7406807b8a4afcade1fadfc24e3b472b60ff14b27ab71159b1ae31d4e989ee2726b61cae351e07a5c8946e1d458fab9b3823f6097b01653207970ed458b5aaf91b763a78f3ce8ba7076544688c162b054b402845ad698ad5816d69bddefaf61d69e26df84aa7caa9ca5dc85aa70f8e35c4fb8c17355eba739c874b7d2901053bbdfcd603e0f1d6c08b1998090d4db9bb7b0c1e8cf5f36c8988918709ab9da226293c9ad3314b1b22face5ba7cfa977cd06f2dccff8679d6b315541bcf9ccb4619ccf34ba744224802cb4a7e79ccc752b6dce31cf859debda63faf3fc6e9dbe8ee64085d25a406e7587945852795b6123b76697fe0446b6b4878ea04fb56c18f92e71863467b6f8a8806bad0f917411895c1fb59b21ec83b06cc006eec35aa69d8a712164a15e9f902215f49ee82c6250fa5f32a7eb688192d1795ef92e6d2807bd97d6e281fd4827a6db8a82468829e7662ee500eba9ba7e89fddc1c8551757b19a68a5eeae9b49e3f794b05a8691258adaf67960bbcc217fb6371a6da92cd792e7158b8347c82cd7113c726ce1d2a3d8ea42c1f8d08a54afb276e7d225401583374ea896b57329f2b257539870c44994858f39642f6af3ba391fc4a1136cddae0b4ff41582e08504badc4369bf3452650ae9aaaa3e862220a42e0b71bf0e16f038ca2726831404a6191a5090187b05545bc2007ff3d44c44fa5c40c016f199f30332c35f5d66dfe409af1ec033a9b28df399b85571a7746203902ca7c491976fcfef9575cb126f9b459e00e13c5a9efe500e6376cd6a95385cb77e4e2b756e892929503debc08e35c0dc848a73825eccd281d3c5a020f7e27a660f126571a53caa7a7593d522d92a8efa0a8692bd7377828d1ea28b9bbf29adb17f41bd08d2fe6f41da3a71f9eeff52906701cd07b18f9d3c633fd3d237875346c4672f75ba51de4b8ba554a1dcb79265642eba2104982bf5cd9d9f4277c8dc8a21f3e8a6339e9e04d9eb0767741a3b44d85da207e62f11c7841f4210447130d6b2c3c0d28ff789d2d479f7dd8852a4377a7e9576646443a315da8102b7565c4a6738bc804b68985291c334fbbea07e2493f4fb61f0629ae035ad4a0307972854bf877dd2cd37f70226cc81244bdea0c41e44127f7364f41f02340aade1854f868690a394c3c16158d130895c99ad3236d44acc585863c031699fe5e6bbee252082dbf173bce26a110fe851564bab9ba905c68e9b7701eebe8d84b9ca7196bf28bedc04ecc050c5b27e0ce8a773b0b0ae4eafa8381a9139fc10f06dffec39fba12033c498abb12cfc039c9429e051e8bf4e5cf07135dfe1e375d8ef44b3f7efed94c2d6a97d1ee40b0560ebe8528894addc0c59a51b2a49f9a2c0d37a9cee94ca7e53180b8372bf85eaf0ff4d4203c261431d159af45fe3fcd91bca69227aca10d7b3f0c4f999f8cf3ffbd577255103527cf64eec83ef169f1f91c16516a9ad11d80b01168ae018a31ae7018cebe0f294211672f9f4840de4eb59d52e67bbfe855bd8eb29e330bb0a869102859d53d7bb6d613847417cf2f704e4c61721bc72851eb86cd904adc207f0bef8e5fb786a6000d148e66642e3ed51e127fe57b2a6ac14c1a6315da42d17b1d30612bdfd92378182eeb8b0f2a20c412bf1064cf91ef6f5119162e35c00ecd03635815203577a5c8125e8dfabf85c9718239ba6aa06f6e555e38df3f51c41e19c0aba2c5271a3f59dba80748b0a69f8ba381dea0be4fd26df3ba793bb4ad9c7c94608d29c830c282cba3731d1bf9245c4356818456ff8c816582771dee77f0d35227a806aeeaf5ee0f5fed8ef13346b614b23aaf8e7983d81df2f01464d2ff474faff0e5aefd926f6f4c6a7dde81842b4729ca93f7ed26ad7cbca1331fe0ab6d4d77771a05ca0acf374bb8451ec6a96f45beb5e1e629f83793bc617f0505df3fd6bbbff4a6fed2a2142fb368798a6bee87e147866f24ca61ebce60a7502af35a758ec201fbd7a7c5c79ebb7c4b01abc47710d3fa138aa74e8bae494a46f12a73ae7f3a84246ef1ff61ae7fa8781455d78348ba80ae453c07279c6c6cbda5f58f77557669e47b08c1e02bdf6cfc5bc965d178b1cc6f6b0423546631ccd5ee4aff0b6beafeea391bff732c495051c8b338ef59ddc930d021a7a3e3c778ef02b43243eb8bc54b32b28c7e1c0dc919daf4db3010c493bea344b64eae2b21c7771e6f62fa5b8b47dcb1b85423c31b3b39e8e453b17d6ea0fc4cca15a48acae69af90d8d75d60b3823b3145db02251e6e6e5039f689a64aae516ada44dfdd2f201d53ecf9b8296a03ce199d7f1fb5ccdfe218e2c86190f6c0313154593e11370b8ca8f0ee2f929a07a06f1979e7560dcb3cd3d628a804f8c136771a1cf35ccda6ad9805d8205049c2d3b3ef539978b4a1ea403b2cb54c6b98d22f9be4200e9d1e42db01b1c7da7d1fb7aeeed06df091d079ba6628b5223bf2c748f701eee48375ca9d262d6ec7ead7b1fb2fca59c14e897ff2f51bcd27608f548e9fa31fa5496f1bd4ba67e386166b5c2d061bc8ba0fcdf89ab0eba51deb40b0b28061018e855f8bda13520e00f0cfb320418a5508272a5da24f701fe4cbf835443baddf316afba3fc2dfec1063ef7ff8e14b420d96fc6ef8a72890f9d390a70bdb973d5570a41b1105eeb230560fd79b9896b5803f0e1da68bc4de2b2c408da74a2ee42d668c8c735840b6e2216f6dc32b1642d9bca4c74cc3abdc4930c82b79ad44f5689e673d1771fdd0e8bf2ebf2e9904b12f4bb56b716ddb7ed8a6f5b48a7b155b928d8a76c7b1b936f50990e9ed39de336642658b94d543ff721df97538970efab05e25789734cf03b5d8502825c8f1c093254a6e0a8784c80de8f2ea61b8d3bc23367d14fc133066b966de9a98506d87bdde4accca79891b4c902acf5c8b7ad65adcf6a4cd26f209fcf76871bf25563e5440a7bfdf1195916943fd654ac9d7e6f02ccf55c1a9146a330f9849fab3240b57a0dba5eb51ce91bee238fa3fd68611e23fef1505a0f7ef77e7d8f6c61eaf9f3dfed17004522def1c1c2deb3f10e2507201960b5e3cb76ca773d881592041bf7cb5a6ddd5e54e0a6658f90a45d5b9403a79be2ed2f6d66e8050d7c164bf2c9d7b8b513d4df6e489ffab8ea96cfa5e75425f88c37ccda9df58e3eadc89aa7f1d87cb8424fdac1794c96122ee65f7e0946a03769d7d81ecf3a8f3f4cc5a0ff721a3413f170eaf13078d299bf593b97d041c837eb5b4eaa05e158e12524f306a68c3d27e92c7148157f9d4fac7d141c69252d7e8d2e370e544e1972bcd72908437d71a1ceaacf1f8736f54b101f735ad2268a636afeb541d83430f63d60ccec0f598bbef93729fbbc544a8cbe9452cd3be608da6d782c4415d9d3e3fa17d37795688980ed5c1afbd43cb2fa8f95509ed3ba88f22ed6190bcc29721e22a5e1b2908eb8b51a3803d369fa0c425b03793e1d7c08dd0a3acfbb95a81aebe0b4160cf521748b48aeae81e87365fa6979006178d5d9ac9124dff5f7b0d3edcca2cc61153d2a92378fc22a740774d245612c832428bf8da05e346b6fe761c79160f1a72a40614175770bf0b57729e22156b90a088716d8e2878d96d64b52234ec12e2c95edd8a1b3703029de14d85aa64591c22cc9e9b3d44f25f7c59d2d9055e599beb2ab2fe8feda1857e83dc1e37161cfbced416ea873e18f3deb864d461980a08fc4ca902838109fac648cfc3598e5ab5ac6cef34b7a91dca35305cfc7f12524950008a6c4111df7e6ea859e8d2b3fa4912e5ee6453d4fa074c23032aa6b3d65057d478fc7e5505e2b0a23050a5279ed6ea4f6628f325e04406209e057b7b467405c882bb0cb8c0e8f0f91337b9d4bf53e3144994874f4bc62900b8bf9c359187dc6240edcddf550f5c7b323e8fdff17798a33824adf3107af26a02dc9e87f2b85a5399310f3ceb69393c38af1ff9204557f2b9a9d2d11049b3a84b76b98927532a4aa52c34b0e81bd6d9826d93306f3b22762025fc907c4f8dbb6ce11697215af72263c240f4cf2d91c2f706230a24c495c01a4dbbb8443fcb132874323120893983fcb02c47080358472e2f4f270cd42d2e0dd2d91022bf9fdefd8cf95146fc4a9c0397d3ec50b12aeb4e81014b92baede1dd06e897efe2da33e77f139f286afbc982286302358f955fcdccc24820bb3dd78e183e7b526f5d007c795cf895ce70e01cb8cf92e06b822669c41d52f0c01fbb61c3bac785dfdf1f2a92f4aed8bcfafafcca89366e77f97088b03b6b54ef779ea90b1a28aeb4d44b77417606605829f4595a532f2adaa074c78fd94bd70186adb8a9952927e3be6d5ef0e7f382d928394cef11ef79ebea833e90d1162eb85612783a5c3c5dd53c030eb312f72669681ded5ee7f81a2aa8f94fa902d7257744eec14775aae8bc0522e54cc4b98cc850baeb83918e3a58d79464b82e42c4cc4e5c5fb1034d2b09a5a7e93d1be9e251890204d49da36143e355c14cb0d38588be383aa7d66391a0b45494322dd1070c9738aaefb57060e16809eb91c90aac34f0f1124cf64bbb391c0359c0b09598d84d50eee50e1f0c4af063e5c35607ae78bca4b089c456c3c5fb817e570aae4528334e6274d0f5f0032a208b3bcf852ee3ed0607f6e05a768458d2f8b4f88a6614494bd614b8479ae8cfa6f1f0c91cadd1310d10e0a2b517fd02056fd14b67bd2c4c2b8ffc032334ae0c8fb5f3851dc32ec137dfd958a44538f1e44ed324582c72aee4c5ce4f87bb5606e632b42dfaf624465218cc2fbea86a136aa5fd33f73844965e395546b3c470aa3b246979625a508756cc500ae4831c59cecad77134924f5d845b9bfb4e14b80f7d2255065ed1377fb2435d895b6687d613eb65d2855e117607332fee2504d7d0d31948772f8173e33276fa80518f0e0ebfb5b4822244bf7fc515b917b5ef81d14418bb7ed69e0e2efd1f52b491798e02befb1c47a99bb79bbaf4c510e40922a84f7eaef0f6e8a3b3d94464905c5579b68f57c001108cca13830e1a4c42364078e4ade0d4c2b9d977ad0c4a42febf8354a9d2f5f4c80793a3ba4bb4752e304069776ca441ef7b90d405bc9857e30de38d4e24b24f541c709870e80c32d49e2c0c0f0a7c397d39ee51042f5d2a82f5ac2c948a0552bf33fc500b6b5061e171c849865cd323e099a5d5e7ecbc207a9043455e1a7b39da4f91b25d14029f4ed8dfe0b0efd397243dfef1d588470c32f08521939c106ee8c4476766ae655995075d50905e2c25dfccab05cccb8306903d51ff28987ab72ce5f7eb191b3bf53c2091781e264418cf9c14891ff2c1efed6663d10438828c72a445429af720257996846a755b9e4de7bf94b962b04d8c9e4aa52b78e558c21505fce9ff397c294b9de5e92edf7db045ce87ef1bc5a6a93012e64b3ef69181968b6417860e0f046d745ac8bb9fe12e9838e1c2c0d2b9ff3189845c138a17ead9763406f79dc958a75409109f2a17761a9bf3ef747e0142fde0c831e7460c7b434b052b536758f3a015a4cb1e25ca2df9483847f7e1380e284ea03fd8e3ffaa497c1d4c7332968fe128f173e3dd12e4333ca7cb53d1ba467a07abb62e49f4d2a3acc45362d61fdabdb17ea870f7e8bd2f8d740e05b1a539ebd253cf172dd2839feb5e35073ee546a2719b4e407b4c8cd621cd51db4861d60dca976c736df041cbc9da614412f2dc37df1f906f7c49f9b7d221a472d34e5be324fc2b30896e079f772891281a51d41ad34f6264983e78ceab7de7f796d6098fe8ba8f9cedce05e1084094a755194d5088c106aa17cb0852f94bbed2ad79028fced9a2333516104c026305a36b6956f78cf6e2bccb54429ddc5696b5dfcf3d2d15d713d18da271a49a59210516b4a58aec8aacecd66b04a49c37e8ead1aff06186048b8cc015b8c1f95d5467a42d0c4645c05692089f0568015190d22d7487434cdda7b972e61c474cf18fb4be5db191bbe59fcaee1a41109450205d7a28861f8b3e2985038143a769e1dd9041af6c6d00cf1f062e844fc01c91faa71c2d4b6b29dc109714f2a2f36d153cf7a1408c4f4c2b1f93d39c603557cda52371ddd8a405277eb8568bc779f84901811dbbeb9eff25e90a84aeec68fa67efb2624d5f20c091a6b3a5564301eb9cc431374ccff9519657566fa0cc4cc2204c153c8ef0694d72ff46b57ea0f18cc5fe723f9b7a98a51f80751d32dc2ce83411457d20ce82a5c1f94a98b7515d901761ff8fec2038a01c231615d1e21dee30e2fafcc503f7a7684872b41e35728839d8094c76922185595e481e09db8d8b33a8156b0da0aa694bc2b29ce711f98c68946a38efe6340f06e68752ceaf2b2252354150fb7664e6660c7f01eb30a36231c3165448203fc5c22ad5ae2e589e77056798d2d64bfe2c55a430b71f1926a2e100ad12c857901ca9e54e3cd3eed7453be56b7fd8ae8bb78f8e00f9b6bc117c8926648daaa201fc838721a1518ae3e43491918d5239971b4336cd64f4153ff5d2bb162c0b7bc1ae4fefd4a78a9ee009b602683df1165407f93cfb9e2432c303e3ceab89b9c47c1794033de7ad8680a34831df8d3de89c4d91c4243b4d02bb3ee44318d47ff94e4fa589ccd61027f61872ca79a83bd2d19ff28fb081e7ce85f0758e688efc787f82876f0396642d1dcbc5ba4eec43bb61dc92d1fcae9ad51fb9114219d09320041d2935b95664c23a12878f70389afd7609dc5a555216ae92aa7eb4bd1a5ee4ccc20124957ab3a8c058f85d38e3a860569282db971b47aa1042ea1845b42bd92a1fdc7bccce5a0c7035e38bec89a448813fdfd21cffd18bfb84252ebc03df6bbb3a143588e62d4e9cf90bc9ba170523e3316b60149a72d0287109b834224db3c253134fc7b9008a72b881e9fd58c843f57344e16c939590772490ccad16a2166ea2fc46144115647156668e64ad5a24f1bde21c2f2bc27e4186c7c0c9e7d972fe3b88393d7b0fffadb01828f806f4a7ceba19f3cae7d23e4830dfab8c66a5ae480bbad5f97d2a7df020103d53c2b5f59973d65734399fe2f069ed39696be26a9c9a91c8495a215a4563467b45f634115d6c1e352ccaa64b5f55b34fa5d1ad91b626acd62f8b8bcc15ad5a77666a84d11ff6d07f5775a50e2cf8caa011ca1a186006e4bf25671da5c006845aa930decd5ed5ee124f097f87d434529453365269bdfde7d192ae81b324eadf3886aa759a3f6283e86894e7c05f5de0607b4a46c5a569920ba0d91c300b75f742c89b8e39039b8311dec8dbb11a6cebf99dc298e9711847a09efd7925fe55c346e0b90c29b928e9c39a7bc7ff7963f2a05da6ab622f87f42974919fe13ca8d2174286141840ae23d122168449bb7b8547360346851a9edb0e65be4646a564481a76fecdcd9d6ab9070243805d805c2a3048c2f11e95ab4753168af863b45232dce8ba78c3cee7889a8dc905b7744d51541c3f9f7002ee59f9d28a7ff9acefb502be264cfd82e0e48fdef1c9c249eda74d290f39c85f947dfc504acc5d760525a636928d2132f5827d2d133a1de3c2454717af55f0955f70df5d002133cf1050441140b9428a0b1f0333892cdfe498744033bb3ec45651df988e5a956df72a9195f87c85634803a2412fca524a1b8e298369bd1b9271760942c81e8d5cc5c21a1fe1f796c42b4ee41b83c5145a043d45177f3b9bcd9eba72c3c80291a0c8221492b064d77f9ad47ea6f38cdd0cd1264ebd15542c474800097c68193ae6b4778ef6f3086cf858a8db550666598a8ab61ebb8dcfd402f919f0ed8c8be962a296da12e820a4f4b8f796fb7820ee8d605b274c557f4e7e3b322208211b97672a5db215ed6dd4d40b899c908e3228a2cc08f9fdea5ef84171e8290a11b8524495323b2d897b73febdb6e92f636c4d3132ab37b654fb6c5a827cec68f1cf8107b4fde598c3f2988c2001eda2bf1241caa7904890a36a4272b66959ac420dc0499160ec81ae49c87390d24c783afa393a8e620511633515efdbc7606a4142a62e3193ea5ab09300083032892e759a58fdbd159130203be24bf846fe351c891788453bf3eccdfdae74ce1e8f60684877dc502695cfd3f5d59f34780cc5eb7d56df01760125897d1d186f16785ee6ace25b3d30590152ed4f256489da1b78e46a35bb3d2a77ad359294f78bb2c61897d2f30dea76cbe20bffb343cfef33392990696ef9e3c9629bb2510d790776f49fdae4d125b8630a5c2cedbff3151ce294a4342b42a95409a8c1d9792caed090744691259ca906a35ab267619a36ff1e9db1bd17992202acf5d3afbb20e85fb1baa0a29372aacc95e63c89e7f5b50131d318a78621690c27da0e08a99bba126b0194de6a9c642a1520f274f019500194c6124dc94148bcba81f6c1621a451ce6a01fcdfb72a15ea290eaa6b22008dd7cc14ba2b10c2dc87a1830437ae79ee36cc916fdc8d93da8e5cd5d353e9eb619cdb7dd1ed08191bad7cb82a6c55a4cb2c8b48d1a3d621c78e2aab496b98b550ab7751634155bb4cc53eaa7f0de9d0a8a1039dc9ccba18d8967b0dab6fc165b45d2b384384e38590a9a0e6366512df5f343dae88462119400b959b29be489c4d5a9b3b2d956ecec650239967f7dbc552604fc6c373a3b939d934de08b07f3de57983863a05bcfb823b5a44b9e6adb293cb2ce4d7c67f30101aec4499d7e12346ca166a06d48ad70d4616cf227eb1e03d761479121723553582c4502848cac811137527d343f8d1f8418ca132a1dc3c69d732693a94a6fdde88a21c9f2e1e1617153cf40d86bddce448e3fe70718e56b1a58cd6257fc7142097cfd70066754e946ff79fffd96d29f749f974b284eb56125bd391b8896bbe9e8017e2b3b372d31a046b556630e5150fa7fad523ff5d4122b07a82a0ac44de6c6f51599ff484fe43dedb7d0bf9b34d009a9e46151bb026366a7cdcdea00370d3cc4457f659152f99138aa0c95801cb48d84d70f7fcde621a8f55712367a703c059fad6785d0531ef2cf82db15672aa5aa2b0bcab1737fe2a5d28d06a721889575353eada7938982cae198ea07420967bd078b415887f0f8679f45e2de700ef23f153f68df5ef2490e24b0d57ab5b22af4c703976258b9fcd839b4bc056bc169fa40a5dea841845373744b124cbe865445e0c60d3ebab73ba090efd51d3558479ac8a50071908b5a7ed66854dd560d50f2b3122aca5b62b50ab5b298b86891e75e08952e3573f0a69907b7f0694c2bfa735b460b879860d2bad6943e64e5213251582f839f0b5c6fb128a1efa9ea9403ea29f4f89462186b71a00e5382d06da7fba7d6abe1f729542f2132590285490124051ea2a8e603cd2ba374e6a96f3afff2e60aee226d2b3c640b92d0d6bea3fb855d03c05e181988f3a18b6c942943d4ce4e850e46fff28bc3c196abe983789bb1829b1d00c4bf04eb07bf287f1d0272585fbf36cefcf8c7c7e2404d0c368d6aed</script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>JVM</category>
      </categories>
      <tags>
        <tag>JVM</tag>
      </tags>
  </entry>
  <entry>
    <title>JVM-垃圾收集02【垃圾收集算法】</title>
    <url>/posts/1dbe9ae6.html</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="密码不正确，请重新输入！" data-whm="文章不能被校验, 不过您还是能看看解密后的内容！">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">该文章未完成或暂不公开, 请输入密码查看。</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="b1a7430c03b61fa5053bda368f999919b63a01ca25f6c03b649bf41836959aee"></script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>JVM</category>
      </categories>
      <tags>
        <tag>JVM</tag>
      </tags>
  </entry>
  <entry>
    <title>调优工具详解</title>
    <url>/posts/b0da255.html</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="密码不正确，请重新输入！" data-whm="文章不能被校验, 不过您还是能看看解密后的内容！">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">该文章未完成或暂不公开, 请输入密码查看。</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="4fd475fec0a10e62b34e1a5504b2450d0e25113083fda4674a71322cba44505b"></script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>JVM</category>
      </categories>
      <tags>
        <tag>JVM</tag>
      </tags>
  </entry>
  <entry>
    <title>行锁原理</title>
    <url>/posts/e4de6087.html</url>
    <content><![CDATA[<blockquote>
<p>当一个事务锁住了一行数据的时候，其他的事务不能操作这一行数据，那它到底是锁住了这一行数据，还是锁住了这一个字段，还是锁住了别的什么东西呢？</p>
</blockquote>
<p><strong>注意</strong>：虽然InnoDB默认的是行锁，但是行锁是实现在索引上的，而不是锁在物理行记录上。所以，<strong>即使表设置了索引，但是如果访问没有命中索引，也无法使用行锁</strong>，将要退化为表锁。</p>
<h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>首先我们准备三张表，一张没有索引的 test1，一张有主键索引的 test2，一张有唯一索引的 test3。且表中均只有int 类型的 id 和 varchar 类型的 name，一共四条数据，id为1-4。</p>
<p><strong>没有索引的 test1测试</strong></p>
<table>
<thead>
<tr>
<th>Transaction1</th>
<th>Transaction2</th>
</tr>
</thead>
<tbody><tr>
<td>begin;                                                        SELECT * FROM test1 WHERE id =1 FOR UPDATE;</td>
<td></td>
</tr>
<tr>
<td></td>
<td>select * from test1 where id=3 for update; – 阻塞                                                INSERT INTO test1 (<code>id</code>, <code>name</code>) VALUES (5, ‘5’);– 阻塞</td>
</tr>
</tbody></table>
<p>如上表，现在我们在两个会话里面手工开启两个事务。 在第一个事务里面，我们通过 where id =1 锁住第一行数据。 在第二个事务里面，我们尝试给 id=3 的这一行数据加锁。</p>
<p>但是真正执行的时候会发现，事物2这个加锁的操作被阻塞了。这就有点奇怪了，第一个事务锁住了 id=1 的这行数据，为什么我不能操作 id=3 的数据呢？ 而且插入 id=5。它也被阻塞了。实际上这里整张表都被锁住了，所以InnoDB 的锁锁住的应该不是记录。</p>
<p><strong>主键索引的 test2测试</strong></p>
<table>
<thead>
<tr>
<th>Transaction1</th>
<th>Transaction2</th>
</tr>
</thead>
<tbody><tr>
<td>begin;                                                        SELECT * FROM test2 WHERE id =1 FOR UPDATE;</td>
<td></td>
</tr>
<tr>
<td></td>
<td>select * from test2 where id=1 for update; – 阻塞                                                select * from test2 where id=4 for update;– 成功</td>
</tr>
</tbody></table>
<p>第一种情况，使用相同的 id 值去加锁，冲突；使用不同的 id 加锁，可以加锁成功。那么，既然不是锁定一行数据，有没有可能是锁住了 id 的这个字段呢？</p>
<p><strong>唯一索引的 test3测试（name 上创建了一个唯一索引）</strong></p>
<table>
<thead>
<tr>
<th>Transaction1</th>
<th>Transaction2</th>
</tr>
</thead>
<tbody><tr>
<td>begin;                                                        SELECT * FROM test3 WHERE name= ‘4’ FOR UPDATE;</td>
<td></td>
</tr>
<tr>
<td></td>
<td>select * from test3 where name= ‘4’ for update; – 阻塞                                                select * from test3 where id=4 for update;– 阻塞</td>
</tr>
</tbody></table>
<p>在第一个事务里面，我们通过 name 字段去锁定值是 4 的这行数据。 </p>
<p>在第二个事务里面，尝试获取一样的排它锁，肯定是失败的，这个不用怀疑。 在这里我们怀疑 InnoDB 锁住的是字段，所以这次我换一个字段，用 id=4 去给这行数据加锁，但还是被阻塞了。说明锁住的是字段的这个推测也是错的，否则就不会出现第一个事务锁住了 name，第二个字段锁住 id 失败的情况。</p>
<p><strong>既然锁住的不是 记录，也不是 行，InnoDB 里面锁住的到底是什么呢？通过案例我们知道这三张表的结构区别就在于索引，而InnoDB 的行锁，就是通过锁住索引来实现的。</strong></p>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>那么我们还有两个问题没有解决： </p>
<ul>
<li><p>为什么表里面没有索引的时候，锁住一行数据会导致锁表？ 或者说，如果锁住的是索引，一张表没有索引怎么办？ 所以，一张表有没有可能没有索引？ </p>
<p>1）如果我们定义了主键(PRIMARY KEY)，那么 InnoDB 会选择主键作为聚集索引。 </p>
<p>2）如果没有显式定义主键，则 InnoDB 会选择第一个不包含有 NULL 值的唯一索引作为主键索引。 </p>
<p>3）如果也没有这样的唯一索引，则 InnoDB 会选择内置 6 字节长的 ROWID 作为隐藏的聚集索引，它会随着行记录的写入而主键递增。 </p>
<p>所以，为什么锁表，是因为查询没有使用索引，会进行全表扫描，然后把每一个隐藏的聚集索引都锁住了。 </p>
</li>
<li><p>为什么通过唯一索引给数据行加锁，主键索引也会被锁住？ </p>
<p>在 InnoDB 里面，在辅助索引里面，索引存储的是二级索引和主键的值。比如name=4，存储的是name的索引和主键 id 的值 4。 而主键索引里面除了索引之外，还存储了完整的数据。所以我们通过辅助索引锁定一行数据的时候，它跟我们检索数据的步骤是一样的，会通过主键值找到主键索引，然后也锁定。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>JVM-目录</title>
    <url>/posts/9acbefb.html</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="密码不正确，请重新输入！" data-whm="文章不能被校验, 不过您还是能看看解密后的内容！">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">该文章未完成或暂不公开, 请输入密码查看。</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="40b8860cbe20c3f22f4fab461d3f7ad8e05e26c0b32ba1072e28752c1997fd5a">249d63f61f66a83e2cce6900f57704ca776377425830ad2ddc193d4dce550f4928defdab1ee4c68ec938af19bd1fd16b099fb839213ba76531d8c066b09e941b3bf7118c8a00c9f1ae59eecdb54abe133c5ad71c725db12e34408e9f9f2abf8b91cb24fe67ab52836f643548bfeb9eaa94b2c39abf9c46857c1bb4aed8e83cf5</script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>JVM</category>
      </categories>
      <tags>
        <tag>JVM</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL基础</title>
    <url>/posts/86e336c0.html</url>
    <content><![CDATA[<h1 id="sql执行流程"><a href="#sql执行流程" class="headerlink" title="sql执行流程"></a>sql执行流程</h1><blockquote>
<p><a href="https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&mid=2247485097&idx=1&sn=84c89da477b1338bdf3e9fcd65514ac1&chksm=cea24962f9d5c074d8d3ff1ab04ee8f0d6486e3d015cfd783503685986485c11738ccb542ba7&token=79317275&lang=zh_CN%23rd">sql执行流程</a></p>
</blockquote>
<ul>
<li><p><strong>连接器：</strong> 身份认证和权限相关(登录 MySQL 的时候)。</p>
</li>
<li><p><strong>查询缓存：</strong> 执行查询语句的时候，会先查询缓存（MySQL 8.0 版本后移除，因为这个功能不太实用）。</p>
</li>
<li><p><strong>分析器：</strong> 没有命中缓存的话，SQL 语句就会经过分析器，分析器说白了就是要先看你的 SQL 语句要干嘛，再检查你的 SQL 语句语法是否正确。</p>
</li>
<li><p><strong>优化器：</strong>按照 MySQL 认为最优的方案去执行。</p>
</li>
<li><p><strong>执行器：</strong> 执行语句，然后从存储引擎返回数据。</p>
</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li>MySQL 主要分为 Server 层和引擎层，<strong>Server 层主要包括连接器、查询缓存、分析器、优化器、执行器，同时还有一个日志模块（binlog），这个日志模块所有执行引擎都可以共用,redolog 只有 InnoDB 有。</strong></li>
<li>引擎层是插件式的，目前主要包括，MyISAM、InnoDB、Memory 等。</li>
<li><strong>查询过程如下</strong>：权限校验—&gt;查询缓存—&gt;分析器—&gt;优化器—&gt;权限校验—&gt;执行器—&gt;引擎</li>
<li><strong>更新等语句执行流程如下</strong>：分析器—-&gt;权限校验—-&gt;执行器—&gt;引擎—redo log prepare—&gt;binlog—&gt;redo log commit</li>
</ul>
<h1 id="什么是事务"><a href="#什么是事务" class="headerlink" title="什么是事务?"></a>什么是事务?</h1><blockquote>
<p>事务是逻辑上的一组操作，要么都执行，要么都不执行。</p>
</blockquote>
<p>事务最经典也经常被拿出来说例子就是转账了。假如小明要给小红转账1000元，这个转账会涉及到两个 关键操作就是:将小明的余额减少1000元，将小红的余额增加1000元。万一在这两个操作之间突然出现 错误比如银行系统崩溃，导致小明余额减少而小红的余额没有增加，这样就不对了。事务就是保证这两个关键操作要么都成功，要么都要失败。</p>
<h2 id="事物的四大特性-ACID"><a href="#事物的四大特性-ACID" class="headerlink" title="事物的四大特性(ACID)"></a>事物的四大特性(ACID)</h2><ul>
<li><p><strong>原子性(Atomicity):</strong> 事务是最小的执行单位，不允许分割。事务的原子性确保动作要么全部完成，要么完全不起作用;</p>
</li>
<li><p><strong>一致性(Consistency):</strong> 执行事务前后，数据保持一致，多个事务对同一个数据读取的结果是相同的;</p>
</li>
<li><p><strong>隔离性(Isolation):</strong> 并发访问数据库时，一个用户的事务不被其他事务所干扰，各并发事务之间数据库是独立的;</p>
</li>
<li><p><strong>持久性(Durability):</strong> 一个事务被提交之后。它对数据库中数据的改变是持久的，即使数据库发生故障也不应该对其有任何影响。</p>
</li>
</ul>
<h2 id="并发事务带来哪些问题"><a href="#并发事务带来哪些问题" class="headerlink" title="并发事务带来哪些问题?"></a>并发事务带来哪些问题?</h2><ul>
<li><p><strong>脏读(Dirty read):</strong> </p>
<p><strong>读取到其他事务未提交的数据的情况，我们把它叫做脏读。</strong></p>
<p>当一个事务正在访问数据并且对数据进行了修改，而这种修改还没有提交到数据库中，这时另外一个事务也访问了这个数据，然后使用了这个数据。因为这个数据是还没有提交的数据，那么另外一个事务读到的这个数据是“脏数据”，依据“脏数据”所做的操作可能是不正确的。</p>
</li>
<li><p><strong>丢失修改(Lost to modify):</strong></p>
<p>指在一个事务读取一个数据时，另外一个事务也访问了该数据， 那么在第一个事务中修改了这个数据后，第二个事务也修改了这个数据。这样第一个事务内的修改结果就被丢失，因此称为丢失修改。 例如:事务1读取某表中的数据A=20，事务2也读取 A=20，事务1修改A=A-1，事务2也修改A=A-1，最终结果A=19，事务1的修改被丢失。</p>
</li>
<li><p><strong>不可重复读(Unrepeatableread):</strong> </p>
<p><strong>一个事务读取到了其他事务已提交的数据导致前后两次读取数据不一致的情况，我们把它叫做不可重复读。</strong> </p>
<p>指在一个事务内多次读同一数据。在这个事务还没有结束时，另一个事务也访问该数据。那么，在第一个事务中的两次读数据之间，由于第二个事务的修改导致第一个事务两次读取的数据可能不太一样。这就发生了在一个事务内两次读到的数据是不一样的情况，因此称为不可重复读。</p>
</li>
<li><p><strong>幻读(Phantom read):</strong></p>
<p> 幻读与不可重复读类似。它发生在一个事务(T1)读取了几行数据，接着另一个并发事务(T2)插入了一些数据时。在随后的查询中，第一个事务(T1)就会发现多了 一些原本不存在的记录，就好像发生了幻觉一样，所以称为幻读。</p>
</li>
</ul>
<p>不可重复读和幻读区别:</p>
<p><strong>不可重复读的重点是修改比如多次读取一条记录发现其中某些列的值被修改，幻读的重点在于新增或者删除，比如多次读取一条记录发现记录增多或减少了。</strong></p>
<h2 id="事务隔离级别有哪些-MySQL的默认隔离级别是"><a href="#事务隔离级别有哪些-MySQL的默认隔离级别是" class="headerlink" title="事务隔离级别有哪些?MySQL的默认隔离级别是?"></a>事务隔离级别有哪些?MySQL的默认隔离级别是?</h2><p><strong>SQL 标准定义了四个隔离级别：</strong></p>
<ul>
<li><p>**READ-UNCOMMITTED(读未提交)**： 最低的隔离级别，允许读取尚未提交的数据变更，可能会导致脏读、幻读或不可重复读。</p>
</li>
<li><p>**READ-COMMITTED(读已提交)**： 允许读取并发事务已经提交的数据，可以阻⽌脏读，但是幻读或不可重复读仍有可能发⽣。</p>
</li>
<li><p>**REPEATABLE-READ(可重复读)**： 对同⼀字段的多次读取结果都是⼀致的，除⾮数据是被本身事务⾃⼰所修改，可以阻⽌脏读和不可重复读，但幻读仍有可能发⽣。</p>
</li>
<li><p>**SERIALIZABLE(可串⾏化)**： 最⾼的隔离级别，完全服从ACID的隔离级别。所有的事务依次逐个执⾏，这样事务之间就完全不可能产⽣⼲扰，也就是说，该级别可以防⽌脏读、不可重复读以及幻读。</p>
</li>
</ul>
<table>
<thead>
<tr>
<th>隔离级别</th>
<th>脏读</th>
<th>不可重复读</th>
<th>幻读</th>
</tr>
</thead>
<tbody><tr>
<td><strong>READ-UNCOMMITTED(读未提交)</strong></td>
<td>√</td>
<td>√</td>
<td>√</td>
</tr>
<tr>
<td><strong>READ-COMMITTED(读已提交)</strong></td>
<td>×</td>
<td>√</td>
<td>√</td>
</tr>
<tr>
<td><strong>REPEATABLE-READ(可重复读)</strong></td>
<td>×</td>
<td>×</td>
<td><strong>√(对InnoDB不可能)</strong></td>
</tr>
<tr>
<td><strong>SERIALIZABLE(可串⾏化)</strong></td>
<td>×</td>
<td>×</td>
<td>×</td>
</tr>
</tbody></table>
<p>上面的可能理解起来比较复杂，你也可以这么理解：</p>
<p><strong>读未提交</strong>：一个事务还没提交时，它做的变更就能被别的事务看到。 </p>
<p><strong>读已提交</strong>：一个事务提交之后，它做的变更才会被其他事务看到。</p>
<p><strong>可重复读</strong>：一个事务执行过程中看到的数据，总是跟这个事务在启动时看到的数据是 一致的。当然在可重复读隔离级别下，未提交变更对其他事务也是不可见的。</p>
<p><strong>串行化</strong>：顾名思义是对于同一行记录，“写”会加“写锁”，“读”会加“读锁”。当出 现读写锁冲突的时候，后访问的事务必须等前一个事务执行完成，才能继续执行。</p>
<p>其中“读提交”和“可重复读”比较难理解，所以我用一个例子说明这几种隔离级别。假设 数据表 T 中只有一列，其中一行的值为 1，下面是按照时间顺序执行两个事务的行为。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; create table T(c int) engine&#x3D;InnoDB; </span><br><span class="line">mysql&gt; insert into T(c) values(1);</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>事物A</th>
<th>事物B</th>
</tr>
</thead>
<tbody><tr>
<td>启动事物A，查询到值1</td>
<td>启动事物B</td>
</tr>
<tr>
<td></td>
<td>查询到值1</td>
</tr>
<tr>
<td></td>
<td>将1改为2</td>
</tr>
<tr>
<td>读取到值V1</td>
<td></td>
</tr>
<tr>
<td></td>
<td>提交事物B</td>
</tr>
<tr>
<td>读取到值V2</td>
<td></td>
</tr>
<tr>
<td>提交事物A</td>
<td></td>
</tr>
<tr>
<td>读取到值V3</td>
<td></td>
</tr>
</tbody></table>
<p>我们来看看在不同的隔离级别下，事务 A 会有哪些不同的返回结果，也就是图里面 V1、 V2、V3 的返回值分别是什么。</p>
<p><strong>读未提交</strong>：V1 的值就是 2。这时候事务 B 虽然还没有提交，但是 结果已经被 A 看到了。因此，V2、V3 也都是 2。</p>
<p><strong>读已提交</strong>：V1 是 1，V2 的值是 2。事务 B 的更新在提交后才能被 A 看到。所以， V3 的值也是 2。</p>
<p><strong>可重复读</strong>：V1、V2 是 1，V3 是 2。之所以 V2 还是 1，遵循的就 是这个要求:事务在执行期间看到的数据前后必须是一致的。</p>
<p><strong>可串行话</strong>：在事务 B 执行“将 1 改成 2”的时候，会被锁住。直到事务A提交后，事务B才可以继续执行。所以从A的角度看， V1、V2 值是 1，V3 的值 是 2。</p>
<h1 id="MySQL锁"><a href="#MySQL锁" class="headerlink" title="MySQL锁"></a>MySQL锁</h1><h2 id="全局锁"><a href="#全局锁" class="headerlink" title="全局锁"></a>全局锁</h2><p>顾名思义，全局锁就是对整个数据库实例加锁。MySQL 提供了一个加全局读锁的方法，命令是 Flush tables with read lock (FTWRL)。当你需要让整个库处于只读状态的时候，可以使用这个命令，之后其他线程的以下语句会被阻塞：数据更新语句(数据的增删改)、数 据定义语句(包括建表、修改表结构等)和更新类事务的提交语句。</p>
<p><strong>全局锁的典型使用场景是，做全库逻辑备份。</strong>也就是把整库每个表都 select 出来存成文本。</p>
<h2 id="锁的粒度"><a href="#锁的粒度" class="headerlink" title="锁的粒度"></a>锁的粒度</h2><p>InnoDB 里面既有行级别的锁，又有表级别的锁。</p>
<ul>
<li>表锁，顾名思义，是锁住一张表；</li>
<li>行锁就是锁住表里面的一行数据。</li>
</ul>
<h3 id="几个思考点"><a href="#几个思考点" class="headerlink" title="几个思考点"></a><strong>几个思考点</strong></h3><ul>
<li><p>锁定粒度，表锁肯定是大于行锁的。</p>
</li>
<li><p>那么加锁效率，表锁应该是大于行锁</p>
<p>表锁只需要直接锁住这张表就行了，而行锁，还需要在表里面去检索这一行数据，所以表锁的加锁效率更高。 </p>
</li>
<li><p>表锁的冲突概率大于行锁？ </p>
<p>因为当我们锁住一张表的时候，其他任何一个事务都不能操作这张表。但是我们锁住了表里面的一行数据的时候，其他的事务还可以来操作表里面的其他没有被锁定的行，所以表锁的冲突概率更大。 </p>
</li>
</ul>
<h2 id="行级锁"><a href="#行级锁" class="headerlink" title="行级锁"></a>行级锁</h2><ul>
<li><p><strong>共享锁（s）</strong></p>
<p><strong>共享锁（Share Locks，简记为S）又被称为读锁</strong>，其他用户<strong>可以并发读取数据</strong>，但<strong>任何事务都不能获取数据上的排他锁，直到已释放所有共享锁。</strong></p>
<p>共享锁(S锁)又称为读锁，若事务T对数据对象A加上S锁，则事务T只能读A；其他事务只能再对A加S锁，而不能加X锁，直到T释放A上的S锁。这就保证了其他事务可以读A，但在T释放A上的S锁之前不能对A做任何修改。</p>
<p>我们可以用 select …… lock in share mode; 的方式手工加上一把读锁。 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT * FROM student WHERE id&#x3D;1 LOCK IN SHARE MODE;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>排他锁（X）：</strong></p>
<p><strong>排它锁（(Exclusive lock,简记为X锁)）又称为写锁</strong>，若事务T对数据对象A加上X锁，则<strong>只允许T读取和修改A，其它任何事务都不能再对A加任何类型的锁，直到T释放A上的锁</strong>。它防止任何其它事务获取资源上的锁，直到在事务的末尾将资源上的原始锁释放为止。在更新操作(INSERT、UPDATE 或 DELETE)过程中始终自动应用排它锁。还有一种是手工加锁，我们用一个 FOR UPDATE 给一行数据加上一个排它锁：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT * FROM student where id&#x3D;1 FOR UPDATE;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="表级锁"><a href="#表级锁" class="headerlink" title="表级锁"></a>表级锁</h2><blockquote>
<p>当我们给一行数据加上共享锁之前，数据库会自动在这张表上面加一个意向共享锁。 </p>
<p>当我们给一行数据加上排他锁之前，数据库会自动在这张表上面加一个意向排他锁。 </p>
</blockquote>
<ul>
<li><strong>意向共享锁（IS）：</strong> 表示事务准备给数据行记入共享锁，事务在一个数据行加共享锁前必须先取得该表的IS锁。</li>
<li><strong>意向排他锁（IX）：</strong> 表示事务准备给数据行加入排他锁，事务在一个数据行加排他锁前必须先取得该表的IX锁。</li>
</ul>
<p><strong>为什么会有意向锁？</strong></p>
<p>1、我们有了表级别的锁，在InnoDB 里面就可以支持更多粒度的锁。</p>
<p>2、如果说没有意向 锁的话，当我们准备给一张表加上表锁的时候，我们首先必须先要去判断有没其他的事务锁定了其中了某些行，如果有的话，肯定不能加上表锁。那么这个时候我们就要去扫描整张表才能确定能不能成功加上一个表锁，如果数据量特别大，比如有上千万的数据的时候，加表锁的效率是不是很低？ 但是我们引入了意向锁之后就不一样了。我只要判断这张表上面有没有意向锁，如果有，就直接返回失败。如果没有，就可以加锁成功。所以 InnoDB 里面的表锁，我们 可以把它理解成一个标志。就像火车上厕所有没有人使用的灯，是用来提高加锁的效率的。</p>
<h2 id="行锁实现原理"><a href="#行锁实现原理" class="headerlink" title="行锁实现原理"></a>行锁实现原理</h2><p>详情请查看：<a href="./e4de6087.html">行锁原理</a></p>
<h2 id="锁算法"><a href="#锁算法" class="headerlink" title="锁算法"></a>锁算法</h2><p>// TODO</p>
<h2 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h2><p>// TODO</p>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>01.MyBatis面试</title>
    <url>/posts/d39c0168.html</url>
    <content><![CDATA[<h4 id="MyBatis是什么？"><a href="#MyBatis是什么？" class="headerlink" title="MyBatis是什么？"></a>MyBatis是什么？</h4><p>MyBatis 是一款优秀的持久层框架，一个半 ORM（对象关系映射）框架，它支持定制化 SQL、存储过程以及高级映射。MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集。MyBatis 可以使用简单的 XML 或注解来配置和映射原生类型、接口和 Java 的 POJO（Plain Old Java Objects，普通老式 Java 对象）为数据库中的记录。</p>
<h4 id="ORM是什么"><a href="#ORM是什么" class="headerlink" title="ORM是什么"></a>ORM是什么</h4><p>ORM（Object Relational Mapping），对象关系映射，是一种为了解决关系型数据库数据与简单Java对（POJO）的映射关系的技术。简单的说，ORM是通过使用描述对象和数据库之间映射的元数据，将程序中的对象自动持久化到关系型数据库中。</p>
<h4 id="为什么说Mybatis是半自动ORM映射工具？它与全自动的区别在哪里？"><a href="#为什么说Mybatis是半自动ORM映射工具？它与全自动的区别在哪里？" class="headerlink" title="为什么说Mybatis是半自动ORM映射工具？它与全自动的区别在哪里？"></a>为什么说Mybatis是半自动ORM映射工具？它与全自动的区别在哪里？</h4><p>Hibernate属于全自动ORM映射工具，使用Hibernate查询关联对象或者关联集合对象时，可以根据对象关系模型直接获取，所以它是全自动的。</p>
<p>而Mybatis在查询关联对象或关联集合对象时，需要手动编写sql来完成，所以，称之为半自动ORM映射工具。</p>
<h4 id="MyBatis编程步骤是什么样的？"><a href="#MyBatis编程步骤是什么样的？" class="headerlink" title="MyBatis编程步骤是什么样的？"></a>MyBatis编程步骤是什么样的？</h4><p>1、 创建SqlSessionFactory</p>
<p>2、 通过SqlSessionFactory创建SqlSession</p>
<p>3、 通过sqlsession执行数据库操作</p>
<p>4、 调用session.commit()提交事务</p>
<p>5、 调用session.close()关闭会话</p>
<h4 id="MyBatis的工作原理"><a href="#MyBatis的工作原理" class="headerlink" title="MyBatis的工作原理"></a>MyBatis的工作原理</h4><p>在学习 MyBatis 程序之前，需要了解一下 MyBatis 工作原理，以便于理解程序。MyBatis 的工作原理如下图</p>
<p><img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL0pvdXJXb24vaW1hZ2UvbWFzdGVyL015QmF0aXMlRTYlQTElODYlRTYlOUUlQjYlRTYlODAlQkIlRTclQkIlOTMvTXlCYXRpcyVFNSVCNyVBNSVFNCVCRCU5QyVFNSU4RSU5RiVFNyU5MCU4Ni5wbmc.png" alt="MyBatis工作原理"></p>
<p>1）读取 MyBatis 配置文件：mybatis-config.xml 为 MyBatis 的全局配置文件，配置了 MyBatis 的运行环境等信息，例如数据库连接信息。</p>
<p>2）加载映射文件。映射文件即 SQL 映射文件，该文件中配置了操作数据库的 SQL 语句，需要在 MyBatis 配置文件 mybatis-config.xml 中加载。mybatis-config.xml 文件可以加载多个映射文件，每个文件对应数据库中的一张表。</p>
<p>3）构造会话工厂：通过 MyBatis 的环境等配置信息构建会话工厂 SqlSessionFactory。</p>
<p>4）创建会话对象：由会话工厂创建 SqlSession 对象，该对象中包含了执行 SQL 语句的所有方法。</p>
<p>5）Executor 执行器：MyBatis 底层定义了一个 Executor 接口来操作数据库，它将根据 SqlSession 传递的参数动态地生成需要执行的 SQL 语句，同时负责查询缓存的维护。</p>
<p>6）MappedStatement 对象：在 Executor 接口的执行方法中有一个 MappedStatement 类型的参数，该参数是对映射信息的封装，用于存储要映射的 SQL 语句的 id、参数等信息。</p>
<p>7）输入参数映射：输入参数类型可以是 Map、List 等集合类型，也可以是基本数据类型和 POJO 类型。输入参数映射过程类似于 JDBC 对 preparedStatement 对象设置参数的过程。</p>
<p>8）输出结果映射：输出结果类型可以是 Map、 List 等集合类型，也可以是基本数据类型和 POJO 类型。输出结果映射过程类似于 JDBC 对结果集的解析过程。</p>
<h4 id="和-的区别是什么？"><a href="#和-的区别是什么？" class="headerlink" title="#{}和${}的区别是什么？"></a>#{}和${}的区别是什么？</h4><ul>
<li><p><strong>${} 是 Properties ⽂件中的变量占位符</strong>，它可以⽤于标签属性值和 sql 内部，属于静态⽂本替换，⽐如${driver}会被静态替换为 com.mysql.jdbc.Driver 。</p>
</li>
<li><p><strong>#{} 是 sql 的参数占位符</strong>，Mybatis 会将 sql 中的 #{} 替换为?号，在 sql 执⾏前会使⽤PreparedStatement 的参数设置⽅法，按序给 sql 的?号占位符设置参数值，⽐如ps.setInt(0, parameterValue)， #{item.name} 的取值⽅式为使⽤反射从参数对象中获取item 对象的 name 属性值，相当于 param.getItem().getName() 。</p>
</li>
</ul>
<p>简单来说：**${}是字符串替换，#{}是预编译处理。一般用# {}防止sql注入问题。**</p>
<h4 id="Xml-映射⽂件中，除了常⻅的-select-insert-updae-delete-标签之外，还有哪些标签？"><a href="#Xml-映射⽂件中，除了常⻅的-select-insert-updae-delete-标签之外，还有哪些标签？" class="headerlink" title="Xml 映射⽂件中，除了常⻅的 select|insert|updae|delete 标签之外，还有哪些标签？"></a>Xml 映射⽂件中，除了常⻅的 select|insert|updae|delete 标签之外，还有哪些标签？</h4><p>还有很多其他的标签， <resultMap> 、 <parameterMap> 、 <sql> 、 <include> 、 <selectKey> ，加上动态 sql的 9 个标签，<code> trim|where|set|foreach|if|choose|when|otherwise|bind</code> 等，其中sql为⽚段标签，通过 <include> 标签引⼊ sql ⽚段， <selectKey> 为不⽀持⾃增的主键⽣成策略标签。</p>
<h4 id="如何获取自增主键"><a href="#如何获取自增主键" class="headerlink" title="如何获取自增主键"></a>如何获取自增主键</h4><ul>
<li>注解</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Insert(&quot;insert into user (name) values  (#&#123;name&#125; )&quot;)</span></span><br><span class="line"><span class="meta">@Options(useGeneratedKeys = true,keyProperty =&quot;id&quot;,keyColumn = &quot;id&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span>  <span class="keyword">int</span>  <span class="title">inseartUser</span><span class="params">(User  user)</span></span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>xml</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">”indetifyId”</span>  <span class="attr">useGeneratedKeys</span>=<span class="string">”true”</span> <span class="attr">keyProperty</span>=<span class="string">”id”</span> <span class="attr">keyColumn</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>MyBatis</category>
      </categories>
      <tags>
        <tag>MyBatis</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL导航</title>
    <url>/posts/ac0d7049.html</url>
    <content><![CDATA[<p><a href="./86e336c0.html">01.MySQL基础</a></p>
<p><a href="./c468c6f9.html">02.MySQL索引</a></p>
<p><a href="./c468c6f9.html">03.Explain关键字及索引使用分析</a></p>
<p><a href="./.html">04.待定</a></p>
<p><a href="./37c83307.html">05.SQL优化</a></p>
<p><a href="./e4de6087.html">06.行锁原理</a></p>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis主从复制</title>
    <url>/posts/b7e51ad7.html</url>
    <content><![CDATA[<h1 id="什么是主从复制"><a href="#什么是主从复制" class="headerlink" title="什么是主从复制"></a>什么是主从复制</h1><p><strong>主从复制</strong>，是指将一台 Redis 服务器的数据，复制到其他的 Redis 服务器。前者称为 <strong>主节点(master)**，后者称为 **从节点(slave)**。Master以写为主，Slave以读为主。一般用来实现读写分离和容灾恢复且数据的复制是 **单向</strong> 的，只能由主节点到从节点。Redis 主从复制支持 <strong>主从同步</strong> 和 <strong>从从同步</strong> 两种，后者是 Redis 后续版本新增的功能，以减轻主节点的同步负担。</p>
<h1 id="主从复制主要的作用"><a href="#主从复制主要的作用" class="headerlink" title="主从复制主要的作用"></a>主从复制主要的作用</h1><ul>
<li><strong>数据冗余：</strong> 主从复制实现了数据的热备份，是持久化之外的一种数据冗余方式。</li>
<li><strong>故障恢复：</strong> 当主节点出现问题时，可以由从节点提供服务，实现快速的故障恢复 *(实际上是一种服务的冗余)*。</li>
<li><strong>负载均衡：</strong> 在主从复制的基础上，配合读写分离，可以由主节点提供写服务，由从节点提供读服务 <em>（即写 Redis 数据时应用连接主节点，读 Redis 数据时应用连接从节点）</em>，分担服务器负载。尤其是在写少读多的场景下，通过多个从节点分担读负载，可以大大提高 Redis 服务器的并发量。</li>
<li><strong>高可用基石：</strong> 除了上述作用以外，主从复制还是哨兵和集群能够实施的 <strong>基础</strong>，因此说主从复制是 Redis 高可用的基础。</li>
</ul>
<h1 id="如何实现"><a href="#如何实现" class="headerlink" title="如何实现"></a>如何实现</h1><p>原则上就是配从(库)不配主(库)，所以只需要在从库输入如下命令即可。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">配置从库</span></span><br><span class="line">slaveof 主库ip 主库端口</span><br><span class="line"><span class="meta">#</span><span class="bash">查看主从信息</span></span><br><span class="line">info replication</span><br></pre></td></tr></table></figure>

<p><strong>注：默认情况下，每次与master断开后，都需要自行重新连接，除非你配置进redis.conf文件</strong></p>
<p>配置只要在从库的redis.conf文件加上下面的语句即可：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> replicaof &lt;masterip&gt; &lt;masterport&gt;</span></span><br><span class="line">replicaof 127.0.0.1 6380</span><br></pre></td></tr></table></figure>

<h1 id="常用的主从方式"><a href="#常用的主从方式" class="headerlink" title="常用的主从方式"></a>常用的主从方式</h1><h2 id="一主多仆"><a href="#一主多仆" class="headerlink" title="一主多仆"></a>一主多仆</h2><p>含义：就是一个Master节点多个Slave节点</p>
<p><img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/image-20210304172254735.png" alt="一主多仆"></p>
<p>通过<code>info replication</code>查看主从信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Replication</span></span><br><span class="line">role:master</span><br><span class="line">connected_slaves:0</span><br><span class="line">master_replid:f6baff9abfda12ca58048cfce4b0e2c1f4683da1</span><br><span class="line">master_replid2:e8fe596d47d9d1d923d56d884b28128b78d2c1e0</span><br><span class="line">master_repl_offset:0</span><br><span class="line">second_repl_offset:1</span><br><span class="line">repl_backlog_active:0</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:0</span><br><span class="line">repl_backlog_histlen:0</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Replication</span></span><br><span class="line">role:slave</span><br><span class="line">master_host:127.0.0.1</span><br><span class="line">master_port:6379</span><br><span class="line">master_link_status:down</span><br><span class="line">master_last_io_seconds_ago:-1</span><br><span class="line">master_sync_in_progress:0</span><br><span class="line">slave_repl_offset:0</span><br><span class="line">master_link_down_since_seconds:1585217521</span><br><span class="line">slave_priority:100</span><br><span class="line">slave_read_only:1</span><br><span class="line">connected_slaves:0</span><br><span class="line">master_replid:adbec19afa734e84a333b07ea2f33c43c73fe743</span><br><span class="line">master_replid2:0000000000000000000000000000000000000000</span><br><span class="line">master_repl_offset:0</span><br><span class="line">second_repl_offset:-1</span><br><span class="line">repl_backlog_active:0</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:0</span><br><span class="line">repl_backlog_histlen:0</span><br></pre></td></tr></table></figure>

<p><strong>注意:</strong></p>
<ol>
<li><p><strong>第一次</strong>slave1 和slave2切入点，是<strong>全量复制</strong>，<strong>之后是增量复制</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/suolongY/warehouse@master/zk/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0NzY2ODgz,size_16,color_FFFFFF,t_70-20201122135027214.png" alt="一主二仆"></p>
</li>
<li><p>主机可以写，但是<strong>从机不可以写</strong>，从机<strong>只能读</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/suolongY/warehouse@master/zk/20200326181813787.png" alt="从机写的报错"></p>
</li>
<li><p>主机shutdowm后从机待机状态，等主机回来后，主机新增记录从机可以顺利复制。</p>
</li>
<li><p>从机shutdowm后，每次与master断开之后，都需要重新连接，除非你配置进redis.conf文件</p>
</li>
<li><p>从机复制到的数据，会被本机持久化。就算shutdown断开连接依然会有数据。</p>
</li>
<li><p>重新连接或者变更master，会清除之前的数据，重新建立拷贝最新的数据</p>
</li>
</ol>
<h2 id="薪火相传"><a href="#薪火相传" class="headerlink" title="薪火相传"></a>薪火相传</h2><p>含义:就是上一个Slave可以是下一个slave的Master，Slave同样可以接收其他slaves的连接和同步请求，那么该slave作为了链条中下一个的master,可以有效减轻master的写压力。</p>
<p><img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/image-20210304172217482.png" alt="薪火相传"></p>
<p><code>注意事项和一主多仆差不多,但注意虽然有slave是相对master，但是依然是slave</code> </p>
<h2 id="反客为主"><a href="#反客为主" class="headerlink" title="反客为主"></a>反客为主</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">SLAVEOF no one</span><br></pre></td></tr></table></figure>

<p> 使当前数据库停止与其他数据库的同步，转成主数据库</p>
<h2 id="哨兵模式（sentinel）"><a href="#哨兵模式（sentinel）" class="headerlink" title="哨兵模式（sentinel）"></a>哨兵模式（sentinel）</h2><p>反客为主的自动版，能够后台监控Master库是否故障，如果故障了根据投票数自动将slave库转换为主库。一组sentinel能同时监控多个Master。</p>
<p>使用步骤：</p>
<ol>
<li><p>在Master对应redis.conf同目录下新建sentinel.conf文件，名字绝对不能错；</p>
</li>
<li><p>配置哨兵，在sentinel.conf文件中填入内容(可以配置多个)：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 说明：最后一个数字1，表示主机挂掉后slave投票看让谁接替成为主机，得票数多少后成为主机。</span></span><br><span class="line">sentinel monitor 被监控数据库名字（自己起名字） ip port 1</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动哨兵模式(路径按照自己的需求进行配置)：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">redis-sentinel  /myredis/sentinel.conf</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p><strong>注意</strong>：</p>
<ol>
<li><p>当<strong>master挂掉后，会通过选票进行选出下一个master</strong>。而且只有使用了sentinel.conf启动的才能开启选票</p>
</li>
<li><p><strong>当原来的master后来后，会变成了slave。</strong></p>
</li>
</ol>
<h3 id="复制原理"><a href="#复制原理" class="headerlink" title="复制原理"></a>复制原理</h3><ol>
<li><p>Slave启动成功连接到master后会发送一个sync命令；</p>
</li>
<li><p>Master接到命令启动后的存盘进程，同时收集所有接收到的用于修改数据集命令，在后台进程执行完毕之后，master将传送整个数据文件到slave，以完成一次完全同步；</p>
</li>
<li><p><code>全量复制</code>：而slave服务在数据库文件数据后，将其存盘并加载到内存中；</p>
</li>
<li><p><code>增量复制</code>：Master继续将新的所有收集到的修改命令依次传给slave，完成同步；</p>
</li>
<li><p>但是只要是重新连接master，一次完全同步（全量复制）将被自动执行。</p>
</li>
</ol>
<h3 id="复制的缺点"><a href="#复制的缺点" class="headerlink" title="复制的缺点"></a>复制的缺点</h3><p>​       延时，由于所有的写操作都是在Master上操作，然后同步更新到Slave上，所以从Master同步到Slave机器有一定的延迟，当系统很繁忙的时候，延迟问题会更加严重，Slave机器数量的增加也会使得这个问题更加严重。</p>
<h3 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h3><table>
<thead>
<tr>
<th>命令</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>slaveof 主库ip  主库端口</td>
<td>配置从库</td>
</tr>
<tr>
<td>info replication</td>
<td>查看redis主从复制的情况</td>
</tr>
<tr>
<td>slaveof  no one</td>
<td>使当前数据库停止与其他数据库的同步，转成主数据库</td>
</tr>
<tr>
<td>sentinel monitor 被监控数据库名字(自己起名字) 127.0.0.1 6379 1</td>
<td>配置哨兵，监视master</td>
</tr>
<tr>
<td>redis-sentinel /myredis/sentinel.conf</td>
<td>以哨兵模式启动redis</td>
</tr>
</tbody></table>
<h1 id="SpringBoot整合哨兵模式"><a href="#SpringBoot整合哨兵模式" class="headerlink" title="SpringBoot整合哨兵模式"></a>SpringBoot整合哨兵模式</h1><h2 id="配置主从服务"><a href="#配置主从服务" class="headerlink" title="配置主从服务"></a>配置主从服务</h2><p>为了方便测试，本用例只在一台机器上执行，实际情况不建议这么做，根据自己的情况调整。</p>
<p>在自己的redis安装目录下新建conf文件夹，并拷贝几份<code>redis.conf</code>文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> cp redis.conf conf/redis6379.conf</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> cp redis.conf conf/redis6380.conf</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> cp redis.conf conf/redis6381.conf</span></span><br></pre></td></tr></table></figure>

<p>修改reids.conf配置文件，以6379配置为例</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim redis6379.conf</span><br><span class="line"><span class="meta">#</span><span class="bash">启用后台启动(测试情况下可以不设置)</span></span><br><span class="line">daemonize yes</span><br><span class="line"><span class="meta">#</span><span class="bash">pidfile位置</span></span><br><span class="line">pidfile &quot;/usr/local/redis/6379/redis6379.pid&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash">端口</span></span><br><span class="line">port 6379</span><br><span class="line"><span class="meta">#</span><span class="bash">日志文件位置</span></span><br><span class="line">logfile &quot;/usr/local/redis/6379/log6379.log&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash">rdb备份文件名称</span></span><br><span class="line">dbfilename &quot;dump6379.rdb&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash">rdb备份文件路径</span></span><br><span class="line">dir &quot;/usr/local/redis/rdb/&quot;</span><br></pre></td></tr></table></figure>

<p>参考上面的步骤，修改6380、6381节点配置文件，但是要新增一行内容，如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">replicaof <span class="number">127.0</span>.<span class="number">0.1</span> <span class="number">6379</span></span><br></pre></td></tr></table></figure>

<p><strong>注</strong>：在很多地方都说这里不能配置成<code>127.0.0.1</code>或<code>localhost</code>，但是我本地试了，这个ip可以配成<code>127.0.0.1</code>，而配置成具体的本地ip(例如<code>192.168.50.96</code>)不行，感觉这个和主Redis中bind的ip有关</p>
<p>打开三个标签页，依次启动master及两个slave</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> redis-server conf/redis-6379.conf</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> redis-server conf/redis-6380.conf</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> redis-server conf/redis-6381.conf</span></span><br></pre></td></tr></table></figure>

<p>连接master查看情况</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> master</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> redis-cli -p 6379</span></span><br><span class="line">127.0.0.1:6379&gt; info replication</span><br><span class="line"><span class="meta">#</span><span class="bash"> Replication</span></span><br><span class="line">role:master # 主机</span><br><span class="line">connected_slaves:2 # 有两台从机连接上了</span><br><span class="line">slave0:ip=127.0.0.1,port=6380,state=online,offset=2012,lag=0</span><br><span class="line">slave1:ip=127.0.0.1,port=6381,state=online,offset=2012,lag=1</span><br><span class="line">master_replid:49a8783f6f8a2e425d38bcf97f5e36658b608ab3</span><br><span class="line">master_replid2:0000000000000000000000000000000000000000</span><br><span class="line">master_repl_offset:2012</span><br><span class="line">second_repl_offset:-1</span><br><span class="line">repl_backlog_active:1</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:1</span><br><span class="line">repl_backlog_histlen:2012</span><br><span class="line"><span class="meta">#</span><span class="bash"> slave</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> redis-cli -p 6380</span></span><br><span class="line">127.0.0.1:6380&gt; info replication</span><br><span class="line"><span class="meta">#</span><span class="bash"> Replication</span></span><br><span class="line">role:slave</span><br><span class="line">master_host:127.0.0.1</span><br><span class="line">master_port:6379</span><br><span class="line">master_link_status:up</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>验证：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 读写分离验证</span></span><br><span class="line">127.0.0.1:6381&gt; set k1 v1</span><br><span class="line">(error) READONLY You can&#x27;t write against a read only slave.</span><br><span class="line"></span><br><span class="line">127.0.0.1:6380&gt; set k1 v1</span><br><span class="line">(error) READONLY You can&#x27;t write against a read only slave.</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; set k2 v2</span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 验证主从复制</span></span><br><span class="line">127.0.0.1:6380&gt; get k2</span><br><span class="line">&quot;v2&quot;</span><br><span class="line">127.0.0.1:6381&gt; get k2</span><br><span class="line">&quot;v2&quot;</span><br></pre></td></tr></table></figure>

<h2 id="配置哨兵"><a href="#配置哨兵" class="headerlink" title="配置哨兵"></a>配置哨兵</h2><p>拷贝三份<code>sentinel.conf</code>文件到<code>conf</code>目录下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cp sentinel.conf conf/sentinel26379.conf</span><br><span class="line">cp sentinel.conf conf/sentinel26380.conf</span><br><span class="line">cp sentinel.conf conf/sentinel26381.conf</span><br></pre></td></tr></table></figure>

<p><strong>注</strong>：看情况，也可以只拷贝一份，但是建议单数。</p>
<p>修改<code>sentinel26379.conf</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">port <span class="number">26379</span></span><br><span class="line">daemonize no</span><br><span class="line">pidfile /<span class="keyword">var</span>/run/redis-sentinel26379.pid</span><br><span class="line">logfile <span class="string">&quot;sentinel-26379.log&quot;</span></span><br><span class="line">dir /tmp</span><br><span class="line">sentinel monitor mymaster <span class="number">127.0</span>.<span class="number">0.1</span> <span class="number">6379</span> <span class="number">2</span></span><br><span class="line">sentinel parallel-syncs mymaster <span class="number">1</span></span><br><span class="line">sentinel failover-timeout mymaster <span class="number">180000</span></span><br><span class="line">sentinel deny-scripts-reconfig yes</span><br></pre></td></tr></table></figure>

<p>同样的方法，修改<code>sentinel26380.conf</code>及<code>sentinel26381.conf</code></p>
<p>开启三个标签页，启动哨兵</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> redis-sentinel conf/sentinel26379.conf</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> redis-sentinel conf/sentinel26380.conf</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> redis-sentinel conf/sentinel26381.conf</span></span><br></pre></td></tr></table></figure>

<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p><strong>pom文件</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--redis连接池--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-pool2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>application.yml</strong></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">lettuce:</span></span><br><span class="line">      <span class="attr">pool:</span></span><br><span class="line">        <span class="comment"># 连接池最大连接数(使用负值表示没有限制) 默认为8</span></span><br><span class="line">        <span class="attr">max-active:</span> <span class="number">8</span></span><br><span class="line">        <span class="comment"># 连接池中的最大空闲连接 默认为8</span></span><br><span class="line">        <span class="attr">max-idle:</span> <span class="number">8</span></span><br><span class="line">        <span class="comment"># 连接池最大阻塞等待时间(使用负值表示没有限制) 默认为-1</span></span><br><span class="line">        <span class="attr">max-wait:</span> <span class="string">-1ms</span></span><br><span class="line">        <span class="comment"># 连接池中的最小空闲连接 默认为 0</span></span><br><span class="line">        <span class="attr">min-idle:</span> <span class="number">0</span></span><br><span class="line">    <span class="attr">sentinel:</span></span><br><span class="line">      <span class="comment"># 主节点的别名</span></span><br><span class="line">      <span class="attr">master:</span> <span class="string">mymaster</span></span><br><span class="line">      <span class="comment"># sentinel服务的ip和端口</span></span><br><span class="line">      <span class="attr">nodes:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:26379,127.0.0.1:26380,127.0.0.1:26381</span></span><br></pre></td></tr></table></figure>

<p><strong>controller代码</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.redis.sentinel.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> D丶Cheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: redis哨兵模式测试</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/11/24 11:43 上午</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/redis&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RedisTemplate&lt;String, String&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/get&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">get</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        String value = redisTemplate.opsForValue().get(key);</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/set&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">set</span><span class="params">(String key, String value)</span> </span>&#123;</span><br><span class="line">        redisTemplate.opsForValue().set(key, value);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此时运行项目，访问接口，即可进行redis的设置及获取。</p>
<p><strong>测试重连</strong></p>
<p>手动关闭master(截图中对应的是6380)，可以看到系统会自动重连上最新选举出来的master(新选举出来的为6379)</p>
<p><img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/553866f8e8a6443cb58d1dfc34bec844.png" alt="image-20201124125413894"></p>
<p>当重连上以后，无需重启项目，服务即可恢复正常。</p>
<p><strong>如果不使用默认的lettuce，使用jedis的话，可以参考下面的文章：</strong></p>
<p><a href="https://www.cnblogs.com/spec-dog/p/12572120.html">https://www.cnblogs.com/spec-dog/p/12572120.html</a></p>
<p><a href="https://blog.csdn.net/weixin_30409927/article/details/105793877">https://blog.csdn.net/weixin_30409927/article/details/105793877</a></p>
]]></content>
      <categories>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis持久化</title>
    <url>/posts/119ed1dc.html</url>
    <content><![CDATA[<h1 id="Redis持久化"><a href="#Redis持久化" class="headerlink" title="Redis持久化"></a>Redis持久化</h1><h3 id="RDB（Redis-DataBase）"><a href="#RDB（Redis-DataBase）" class="headerlink" title="RDB（Redis DataBase）"></a>RDB（Redis DataBase）</h3><h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在指定的时间间隔内生成内存中整个数据集的持久化快照。快照文件默认被存储在当前文件夹中，名称为<code>dump.rdb</code>，可以通过dir和dbfilename参数来修改默认值。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Redis会<strong>单独创建（fork）一个子进程来进行持久化</strong>，会先将数据<strong>写入到一个临时文件</strong>中，待<strong>持久化过程都结束了，再用这个临时文件替换上次持久化好的文件</strong>。&nbsp;&nbsp;整个过程中，主进程是不进行任何的IO操作的，这就确保了极高的性能。</p>
<h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> redis是基于内存的数据库，可以通过设置该值定期写入磁盘。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 注释掉“save”这一行配置项就可以让保存数据库功能失效</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 900秒（15分钟）内至少1个key值改变（则进行数据库保存--持久化） </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 300秒（5分钟）内至少10个key值改变（则进行数据库保存--持久化） </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 60秒（1分钟）内至少10000个key值改变（则进行数据库保存--持久化）</span></span><br><span class="line">save 900 1</span><br><span class="line">save 300 10</span><br><span class="line">save 60 10000</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">当RDB持久化出现错误后，是否依然进行继续进行工作，yes：不能进行工作，no：可以继续进行工作，可以通过info中的rdb_last_bgsave_status了解RDB持久化是否有错误</span></span><br><span class="line">stop-writes-on-bgsave-error yes</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">使用压缩rdb文件，rdb文件压缩使用LZF压缩算法，yes：压缩，但是需要一些cpu的消耗。no：不压缩，需要更多的磁盘空间</span></span><br><span class="line">rdbcompression yes</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">是否校验rdb文件。从rdb格式的第五个版本开始，在rdb文件的末尾会带上CRC64的校验和。这跟有利于文件的容错性，但是在保存rdb文件的时候，会有大概10%的性能损耗，所以如果你追求高性能，可以关闭该配置。</span></span><br><span class="line">rdbchecksum yes</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">rdb文件的名称</span></span><br><span class="line">dbfilename dump.rdb</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">数据目录，数据库的写入会在这个目录。rdb、aof文件也会写在这个目录</span></span><br><span class="line">dir /data</span><br></pre></td></tr></table></figure>

<h4 id="Fork"><a href="#Fork" class="headerlink" title="Fork"></a>Fork</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fork的作用相当于复制一个与当前进程一样的进程。但是是一个全新的进程，并作为原进程的子进程。</p>
<h4 id="触发条件"><a href="#触发条件" class="headerlink" title="触发条件"></a>触发条件</h4><ol>
<li><p>通过配制文件中的save条件（可自己配置）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">save 900 1</span><br><span class="line">save 300 10</span><br><span class="line">save 60 10000</span><br></pre></td></tr></table></figure>
</li>
<li><p>手动通过save和bgsave命令</p>
</li>
</ol>
<ul>
<li>save：save时只管保存，其他不管，全部阻塞</li>
<li>bgsave：redis会在后台异步的进行快照操作，同时还可以响应客户端请求。可以通过lastsave命令获取最后一次成功执行快照的事件</li>
</ul>
<ol start="3">
<li>通过flushall命令，也会产生dump.rdb文件，但是里面是空的，无意义。</li>
<li>通过shutdown命令，安全退出，也会生成快照文件（和异常退出形成对比，比如：kill杀死进程的方式）</li>
</ol>
<h4 id="如何恢复"><a href="#如何恢复" class="headerlink" title="如何恢复"></a>如何恢复</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">appendonly no</span><br><span class="line">dbfilename dump.rdb</span><br><span class="line">dir /var/lib/redis  #可以自行指定</span><br></pre></td></tr></table></figure>

<p><code>appendonly 设置成no</code>，redis启动时会把/var/lib/redis 目录下的dump.rdb 中的数据恢复。dir 和dbfilename 都可以设置。我测试时<code>appendonly 设置成yes 时候不会将dump.rdb文件中的数据恢复</code>。</p>
<h4 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h4><ol>
<li>恢复数据的速度很快，适合大规模的数据恢复，而又对部分数据不敏感的情况</li>
<li>dump.db文件是一个压缩的二进制文件，文件暂用空间小</li>
<li><strong>RDB</strong>对<strong>Redis</strong>的性能影响非常小，是因为在同步数据的时候他只是<strong>fork</strong>了一个子进程去做持久化的，而且他在数据恢复的时候速度比<strong>AOF</strong>来的快。</li>
</ol>
<h4 id="劣势"><a href="#劣势" class="headerlink" title="劣势"></a>劣势</h4><ol>
<li><strong>RDB</strong>都是快照文件，都是默认五分钟甚至更久的时间才会生成一次，这意味着你这次同步到下次同步这中间五分钟的数据都很可能全部丢失掉。<strong>AOF</strong>则最多丢一秒的数据，<strong>数据完整性</strong>上高下立判。</li>
<li>当fork的时候，内存的中的数据会被克隆一份，大致两倍的膨胀需要考虑。而且，当数据过大时，fork操作占用过多的系统资源，比如你公司在做秒杀的时候他刚好在这个时候<strong>fork</strong>了一个子进程去生成一个大快照，造成主服务器进程假死几率就很高了。</li>
</ol>
<h4 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h4><ol>
<li>数据备份 </li>
<li>可容忍部分数据丢失 </li>
<li>跨数据中心的容灾备份</li>
</ol>
<h3 id="AOF（Append-Only-File）"><a href="#AOF（Append-Only-File）" class="headerlink" title="AOF（Append Only File）"></a>AOF（Append Only File）</h3><h4 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h4><p>以日志的形式来记录每个写操作，将Redis执行过的所有写指令记录下来（读操作补不可记录），只许追加文件但不可以改写文件，redis启动之初会读取改文件重新构建数据。保存的是appendonly.aof文件</p>
<p>aof机制默认关闭，可以通过<code>appendonly = yes</code>参数开启aof机制，通过<code>appendfilename = myaoffile.aof</code>指定aof文件名称。</p>
<p>aof持久化的一些策略配置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">aof持久化策略的配置</span></span><br><span class="line"><span class="meta">#</span><span class="bash">no表示不执行fsync，由操作系统保证数据同步到磁盘，速度最快。</span></span><br><span class="line"><span class="meta">#</span><span class="bash">always表示每次写入都执行fsync，以保证数据同步到磁盘。</span></span><br><span class="line"><span class="meta">#</span><span class="bash">everysec表示每秒执行一次fsync，可能会导致丢失这1s数据。</span></span><br><span class="line">appendfsync everysec</span><br></pre></td></tr></table></figure>

<p>对于触发aof重写机制也可以通过配置文件来进行设置：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> aof自动重写配置。当目前aof文件大小超过上一次重写的aof文件大小的百分之多少进行重写，即当aof文件增长到一定大小的时候Redis能够调用bgrewriteaof对日志文件进行重写。当前AOF文件大小是上次日志重写得到AOF文件大小的二倍（设置为100）时，自动启动新的日志重写过程。</span></span><br><span class="line">auto-aof-rewrite-percentage 100</span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置允许重写的最小aof文件大小，避免了达到约定百分比但尺寸仍然很小的情况还要重写</span></span><br><span class="line">auto-aof-rewrite-min-size 64mb</span><br></pre></td></tr></table></figure>

<p>当aop重写时会引发重写和持久化追加同时发生的问题，可以通过<code>no-appendfsync-on-rewrite no</code>进行配置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 在aof重写或者写入rdb文件的时候，会执行大量IO，此时对于everysec和always的aof模式来说，执行fsync会造成阻塞过长时间，no-appendfsync-on-rewrite字段设置为默认设置为no，是最安全的方式，不会丢失数据，但是要忍受阻塞的问题。如果对延迟要求很高的应用，这个字段可以设置为yes，，设置为yes表示rewrite期间对新写操作不fsync,暂时存在内存中,不会造成阻塞的问题（因为没有磁盘竞争），等rewrite完成后再写入，这个时候redis会丢失数据。Linux的默认fsync策略是30秒。可能丢失30秒数据。因此，如果应用系统无法忍受延迟，而可以容忍少量的数据丢失，则设置为yes。如果应用系统无法忍受数据丢失，则设置为no。</span></span><br><span class="line">no-appendfsync-on-rewrite no</span><br></pre></td></tr></table></figure>

<h4 id="如何恢复-1"><a href="#如何恢复-1" class="headerlink" title="如何恢复"></a>如何恢复</h4><h5 id="正常恢复"><a href="#正常恢复" class="headerlink" title="正常恢复"></a>正常恢复</h5><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;将文件放到dir指定的文件夹下，当redis启动的时候会自动加载数据，注意：<code>aof文件的优先级比dump大</code>。</p>
<h5 id="异常恢复"><a href="#异常恢复" class="headerlink" title="异常恢复"></a>异常恢复</h5><ul>
<li><p>有些操作可以直接到appendonly.aof文件里去修改。</p>
<p>eg：使用了flushall这个命令，此刻持久化文件中就会有这么一条命令记录，把它删掉就可以了</p>
</li>
<li><p>写坏的文件可以通过 <code>redis-check-aof --fix</code>进行修复</p>
</li>
</ul>
<h4 id="优势-1"><a href="#优势-1" class="headerlink" title="优势"></a>优势</h4><ol>
<li>根据不同的策略，可以实现每秒，每一次修改操作的同步持久化，就算在最恶劣的情况下只会丢失不会超过两秒数据。</li>
<li><strong>AOF</strong>在对日志文件进行操作的时候是以<code>append-only</code>的方式去写的，他只是追加的方式写数据，自然就少了很多磁盘寻址的开销了，写入性能惊人，文件也不容易破损。</li>
<li>当文件太大时，会触发重写机制，确保文件不会太大。</li>
<li>文件可以简单的读懂，比如通过<strong>flushall</strong>误操作清空了所有的数据，只要这个时候后台重写还没发生，马上拷贝一份<strong>AOF</strong>日志文件，把最后一条<strong>flushall</strong>命令删了就完事了。</li>
</ol>
<h4 id="劣势-1"><a href="#劣势-1" class="headerlink" title="劣势"></a>劣势</h4><ol>
<li><strong>AOF文件的大小太大</strong>，就算有重写机制，但重写所造成的阻塞问题是不可避免的</li>
<li><strong>AOF</strong>开启后，<strong>Redis</strong>支持写的<strong>QPS</strong>会比<strong>RDB</strong>支持写的要低，他不是每秒都要去异步刷新一次日志嘛<strong>fsync</strong>，当然即使这样性能还是很高。</li>
</ol>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol>
<li><p>如果你只希望你的数据在服务器运行的时候存在，可以不使用任何的持久化方式</p>
</li>
<li><p>一般建议同时开启两种持久化方式。AOF进行数据的持久化，确保数据不会丢失太多，而RDB更适合用于备份数据库，留着一个做万一的手段。</p>
</li>
<li><p><strong>性能建议：</strong></p>
<p>因为RDB文件只用做后备用途，建议只在slave上持久化RDB文件，而且只要在15分钟备份一次就够了，只保留900 1这条规则。</p>
<p>如果Enalbe AOF,好处是在最恶劣情况下也只会丢失不超过两秒数据，启动脚本较简单只load自己的AOF文件就可以了。</p>
<p>代价：</p>
<p>1、带来了持续的IO；</p>
<p>2、AOF rewrite的最后将rewrite过程中产生的新数据写到新文件造成的阻塞几乎是不可避免的。只要硬盘许可，应该尽量减少AOF rewrite的频率，AOF重写的基础大小默认值64M太小了，可以设到5G以上。默认超过原大小100%大小时重写可以改到适当的数值。</p>
<p>如果不Enable AOF，仅靠Master-Slave Replication 实现高可用性也可以。能省掉一大笔IO也减少了rewrite时带来的系统波动。代价是如果Master/Slave同时宕掉，会丢失10几分钟的数据，启动脚本也要比较两个Master/Slave中的RDB文件，载入较新的那个。新浪微博就选用了这种架构。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis缓存雪崩、缓存穿透、缓存击穿</title>
    <url>/posts/35743b4b.html</url>
    <content><![CDATA[<h1 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h1><ul>
<li><p><strong>缓存雪崩</strong>：当缓存服务器重启或者<strong>大量缓存集中在某一个时间段失效</strong>，这样在失效的时候，大量的请求直接落在了数据库上，造成数据库短时间内承受⼤量请求⽽崩掉。</p>
</li>
<li><p><strong>缓存穿透</strong>：<strong>key对应的数据在数据源并不存在，每次针对此key的请求从缓存获取不到</strong>，请求都会到数据源，从而可能压垮数据源。比如用一个不存在的用户id获取用户信息，不论缓存还是数据库都没有，若黑客利用此漏洞进行攻击可能压垮数据库。</p>
</li>
<li><p><strong>缓存击穿：key对应的数据存在，但在redis中过期。</strong>例如一个Key非常热点，在不停的扛着大并发，大并发集中对这一个点进行访问，当这个Key在失效的瞬间，持续的大并发就穿破缓存，直接请求数据库。</p>
</li>
</ul>
<h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><h2 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h2><p>处理缓存雪崩的一种方式是在批量往<strong>Redis</strong>存数据的时候，<strong>把每个Key的失效时间都加个随机值</strong>就好了，这样可以保证数据不会在同一时间大面积失效。</p>
<h2 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h2><ul>
<li><p><strong>接口参数校验</strong>：一般处理方式是在接口层增加校验，比如用户鉴权校验，参数做校验，不合法的参数直接返回校验失败信息。</p>
</li>
<li><p><strong>设置默认值</strong>：从缓存取不到的数据，在数据库中也没有取到，这时也可以<strong>将对应Key的Value对写为null、位置错误、稍后重试等，同时设置短点的超时时间</strong>。</p>
</li>
<li><p><strong>布隆过滤器（Bloom Filter）</strong>也能很好的防止缓存穿透的发生，他的原理也很简单就是利用高效的数据结构和算法快速判断出你这个Key是否在数据库中存在，不存在你return就好了，存在你就去查了DB刷新KV再return。<a href="https://www.wmyskxz.com/2020/03/11/redis-5-yi-ji-shu-ju-guo-lu-he-bu-long-guo-lu-qi/">布隆过滤器</a></p>
</li>
</ul>
<h2 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h2><p><strong>设置热点数据永远不过期</strong>，或者<strong>加上互斥锁</strong>就行了。</p>
<h2 id="Redis-挂掉了，请求全部走数据库解决"><a href="#Redis-挂掉了，请求全部走数据库解决" class="headerlink" title="Redis 挂掉了，请求全部走数据库解决"></a>Redis 挂掉了，请求全部走数据库解决</h2><p>从三个时间段去分析下：</p>
<ul>
<li>事前：<strong>Redis</strong> 高可用，主从+哨兵，<strong>Redis cluster</strong>，避免全盘崩溃。</li>
<li>事中：本地 <strong>ehcache</strong> 缓存 + <strong>Hystrix</strong> 限流+降级，避免<strong>MySQL</strong>被打死。</li>
<li>事后：<strong>Redis</strong> 持久化 <strong>RDB</strong>+<strong>AOF</strong>，一旦重启，自动从磁盘上加载数据，快速恢复缓存数据。</li>
</ul>
]]></content>
      <categories>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis跳跃表</title>
    <url>/posts/3a0d04cf.html</url>
    <content><![CDATA[<p>原文：<a href="http://www.wmyskxz.com/2020/02/29/redis-2-tiao-yue-biao/">http://www.wmyskxz.com/2020/02/29/redis-2-tiao-yue-biao/</a></p>
<blockquote>
<p> <strong>zset</strong> 的数据结构，它类似于 Java 中的 <strong>SortedSet</strong> 和 <strong>HashMap</strong> 的结合体，一方面它是一个 set 保证了内部 value 的唯一性，另一方面又可以给每个 value 赋予一个排序的权重值 score，来达到 <strong>排序</strong> 的目的</p>
</blockquote>
<h1 id="为什么使用跳跃表"><a href="#为什么使用跳跃表" class="headerlink" title="为什么使用跳跃表"></a>为什么使用跳跃表</h1><p>首先，因为 zset 要支持随机的插入和删除，所以它 <strong>不宜使用数组来实现</strong>，关于排序问题，我们也很容易就想到 <strong>红黑树/ 平衡树</strong> 这样的树形结构，为什么 Redis 不使用这样一些结构呢？</p>
<ol>
<li><strong>性能考虑：</strong> 在高并发的情况下，树形结构需要执行一些类似于 rebalance 这样的可能涉及整棵树的操作，相对来说跳跃表的变化只涉及局部；</li>
<li><strong>实现考虑：</strong> 在复杂度与红黑树相同的情况下，跳跃表实现起来更简单，看起来也更加直观；</li>
</ol>
<h2 id="本质是解决查找问题"><a href="#本质是解决查找问题" class="headerlink" title="本质是解决查找问题"></a>本质是解决查找问题</h2><p>我们先来看一个普通的链表结构：</p>
<p><a href="https://cdn.jsdelivr.net/gh/wmyskxz/img/img/Redis%EF%BC%882%EF%BC%89%E2%80%94%E2%80%94%E8%B7%B3%E8%B7%83%E8%A1%A8/7896890-11b7eebde1779904.png"><img src="https://cdn.jsdelivr.net/gh/wmyskxz/img/img/Redis%EF%BC%882%EF%BC%89%E2%80%94%E2%80%94%E8%B7%B3%E8%B7%83%E8%A1%A8/7896890-11b7eebde1779904.png" alt="img"></a></p>
<p>我们需要这个链表按照 score 值进行排序，这也就意味着，当我们需要添加新的元素时，我们需要定位到插入点，这样才可以继续保证链表是有序的，通常我们会使用 <strong>二分查找法</strong>，但二分查找是有序数组的，链表没办法进行位置定位，我们除了遍历整个找到第一个比给定数据大的节点为止 <em>（时间复杂度 O(n))</em> 似乎没有更好的办法。</p>
<p>但假如我们每相邻两个节点之间就增加一个指针，让指针指向下一个节点，如下图：</p>
<p><a href="https://cdn.jsdelivr.net/gh/wmyskxz/img/img/Redis%EF%BC%882%EF%BC%89%E2%80%94%E2%80%94%E8%B7%B3%E8%B7%83%E8%A1%A8/7896890-8cae2c261c950b32.png"><img src="https://cdn.jsdelivr.net/gh/wmyskxz/img/img/Redis%EF%BC%882%EF%BC%89%E2%80%94%E2%80%94%E8%B7%B3%E8%B7%83%E8%A1%A8/7896890-8cae2c261c950b32.png" alt="img"></a></p>
<p>这样所有新增的指针连成了一个新的链表，但它包含的数据却只有原来的一半 _（图中的为 3，11）_。</p>
<p>现在假设我们想要查找数据时，可以根据这条新的链表查找，如果碰到比待查找数据大的节点时，再回到原来的链表中进行查找，比如，我们想要查找 7，查找的路径则是沿着下图中标注出的红色指针所指向的方向进行的：</p>
<p><a href="https://cdn.jsdelivr.net/gh/wmyskxz/img/img/Redis%EF%BC%882%EF%BC%89%E2%80%94%E2%80%94%E8%B7%B3%E8%B7%83%E8%A1%A8/7896890-9c0262c7a85c120e.png"><img src="https://cdn.jsdelivr.net/gh/wmyskxz/img/img/Redis%EF%BC%882%EF%BC%89%E2%80%94%E2%80%94%E8%B7%B3%E8%B7%83%E8%A1%A8/7896890-9c0262c7a85c120e.png" alt="img"></a></p>
<p>这是一个略微极端的例子，但我们仍然可以看到，通过新增加的指针查找，我们不再需要与链表上的每一个节点逐一进行比较，这样改进之后需要比较的节点数大概只有原来的一半。</p>
<p>利用同样的方式，我们可以在新产生的链表上，继续为每两个相邻的节点增加一个指针，从而产生第三层链表：</p>
<p><a href="https://cdn.jsdelivr.net/gh/wmyskxz/img/img/Redis%EF%BC%882%EF%BC%89%E2%80%94%E2%80%94%E8%B7%B3%E8%B7%83%E8%A1%A8/7896890-22036e274bedaa5a.png"><img src="https://cdn.jsdelivr.net/gh/wmyskxz/img/img/Redis%EF%BC%882%EF%BC%89%E2%80%94%E2%80%94%E8%B7%B3%E8%B7%83%E8%A1%A8/7896890-22036e274bedaa5a.png" alt="img"></a></p>
<p>在这个新的三层链表结构中，我们试着 <strong>查找 13</strong>，那么沿着最上层链表首先比较的是 11，发现 11 比 13 小，于是我们就知道只需要到 11 后面继续查找，<strong>从而一下子跳过了 11 前面的所有节点。</strong></p>
<p>可以想象，当链表足够长，这样的多层链表结构可以帮助我们跳过很多下层节点，从而加快查找的效率。</p>
<h2 id="更进一步的跳跃表"><a href="#更进一步的跳跃表" class="headerlink" title="更进一步的跳跃表"></a>更进一步的跳跃表</h2><p><strong>跳跃表 skiplist</strong> 就是受到这种多层链表结构的启发而设计出来的。按照上面生成链表的方式，上面每一层链表的节点个数，是下面一层的节点个数的一半，这样查找过程就非常类似于一个二分查找，使得查找的时间复杂度可以降低到 _O(logn)_。</p>
<p>但是，这种方法在插入数据的时候有很大的问题。新插入一个节点之后，就会打乱上下相邻两层链表上节点个数严格的 2:1 的对应关系。如果要维持这种对应关系，就必须把新插入的节点后面的所有节点 <em>（也包括新插入的节点）</em> 重新进行调整，这会让时间复杂度重新蜕化成 _O(n)_。删除数据也有同样的问题。</p>
<p><strong>skiplist</strong> 为了避免这一问题，它不要求上下相邻两层链表之间的节点个数有严格的对应关系，而是 **为每个节点随机出一个层数(level)**。比如，一个节点随机出的层数是 3，那么就把它链入到第 1 层到第 3 层这三层链表中。为了表达清楚，下图展示了如何通过一步步的插入操作从而形成一个 skiplist 的过程：</p>
<p><a href="https://cdn.jsdelivr.net/gh/wmyskxz/img/img/Redis%EF%BC%882%EF%BC%89%E2%80%94%E2%80%94%E8%B7%B3%E8%B7%83%E8%A1%A8/7896890-1e0626c013de095e.png"><img src="https://cdn.jsdelivr.net/gh/wmyskxz/img/img/Redis%EF%BC%882%EF%BC%89%E2%80%94%E2%80%94%E8%B7%B3%E8%B7%83%E8%A1%A8/7896890-1e0626c013de095e.png" alt="img"></a></p>
<p>从上面的创建和插入的过程中可以看出，每一个节点的层数（level）是随机出来的，而且新插入一个节点并不会影响到其他节点的层数，因此，<strong>插入操作只需要修改节点前后的指针，而不需要对多个节点都进行调整</strong>，这就降低了插入操作的复杂度。</p>
<p>现在我们假设从我们刚才创建的这个结构中查找 23 这个不存在的数，那么查找路径会如下图：</p>
<p><a href="https://cdn.jsdelivr.net/gh/wmyskxz/img/img/Redis%EF%BC%882%EF%BC%89%E2%80%94%E2%80%94%E8%B7%B3%E8%B7%83%E8%A1%A8/7896890-a8f66d808e8a4d1e.png"><img src="https://cdn.jsdelivr.net/gh/wmyskxz/img/img/Redis%EF%BC%882%EF%BC%89%E2%80%94%E2%80%94%E8%B7%B3%E8%B7%83%E8%A1%A8/7896890-a8f66d808e8a4d1e.png" alt="img"></a></p>
]]></content>
      <categories>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>01.Spring基础</title>
    <url>/posts/c9e764a5.html</url>
    <content><![CDATA[<h3 id="什么是spring"><a href="#什么是spring" class="headerlink" title="什么是spring?"></a>什么是spring?</h3><p>Spring 是一个<strong>轻量级的 DI / IoC 和 AOP 容器的开源框架</strong>，目的是为了解决企业级应用开发的业务逻辑层和其他各层的耦合问题。它是一个轻量级开源框架，为开发Java应用程序提供全面的基础架构支持。Spring负责基础架构，因此Java开发者可以专注于应用程序的开发。</p>
<p>Spring最根本的使命是<strong>解决企业级应用开发的复杂性，即简化Java开发</strong>。</p>
<h3 id="侵⼊式概念"><a href="#侵⼊式概念" class="headerlink" title="侵⼊式概念"></a>侵⼊式概念</h3><p><strong>侵⼊式</strong>：对于EJB、Struts2等⼀些传统的框架，通常是要实现特定的接⼝，继承特定的类才能增强功能</p>
<ul>
<li>改变了<strong>java</strong>类的结构</li>
</ul>
<p><strong>⾮侵⼊式</strong>：对于Hibernate、Spring等框架，对现有的类结构没有影响，就能够增强<strong>JavaBean</strong>的功能</p>
<h3 id="Spring的优缺点是什么？"><a href="#Spring的优缺点是什么？" class="headerlink" title="Spring的优缺点是什么？"></a>Spring的优缺点是什么？</h3><p><strong>优点</strong></p>
<ul>
<li><p>方便解耦，简化开发</p>
<p>Spring就是一个大工厂，可以将所有对象的创建和依赖关系的维护，交给Spring管理。</p>
</li>
<li><p>AOP编程的支持</p>
<p>Spring提供面向切面编程，可以方便的实现对程序进行权限拦截、运行监控等功能。</p>
</li>
<li><p>声明式事务的支持</p>
<p>只需要通过配置就可以完成对事务的管理，而无需手动编程。</p>
</li>
<li><p>方便程序的测试</p>
<p>Spring对Junit4支持，可以通过注解方便的测试Spring程序。</p>
</li>
<li><p>方便集成各种优秀框架</p>
<p>Spring不排斥各种优秀的开源框架，其内部提供了对各种优秀框架的直接支持（如：Struts、Hibernate、MyBatis等）。</p>
</li>
<li><p>降低JavaEE API的使用难度</p>
<p>Spring对JavaEE开发中非常难用的一些API（JDBC、JavaMail、远程调用等），都提供了封装，使这些API应用难度大大降低。</p>
</li>
</ul>
<p><strong>缺点</strong></p>
<ul>
<li>Spring明明一个很轻量级的框架，却给人感觉大而全</li>
<li>Spring依赖反射，反射影响性能</li>
<li>使用门槛升高，入门Spring需要较长时间</li>
</ul>
<h3 id="Spring核心模块"><a href="#Spring核心模块" class="headerlink" title="Spring核心模块"></a>Spring核心模块</h3><p><img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/2019102923475419.png" alt="在这里插入图片描述"></p>
<ul>
<li><strong>spring core</strong>：提供了框架的基本组成部分，包括<strong>控制反转</strong>（Inversion of Control，IOC）和<strong>依赖注入</strong>（Dependency Injection，DI）功能。</li>
<li><strong>spring beans</strong>：提供了BeanFactory，是工厂模式的一个经典实现，Spring将管理对象称为Bean。</li>
<li><strong>spring context</strong>：构建于 core 封装包基础上的 context 封装包，提供了一种框架式的对象访问方法。</li>
<li><strong>spring jdbc</strong>：提供了一个JDBC的抽象层，消除了烦琐的JDBC编码和数据库厂商特有的错误代码解析， 用于简化JDBC。</li>
<li><strong>spring aop</strong>：提供了面向切面的编程实现，让你可以自定义拦截器、切点等。</li>
<li><strong>spring Web</strong>：提供了针对 Web 开发的集成特性，例如文件上传，利用 servlet listeners 进行 ioc 容器初始化和针对 Web 的 ApplicationContext。</li>
<li><strong>spring test</strong>：主要为测试提供支持的，支持使用JUnit或TestNG对Spring组件进行单元测试和集成测试。</li>
</ul>
<h3 id="Spring-框架中都用到了哪些设计模式？"><a href="#Spring-框架中都用到了哪些设计模式？" class="headerlink" title="Spring 框架中都用到了哪些设计模式？"></a>Spring 框架中都用到了哪些设计模式？</h3><ol>
<li><strong>工厂模式</strong>：BeanFactory就是简单工厂模式的体现，用来创建对象的实例；</li>
<li><strong>单例模式</strong>：Bean默认为单例模式。</li>
<li><strong>代理模式</strong>：Spring的AOP功能用到了JDK的动态代理和CGLIB字节码生成技术；</li>
<li><strong>模板方法</strong>：用来解决代码重复的问题。比如. RestTemplate, JmsTemplate, JpaTemplate。</li>
<li><strong>观察者模式</strong>：定义对象键一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都会得到通知被制动更新，如Spring中listener的实现–ApplicationListener。</li>
</ol>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>03.SpringAOP</title>
    <url>/posts/d1427ef9.html</url>
    <content><![CDATA[<h2 id="Spring-AOP-简介"><a href="#Spring-AOP-简介" class="headerlink" title="Spring AOP 简介"></a>Spring AOP 简介</h2><p>如果说 IoC 是 Spring 的核心，那么面向切面编程就是 Spring 最为重要的功能之一了，在数据库事务中切面编程被广泛使用。</p>
<h4 id="AOP-即-Aspect-Oriented-Program-面向切面编程"><a href="#AOP-即-Aspect-Oriented-Program-面向切面编程" class="headerlink" title="AOP 即 Aspect Oriented Program 面向切面编程"></a>AOP 即 Aspect Oriented Program 面向切面编程</h4><p>首先，在面向切面编程的思想里面，把功能分为核心业务功能，和周边功能。</p>
<ul>
<li><strong>所谓的核心业务</strong>，比如登陆，增加数据，删除数据都叫核心业务</li>
<li><strong>所谓的周边功能</strong>，比如性能统计，日志，事务管理等等</li>
</ul>
<p>周边功能在 Spring 的面向切面编程AOP思想里，即被定义为切面</p>
<p>在面向切面编程AOP的思想里面，核心业务功能和切面功能分别独立进行开发，然后把切面功能和核心业务功能 “编织” 在一起，这就叫AOP</p>
<h4 id="OOP缺陷"><a href="#OOP缺陷" class="headerlink" title="OOP缺陷"></a>OOP缺陷</h4><ul>
<li><strong>代码混乱</strong>：核心业务模块可能需要兼顾处理其他不相干的业务外围操作，这些外围操作可能会混乱核心操作的代码，而且当外围模块有重大修改时也会影响到核心模块，这显然是不合理的。</li>
<li><strong>代码分散和冗余</strong>：同样的功能代码，在其他的模块几乎随处可见，导致代码分散并且冗余度高。</li>
<li><strong>代码质量低扩展难</strong>：由于不太相关的业务代码混杂在一起，无法专注核心业务代码，当进行类似无关业务扩展时又会直接涉及到核心业务的代码，导致拓展性低。</li>
</ul>
<h4 id="AOP-的目的"><a href="#AOP-的目的" class="headerlink" title="AOP 的目的"></a>AOP 的目的</h4><p>AOP能够将那些与业务无关，<strong>却为业务模块所共同调用的逻辑或责任（例如事务处理、日志管理、权限控制等）封装起来</strong>，便于<strong>减少系统的重复代码</strong>，<strong>降低模块间的耦合度</strong>，并<strong>有利于未来的可拓展性和可维护性</strong>。</p>
<h4 id="AOP代理"><a href="#AOP代理" class="headerlink" title="AOP代理"></a>AOP代理</h4><p><strong>Spring AOP</strong>就是基于动态代理的，如果要代理的对象，实现了某个接⼝，那么Spring AOP会使⽤<strong>JDK Proxy</strong>，去创建代理对象，⽽对于没有实现接⼝的对象，就⽆法使⽤ JDK Proxy 去进⾏代理了，这时候Spring AOP会使⽤<strong>Cglib</strong> ，这时候Spring AOP会使⽤ <strong>Cglib</strong> ⽣成⼀个被代理对象的⼦类来作为代理。</p>
<h4 id="AOP-当中的概念："><a href="#AOP-当中的概念：" class="headerlink" title="AOP 当中的概念："></a>AOP 当中的概念：</h4><ul>
<li>切入点（Pointcut）<br>在哪些类，哪些方法上切入（<strong>where</strong>）</li>
<li>通知（Advice）<br>在方法执行的什么实际（<strong>when:**方法前/方法后/方法前后）做什么（</strong>what:**增强的功能）</li>
<li>切面（Aspect）<br>切面 = 切入点 + 通知，通俗点就是：<strong>在什么时机，什么地方，做什么增强！</strong></li>
<li>织入（Weaving）<br>把切面加入到对象，并创建出代理对象的过程。（由 Spring 来完成）</li>
</ul>
<h4 id="Spring-中的-AspectJ-注解："><a href="#Spring-中的-AspectJ-注解：" class="headerlink" title="Spring 中的 AspectJ 注解："></a>Spring 中的 AspectJ 注解：</h4><table>
<thead>
<tr>
<th>注解</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>@Before</code></td>
<td>前置通知，在连接点方法前调用</td>
</tr>
<tr>
<td><code>@Around</code></td>
<td>环绕通知，它将覆盖原有方法，但是允许你通过反射调用原有方法，后面会讲</td>
</tr>
<tr>
<td><code>@After</code></td>
<td>后置通知，在连接点方法后调用</td>
</tr>
<tr>
<td><code>@AfterReturning</code></td>
<td>返回通知，在连接点方法执行并正常返回后调用，要求连接点方法在执行过程中没有发生异常</td>
</tr>
<tr>
<td><code>@AfterThrowing</code></td>
<td>异常通知，当连接点方法异常时调用</td>
</tr>
</tbody></table>
<h4 id="AOP-编程"><a href="#AOP-编程" class="headerlink" title="AOP 编程"></a>AOP 编程</h4><ul>
<li>在 Packge【service】下创建 【ProductService】类：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomeService</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;doSomeService&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>在 xml 文件中装配该 bean：</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">&quot;productService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;service.ProductService&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>在【TestSpring】中编写测试代码，运行：</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/7896890-c190e07d3a051a65.png" alt="img"></p>
<ul>
<li>在 Packge【aspect】下准备日志切面 【LoggerAspect】类：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> aspect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoggerAspect</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">log</span><span class="params">(ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;start log:&quot;</span> + joinPoint.getSignature().getName());</span><br><span class="line">        Object object = joinPoint.proceed();</span><br><span class="line">        System.out.println(<span class="string">&quot;end log:&quot;</span> + joinPoint.getSignature().getName());</span><br><span class="line">        <span class="keyword">return</span> object;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>在 xml 文件中声明业务对象和日志切面：</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;</span></span></span><br><span class="line"><span class="tag"><span class="string">   http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">   http://www.springframework.org/schema/beans/spring-beans-3.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">   http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">   http://www.springframework.org/schema/aop/spring-aop-3.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">   http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="tag"><span class="string">   http://www.springframework.org/schema/tx/spring-tx-3.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">   http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">   http://www.springframework.org/schema/context/spring-context-3.0.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">&quot;productService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;service.ProductService&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;loggerAspect&quot;</span> <span class="attr">class</span>=<span class="string">&quot;aspect.LoggerAspect&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置AOP --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- where：在哪些地方（包.类.方法）做增加 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;loggerCutpoint&quot;</span></span></span><br><span class="line"><span class="tag">                      <span class="attr">expression</span>=<span class="string">&quot;execution(* service.ProductService.*(..)) &quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- what:做什么增强 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">id</span>=<span class="string">&quot;logAspect&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;loggerAspect&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- when:在什么时机（方法前/后/前后） --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:around</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;loggerCutpoint&quot;</span> <span class="attr">method</span>=<span class="string">&quot;log&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>再次运行 TestSpring 中的测试代码，代码并没有改变，但是在业务方法运行之前和运行之后，都分别输出了日志信息：</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/7896890-343746f0a4eb7ce0.png" alt="img"></p>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>04.Spring 事物</title>
    <url>/posts/c31fb5e7.html</url>
    <content><![CDATA[<h3 id="Spring-事务Spring-管理事务的⽅式有⼏种？"><a href="#Spring-事务Spring-管理事务的⽅式有⼏种？" class="headerlink" title="Spring 事务Spring 管理事务的⽅式有⼏种？"></a>Spring 事务Spring 管理事务的⽅式有⼏种？</h3><ol>
<li><p>编程式事务，在代码中硬编码。(不推荐使⽤)</p>
</li>
<li><p>声明式事务，在配置⽂件中配置（推荐使⽤）</p>
<p>声明式事务⼜分为两种：</p>
<ol>
<li>基于XML的声明式事务</li>
<li>基于注解的声明式事务</li>
</ol>
</li>
</ol>
<h3 id="Spring-事务中的隔离级别有哪⼏种"><a href="#Spring-事务中的隔离级别有哪⼏种" class="headerlink" title="Spring 事务中的隔离级别有哪⼏种?"></a>Spring 事务中的隔离级别有哪⼏种?</h3><p><strong>TransactionDefinition</strong> 接⼝中定义了五个表示隔离级别的常量：</p>
<p><strong>TransactionDefinition.ISOLATION_DEFAULT:</strong> 使⽤后端数据库默认的隔离级别，Mysql 默认采</p>
<p>⽤的 REPEATABLE_READ隔离级别 Oracle 默认采⽤的 READ_COMMITTED隔离级别.</p>
<p><strong>TransactionDefinition.ISOLATION_READ_UNCOMMITTED:</strong> 最低的隔离级别，允许读取尚未提交的</p>
<p>数据变更，可能会导致脏读、幻读或不可重复读</p>
<p><strong>TransactionDefinition.ISOLATION_READ_COMMITTED:</strong> 允许读取并发事务已经提交的数据，可以</p>
<p>阻⽌脏读，但是幻读或不可重复读仍有可能发⽣</p>
<p><strong>TransactionDefinition.ISOLATION_REPEATABLE_READ:</strong> 对同⼀字段的多次读取结果都是⼀致</p>
<p>的，除⾮数据是被本身事务⾃⼰所修改，可以阻⽌脏读和不可重复读，但幻读仍有可能发⽣。</p>
<p><strong>TransactionDefinition.ISOLATION_SERIALIZABLE:</strong> 最⾼的隔离级别，完全服从ACID的隔离级</p>
<p>别。所有的事务依次逐个执⾏，这样事务之间就完全不可能产⽣⼲扰，也就是说，该级别可以防</p>
<p>⽌脏读、不可重复读以及幻读。但是这将严重影响程序的性能。通常情况下也不会⽤到该级别。</p>
<h3 id="Spring-事务中哪⼏种事务传播⾏为"><a href="#Spring-事务中哪⼏种事务传播⾏为" class="headerlink" title="Spring 事务中哪⼏种事务传播⾏为?"></a>Spring 事务中哪⼏种事务传播⾏为?</h3><p><strong>⽀持当前事务的情况：</strong></p>
<ul>
<li><p><strong>TransactionDefinition.PROPAGATION_REQUIRED</strong>： 如果当前存在事务，则加⼊该事务；如果当前没有事务，则创建⼀个新的事务。</p>
</li>
<li><p><strong>TransactionDefinition.PROPAGATION_SUPPORTS</strong>： 如果当前存在事务，则加⼊该事务；如果当前没有事务，则以⾮事务的⽅式继续运⾏。</p>
</li>
<li><p><strong>TransactionDefinition.PROPAGATION_MANDATORY</strong>： 如果当前存在事务，则加⼊该事务；如果当前没有事务，则抛出异常。（mandatory：强制性）不⽀持当前事务的情况：</p>
</li>
<li><p><strong>TransactionDefinition.PROPAGATION_REQUIRES_NEW</strong>： 创建⼀个新的事务，如果当前存在事务，则把当前事务挂起。</p>
</li>
<li><p><strong>TransactionDefinition.PROPAGATION_NOT_SUPPORTED</strong>： 以⾮事务⽅式运⾏，如果当前存在事务，则把当前事务挂起。</p>
</li>
<li><p><strong>TransactionDefinition.PROPAGATION_NEVER</strong>： 以⾮事务⽅式运⾏，如果当前存在事务，则抛出异常。</p>
</li>
</ul>
<p><strong>其他情况：</strong></p>
<ul>
<li><strong>TransactionDefinition.PROPAGATION_NESTED</strong>： 如果当前存在事务，则创建⼀个事务作为当前事务的嵌套事务来运⾏；如果当前没有事务，则该取值等价TransactionDefinition.PROPAGATION_REQUIRED。</li>
</ul>
<h3 id="Transactional-rollbackFor-Exception-class-注解了解吗？"><a href="#Transactional-rollbackFor-Exception-class-注解了解吗？" class="headerlink" title="@Transactional(rollbackFor = Exception.class)注解了解吗？"></a>@Transactional(rollbackFor = Exception.class)注解了解吗？</h3><p>我们知道：Exception分为运⾏时异常RuntimeException和⾮运⾏时异常。事务管理对于企业应⽤来说是⾄关重要的，即使出现异常情况，它也可以保证数据的⼀致性。当 @Transactional 注解作⽤于类上时，该类的所有 public ⽅法将都具有该类型的事务属性，同时，我们也可以在⽅法级别使⽤该标注来覆盖类级别的定义。如果类或者⽅法加了这个注解，那么这个类⾥⾯的⽅法抛出异常，就会回滚，数据库⾥⾯的数据也会回滚。在 <strong>@Transactional 注解中如果不配置 rollbackFor 属性,那么事物只会在遇到 RuntimeException 的时候才会回滚,加上 rollbackFor=Exception.class ,可以让事物在遇到⾮运⾏时异常时也回滚。</strong></p>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>05 SpringMVC</title>
    <url>/posts/319a95ab.html</url>
    <content><![CDATA[<h3 id="什么是SpringMVC"><a href="#什么是SpringMVC" class="headerlink" title="什么是SpringMVC?"></a>什么是<strong>SpringMVC?</strong></h3><p>⽤在基于<strong>MVC</strong>的表现层开发，类似于<strong>struts2</strong>框架</p>
<h3 id="为什么要使⽤SpringMVC？"><a href="#为什么要使⽤SpringMVC？" class="headerlink" title="为什么要使⽤SpringMVC？"></a>为什么要使⽤<strong>SpringMVC</strong>？</h3><p>下⾯我们来看⼀下Struts2不⾜之处：</p>
<ul>
<li><p>有漏洞【详细可以去搜索】</p>
</li>
<li><p>运⾏速度较慢【⽐SpringMVC要慢】</p>
</li>
<li><p>配置的内容较多【需要使⽤Struts.xml⽂件】</p>
</li>
</ul>
<h3 id="SpringMVC⼯作流程"><a href="#SpringMVC⼯作流程" class="headerlink" title="SpringMVC⼯作流程"></a><strong>SpringMVC</strong>⼯作流程</h3><p><img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/1121080-20190509202147059-745656946-20201110113822800.jpg" alt="img"></p>
<ul>
<li>用户向服务端发送一次请求，这个请求会先到前端控制器**DispatcherServlet(也叫中央控制器)**。</li>
<li><strong>DispatcherServlet</strong>接收到请求后会调用<strong>HandlerMapping</strong>处理器映射器。由此得知，该请求该由哪<strong>Controller来处理（并未调用Controller，只是得知）</strong></li>
<li><strong>DispatcherServlet</strong>调用<strong>HandlerAdapter</strong>处理器适配器，告诉处理器适配器应该要去<strong>执行哪个Controller</strong></li>
<li><strong>HandlerAdapter</strong>处理器适配器去执行<strong>Controller</strong>并得到<strong>ModelAndView</strong>(数据和视图)，并层层返回给<strong>DispatcherServlet</strong></li>
<li><strong>DispatcherServlet将ModelAndView交给ViewReslover视图解析器解析</strong>，然后返回真正的视图。</li>
<li><strong>DispatcherServlet</strong>将模型数据填充到视图中</li>
<li><strong>DispatcherServlet</strong>将结果响应给用户</li>
</ul>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Cloud整合服务注册中心</title>
    <url>/posts/dcff784e.html</url>
    <content><![CDATA[<p><strong>注：这一部分就是演示一下整合Eureka、Zookpper、以及consul相关的操作，如果只想要学习Nacos，请移步到后面的文章。</strong></p>
<h1 id="RestTemplate实现微服务"><a href="#RestTemplate实现微服务" class="headerlink" title="RestTemplate实现微服务"></a>RestTemplate实现微服务</h1><p>我们使用 RestTemplate ，来搭建一个微服务项目。现在有三个个模块：</p>
<ol>
<li>基础模块（模块名：<code>cloud-api-commons</code>）</li>
<li>服务提供模块（模块名：<code>cloud-provider-payment8001</code>）</li>
<li>服务消费模块（模块名：<code>cloud-consumer-order80</code>）</li>
</ol>
<p>  这两个模块之间的通信，是基于 <code>RestTemplate</code> 来完成通信的。<strong>Spring 框架提供的 RestTemplate 类可用于在应用中调用 rest 服务，它简化了与http服务的通信方式，统一了Restful的标准，封装了http 链接， 我们只需要传入url 及返回值类型即可。</strong> 相较于之前常用的 HttpClient，RestTemplate 是一种更优雅的调用 Restful 服务的方式。</p>
<p>​        这一部分就不演示了，就是新建一个项目，然后创建三个子模块，<code>order</code>利用<code>RestTemplate</code>调用<code>payment</code>模块中的接口。核心代码如下（其实就是一个简单的http请求）：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/image-20201210161727486.png" alt="image-20201210161727486"></p>
<p>​        虽然上面的也能实现服务间的调用，但是从截图中，你也能发现：地址是写死的，后期如果<code>payment</code>模块换地址了，还得过来重新修改，而且要是<code>payment</code>模块集群化部署，单单写死一个地址肯定也不能解决问题。</p>
<p>​        也就是说，虽然使用简单的<code>http</code>请求可以实现服务之间的调用，但是 <strong>随着服务模块的增加 、服务模块需要变更为集群模式</strong> 等情况，这时候 <strong>服务与服务之间的管理（链路调用管理、配置管理、注册管理 等等）</strong> 就变得非常的困难。<strong>此时就需要用到 Spring Cloud 全家桶来对我们多个服务进行管理了。</strong></p>
<h1 id="Spring-Cloud"><a href="#Spring-Cloud" class="headerlink" title="Spring Cloud"></a>Spring Cloud</h1><h2 id="Spring-Cloud有哪些常用组件？"><a href="#Spring-Cloud有哪些常用组件？" class="headerlink" title="Spring Cloud有哪些常用组件？"></a>Spring Cloud有哪些常用组件？</h2><p><img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/image-20201210134349006.png" alt="image-20201210134349006"></p>
<h1 id="Eureka"><a href="#Eureka" class="headerlink" title="Eureka"></a>Eureka</h1><p>​        在我们没有服务注册中心时，也可以实现多个服务之间调用。服务调用之间，我们是通过<code>RestTemplate</code> 直接将 <strong>服务提供者</strong> URL写死在代码中的方式来完成调用。</p>
<p>  当服务很多时，单靠代码来手动管理就变得很麻烦。此时就需要引入一个<strong>公共组件</strong>来帮我们统一管理这么多的服务，包括 <strong>服务是否正常运行、集群服务管理、动态感知服务上下线</strong> 等。这个时候我们就用到了<code>Eureka</code>。</p>
<p>​        <code>Eureka</code>是<code>Netflix</code>的子模块，也是核心模块之一。Eureka是基于REST的服务，用于定位服务，以实现云端中间件层服务发现和故障转移，<strong>「服务注册与发现对于微服务来说是非常重要的」</strong>，有了服务注册与发现，只需要使用服务的标识符，就可以访问到服务，而不需要修改服务调用的配置文件了，功能类似于Dubbo的注册中心，比如Zookeeper。</p>
<p><img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/640.png" alt="图片"></p>
<h2 id="服务治理"><a href="#服务治理" class="headerlink" title="服务治理"></a>服务治理</h2><h3 id="什么是服务治理"><a href="#什么是服务治理" class="headerlink" title="什么是服务治理"></a>什么是服务治理</h3><p>  在传统的 RPC 远程调用框架中，管理每个服务与服务之间的依赖关系非常复杂，所以需要使用 <strong><code>服务治理</code></strong> 来管理服务与服务之间的依赖关系，从而实现 <strong><code>服务调用</code>**、</strong><code>负载均衡</code><strong>、</strong><code>容错</code><strong>、</strong><code>服务的注册与发现</code>** 等。</p>
<h3 id="什么是服务注册与发现"><a href="#什么是服务注册与发现" class="headerlink" title="什么是服务注册与发现"></a>什么是服务注册与发现</h3><p>  Eureka 采用了 <strong>CS</strong> 的设计机构 **<code>（C指的是client（客户端软件），S指的是Server（服务端软件）</code>**，Eureka Server 作为服务注册功能的服务器，它是服务注册中心。而系统中的其他微服务，使用 Eureka 的客户端连接到 Eureka Server，并维持心跳连接。这样系统的维护人员就可以通过 Eureka Server 来监听系统中各个微服务是否正常运行。</p>
<p>  在服务注册与发现中，有一个注册中心。当服务器启动的时候，会把当前自己服务器的信息（服务地址、通讯地址等）以别名的方式注册到注册中心上。另一方（消费者|服务提供者）会以该别名的方式去注册中心上获取到实际的服务通讯地址，然后再通过本地RPC调用、远程RPC调用等方式来实现通信。</p>
<h2 id="Eureka-组件介绍"><a href="#Eureka-组件介绍" class="headerlink" title="Eureka 组件介绍"></a>Eureka 组件介绍</h2><p>Eureka 包含两个组件：<strong>1.Eureka Server</strong>   <strong>2.Eureka Client</strong></p>
<h3 id="Eureka-Server"><a href="#Eureka-Server" class="headerlink" title="Eureka Server"></a>Eureka Server</h3><p>   Eureka Server 提供 <strong>服务注册</strong> 服务。各个微服务节点通过配置启动后，会在 Eureka Server 中进行注册，这样 Eureka Server 中的服务注册表中就会存储所有可用服务节点的信息，服务节点的信息可以在界面中直观的看到。</p>
<h3 id="Eureka-Client"><a href="#Eureka-Client" class="headerlink" title="Eureka Client"></a>Eureka Client</h3><p>   Eureka Client 通过 <strong>注册中心</strong> 进行访问。它是一个 Java 客户端，用于简化与 Eureka Server 的交互，客户端同时也具备一个内置的、使用轮询（round-robin）负载算法的负载均衡器。</p>
<p>   在应用启动后，Eureka Client 将会向 Eureka Server <strong>发送心跳连接（周期为30s）</strong>。如果 Eureka Server 在多个心跳周期内没有接收到某个节点的心跳，Eureka Server 将 <strong>会从服务注册表中把这个服务节点移除（默认 90s）</strong></p>
<h2 id="Eureka服务搭建"><a href="#Eureka服务搭建" class="headerlink" title="Eureka服务搭建"></a>Eureka服务搭建</h2><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>尚硅谷周阳的视频及脑图 - <a href="https://www.bilibili.com/video/BV18E411x7eT">https://www.bilibili.com/video/BV18E411x7eT</a></p>
<p>注：下面这个博客很全面也很详细，我这边就记录了一些我想要的和我自己理解的东西</p>
<p>抗麻袋的少年 - <a href="https://blog.csdn.net/lzb348110175">https://blog.csdn.net/lzb348110175</a></p>
]]></content>
      <categories>
        <category>Spring Cloud</category>
      </categories>
      <tags>
        <tag>Spring Cloud</tag>
      </tags>
  </entry>
  <entry>
    <title>00 Spring Cloud目录</title>
    <url>/posts/f9118d52.html</url>
    <content><![CDATA[<p>本系列代码及顺序基本都是参考：</p>
<p>尚硅谷Spring Cloud H版的视频及脑图 - <a href="https://www.bilibili.com/video/BV18E411x7eT">https://www.bilibili.com/video/BV18E411x7eT</a></p>
<p>(如果你发现很相似，不用怀疑，我就是照着写的😹)</p>
<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><p>微服务概念及Spring Cloud简介</p>
<p>Spring Cloud整合服务注册中心</p>
]]></content>
      <categories>
        <category>Spring Cloud</category>
      </categories>
      <tags>
        <tag>Spring Cloud</tag>
      </tags>
  </entry>
  <entry>
    <title>微服务概念及Spring Cloud简介</title>
    <url>/posts/21280ae4.html</url>
    <content><![CDATA[<h1 id="什么是微服务"><a href="#什么是微服务" class="headerlink" title="什么是微服务"></a>什么是微服务</h1><p>​        通常而言，微服务架构是一种<strong>架构模式</strong>，或者说是一种架构风格，<strong>它体长将单一的应用程序划分成一组小的服务</strong>，每个服务运行在其独立的自己的进程内，服务之间互相协调，互相配置，为用户提供最终价值，服务之间采用轻量级的通信机制(<strong>HTTP</strong>)互相沟通，每个服务都围绕着具体的业务进行构建，并且能狗被独立的部署到生产环境中，另外，应尽量避免统一的，集中式的服务管理机制，对具体的一个服务而言，应该根据业务上下文，选择合适的语言，工具(<strong>Maven</strong>)对其进行构建，可以有一个非常轻量级的集中式管理来协调这些服务，可以使用不同的语言来编写服务，也可以使用不同的数据存储。</p>
<h1 id="集群、分布式区别是什么？"><a href="#集群、分布式区别是什么？" class="headerlink" title="集群、分布式区别是什么？"></a>集群、分布式区别是什么？</h1><h3 id="什么是集群"><a href="#什么是集群" class="headerlink" title="什么是集群"></a>什么是集群</h3><blockquote>
<p>同一个业务，部署在多个服务器上(<strong>不同的服务器运行同样的代码，干同一件事</strong>)</p>
</blockquote>
<p><strong>特点：</strong></p>
<ul>
<li>多台服务器都是运行<strong>同一个系统</strong></li>
</ul>
<p><strong>好处：</strong></p>
<ul>
<li>本来只有一台机器处理访问，现在有多台机器处理访问了，<strong>分担了压力</strong>。</li>
<li>如果其中一台或几台机器宕机，暂时不能用了。还有其他机器可以使用。</li>
</ul>
<p><strong>举例：</strong></p>
<p>​        小饭店原来只有一个厨师，切菜洗菜备料炒菜全干。后来客人多了，厨房一个厨师忙不过来，又请了个厨师，两个厨师都能炒一样的菜，这两个厨师的关系是集群。    </p>
<h2 id="什么是分布式"><a href="#什么是分布式" class="headerlink" title="什么是分布式"></a>什么是分布式</h2><blockquote>
<p>一个业务分拆多个子业务，部署在不同的服务器上(不同的服务器，运行不同的代码，为了同一个目的)</p>
</blockquote>
<p><strong>特点：</strong></p>
<ul>
<li>将一个系统的<strong>功能拆分，模块之间独立</strong>，在使用的时候再将这些<strong>独立的模块组合起来</strong>就是一个系统了。</li>
</ul>
<p><strong>好处：</strong></p>
<ul>
<li>模块之间独立，各做各的事，<strong>便于扩展，复用性高</strong></li>
<li><strong>高吞吐量</strong>。某个任务需要一个机器运行10个小时，将该任务用10台机器的分布式跑(将这个任务拆分成10个小任务)，可能2个小时就跑完了</li>
</ul>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>​        小饭店原来只有一个厨师，切菜洗菜备料炒菜全干。这就是单体，后来客人多了，厨房一个厨师忙不过来，又请了个厨师，两个厨师都能炒一样的菜，这两个厨师的关系是集群。为了让厨师专心炒菜，把菜做到极致，又请了个配菜师负责切菜，备菜，备料，厨师和配菜师的关系是分布式，集群和分布式本身不冲突，例如一个配菜师也忙不过来了，又请了个配菜师，两个配菜师关系是集群。</p>
<table>
<thead>
<tr>
<th>名称</th>
<th>概念</th>
<th>特点</th>
</tr>
</thead>
<tbody><tr>
<td>集群</td>
<td><strong>不同的服务器运行同样的代码，干同一件事</strong></td>
<td>多台服务器都是运行<strong>同一个系统</strong></td>
</tr>
<tr>
<td>分布式</td>
<td><strong>不同的服务器，运行不同的代码，为了同一个目的</strong></td>
<td>多态服务器运行的是不用模块的代码</td>
</tr>
</tbody></table>
<p>关于这个知识点我还看到一个比较好玩的图片：</p>
<img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/v2-e628e972ac34b597ba2c1f7f0d326705_r.jpg" alt="img" style="zoom: 67%;" />

<h1 id="微服务优缺点"><a href="#微服务优缺点" class="headerlink" title="微服务优缺点"></a>微服务优缺点</h1><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul>
<li><strong>单一职责</strong>原则，每个服务足够内聚，足够小，代码容易理解，这样能聚焦一个指定的业务功能或业务需求；</li>
<li>开发简单，开发效率高，一个服务可能就是专一的只干一件事；</li>
<li>微服务能够被小团队<strong>单独开发</strong>，这个团队只需2-5个开发人员组成；</li>
<li>微服务是<strong>松耦合</strong>的，是有功能意义的服务，无论是在开发阶段或部署阶段都是独立的；</li>
<li>微服务能使用不同的语言开发；</li>
<li>易于和第三方集成，微服务允许容易且灵活的方式集成自动部署，通过持续集成工具，如jenkins，Hudson，bamboo；</li>
<li>微服务易于被一个开发人员理解，修改和维护，这样小团队能够更关注自己的工作成果，无需通过合作才能体现价值；</li>
<li>微服务允许利用和融合最新技术；</li>
<li><strong>微服务只是业务逻辑的代码，不会和HTML，CSS，或其他的界面混合;</strong></li>
<li><strong>每个微服务都有自己的存储能力，可以有自己的数据库，也可以有统一的数据库；</strong></li>
</ul>
<h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ul>
<li>开发人员要处理分布式系统的复杂性；</li>
<li>多服务运维难度，随着服务的增加，运维的压力也在增大；</li>
<li>系统部署依赖问题；</li>
<li>服务间通信成本问题；</li>
<li>数据一致性问题；</li>
<li>系统集成测试问题；</li>
<li>性能和监控问题；</li>
</ul>
<h1 id="Spring-Cloud-介绍"><a href="#Spring-Cloud-介绍" class="headerlink" title="Spring Cloud 介绍"></a>Spring Cloud 介绍</h1><p>  <strong>Spring Cloud 其实是一系列框架的有序集合</strong>。它利用 Spring Boot 的开发便利性巧妙地简化了分布式系统基础设施的开发，如<strong>服务发现注册、配置中心、消息总线、负载均衡、断路器、数据监控</strong>等，都可以用 Spring Boot 的开发风格做到<strong>一键启动和部署</strong>。</p>
<p>  <strong>Spring Cloud 并没有重复制造轮子，它只是将各家公司开发的比较成熟、经得起实际考验的服务框架组合起来，通过Spring Boot 风格进行再封装屏蔽掉了复杂的配置和实现原理，最终给开发者留出了一套简单易懂、易部署和易维护的分布式系统开发工具包。</strong></p>
<h2 id="SpringCloud和SpringBoot的关系"><a href="#SpringCloud和SpringBoot的关系" class="headerlink" title="SpringCloud和SpringBoot的关系"></a>SpringCloud和SpringBoot的关系</h2><ul>
<li>SpringBoot专注于方便的<strong>「开发单个个体微服务」</strong>；</li>
<li>SpringCloud是关注<strong>「全局的微服务协调整理治理框架」</strong>，它将SpringBoot开发的一个个单体微服务，整合并管理起来，为各个微服务之间提供：<strong>「配置管理、服务发现、断路器、路由、为代理、事件总栈、全局锁、决策竞选、分布式会话」</strong>等等集成服务；</li>
<li>SpringBoot可以离开SpringCloud独立使用，开发项目，但SpringCloud离不开SpringBoot，属于依赖关系；</li>
</ul>
<h1 id="Spring-Cloud-升级后的替代品"><a href="#Spring-Cloud-升级后的替代品" class="headerlink" title="Spring Cloud 升级后的替代品"></a>Spring Cloud 升级后的替代品</h1><p>​        虽然早期Spring Cloud之前有些组件很火爆，但是好景不长， <strong>2018 年 Eureka 2.0 版本的闭源，开源版本停止更新</strong>。（Eureka 来自 Netflix 公司）。在这之后，断断续续很多技术都有所<strong>变更、停更、升级</strong>。**几乎全套都停更了!!!**。导致 Spring Cloud 一度变得很难。</p>
<p>  伴随着Spring Cloud 体系各种技术的停更，<strong>几乎全套都停更了</strong>，Spring Cloud 被迫选择其他技术来替代升级。<strong>Spring Cloud 升级后的技术架构，如下图所示：</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/image-20201210134349006.png" alt="image-20201210134349006"></p>
<ul>
<li><strong>服务注册中心：</strong> 推荐使用 <strong><code>Spring Cloud Alibaba Nacos</code></strong> ，不推荐使用 Consul和Eureka（如果公司不想用新的技术，也可以使用 ZK 作为服务注册中心，用阳哥的话说就是Eureka已经是进ICU了，也不建议使用。）</li>
<li><strong>服务调用：</strong> 使用的是 Ribbon，但这是个<strong>半生不熟</strong>的组件，也进入到了维护的状态。**<code>Spring 官方还在继续用，但是后续会推出一个 Spring Cloud LoadBalancer ，它会慢慢取代 Ribbon</code>**（官方说明：Ribbon 可以继续使用，但停止更新）</li>
<li><strong>服务调用2：</strong> 跟 Ribbon 齐名的 Feign，这哥们差不多也挂了。这哥们长期不更新，Spring 社区实在是等不起了，就自己新出了一个 **<code>OpenFeign</code>**。（所以Feign可以不用了，现在推荐使用 OpenFeign）</li>
<li><strong>服务降级：</strong> 服务降级领域，当属 <strong>豪猪哥</strong> <code>Hystrix</code>了 。但是豪猪哥也<strong>寿终正寝</strong>了。官网已经不推荐使用。<strong>但是在国内 Hystrix 豪猪哥 是 Spring Cloud 自带的一套服务降级和熔断框架，还在大规模的使用。</strong>Hystrix 停更后，国外老外推荐使用 <strong><code>resilience4j</code>**，</strong>但是在国内，我们还是推荐使用Spring Cloud Alibaba 的 Sentinel（强烈推荐，比 Hystrix 还好用）**</li>
<li><strong>服务网关：</strong> <code>Zuul</code>，也属于 Netflix。**<code>它就有点搞笑了，内部开发团队产生分裂，自己把自己作死了。</code>** Netflex 公司后台想自己再出一个 Zuul2，但是没有开发出来便胎死腹中。此时，Spring 便自己开发出了一个新的服务网关 <strong><code>gateway</code></strong> ，这也是目前推荐的主流网关服务组件。</li>
<li><strong>服务配置：</strong> <code>Spring Cloud Config</code> 。它也不再使用了。现在主流推荐：**<code>1.携程网的 apolo</code>** **<code>2. 强烈推荐使用 Spring Cloud Alibaba Nacos(强烈推荐)</code>**。</li>
<li><strong>服务总线：</strong> Spring Cloud 原生，使用的是 <code>Bus</code>，现在也慢慢的被 <code>Spring Cloud Alibaba Nacos</code>替换了。</li>
</ul>
<h1 id="Spring-Cloud版本选择"><a href="#Spring-Cloud版本选择" class="headerlink" title="Spring Cloud版本选择"></a>Spring Cloud版本选择</h1><h2 id="版本命名规则"><a href="#版本命名规则" class="headerlink" title="版本命名规则"></a>版本命名规则</h2><p>​        大多数 Spring 项目是以 <strong><code>&quot;主版本号.次版本号.增量版本号.里程碑版本号&quot;</code></strong> 的形式命名版本。**<code>主版本号</code>** 表示项目的重大重构；**<code>次版本号</code>** 表示新特性的添加和变化；**<code>增量版本号</code>** 一般表示Bug修复；**<code>里程碑版本号</code>** 表示某版本号的里程碑；例如：Spring Framework 稳定版本4.3.5.RELEASE、里程碑版本 5.0.0.M4 等。</p>
<p>  来到 Spring Cloud 这块，它并未采用上面这种方式。而是以 <strong><code>&quot;英文单词SRX（X为数字）&quot;</code></strong> 的形式命名版本号。<strong>因为 Spring Cloud 是一个综合项目，包含很多的子项目，由于子项目也维护着自己的版本号，所以采用这种命名方式避免与子项目的版本混淆。</strong></p>
<p>  <strong>“英文单词”</strong> 叫做 <strong>Release Train</strong>(俗称：火车发版)，Camden、Dalston、Edgware、Finchley、Greenwich、Hoxton 等都是 <strong><code>伦敦地铁</code></strong> 的名称，按照字母顺序发行；</p>
<p>  <strong>“SRX”</strong> 表示 <strong>Service Release</strong>，其中X是一个递增数字。一般表示 Bug 后的版本；在 SR 版本发布之前，会先发布一个 Release 版本，例如在发布 Edgware SR1之前，会先发布 Edgware RELEASE。</p>
<p>  <strong>“GA”</strong> 表示 <strong>General Availability</strong>，正式发布的版本，官方推荐使用此版本。在国外都是用 GA 来说明 Release 版本的。</p>
<p>  <strong>“RC”</strong> 表示 <strong>Release Candidate</strong>，候选版本，几乎不会加入新功能，着重于除错，是最终版之前的最后版本。</p>
<p>  <strong>“SNAPSHOT”</strong> 表示 <strong>快照版本</strong>，不稳定、尚处于开发中的版本。</p>
<p>  <strong>“PRE”</strong> 表示 <strong>预览版</strong>，内部测试版。主要是给开发人员和测试人员测试和找BUG用的，不建议使用。</p>
<h2 id="版本选择问题"><a href="#版本选择问题" class="headerlink" title="版本选择问题"></a>版本选择问题</h2><p>官方有这么一段话：</p>
<blockquote>
<p>If you an existing Spring Boot app you want to add Spring Cloud to that app, the first step is to determine the version of Spring Cloud you should use. The version you use in your app will depend on the version of Spring Boot you are using.</p>
</blockquote>
<p>​        大概意思就是你现在有一个Spring Boot的项目要整合Spring Cloud，则第一步是确定应使用的Spring Cloud版本。而这个版本取决于你使用的Spring Boot的版本。</p>
<p>​        所以我们能发现，我们在创建Spring Cloud项目时也不是随便选择Spring Boot及Spring Cloud版本的，Spring Boot就不用说了，2020年那肯定是推荐使用Spring Boot2.0X的版本了，但是要注意Spring Boot版本要和Spring Cloud版本对应上，不然可能也会出现一些奇怪的问题。下面就介绍一下如何寻找对应关系：</p>
<h3 id="官网查找"><a href="#官网查找" class="headerlink" title="官网查找"></a>官网查找</h3><ol>
<li>在 <a href="https://spring.io/projects/spring-cloud#overview">Spring Cloud官网</a>，我们可以找到图中所对应的关系。</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/image-20201210140729317.png" alt="image-20201210140729317"></p>
<ol start="2">
<li>还是刚刚的页面，在页面最顶端，选择<code>LEARN</code>并点击对应版本还后面的<code>Reference Doc</code>链接，能看到最新的对应关系了</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/image-20201210141057174.png" alt="image-20201210141057174"></p>
<p><img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/image-20201210141443421.png" alt="image-20201210141443421"></p>
<h3 id="接口方式查找"><a href="#接口方式查找" class="headerlink" title="接口方式查找"></a>接口方式查找</h3><p>​         我们也可以通过调用接口的方式，来查看它们的对应关系。接口如下：<a href="https://start.spring.io/actuator/info%EF%BC%88%E4%B8%8D%E5%A4%AA%E5%87%86%E7%A1%AE%EF%BC%8C%E6%98%AF%E4%B8%80%E4%B8%AA%E8%8C%83%E5%9B%B4%EF%BC%89%E3%80%82%E6%9F%A5%E8%AF%A2%E7%BB%93%E6%9E%9C%E5%A6%82%E4%B8%8B%EF%BC%9A">https://start.spring.io/actuator/info（不太准确，是一个范围）。查询结果如下：</a></p>
<p><img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/image-20201210141607537.png" alt="image-20201210141607537"></p>
<h1 id="Dubbo与Spring-Cloud对比"><a href="#Dubbo与Spring-Cloud对比" class="headerlink" title="Dubbo与Spring Cloud对比"></a>Dubbo与Spring Cloud对比</h1><p>  Spring Cloud 俨然已经成为了微服务开发的主流技术栈，在国内开发者社区也是非常的火爆。<strong>虽然 Dubbo 也可以做微服务。Dubbo 是在 2012年开源的，距今也 8 年有余了，在Dubbo 开发中途，阿里也在曾经有过放弃 Dubbo 的维护，处于某些原因，后来将其捐献给了 Apache</strong>。</p>
<p>   Dubbo 框架年代久远，现在 <strong>Spring Cloud Alibaba</strong> 也已经正式的加入到了 <strong>Spring Cloud</strong> 大家庭。并且 Spring Cloud 是最新出来的技术，一定会比 Dubbo 更受欢迎。</p>
<table>
<thead>
<tr>
<th></th>
<th>Spring Cloud</th>
<th>Dubbo</th>
</tr>
</thead>
<tbody><tr>
<td>服务注册发现</td>
<td>Eureka,zk,consul</td>
<td>zk</td>
</tr>
<tr>
<td>服务调用方式</td>
<td>rest方式</td>
<td>rpc</td>
</tr>
<tr>
<td>服务监控</td>
<td>spring boot admin</td>
<td>dubbo monitor</td>
</tr>
<tr>
<td>熔断降级</td>
<td>Hystrix/Sentinel</td>
<td>不完善(Mock)</td>
</tr>
<tr>
<td>服务网关</td>
<td>Zuul/Gateway</td>
<td>无</td>
</tr>
<tr>
<td>分布式配置中心</td>
<td>Config/nacos</td>
<td>无</td>
</tr>
<tr>
<td>消息总线</td>
<td>Bus</td>
<td>无</td>
</tr>
<tr>
<td>MQ消息数据流</td>
<td>Stream</td>
<td>无</td>
</tr>
</tbody></table>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>尚硅谷周阳的视频及脑图 - <a href="https://www.bilibili.com/video/BV18E411x7eT">https://www.bilibili.com/video/BV18E411x7eT</a></p>
<p>知乎 - <a href="https://www.zhihu.com/question/20004877">https://www.zhihu.com/question/20004877</a></p>
<p>注：下面这个博客很全面也很详细，我这边就记录了一些我想要的和我自己理解的东西</p>
<p>抗麻袋的少年 - <a href="https://blog.csdn.net/lzb348110175">https://blog.csdn.net/lzb348110175</a></p>
]]></content>
      <categories>
        <category>Spring Cloud</category>
      </categories>
      <tags>
        <tag>Spring Cloud</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Cloud Alibaba入门</title>
    <url>/posts/59008c3f.html</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="密码不正确，请重新输入！" data-whm="文章不能被校验, 不过您还是能看看解密后的内容！">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">该文章还未完全完成, 请输入密码查看。</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="cca297065023c2808d1848fc0b13d8930be8abdf4c2e02e552d8dc4934e0605f"></script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>SpringCloud Alibaba</category>
      </categories>
      <tags>
        <tag>SpringCloud Alibaba</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis学习目录</title>
    <url>/posts/207e4c9d.html</url>
    <content><![CDATA[<p><a href="./fe29e710.html">Redis基础</a></p>
<p><a href="./3a0d04cf.html">Redis跳跃表</a></p>
<p><a href="./ed3b1c3a.html">Redis常用命令及数据结构相关操作</a></p>
<p><a href="./35743b4b.html">Redis缓存雪崩、缓存穿透、缓存击穿</a></p>
<p><a href="./119ed1dc.html">Redis持久化</a></p>
<p><a href="./b7e51ad7.html">Redis主从复制</a></p>
]]></content>
      <categories>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>一文搞定Nacos</title>
    <url>/posts/ddc0e61e.html</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="密码不正确，请重新输入！" data-whm="文章不能被校验, 不过您还是能看看解密后的内容！">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">该文章还未完全完成, 请输入密码查看。</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="dcd3ba1298d8bba14340ab74d774f034dee56a45b65a9ebee6a82bd71672fdf5"></script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>SpringCloud Alibaba</category>
      </categories>
      <tags>
        <tag>SpringCloud Alibaba</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis常用命令及数据结构相关操作</title>
    <url>/posts/ed3b1c3a.html</url>
    <content><![CDATA[<h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><blockquote>
<p>命令参考：<a href="https://www.runoob.com/redis/redis-commands.html">菜鸟教程-Redis</a></p>
</blockquote>
<h2 id="redis命令"><a href="#redis命令" class="headerlink" title="redis命令"></a>redis命令</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">select index		# 切换数据库，总共默认有16个</span><br><span class="line">flushdb		# 删除当前db下的所有数据</span><br><span class="line">flushall		# 删除所有db下的所有数据</span><br><span class="line">shutdown		# 关闭redis</span><br></pre></td></tr></table></figure>

<h2 id="key操作公用命令"><a href="#key操作公用命令" class="headerlink" title="key操作公用命令"></a>key操作公用命令</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">del key  # 删除key</span><br><span class="line">dump key # 序列化给定key，返回被序列化的值</span><br><span class="line">exists key # 检查key是否存在</span><br><span class="line">expire key second # 为key设定过期时间,以秒计算,可以不写second，默认为秒</span><br><span class="line">ttl key # 返回key剩余时间,-1为永久,-2为失效</span><br><span class="line">persist key # 移除key的过期时间，key将持久保存</span><br><span class="line">keys pattern # 查询所有符号给定模式的key eg：keys *</span><br><span class="line">randomkey # 随机返回一个key</span><br><span class="line">rename key newkey # 修改key的名称</span><br><span class="line">move key db # 移动key至指定数据库中 eg:move a 1</span><br><span class="line">type key # 返回key所储存的值的类型</span><br></pre></td></tr></table></figure>

<blockquote>
<p>expire key second的<strong>使用场景</strong>：<br>1、限时的优惠活动<br>2、网站数据缓存<br>3、手机验证码<br>4、限制网站访客频率</p>
</blockquote>
<h2 id="key的命名建议"><a href="#key的命名建议" class="headerlink" title="key的命名建议"></a>key的命名建议</h2><blockquote>
<ol>
<li>key不要太长，尽量不要超过1024字节。不仅消耗内存，也会降低查找的效率</li>
<li>key不要太短，太短可读性会降低</li>
<li>在一个项目中，key最好使用统一的命名模式，如user:123:password</li>
<li>key区分大小写</li>
</ol>
</blockquote>
<h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><p>​        string类型是二进制安全的，redis的string可以包含任何数据，如图像、序列化对象。一个键最多能存储512MB。<code>二进制安全是指，在传输数据的时候，能保证二进制数据的信息安全，也就是不会被篡改、破译；如果被攻击，能够及时检测出来 </code></p>
<h3 id="常用命令-1"><a href="#常用命令-1" class="headerlink" title="常用命令"></a>常用命令</h3><p><strong>基础操作</strong></p>
<hr>
<p><strong>get key</strong>：获取key的值</p>
<p><strong>del key</strong>：删除指定key</p>
<p><strong>set key value</strong>：设置key，<strong>已存在的会覆盖</strong></p>
<p><strong>setnx key value</strong>：当key不存在时设置key的值，已存在不会覆盖。（set if not exists）,分布式锁的问题</p>
<p><strong>strlen key</strong>：返回key所存储的字符串的长度</p>
<p><strong>setex</strong>：创建一个key，并且设置他的过期时间</p>
<p><strong>getset key value</strong>：返回key的旧值,并设定key的值。当key不存在，返回nil</p>
<p><strong>append key value</strong>：字符串拼接，追加至末尾，如果不存在，为其赋值</p>
<p><strong>字符串操作</strong></p>
<hr>
<p><strong>getrange key start end</strong>：获取key中字符串的子字符串，从start开始，end结束</p>
<p><strong>setrange key start newValue</strong>：设置<strong>startl开始及其往后的值</strong></p>
<p><strong>批量操作</strong></p>
<hr>
<p>**mget key1 [key2 …]**：获取多个key</p>
<p>**mset key1 value1 [key2 value2…]**：连续设置值</p>
<p><strong>msetnx</strong> ：连续设置，如果给定key中有一个已存在，则都不设置</p>
<p><strong>自增自减</strong></p>
<hr>
<p><strong>incr key_name</strong> ：INCR命令key中存储的值+1,如果不存在key，则key中的值话先被初始化为0再加1</p>
<p><strong>incrby key_name</strong>：key中的值增加1</p>
<p><strong>decr key_name</strong>：key中的值减去1</p>
<p><strong>incrby key_name num</strong>：key中的值增加指定num值</p>
<p><strong>decrby key_name num</strong>：  key中的值减少指定num值</p>
<h3 id="String应用场景："><a href="#String应用场景：" class="headerlink" title="String应用场景："></a><strong>String应用场景</strong>：</h3><p>1、String通常用于保存单个字符串或JSON字符串数据<br>2、因为String是二进制安全的，所以可以把保密要求高的图片文件内容作为字符串来存储<br>3、计数器：常规Key-Value缓存应用，如微博数、粉丝数。INCR本身就具有原子性特性，所以不会有线程安全问题</p>
<h2 id="hash"><a href="#hash" class="headerlink" title="hash"></a>hash</h2><p>​        Redis hash是一个string类型的field和value的映射表，<strong>hash特别适用于存储对象（不能有嵌套对象）</strong>。每个hash可以存储<strong>2<sup>32</sup>-1</strong>(40亿左右)键值对。可以看成key和value的map容器。相比于Json，hash占用很少的内存空间。</p>
<h3 id="常用命令-2"><a href="#常用命令-2" class="headerlink" title="常用命令"></a><strong><em>常用命令</em></strong></h3><p><strong>基础操作</strong></p>
<hr>
<p><strong>hset key field value</strong>：为指定的key设定field和value</p>
<p>–&gt; hset user name tom  # 为user对象设置一个name属性，值为tom</p>
<p><strong>hget key field</strong>：获取指定key属性值</p>
<p>–&gt;hget user name  # 获取user对象name属性的值</p>
<p><strong>hsetnx  key field value</strong>：当不存在这个key才创建该field</p>
<p><strong>hgetall key</strong>：返回hash表中所有字段和值</p>
<p><strong>hkeys key</strong>：获取hash表所有字段<br><strong>hvals key</strong>：获取hash表所有值<br><strong>hlen key</strong>：获取hash表中的字段数量<br><strong>hdel key field [field1]**：删除一个或多个hash表的字段<br>**hexists</strong>：在key里面是否存在指定的field，不存在返回0</p>
<p><strong>自增(hash这个好像没有自减操作)</strong></p>
<hr>
<p><strong>hincrby key field num</strong>：增加某个field指定num值</p>
<p>–&gt;hincrby user age 2</p>
<p><strong>hincrbyflost key field num</strong>：增加某个field指定num值（浮点数）</p>
<p>–&gt;hincrbyfloat user age 2.2</p>
<p><strong>批量操作</strong></p>
<hr>
<p>**hmset key field value[field1,value1]**：设置对象中多个键值对</p>
<p>–&gt; hmset user age 12 gender 1</p>
<p>**hmget key field[field1]**：获取对象中多个键值对</p>
<p>–&gt; hmget user age gender</p>
<h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a><strong><em>应用场景</em></strong></h3><p>Hash的应用场景，通常用来存储一个用户信息的对象数据。</p>
<ol>
<li><p>相比于存储对象的string类型的json串，json串修改单个属性需要将整个值取出来。而hash不需要。</p>
</li>
<li><p>相比于多个key-value存储对象，hash节省了很多内存空间</p>
</li>
<li><p>如果hash的属性值被删除完，那么hash的key也会被redis删除</p>
</li>
</ol>
<h2 id="list"><a href="#list" class="headerlink" title="list"></a>list</h2><p>类似于Java中的LinkedList。</p>
<h3 id="常用命令-3"><a href="#常用命令-3" class="headerlink" title="常用命令"></a><strong><em>常用命令</em></strong></h3><p><strong>基本操作</strong></p>
<hr>
<p><strong>lrange key start end</strong>：列表中指定区间内的元素，以 -1 表示列表的最后一个元素， -2 表示列表的倒数第二个元素，以此类推</p>
<p><strong>llen key</strong>：获取列表长度</p>
<p><strong>lindex key index</strong>：获取指定索引的元素，从零开始，-1 表示列表的最后一个元素， -2 表示列表的倒数第二个元素</p>
<p><strong>lrem</strong>：删除指定个数的同一元素</p>
<p>–&gt;lrem list 2 3  （删掉了集合中的两个三）</p>
<p><strong>ltrim key start end</strong> ：对列表进行修改，让列表只保留指定区间的元素，不在指定区间的元素就会被删除（<strong>左闭右开</strong>），从零开始，-1 表示列表的最后一个元素， -2 表示列表的倒数第二个元素</p>
<p>–&gt;如果list中元素为1 2 3 4 5，则ltrim list 2 3 后list剩余元素为3 4</p>
<p><strong>lset key index value</strong>：指定索引位置的值（<strong>位置有值会替换</strong>）</p>
<p><strong>linsert key before|after world value</strong>：在列表元素前或则后插入元素，当指定元素不存在于列表中时，不执行任何操作</p>
<p><strong>出栈入栈</strong></p>
<hr>
<p><strong>lpush key value1 [value2…]**：从左侧插入，右边的先出，</strong>相当于一个栈**</p>
<p>–&gt; lpush list 1 2 3  注：使用lrange list 0 -1 输出为3 2 1</p>
<p><strong>rpush key value1 [value2…]</strong>: 从右侧插入，左边的先出</p>
<p>–&gt; rpush list 1 2 3  注：使用lrange list 0 -1 输出为1 2 3</p>
<p><strong>lpushx key value</strong>：从左侧插入值，如果list不存在，则不操作</p>
<p><strong>rpushx key value</strong>：从右侧插入值，如果list不存在，则不操作</p>
<p><strong>lpop key</strong>：从最左侧移除一个元素</p>
<p><strong>rpop key</strong>：从最右侧移除一个元素</p>
<p><strong>blpop key [key1] timeout</strong>：移除并获取列表第一个元素，如果列表没有元素会阻塞列表到等待超时或发现可弹出元素为止</p>
<p><strong>brpop key [key1] timeout</strong>：移除并获取列表最后一个元素，如果列表没有元素会阻塞列表到等待超时或发现可弹出元素为止</p>
<h3 id="应用场景-1"><a href="#应用场景-1" class="headerlink" title="应用场景"></a><strong><em>应用场景</em></strong></h3><ol>
<li><p>对数据大的集合数据删减</p>
<p>&nbsp;&nbsp; 列表显示、关注列表、粉丝列表、留言评价…分页、热点新闻等</p>
</li>
<li><p>任务队列</p>
<p>&nbsp;&nbsp; list通常用来实现一个消息队列，而且可以确保先后顺序，不必像MySQL那样通过order by来排序</p>
</li>
</ol>
<h3 id="性能总结"><a href="#性能总结" class="headerlink" title="性能总结"></a><strong>性能总结</strong></h3><p>它是一个字符串链表，left、right都可以插入添加；<br>如果键不存在，创建新的链表；<br>如果键已存在，新增内容；<br>如果值全移除，对应的键也就消失了。<br>链表的操作无论是头和尾效率都极高，但假如是对中间元素进行操作，效率就很惨淡了。</p>
<h2 id="set"><a href="#set" class="headerlink" title="set"></a>set</h2><p>唯一、无序</p>
<h3 id="常用命令-4"><a href="#常用命令-4" class="headerlink" title="常用命令"></a>常用命令</h3><p><strong>基础操作</strong></p>
<hr>
<p>**sadd key value1[value2]**：向集合添加成员</p>
<p><strong>scard key</strong>：返回集合成员个数</p>
<p><strong>smembers key</strong>：返回集合中所有成员</p>
<p>**srandmember key [count]**：返回集合中一个或多个随机数</p>
<p>**srem key member1 [member2]**：移除集合中一个或多个成员</p>
<p><strong>spop key</strong>：移除并返回集合中的一个随机元素</p>
<p><strong>smove source destination member</strong>：将member元素从source集合移动到destination集合</p>
<p>**srandmember key [count]**：随机返回集合中一个或多个值</p>
<p><strong>集合相关操作</strong></p>
<hr>
<p>**sdiff key1 [key2]**：返回给定的第一个集合和其他集合的差集(即在key1中的值而在其他key中找不到)</p>
<p><strong>sismember key member</strong>：判断memeber元素是否是集合key成员的成员</p>
<p>**sdiffstore destination key1[key2]**：返回给定的第一个集合与其他的集合的差集并存储在destination中</p>
<p>–&gt; 例如set1：1 2 3   set2：3 4 5 6   则sdiffstore set3 set1 set2之后，用 smembers set3 获取的结果为1 2</p>
<p>**sunionstore destination key1 [key2]**：所有给定集合的并集存储在 destination 集合中</p>
<p>**sinter key1 [key2]**：返回所有集合的交集</p>
<p>**sunion key1 [key2]**：返回所有集合的并集</p>
<h3 id="应用场景-2"><a href="#应用场景-2" class="headerlink" title="应用场景"></a><em>应用场景</em></h3><p>对两个集合间的数据[计算]进行交集、并集、差集运算<br>1、以非常方便的实现如共同关注、共同喜好、二度好友等功能。对上面的所有集合操作，你还可以使用不同的命令选择将结果返回给客户端还是存储到一个新的集合中。<br>2、利用唯一性，可以统计访问网站的所有独立 IP</p>
<h2 id="zset"><a href="#zset" class="headerlink" title="zset"></a>zset</h2><p>有序且不重复。每个元素都会关联一个double类型的分数，Redis通过分数进行从小到大的排序。分数可以重复</p>
<h3 id="常用命令-5"><a href="#常用命令-5" class="headerlink" title="常用命令"></a>常用命令</h3><p><strong>基础操作</strong></p>
<hr>
<p>**zadd key score1 memeber1 [score2 memeber2]**：向集合添加成员及对应分数</p>
<p>–&gt; zadd zset1 1 “a” 2 “b” 3 “c” 2 “d”</p>
<p><strong>zcard key</strong>：获取集合中的元素数量</p>
<p><strong>zcount key min max</strong>：计算在有序集合中指定区间分数的成员数</p>
<p><strong>zrange key start stop</strong>： 指定输出索引范围内的成员</p>
<p><strong>zrangebyscore key min max</strong>： 指定输出score区间内的成员</p>
<p><strong>zrank key member</strong>：返回有序集合指定成员的索引</p>
<p><strong>zrevrange key start stop</strong>：返回有序集中指定区间内的成员，通过索引，分数从高到底</p>
<p>**zrem key member [member …]**： 移除有序集合中的一个或多个成员</p>
<p><strong>zremrangebyrank key start stop</strong>： 移除有序集合中给定的索引区间的所有成员(第一名是0)(低到高排序）</p>
<p><strong>zremrangebyscore  key min max</strong>： 移除有序集合中给定的分数区间的所有成员</p>
<h3 id="应用场景-3"><a href="#应用场景-3" class="headerlink" title="应用场景"></a>应用场景</h3><p>常用于排行榜：</p>
<ol>
<li><p>如推特可以以发表时间作为score来存储</p>
</li>
<li><p>存储成绩</p>
</li>
<li><p>用zset来做带权重的队列，让重要的任务先执行</p>
</li>
</ol>
<h2 id="HyperLogLog"><a href="#HyperLogLog" class="headerlink" title="HyperLogLog"></a>HyperLogLog</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;添加指定元素到 HyperLogLog 中。</span><br><span class="line">PFADD key element [element ...] </span><br><span class="line">&#x2F;&#x2F;返回给定 HyperLogLog 的基数估算值。</span><br><span class="line">PFCOUNT key [key ...] </span><br><span class="line">&#x2F;&#x2F;将多个 HyperLogLog 合并为一个 HyperLogLog</span><br><span class="line">PFMERGE destkey sourcekey [sourcekey ...] </span><br></pre></td></tr></table></figure>

<p>神奇的HyperLoglog解决统计问题 - <a href="https://www.wmyskxz.com/2020/03/02/reids-4-shen-qi-de-hyperloglog-jie-jue-tong-ji-wen-ti/">https://www.wmyskxz.com/2020/03/02/reids-4-shen-qi-de-hyperloglog-jie-jue-tong-ji-wen-ti/</a></p>
<h2 id="GEO"><a href="#GEO" class="headerlink" title="GEO"></a>GEO</h2><p>建议查看：<a href="https://www.wmyskxz.com/2020/03/12/redis-6-geohash-cha-zhao-fu-jin-de-ren/">GeoHash查找附近的人</a></p>
<h2 id="压缩列表了解吗？"><a href="#压缩列表了解吗？" class="headerlink" title="压缩列表了解吗？"></a>压缩列表了解吗？</h2><p>这是 Redis <strong>为了节约内存</strong> 而使用的一种数据结构，<strong>zset</strong> 和 <strong>hash</strong> 容器对象会在元素个数较少的时候，采用压缩列表（ziplist）进行存储。压缩列表是 <strong>一块连续的内存空间</strong>，元素之间紧挨着存储，没有任何冗余空隙。</p>
<blockquote>
<p>因为之前自己也没有学习过，所以找了一篇比较好比较容易理解的文章：</p>
<ul>
<li>图解Redis之数据结构篇——压缩列表 - <a href="https://mp.weixin.qq.com/s/nba0FUEAVRs0vi24KUoyQg">https://mp.weixin.qq.com/s/nba0FUEAVRs0vi24KUoyQg</a></li>
<li>这一篇稍微底层稍微硬核一点：<a href="http://www.web-lovers.com/redis-source-ziplist.html">http://www.web-lovers.com/redis-source-ziplist.html</a></li>
</ul>
</blockquote>
<h2 id="快速列表-quicklist-了解吗？"><a href="#快速列表-quicklist-了解吗？" class="headerlink" title="快速列表 quicklist 了解吗？"></a>快速列表 quicklist 了解吗？</h2><p>Redis 早期版本存储 list 列表数据结构使用的是压缩列表 ziplist 和普通的双向链表 linkedlist，也就是说当元素少时使用 ziplist，当元素多时用 linkedlist。但考虑到链表的附加空间相对较高，<code>prev</code> 和 <code>next</code> 指针就要占去 <code>16</code> 个字节（64 位操作系统占用 <code>8</code> 个字节），另外每个节点的内存都是单独分配，会家具内存的碎片化，影响内存管理效率。</p>
<p>后来 Redis 新版本（3.2）对列表数据结构进行了改造，使用 <code>quicklist</code> 代替了 <code>ziplist</code> 和 <code>linkedlist</code>。</p>
<blockquote>
<ul>
<li>Redis列表list 底层原理 - <a href="https://zhuanlan.zhihu.com/p/102422311">https://zhuanlan.zhihu.com/p/102422311</a></li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>一文搞定OpenFeign</title>
    <url>/posts/a21a98bb.html</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="密码不正确，请重新输入！" data-whm="文章不能被校验, 不过您还是能看看解密后的内容！">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">该文章还未完全完成, 请输入密码查看。</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="9801c7e82d430b00851baa2338472dd4f253fa6a0ac863d41cb81a228e83c207"></script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>SpringCloud Alibaba</category>
      </categories>
      <tags>
        <tag>SpringCloud Alibaba</tag>
      </tags>
  </entry>
  <entry>
    <title>并发编程-操作系统概述</title>
    <url>/posts/c14dcc02.html</url>
    <content><![CDATA[<h1 id="冯诺依曼计算机模型"><a href="#冯诺依曼计算机模型" class="headerlink" title="冯诺依曼计算机模型"></a>冯诺依曼计算机模型</h1><p>​        现代计算机模型基于-<strong>冯诺依曼计算机模型</strong></p>
<p>​        计算机在运行时，先从内存中取出第一条指令，通过控制器的译码，按指令的要求，从存储器中取出数据进行指定的运算和逻辑操作等加工，然后再按地址把结果送到内存中去。接下来，再取出第二条指令，在控制器的指挥下完成规定操作。依此进行下去。直至遇到停止指令。</p>
<p>​        程序与数据一样存贮，按程序编排的顺序，一步一步地取出指令，自动地完成指令规定的操作是计算机最基本的工作模型。这一原理最初是由美籍匈牙利数学家冯.诺依曼于1945年提出来的，故称为冯.诺依曼计算机模型。</p>
<h2 id="计算机五大核心组成部分"><a href="#计算机五大核心组成部分" class="headerlink" title="计算机五大核心组成部分"></a><strong>计算机五大核心组成部分</strong></h2><ol>
<li><p>控制器(Control)：是整个计算机的中枢神经，其功能是对程序规定的控制信息进行解释，根据其要求进行控制，调度程序、数据、地址，协调计算机各部分工作及内存与外设的访问等。</p>
</li>
<li><p>运算器(Datapath)：运算器的功能是对数据进行各种算术运算和逻辑运算，即对数据进行加工处理。</p>
</li>
<li><p>存储器(Memory)：存储器的功能是存储程序、数据和各种信号、命令等信息，并在需要时提供这些信息。</p>
</li>
<li><p>输入(Input system)：输入设备是计算机的重要组成部分，输入设备与输出设备合你为外部设备，简称外设，输入设备的作用是将程序、原始数据、文字、字符、控制命令或现场采集的数据等信息输入到计算机。常见的输入设备有键盘、鼠标器、光电输入机、磁带机、磁盘机、光盘机等。</p>
</li>
<li><p>输出(Output system)：输出设备与输入设备同样是计算机的重要组成部分，它把外算机的中间结果或最后结果、机内的各种数据符号及文字或各种控制信号等信息输出出来。微机常用的输出设备有显示终端CRT、打印机、激光印字机、绘图仪及磁带、光盘机等。</p>
</li>
</ol>
<p>下图为冯诺依曼计算机模型图：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/20200529155038827.png" alt="img"></p>
<p>上图的模型在现代计算机的硬件设计上体现如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/image-20211117200709746.png" alt="image-20211117200709746"></p>
<p>对于软件来说，我们并不需要关系上面所有的内容，侧重于CPU和内存即可。</p>
<h1 id="CPU与内存"><a href="#CPU与内存" class="headerlink" title="CPU与内存"></a>CPU与内存</h1><h2 id="CPU"><a href="#CPU" class="headerlink" title="CPU"></a>CPU</h2><h3 id="CPU内部结构"><a href="#CPU内部结构" class="headerlink" title="CPU内部结构"></a>CPU内部结构</h3><p>CPU内部可以分为如下三个部分：</p>
<ul>
<li>控制单元</li>
</ul>
<p>​        控制单元是整个CPU的指挥控制中心，由指令寄存器IR（Instruction Register）、指令译码器ID（Instruction Decoder）和 操作控制器OC（Operation Controller） 等组成，对协调整个电脑有序工作极为重要。它根据用户预先编好的程序，依次从存储器中取出各条指令，放在指令寄存器IR中，通过指令译码（分析）确定应该进行什么操作，然后通过操作控制器OC，按确定的时序，向相应的部件发出微操作控制信号。操作控制器OC中主要包括：节拍脉冲发生器、控制矩阵、时钟脉冲发生器、复位电路和启停电路等控制逻辑。</p>
<ul>
<li>运算单元</li>
</ul>
<p>​        运算单元是运算器的核心。可以执行算术运算（包括加减乘数等基本运算及其附加运算）和逻辑运算（包括移位、逻辑测试或两个值比较）。相对控制单元而言，运算器接受控制单元的命令而进行动作，即运算单元所进行的全部操作都是由控制单元发出的控制信号来指挥的，所以它是执行部件。</p>
<ul>
<li>数据单元</li>
</ul>
<p>​        存储单元包括 CPU 片内缓存Cache和寄存器组，是 CPU 中暂时存放数据的地方，里面保存着那些等待处理的数据，或已经处理过的数据，CPU 访问寄存器所用的时间要比访问内存的时间短。 寄存器是CPU内部的元件，寄存器拥有非常高的读写速度，所以在寄存器之间的数据传送非常快。采用寄存器，可以减少 CPU 访问内存的次数，从而提高了 CPU 的工作速度。寄存器组可分为专用寄存器和通用寄存器。专用寄存器的作用是固定的，分别寄存相应的数据；而通用寄存器用途广泛并可由程序员规定其用途。</p>
<p><img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/image-20211117201003430.png" alt="image-20211117201003430"></p>
<h3 id="CPU缓存结构"><a href="#CPU缓存结构" class="headerlink" title="CPU缓存结构"></a>CPU缓存结构</h3><p>现代计算机为了提升执行效率，减少CPU与内存的交互，一般会在CPU上集成多级缓存，目前最常见的为三级缓存结构：</p>
<ul>
<li>L1 Cache，分为数据缓存和指令缓存，逻辑核独占</li>
<li>L2 Cache，物理核独占，逻辑核共享</li>
<li>L3 Cache，所有物理核共享</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/image-20211117201318060.png" alt="image-20211117201318060"></p>
<p>存储器存储空间大小：内存&gt;L3&gt;L2&gt;L1&gt;寄存器；</p>
<p>存储器速度快慢排序：寄存器&gt;L1&gt;L2&gt;L3&gt;内存；</p>
<p><strong>PS：</strong>缓存由最小的存储区块-缓存行（cacheline）组成，缓存行的大小通常为<strong>64byte</strong>。</p>
<h3 id="CPU读取存储器数据过程"><a href="#CPU读取存储器数据过程" class="headerlink" title="CPU读取存储器数据过程"></a><strong>CPU读取存储器数据过程</strong></h3><p>1、CPU要取寄存器X的值，只需要一步：直接读取。</p>
<p>2、CPU要取L1 cache的某个值，需要1-3步（或者更多）：把cache行锁住，把某个数据拿来，解锁，如果没锁住就慢了。</p>
<p>3、CPU要取L2 cache的某个值，先要到L1 cache里取，L1当中不存在，在L2里，L2开始加锁，加锁以后，把L2里的数据复制到L1，再执行读L1的过程，上面的3步，再解锁。</p>
<p>4、CPU取L3 cache的也是一样，只不过先由L3复制到L2，从L2复制到L1，从L1到CPU。</p>
<p>5、CPU取内存则最复杂：通知内存控制器占用总线带宽，通知内存加锁，发起内存读请求，等待回应，回应数据保存到L3（如果没有就到L2），再从L3/2到L1，再从L1到CPU，之后解除总线锁定。</p>
<h3 id="为什么要有高速缓存？"><a href="#为什么要有高速缓存？" class="headerlink" title="为什么要有高速缓存？"></a>为什么要有高速缓存？</h3><p>​        CPU在摩尔定律的指导下以每18个月翻一番的速度在发展，然而内存和硬盘的发展速度远远不及CPU。这就造成了高性能能的内存和硬盘价格及其昂贵。然而CPU的高度运算需要高速的数据。为了解决这个问题，CPU厂商在CPU中内置了少量的高速缓存以解决I/O速度和CPU运算速度之间的不匹配问题。</p>
<h3 id="局部性原理"><a href="#局部性原理" class="headerlink" title="局部性原理"></a>局部性原理</h3><p>​        在CPU访问存储设备时，无论是存取数据抑或存取指令，都趋于聚集在一片连续的区域中，这就被称为局部性原理。</p>
<p><strong>时间局部性（Temporal Locality）</strong>：如果一个信息项正在被访问，那么在近期它很可能还会被再次访问。</p>
<blockquote>
<p>比如循环、递归、方法的反复调用等。</p>
</blockquote>
<p><strong>空间局部性（Spatial Locality）</strong>：如果一个存储器的位置被引用，那么将来他附近的位置也会被引用（<strong>虽然可能不使用，但是CPU仍可能会一次性加载当前及其附近的数据到缓存中</strong>）。</p>
<blockquote>
<p>比如顺序执行的代码、连续创建的两个对象、数组等。</p>
</blockquote>
<p>空间局部性例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpatialLocalityTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> size1 = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> size2 = <span class="number">1024</span> * <span class="number">1024</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Integer[][] arr = <span class="keyword">new</span> Integer[size1][size2];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size1; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; size2; j++) &#123;</span><br><span class="line">                arr[i][j] = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size1; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; size2; j++) &#123;</span><br><span class="line">                sum += arr[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> endTime = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;time:&quot;</span> + (endTime - startTime)  + <span class="string">&quot;  sum:&quot;</span> + sum);</span><br><span class="line"></span><br><span class="line">        sum = <span class="number">0</span>;</span><br><span class="line">        startTime = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size2; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; size1; j++) &#123;</span><br><span class="line">                sum += arr[j][i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        endTime = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;time:&quot;</span> + (endTime - startTime)  + <span class="string">&quot;  sum:&quot;</span> + sum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 运行结果</span></span><br><span class="line">time:<span class="number">92</span>  sum:<span class="number">104857600</span></span><br><span class="line">time:<span class="number">136</span>  sum:<span class="number">104857600</span></span><br></pre></td></tr></table></figure>

<p>从结果中我们能看到第二种循环的效率更低，又因为数组是连续存储的，方案一在加载时，CPU会一次性加载多个数据到缓存，减少CPU和内存的交互，而方案二的读取方式不符合空间局部性原则，所以自然而然效率就低了。</p>
<h3 id="CPU运行安全等级"><a href="#CPU运行安全等级" class="headerlink" title="CPU运行安全等级"></a>CPU运行安全等级</h3><p>CPU有4个运行等级：</p>
<ul>
<li>ring0</li>
<li>ring1</li>
<li>ring2</li>
<li>ring3</li>
</ul>
<p>​        <strong>Linux与Windows只用到了2个级别:ring0、ring3</strong>，操作系统内部<strong>内部程序指令通常运行在ring0级别</strong>，操作系统以外的<strong>第三方程序运行在ring3级别</strong>。</p>
<p>​        <strong>第三方程序如果要调用操作系统内部函数功能，由于运行安全级别不够，必须切换CPU运行状态，从ring3切换到ring0，然后执行系统函数</strong>。JVM创建在线程操作时，线程阻塞唤醒都是重型操作就是因为CPU要切换运行状态。</p>
<p>JVM创建线程CPU的工作过程如下：</p>
<ol>
<li>CPU从ring3切换ring0创建线程</li>
<li>创建完毕,CPU从ring0切换回ring3</li>
<li>线程执行JVM程序</li>
<li>线程执行完毕，销毁还得切回ring0</li>
</ol>
<h2 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h2><blockquote>
<p>操作系统为了做到程序运行安全隔离与稳定，将内存空间分为了<strong>用户空间和内核空间</strong>。</p>
</blockquote>
<p>以32位操作系统，4G大小内存空间为例：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/image-20211117205735395.png" alt="image-20211117205735395"></p>
<p>​        Linux为内核代码和数据结构预留了几个页框，这些页永远不会被转出到磁盘上。从 0x00000000 到 0xC0000000（PAGE_OFFSET） 的线性地址可由用户代码 和 内核代码进行引用（<strong>即用户空间</strong>）。从0xC0000000（PAGE_OFFSET）到 0xFFFFFFFFF的线性地址只能由内核代码进行访问（<strong>即内核空间</strong>）。内核代码及其数据结构都必须位于这 1 GB的地址空间中，但是对于此地址空间而言，更大的消费者是物理地址的虚拟映射。</p>
<p>​        这意味着在 4 GB 的内存空间中，只有 3 GB 可以用于用户应用程序。进程与线程只能运行在用户方式（usermode）或内核方式（kernelmode）下。用户程序运行在用户方式下，而系统调用运行在内核方式下。在这两种方式下所用的堆栈不一样：用户方式下用的是一般的堆栈(用户空间的堆栈)，而内核方式下用的是固定大小的堆栈（内核空间的堆栈，一般为一个内存页的大小），即每个进程与线程其实有两个堆栈，分别运行与用户态与内核态。</p>
<h3 id="线程模型"><a href="#线程模型" class="headerlink" title="线程模型"></a>线程模型</h3><p>CPU调度的基本单位线程，也划分为：</p>
<h4 id="内核线程模型（KLT）"><a href="#内核线程模型（KLT）" class="headerlink" title="内核线程模型（KLT）"></a><strong>内核线程模型（KLT）</strong></h4><p><img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/image-20211117210054118.png" alt="image-20211117210054118"></p>
<p>内核线程(KLT)：系统内核管理线程(KLT)，内核保存线程的状态和上下文信息，线程阻塞不会引起进程阻塞。在多处理器系统上，多线程在多处理器上并行运行。<strong>线程的创建、调度和管理由内核完成，效率比ULT要慢，比进程操作快。</strong> </p>
<h4 id="用户线程模型（ULT）"><a href="#用户线程模型（ULT）" class="headerlink" title="用户线程模型（ULT）"></a><strong>用户线程模型（ULT）</strong></h4><p><img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/image-20211117210139017.png" alt="image-20211117210139017"></p>
<p>用户线程(ULT)：<strong>用户程序实现，不依赖操作系统核心，应用提供创建、同步、调度和管理线程的函数来控制用户线程。不需要用户态/内核态切换，速度快。内核对ULT无感知，线程阻塞则进程（包括它的所有线程）阻塞。</strong></p>
<p><strong>JVM使用的是KTL线程模型</strong></p>
<h3 id="进程与线程"><a href="#进程与线程" class="headerlink" title="进程与线程"></a>进程与线程</h3><h4 id="什么是进程？"><a href="#什么是进程？" class="headerlink" title="什么是进程？"></a><strong>什么是进程？</strong></h4><p>​        现代操作系统在运行一个程序时，会为其创建一个进程；例如QQ、微信等。<strong>进程是操作系统资源分配的最小单位。</strong></p>
<h4 id="什么是线程？"><a href="#什么是线程？" class="headerlink" title="什么是线程？"></a><strong>什么是线程？</strong></h4><p>​        <strong>线程是操作系统调度CPU的最小单元</strong>，也叫轻量级进程（Light Weight Process），在一个进程里可以创建多个线程，这些线程都拥有各自的计数器、堆栈和局部变量等属性，并且能够访问共享的内存变量。</p>
<p>​        CPU可以利用时间片轮转的方式在线程上高速切换，让用户感觉到这些线程在同时执行。</p>
<h4 id="串行、并发与并行"><a href="#串行、并发与并行" class="headerlink" title="串行、并发与并行"></a>串行、并发与并行</h4><p><img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/image-20200910195621396.png" alt="image-20200910195621396"></p>
<h4 id="线程上下文切换"><a href="#线程上下文切换" class="headerlink" title="线程上下文切换"></a>线程上下文切换</h4><p>​        多线程编程中一般线程的个数都大于 CPU 核心的个数，而一个 CPU 核心在任意时刻只能被一个线程使用，为了让这些线程都能得到有效执行，CPU 采取的策略是为每个线程分配时间片并轮转的形式。当一个线程的时间片用完的时候就会重新处于就绪状态让给其他线程使用，这个过程就属于一次上下文切换。</p>
<p>​        概括来说就是：当前任务在执行完 CPU 时间片切换到另一个任务之前会先保存自己的状态，以便下次再切换回这个任务时，可以再加载这个任务的状态。<strong>任务从保存到再加载的过程就是一次上下文切换</strong>。</p>
<p>​        上下文切换通常是计算密集型的。也就是说，它需要相当可观的处理器时间，在每秒几十上百次的切换中，每次切换都需要纳秒量级的时间。所以，上下文切换对系统来说意味着消耗大量的 CPU 时间，事实上，可能是操作系统中时间消耗最大的操作。</p>
<p>​        Linux 相比与其他操作系统（包括其他类 Unix 系统）有很多的优点，其中有一项就是，其上下文切换和模式切换的时间消耗非常少。</p>
<h1 id="虚拟机指令集架构"><a href="#虚拟机指令集架构" class="headerlink" title="虚拟机指令集架构"></a>虚拟机指令集架构</h1><p>虚拟机的指令集架构主要分为一下两种：</p>
<p>1、栈指令集架构</p>
<p>2、寄存器指令集架构</p>
<p><strong>栈指令集架构</strong></p>
<ol>
<li>设计和实现更简单，适用于资源受限的系统;</li>
<li>避开了寄存器的分配难题：使用零地址指令方式分配;</li>
<li>指令流中的指令大部分是零地址指令，其执行过程依赖与操作栈，指令集更小，编译器容易实现;</li>
<li>不需要硬件支持，可移植性更好,更好实现跨平台。</li>
</ol>
<p><strong>寄存器指令集架构</strong></p>
<ol>
<li>典型的应用是x86的二进制指令集：比如传统的PC以及Android的Davlik虚拟机。</li>
<li>指令集架构则完全依赖硬件，可移植性差。</li>
<li>性能优秀和执行更高效。</li>
<li>花费更少的指令去完成一项操作。</li>
<li>在大部分情况下，基于寄存器架构的指令集往往都以一地址指令、二地址指令和三地址指令为主，而基于栈式架构的指令集却是以零地址指令为主。</li>
</ol>
]]></content>
      <categories>
        <category>并发编程</category>
      </categories>
      <tags>
        <tag>并发编程</tag>
      </tags>
  </entry>
  <entry>
    <title>并发编程00-目录</title>
    <url>/posts/30832841.html</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>并发编程</category>
      </categories>
      <tags>
        <tag>并发编程</tag>
      </tags>
  </entry>
  <entry>
    <title>一文搞定分布式事务-Seata</title>
    <url>/posts/ca23a95b.html</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="密码不正确，请重新输入！" data-whm="文章不能被校验, 不过您还是能看看解密后的内容！">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">该文章还未完全完成, 请输入密码查看。</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="357dfd724ab5aac864654f951638100d2e683619327d8d93861ec2bf5a59c04c"></script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>SpringCloud Alibaba</category>
      </categories>
      <tags>
        <tag>SpringCloud Alibaba</tag>
      </tags>
  </entry>
  <entry>
    <title>多线程03-锁、synchronized及volatile</title>
    <url>/posts/d0e82df6.html</url>
    <content><![CDATA[<h1 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h1><blockquote>
<p>锁(Lock)可以理解为对共享数据进行保护的一个<strong>许可证</strong>. 对于同 一个许可证保护的共享数据来说,任何线程想要访问这些共享数据必须先持有该许可证。 一个线程只有在持有许可证的情况下才能对这些共享数据进行访问; 并且一个许可证一次只能被一个线程持有; 许可证线程在结束对共享数据的访问后必须释放其持有的许可证。</p>
</blockquote>
<h2 id="锁的相关概念"><a href="#锁的相关概念" class="headerlink" title="锁的相关概念"></a>锁的相关概念</h2><h3 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h3><p>线程死锁描述的是这样⼀种情况：多个线程同时被阻塞，它们中的⼀个或者全部都在等待某个资源被释放。由于线程被⽆限期地阻塞，因此程序不可能正常终⽌。</p>
<p>如下图所示，线程 A 持有资源 2，线程 B 持有资源 1，他们同时都想申请对⽅的资源，所以这两个线</p>
<p>程就会互相等待⽽进⼊死锁状态。</p>
<p><img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/image-20201103114352346.png" alt="image-20201103114352346"></p>
<p><strong>举个例子：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread01</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Object resource1 = <span class="keyword">new</span> Object();<span class="comment">//资源 1</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Object resource2 = <span class="keyword">new</span> Object();<span class="comment">//资源 2</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (resource1) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread() + <span class="string">&quot;get resource1&quot;</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(Thread.currentThread() + <span class="string">&quot;waiting get resource2&quot;</span>);</span><br><span class="line">                <span class="keyword">synchronized</span> (resource2) &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread() + <span class="string">&quot;get resource2&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;线程 1&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (resource2) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread() + <span class="string">&quot;get resource2&quot;</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(Thread.currentThread() + <span class="string">&quot;waiting get resource1&quot;</span>);</span><br><span class="line">                <span class="keyword">synchronized</span> (resource1) &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread() + <span class="string">&quot;get resource1&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;线程 2&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>运行结果：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Thread[线程 1,5,main]get resource1</span><br><span class="line">Thread[线程 2,5,main]get resource2</span><br><span class="line">Thread[线程 1,5,main]waiting get resource2</span><br><span class="line">Thread[线程 2,5,main]waiting get resource1</span><br></pre></td></tr></table></figure>

<h3 id="公平锁与非公平锁"><a href="#公平锁与非公平锁" class="headerlink" title="公平锁与非公平锁"></a>公平锁与非公平锁</h3><blockquote>
<p>内部锁属于非公平锁, 显示 Lock 锁既支持公平锁又支持非公平锁 </p>
</blockquote>
<ul>
<li><p><strong>公平锁：</strong></p>
<p>线程将按照它们发出请求的顺序来获取锁</p>
</li>
<li><p><strong>⾮公平锁：</strong></p>
<p>线程发出请求的时可以<strong>“</strong>插队<strong>”</strong>获取锁</p>
</li>
</ul>
<p><strong>注意：Lock和synchronize都是默认使⽤⾮公平锁的。如果不是必要的情况下，不要使⽤公平锁</strong></p>
<ul>
<li>公平锁会来带⼀些性能的消耗的</li>
</ul>
<h3 id="重⼊锁"><a href="#重⼊锁" class="headerlink" title="重⼊锁"></a>重⼊锁</h3><p>我们来看下⾯的代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">Father</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Child child = <span class="keyword">new</span> Child();</span><br><span class="line">        child.doSomething();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;child.doSomething()&quot;</span>);</span><br><span class="line">        doAnotherThing(); <span class="comment">// 调用自己类中其他的synchronized方法</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">doAnotherThing</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.doSomething(); <span class="comment">// 调用父类的synchronized方法</span></span><br><span class="line">        System.out.println(<span class="string">&quot;child.doAnotherThing()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;father.doSomething()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line">child.doSomething()</span><br><span class="line">father.doSomething()</span><br><span class="line">child.doAnotherThing()</span><br></pre></td></tr></table></figure>

<p>这里的对象锁只有一个,就是child对象的锁,当执行child.doSomething时，该线程获得child对象的锁，在doSomething方法内执行doAnotherThing时再次请求child对象的锁，因为synchronized是重入锁，所以可以得到该锁，继续在doAnotherThing里执行父类的doSomething方法时第三次请求child对象的锁，同理可得到，如果不是重入锁的话，那这后面这两次请求锁将会被一直阻塞，从而导致死锁。</p>
<h3 id="释放锁的时机"><a href="#释放锁的时机" class="headerlink" title="释放锁的时机"></a>释放锁的时机</h3><ol>
<li><p>当⽅法(代码块)执⾏完毕后会<strong>⾃动释放锁</strong>，不需要做任何的操作。</p>
</li>
<li><p><strong>当⼀个线程执⾏的代码出现异常时，其所持有的锁会⾃动释放。</strong>所以不会由于异常导致出现死锁现象。</p>
</li>
</ol>
<h1 id="synchronized关键字"><a href="#synchronized关键字" class="headerlink" title="synchronized关键字"></a>synchronized关键字</h1><blockquote>
<p><strong>synchronized</strong>关键字<strong>解决</strong>的是多个线程之间访问资源的<strong>同步性</strong>，synchronized关键字可以保证被它修饰</p>
<p>的⽅法或者代码块在任意时刻只能有⼀个线程执⾏。</p>
</blockquote>
<h2 id="synchronized最主要的三种使⽤⽅式"><a href="#synchronized最主要的三种使⽤⽅式" class="headerlink" title="synchronized最主要的三种使⽤⽅式"></a>synchronized最主要的三种使⽤⽅式</h2><ul>
<li><p><strong>修饰实例(普通)⽅法：对当前对象加锁。</strong></p>
</li>
<li><p><strong>修饰静态⽅法： 锁是当前类</strong>，会作⽤于类的所有对象实例，因为静态成员不属于任何⼀个实例对象，是类成员（ static 表明这是该类的⼀个静态资源，不管new了多少个对象，只有⼀份）。所以如果⼀个线程A调⽤⼀个实例对象的⾮静态 synchronized ⽅法，⽽线程B需要调⽤这个实例对象所属类的静态 synchronized ⽅法，是允许的，不会发⽣互斥现象。因为访问静态<strong>synchronized</strong> ⽅法占⽤的锁是当前类的锁，⽽访问⾮静态 <strong>synchronized</strong> ⽅法占⽤的锁是当前实例对象锁。</p>
</li>
<li><p><strong>修饰代码块：锁是Synchonized括号里配置的对象。</strong></p>
</li>
</ul>
<p><strong>注1：</strong></p>
<ul>
<li>把<strong>整个方法体</strong>作为同步代码块<strong>默认的锁对象</strong>是 <strong>this</strong> 对象</li>
<li>把<strong>整个静态方法</strong>体作为同步代码块，<strong>默认的锁对象</strong>是当前类的运行时<strong>类</strong>。</li>
<li>尽量<strong>不要使⽤synchronized(String a)</strong> 因为JVM中，字符串常量池具有缓存功能！</li>
</ul>
<p><strong>注2：synchronized是⼀种互斥锁</strong></p>
<ul>
<li><p>⼀次只能允许⼀个线程进⼊被锁住的代码块，synchronized是⼀种<strong>内置锁/监视器锁</strong></p>
</li>
<li><p>Java中<strong>每个对象都有⼀个内置锁(监视器,也可以理解成锁标记)**，⽽</strong>synchronized就是使⽤对象的内置锁(监视器)来将代码块(⽅法)锁定的**。 (锁的是对象，但我们同步的是⽅法/代码块)</p>
</li>
</ul>
<h2 id="synchronized⽤处是什么？"><a href="#synchronized⽤处是什么？" class="headerlink" title="synchronized⽤处是什么？"></a><strong>synchronized</strong>⽤处是什么？</h2><ul>
<li><p>synchronized<strong>保证了线程的原⼦性</strong>。(被保护的代码块是⼀次被执⾏的，没有任何线程会同时访问)</p>
</li>
<li><p>synchronized还<strong>保证了可⻅性</strong>。(当执⾏完synchronized之后，修改后的变量对其他的线程是可⻅)</p>
</li>
</ul>
<h2 id="使用案例"><a href="#使用案例" class="headerlink" title="使用案例"></a>使用案例</h2><p><strong>双重校验锁实现对象单例（线程安全）</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> Singleton uniqueInstance;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> Singleton <span class="title">getUniqueInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//先判断对象是否已经实例过，没有实例化过才进⼊加锁代码</span></span><br><span class="line">        <span class="keyword">if</span> (uniqueInstance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//类对象加锁</span></span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (uniqueInstance == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    uniqueInstance = <span class="keyword">new</span> Singleton();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> uniqueInstance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="volatile关键字"><a href="#volatile关键字" class="headerlink" title="volatile关键字"></a>volatile关键字</h1><h2 id="valatile的作用"><a href="#valatile的作用" class="headerlink" title="valatile的作用"></a>valatile的作用</h2><p><strong>volatile 关键的作用使变量在多个线程之间可见</strong></p>
<h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> D丶Cheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: volatile 的作用可以强制线程从公共内存中读取变量的值,而不是从工作内存中读取</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VolatileTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建 PrintString 对象</span></span><br><span class="line">        PrintString printString = <span class="keyword">new</span> PrintString();</span><br><span class="line">        <span class="comment">// 开启子线程,让子线程执行 printString 对象的 printStringMethod()方法</span></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            printString.printStringMethod();</span><br><span class="line">        &#125;).start();</span><br><span class="line">        <span class="comment">//main 线程睡眠 1000 毫秒</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;在 main 线程中修改打印标志&quot;</span>);</span><br><span class="line">        printString.setContinuePrint(<span class="keyword">false</span>);</span><br><span class="line">        <span class="comment">//程序运行,查看在 main 线程中修改了打印标志之后,子线程打印是否可以结束打印</span></span><br><span class="line">        <span class="comment">//程序运行后, 可能会出现死循环情况</span></span><br><span class="line">        <span class="comment">//分析原因:</span></span><br><span class="line">        <span class="comment">//解决办法:main线程修改了printString对象的打印标志后,子线程读不到,使用volatile关键字修饰printString对象的打印标志.</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">PrintString</span> </span>&#123;</span><br><span class="line">      	<span class="comment">//volatile 的作用可以强制线程从公共内存中读取变量的值,而不是从工作内存中读取</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> continuePrint = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> PrintString <span class="title">setContinuePrint</span><span class="params">(<span class="keyword">boolean</span> continuePrint)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.continuePrint = continuePrint;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printStringMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;开始....&quot;</span>);</span><br><span class="line">            <span class="keyword">while</span> (continuePrint) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;结束++++++++++++++&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Java内存模型"><a href="#Java内存模型" class="headerlink" title="Java内存模型"></a>Java内存模型</h2><p><strong>在 JDK1.2 之前，Java的内存模型实现总是从主存（即共享内存）读取变量</strong>，是不需要进⾏特别的注意的。⽽在<strong>当前的 Java 内存模型下，线程可以把变量保存本地内存（⽐如机器的寄存器）中，⽽不是直接在主存中进⾏读写。这就可能造成⼀个线程在主存中修改了⼀个变量的值，⽽另外⼀个线程还继续使⽤它在寄存器中的变量值的拷⻉，造成数据的不⼀致。</strong>要解决这个问题，就需要把变量声明为<strong>volatile</strong>，这就指示 JVM，这个变量是不稳定的，每次使⽤它都到主存中进⾏读取。</p>
<img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/image-20201103140833702.png" alt="image-20201103140833702" style="zoom: 85%;" />

<p>说⽩了， <strong>volatile</strong> 关键字的主要作⽤就是保证变量的可⻅性然后还有⼀个作⽤是防⽌指令重排序。</p>
<img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/image-20201103140901075.png" alt="image-20201103140901075" style="zoom: 50%;" />

<h2 id="synchronized-关键字和-volatile-关键字的区别"><a href="#synchronized-关键字和-volatile-关键字的区别" class="headerlink" title="synchronized 关键字和 volatile 关键字的区别"></a>synchronized 关键字和 volatile 关键字的区别</h2><ul>
<li><p><strong>volatile</strong>关键字是线程同步的<strong>轻量级实现</strong>，所以<strong>volatile</strong>性能肯定⽐<strong>synchronized</strong>关键字要好。但是<strong>volatile</strong>关键字<strong>只能⽤于变量</strong>⽽<strong>synchronized</strong>关键字可以<strong>修饰⽅法以及代码块</strong>。</p>
<p><strong>注：</strong>synchronized关键字在JavaSE1.6之后进⾏了主要包括为了减少获得锁和释放锁带来的性能消耗⽽引⼊的偏向锁和轻量级锁以及其它各种优化之后执⾏效率有了显著提升，实际开发中使⽤synchronized关键字的场景还是更多⼀些。</p>
</li>
<li><p><strong>volatile</strong>关键字能保证数据的<strong>可⻅性</strong>，<strong>synchronized</strong>关键字能保证数据的<strong>可见性和原子性</strong>。</p>
</li>
<li><p>多线程访问<strong>volatile</strong>关键字<strong>不会发⽣阻塞</strong>，⽽<strong>synchronized</strong>关键字<strong>可能会发⽣阻塞。</strong></p>
</li>
<li><p><strong>volatile</strong>关键字主要⽤于解决变量在多个线程之间的<strong>可⻅性</strong>，⽽ <strong>synchronized</strong>关键字解决的是多个线程之间访问资源的<strong>同步性</strong>。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>多线程</category>
      </categories>
      <tags>
        <tag>多线程</tag>
      </tags>
  </entry>
  <entry>
    <title>多线程05-CAS及常用原子类</title>
    <url>/posts/e5f574a.html</url>
    <content><![CDATA[<h1 id="CAS"><a href="#CAS" class="headerlink" title="CAS"></a>CAS</h1><h2 id="什么是CAS"><a href="#什么是CAS" class="headerlink" title="什么是CAS"></a>什么是CAS</h2><p>**CAS(Compare And Swap)**是由硬件实现的，CAS 可以将 read- modify - write 这类的操作转换为原子操作。</p>
<p><strong>CAS 原理：</strong> 在把数据更新到主内存时，再次读取主内存变量的值，如果现在变量的值与期望的值(操作起始时读取的值)一样就更新。</p>
<h3 id="CAS实现简单计数器"><a href="#CAS实现简单计数器" class="headerlink" title="CAS实现简单计数器"></a>CAS实现简单计数器</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CASTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        CASCounter casCounter = <span class="keyword">new</span> CASCounter();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                System.out.println(casCounter.incrementAndGet());</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">CASCounter</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">volatile</span> <span class="keyword">long</span> value = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">compareAndSwap</span><span class="params">(<span class="keyword">long</span> expectedValue, <span class="keyword">long</span> newValue)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (value == expectedValue) &#123;</span><br><span class="line">                    value = newValue;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">incrementAndGet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">long</span> oldvalue;</span><br><span class="line">            <span class="keyword">long</span> newValue;</span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                oldvalue = value;</span><br><span class="line">                newValue = oldvalue + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">while</span> (!compareAndSwap(oldvalue, newValue));</span><br><span class="line">            <span class="keyword">return</span> newValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="CAS常见问题"><a href="#CAS常见问题" class="headerlink" title="CAS常见问题"></a>CAS常见问题</h3><h4 id="CAS-ABA问题"><a href="#CAS-ABA问题" class="headerlink" title="CAS ABA问题"></a>CAS ABA问题</h4><p>​        CAS 实现原子操作背后有一个假设： 共享变量的当前值与当前线程提供的期望值相同， 就认为这个变量没有被其他线程修改过，实际上这种假设不一定总是成立，如有共享变量 count = 0，发生了如下情况： </p>
<p>​         A 线程对 count 值修改为 10，B 线程对 count 值修改为 20，C 线程对 count 值修改为 0</p>
<p>​        当前线程看到 count 变量的值现在是0，现在是否认为 count变量的值没有被其他线程更新呢? 这种结果是否能够接受?</p>
<p>这就是 CAS 中的 ABA 问题,即共享变量经历了 A-&gt;B-&gt;A 的更新</p>
<p>​        是否能够接受 ABA 问题跟实现的算法有关。<strong>如果想要规避 ABA 问题，可以为共享变量引入一个修订号(时间 戳), 每次修改共享变量时，相应的修订号就会增加1。</strong> ABA 变量更 新过程变量： [A,0] -&gt;[B,1]-&gt;[A,2]， 每次对共享变量的修改都会导致修订号的增加，通过修订号依然可以准确判断变量是否被其他线程修改过。 AtomicStampedReference 类就是基于这种思想产生的。</p>
<h4 id="循环时间长开销大"><a href="#循环时间长开销大" class="headerlink" title="循环时间长开销大"></a>循环时间长开销大</h4><p>​        自旋 CAS 如果长时间不成功，会给 CPU 带来非常大的执行开销。如果 JVM 能支持处理器提供的 pause 指令，那么效率会有一定的提升。pause 指令有两个作用：第一，它可以延迟流水线执行指令（de-pipeline），使 CPU 不会消耗过多的执行资源，延迟的时间取决于具体实现的版本，在一些处理器上延迟时间是零；第二，它可以避免在退出循环的时候因内存顺序冲突（Memory Order Violation）而引起 CPU 流水线被清空（CPU Pipeline Flush），从而提高 CPU 的执行效率。</p>
<h4 id="只能保证一个共享变量的原子操作"><a href="#只能保证一个共享变量的原子操作" class="headerlink" title="只能保证一个共享变量的原子操作"></a>只能保证一个共享变量的原子操作</h4><p>​        当对一个共享变量执行操作时，我们可以使用循环 CAS 的方式来保证原子操作，但是对多个共享变量操作时，循环 CAS 就无法保证操作的原子性，这个时候就可以用锁。还有一个取巧的办法，就是把多个共享变量合并</p>
<p>成一个共享变量来操作。比如，有两个共享变量 i＝2，j=a，合并一下 ij=2a，然后用CAS 来操作 ij。从 Java 1.5 开始， JDK 提供了 AtomicReference 类来保证引用对象之间的原子性，就可以把多个变量放在一个对象里来进行 CAS 操作。</p>
<h1 id="常用原子类"><a href="#常用原子类" class="headerlink" title="常用原子类"></a>常用原子类</h1><p>​        原子变量类基于CAS实现的, 当对共享变量进行read-modify-write 更新操作时,通过原子变量类可以保障操作的原子性与可见性.对变量的 read-modify-write 更新操作是指当前操作不是一个简单的赋值,而 是变量的新值依赖变量的旧值,如自增操作i++. 由于volatile只能保证 可见性,无法保障原子性, 原子变量类内部就是借助一个Volatile变量, 并且保障了该变量的 read-modify-write 操作的原子性, 有时把原子变 量类看作增强的 volatile 变量. 原子变量类有 12 个，如下：</p>
<table>
<thead>
<tr>
<th>分组</th>
<th>原子变量类</th>
</tr>
</thead>
<tbody><tr>
<td>基础数据型</td>
<td>AtomicInteger、 AtomicLong、 AtomicBoolean</td>
</tr>
<tr>
<td>数组型</td>
<td>AtomicIntegerArray、AtomicLongArray、AtomicReferenceArray</td>
</tr>
<tr>
<td>字段更新器</td>
<td>AtomicIntegerFieldUpdater、AtomicLongFieldUpdater、AtomicReferenceFieldUpdater</td>
</tr>
<tr>
<td>引用型</td>
<td>AtomicReference、 AtomicStampedReference、AtomicMarkableReference</td>
</tr>
</tbody></table>
<p> 除了用Synchronized 进行同步外,也可以使用原子类来进行实现</p>
<ul>
<li><strong>AtomicInteger</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AtomicTest02</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> AtomicThread().start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">AtomicThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 用synchronized不需要volatile修饰</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> AtomicInteger count = <span class="keyword">new</span> AtomicInteger();</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="comment">// 不具备原子性</span></span><br><span class="line">            addCount();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//这段代码运行后不是线程安全的,想要线程安全,需要使用 synchronized 进行同步,</span></span><br><span class="line">        <span class="comment">// 如果使用 synchronized 同时,也就不需要 volatile 关键了</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">addCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">                <span class="comment">//自增的后缀形式</span></span><br><span class="line">                count.getAndIncrement();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot; count:&quot;</span> + count);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>AtomicIntegerArray</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AtomicIntegerArrayTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1)创建一个指定长度的原子数组</span></span><br><span class="line">        AtomicIntegerArray atomicIntegerArray = <span class="keyword">new</span> AtomicIntegerArray(<span class="number">10</span>);</span><br><span class="line">        System.out.println(atomicIntegerArray); <span class="comment">//[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]</span></span><br><span class="line">        <span class="comment">//2)返回指定位置的元素</span></span><br><span class="line">        System.out.println(atomicIntegerArray.get(<span class="number">0</span>));<span class="comment">//0</span></span><br><span class="line">        System.out.println(atomicIntegerArray.get(<span class="number">1</span>));<span class="comment">//0</span></span><br><span class="line">        <span class="comment">//3)设置指定位置的元素</span></span><br><span class="line">        atomicIntegerArray.set(<span class="number">0</span>, <span class="number">10</span>);</span><br><span class="line">        <span class="comment">//在设置数组元素的新值时, 同时返回数组元素的旧值</span></span><br><span class="line">        System.out.println(atomicIntegerArray.getAndSet(<span class="number">1</span>, <span class="number">11</span>)); <span class="comment">//0</span></span><br><span class="line">        System.out.println(atomicIntegerArray); <span class="comment">//[10, 11, 0, 0, 0, 0, 0, 0, 0, 0]</span></span><br><span class="line">        <span class="comment">//4)修改数组元素的值,把数组元素加上某个值</span></span><br><span class="line">        System.out.println(atomicIntegerArray.addAndGet(<span class="number">0</span>, <span class="number">22</span>)); <span class="comment">//32</span></span><br><span class="line">        System.out.println(atomicIntegerArray.getAndAdd(<span class="number">1</span>, <span class="number">33</span>)); <span class="comment">//11</span></span><br><span class="line">        System.out.println(atomicIntegerArray); <span class="comment">//[32, 44, 0, 0, 0, 0, 0, 0, 0, 0]</span></span><br><span class="line">        <span class="comment">//5)CAS 操作</span></span><br><span class="line">        <span class="comment">//如果数组中索引值为 0 的元素的值是 32 , 就修改为 222</span></span><br><span class="line">        System.out.println(atomicIntegerArray.compareAndSet(<span class="number">0</span>, <span class="number">32</span>, <span class="number">222</span>)); <span class="comment">//true</span></span><br><span class="line">        System.out.println(atomicIntegerArray); <span class="comment">//[222, 44, 0, 0, 0, 0, 0, 0, 0, 0]</span></span><br><span class="line">        System.out.println(atomicIntegerArray.compareAndSet(<span class="number">1</span>, <span class="number">11</span>, <span class="number">333</span>)); <span class="comment">//false</span></span><br><span class="line">        System.out.println(atomicIntegerArray);</span><br><span class="line">        <span class="comment">//6)自增/自减</span></span><br><span class="line">        System.out.println(atomicIntegerArray.incrementAndGet(<span class="number">0</span>));<span class="comment">//223, 相当于前缀</span></span><br><span class="line">        System.out.println(atomicIntegerArray.getAndIncrement(<span class="number">1</span>));<span class="comment">//44, 相当于后缀</span></span><br><span class="line">        System.out.println(atomicIntegerArray); <span class="comment">//[223, 45, 0, 0, 0, 0, 0, 0, 0, 0]</span></span><br><span class="line">        System.out.println(atomicIntegerArray.decrementAndGet(<span class="number">2</span>)); <span class="comment">//-1</span></span><br><span class="line">        System.out.println(atomicIntegerArray); <span class="comment">//[223, 45, -1, 0, 0, 0, 0, 0, 0, 0]</span></span><br><span class="line">        System.out.println(atomicIntegerArray.getAndDecrement(<span class="number">3</span>)); <span class="comment">//0</span></span><br><span class="line">        System.out.println(atomicIntegerArray);<span class="comment">//[223, 45, -1, -1, 0, 0, 0, 0, 0, 0]</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>AtomicIntegerFieldUpdater</strong></li>
</ul>
<p>AtomicIntegerFieldUpdater 可以对原子整数字段进行更新，要求:</p>
<ol>
<li><p>字符必须使用 volatile 修饰,使线程之间可见</p>
</li>
<li><p>只能是实例变量,不能是静态变量,也不能使用 final 修饰</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AtomicIntegerFieldUpdaterTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User(<span class="number">1234</span>, <span class="number">10</span>);</span><br><span class="line">        <span class="comment">//开启 10 个线程</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> SubThread(user).start();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SubThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> User user; <span class="comment">//要更新的 User 对象</span></span><br><span class="line">        <span class="comment">//创建AtomicIntegerFieldUpdater更新器</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> AtomicIntegerFieldUpdater&lt;User&gt; updater =</span><br><span class="line">                AtomicIntegerFieldUpdater.newUpdater(User.class, <span class="string">&quot;age&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">SubThread</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.user = user;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="comment">//在子线程中对 user 对象的 age 字段自增 10 次</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                System.out.println(updater.getAndIncrement(user));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> id;</span><br><span class="line">        <span class="keyword">volatile</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.id = id;</span><br><span class="line">            <span class="keyword">this</span>.age = age;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                    <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                    <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>AtomicReference</strong></li>
</ul>
<ol>
<li><p>AtomicReference和AtomicInteger非常类似，不同之处就在于AtomicInteger是对整数的封装AtomicReference则对应普通的对象引用。也就是它可以保证你在修改对象引用时的线程安全性。</p>
</li>
<li><p>AtomicReference是作用是对”对象”进行原子操作。 提供了一种读和写都是原子性的对象引用变量。原子意味着多个线程试图改变同一个AtomicReference(例如比较和交换操作)将不会使得AtomicReference处于不一致的状态。</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AtomicReferenceTest</span> </span>&#123;</span><br><span class="line">    <span class="comment">//创建一个 AtomicReference 对象</span></span><br><span class="line">    <span class="keyword">static</span> AtomicReference&lt;String&gt; atomicReference = <span class="keyword">new</span> AtomicReference&lt;&gt;(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">//创建 100 个线程修改字符串</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="keyword">new</span> Random().nextInt(<span class="number">20</span>));</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (atomicReference.compareAndSet(<span class="string">&quot;abc&quot;</span>, <span class="string">&quot;def&quot;</span>)) &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;把字符串 abc 更改为 def&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//再创建 100 个线程</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="keyword">new</span> Random().nextInt(<span class="number">20</span>));</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (atomicReference.compareAndSet(<span class="string">&quot;def&quot;</span>, <span class="string">&quot;abc&quot;</span>)) &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;把字符串 还原为 abc&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        System.out.println(atomicReference.get());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>AtomicReference 可能会出现CAS的ABA问题：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AtomicReferenceABATest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> AtomicReference&lt;String&gt; atomicReference = <span class="keyword">new</span> AtomicReference&lt;&gt;(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">//创建第一个线程,先把 abc 字符串改为&quot;def&quot;,再把字符串还原为 abc</span></span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                atomicReference.compareAndSet(<span class="string">&quot;abc&quot;</span>, <span class="string">&quot;def&quot;</span>);</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;--&quot;</span> + atomicReference.get());</span><br><span class="line">                atomicReference.compareAndSet(<span class="string">&quot;def&quot;</span>, <span class="string">&quot;abc&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(atomicReference.compareAndSet(<span class="string">&quot;abc&quot;</span>, <span class="string">&quot;ghg&quot;</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t1.join();</span><br><span class="line">        t2.join();</span><br><span class="line">        System.out.println(atomicReference.get());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line">Thread-<span class="number">0</span>--def</span><br><span class="line"><span class="keyword">true</span></span><br><span class="line">ghg</span><br></pre></td></tr></table></figure>

<p><strong>AtomicStampedReference解决CAS ABA问题：</strong></p>
<p>在 AtomicStampedReference 原子类中有一个整数标记值 stamp， 每次执行 CAS 操作时，需要对比它的版本，即比较 stamp 的值。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AtomicStampedReferenceTest</span> </span>&#123;</span><br><span class="line"><span class="comment">// 定义 AtomicStampedReference 引用操作&quot;abc&quot;字符串,指定初始化版本号为 0</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> AtomicStampedReference&lt;String&gt; stampedReference = <span class="keyword">new</span> AtomicStampedReference&lt;&gt;(<span class="string">&quot;abc&quot;</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            stampedReference.compareAndSet(<span class="string">&quot;abc&quot;</span>, <span class="string">&quot;def&quot;</span>, stampedReference.getStamp(), stampedReference.getStamp() + <span class="number">1</span>);</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;--&quot;</span> + stampedReference.getReference());</span><br><span class="line">            stampedReference.compareAndSet(<span class="string">&quot;def&quot;</span>, <span class="string">&quot;abc&quot;</span>, stampedReference.getStamp(), stampedReference.getStamp() + <span class="number">1</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">int</span> stamp = stampedReference.getStamp();</span><br><span class="line">            <span class="comment">//获得版本号</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(stampedReference.compareAndSet(<span class="string">&quot;abc&quot;</span>, <span class="string">&quot;ggg&quot;</span>, stamp, stamp + <span class="number">1</span>));</span><br><span class="line">        &#125;);</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t1.join();</span><br><span class="line">        t2.join();</span><br><span class="line">        System.out.println(stampedReference.getReference());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>多线程</category>
      </categories>
      <tags>
        <tag>多线程</tag>
      </tags>
  </entry>
  <entry>
    <title>多线程06-线程间的通信</title>
    <url>/posts/9a87f1fd.html</url>
    <content><![CDATA[<h1 id="等待-通知机制"><a href="#等待-通知机制" class="headerlink" title="等待/通知机制"></a>等待/通知机制</h1><h2 id="什么是等待-通知机制"><a href="#什么是等待-通知机制" class="headerlink" title="什么是等待/通知机制"></a>什么是等待/通知机制</h2><p>​        在单线程编程中，要执行的操作需要满足一定的条件才能执行，可以把这个操作放在 if 语句块中。在多线程编程中，可能 A 线程的条件没有满足只是暂时的，稍后其他的线程 B 可能会更新条件使得 A 线程的条件得到满足。 可以将 A 线程暂停，直到它的条件得到满足后再将 A 线程唤醒。</p>
<h2 id="等待-通知机制的实现"><a href="#等待-通知机制的实现" class="headerlink" title="等待/通知机制的实现"></a>等待/通知机制的实现</h2><p><strong>Object</strong> 类中的 <strong>wait()**方法可以</strong>使执行当前代码的线程等待<strong>，暂停执行，</strong>直到接到通知或被中断为止**。</p>
<p><strong>注意:</strong> </p>
<ol>
<li><p>wait()方法<strong>只能</strong>在<strong>同步代码块中</strong>由<strong>锁对象调用</strong> 。</p>
</li>
<li><p><strong>调用 wait()方法，当前线程会释放锁。</strong></p>
</li>
</ol>
<p>其伪代码如下: </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在调用 wait()方法前获得对象的内部锁 </span></span><br><span class="line"><span class="keyword">synchronized</span> (锁对象) &#123;</span><br><span class="line">    <span class="keyword">while</span> (条件不成立) &#123;</span><br><span class="line">    <span class="comment">//通过锁对象调用 wait()方法暂停线程,会释放锁对象</span></span><br><span class="line">    	锁对象.wait();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//线程的条件满足了继续向下执行 </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Object类的 <strong>notify()可以唤醒线程</strong>，该方法<strong>也必须在同步代码块中由锁对象调用</strong>。<strong>没有使用锁对象调用wait()/notify()会抛出IlegalMonitorStateExeption异常</strong>。 如果有多个等待的线程，notify()方法只能唤醒其中的一个。在同步代码块中<strong>调用 notify()方法后，并不会立即释放锁对象，需要等当前同步代码块执行完后才会释放锁对象，一般将 notify()方法放在同步代码块的最后</strong>。 它的伪代码如下: </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">synchronized</span>( 锁对象 )&#123; </span><br><span class="line">		<span class="comment">//执行修改保护条件 的代码 </span></span><br><span class="line">		<span class="comment">//唤醒其他线程 </span></span><br><span class="line">		锁对象.notify(); </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p><strong>notify()唤醒等待线程示例：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WaitTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Object lock = <span class="keyword">new</span> Object();</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;线程 1 开始等待: &quot;</span> + System.currentTimeMillis());</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    lock.wait();</span><br><span class="line">                    <span class="comment">//线程等待,会释放锁对象,当前线程转入 blocked 阻塞状态</span></span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(<span class="string">&quot;线程 1 结束等待:&quot;</span> + System.currentTimeMillis());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//定义第二个线程,在第二个线程中唤醒第一个线程</span></span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="comment">//notify()方法也需要在同步代码块中,由锁对象调用</span></span><br><span class="line">            <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;线程 2 开始唤醒 : &quot;</span> + System.currentTimeMillis());</span><br><span class="line">                lock.notify();</span><br><span class="line">                <span class="comment">//唤醒在 lock 锁对象上等待的某一个线程</span></span><br><span class="line">                System.out.println(<span class="string">&quot;线程 2 结束唤醒 : &quot;</span> + System.currentTimeMillis());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        t1.start(); <span class="comment">//开启 t1 线程,t1 线程等待</span></span><br><span class="line">        <span class="comment">//main 线程睡眠一下,确保 t1 入睡</span></span><br><span class="line">        Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">        <span class="comment">//t1 线程开启 3 秒后,再开启 t2 线程唤醒 t1 线程</span></span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line">线程 <span class="number">1</span> 开始等待: <span class="number">1607408025863</span></span><br><span class="line">线程 <span class="number">2</span> 开始唤醒 : <span class="number">1607408027866</span></span><br><span class="line">线程 <span class="number">2</span> 结束唤醒 : <span class="number">1607408027866</span></span><br><span class="line">线程 <span class="number">1</span> 结束等待:<span class="number">1607408027866</span></span><br></pre></td></tr></table></figure>

<h2 id="interrupt-方法会中断-wait"><a href="#interrupt-方法会中断-wait" class="headerlink" title="interrupt()方法会中断 wait()"></a>interrupt()方法会中断 wait()</h2><p>​        当<strong>线程处于wait()等待状态时，调用线程对象的interrupt()方法会中断线程的等待状态</strong>，会产生InterruptedException 异常。</p>
<p><strong>示例：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> D丶Cheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: Interrupt()中断线程的wait()等待示例</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InterruptTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        SubThread t = <span class="keyword">new</span> SubThread();</span><br><span class="line">        t.start();</span><br><span class="line">        <span class="comment">// 主线程睡眠一下, 确保子线程处于 Wait 等待状态</span></span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        t.interrupt();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义常量作为锁对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object LOCK = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SubThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (LOCK) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;begin wait...&quot;</span>);</span><br><span class="line">                    LOCK.wait();</span><br><span class="line">                    System.out.println(<span class="string">&quot;end wait...&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;wait等待被中断&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出（可以看到 end wait...并没有输出，直接进入到了catch中）</span></span><br><span class="line">begin wait...</span><br><span class="line">wait等待被中断</span><br></pre></td></tr></table></figure>

<h2 id="notifyAll"><a href="#notifyAll" class="headerlink" title="notifyAll()"></a>notifyAll()</h2><p>​        notify一次只能唤醒一个线程，如果有多个等待的线程，只能随机唤醒其中的某一个; 想要唤醒所有等待线程，需要调用 notifyAll()。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NotifyAllTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Object lock = <span class="keyword">new</span> Object();</span><br><span class="line">        <span class="comment">//定义一个对象作为子线程的锁对象</span></span><br><span class="line">        SubThread t1 = <span class="keyword">new</span> SubThread(lock);</span><br><span class="line">        SubThread t2 = <span class="keyword">new</span> SubThread(lock);</span><br><span class="line">        SubThread t3 = <span class="keyword">new</span> SubThread(lock);</span><br><span class="line">        t1.setName(<span class="string">&quot;t1&quot;</span>);</span><br><span class="line">        t2.setName(<span class="string">&quot;t2&quot;</span>);</span><br><span class="line">        t3.setName(<span class="string">&quot;t3&quot;</span>);</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.start();</span><br><span class="line">        Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">        <span class="comment">//调用 notify()唤醒 子线程</span></span><br><span class="line">        <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">            <span class="comment">// 调用一次 notify()只能唤醒其中的一个线程，其他等待的线程依然处于等待状态，</span></span><br><span class="line">            <span class="comment">// 对于处于等待状态的线程来说，错过了通知信号，这种现象也称为信号丢失</span></span><br><span class="line">            <span class="comment">// lock.notify();</span></span><br><span class="line">            <span class="comment">// 唤醒所有的线程</span></span><br><span class="line">            lock.notifyAll();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SubThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> Object lock;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//定义实例变量作为锁对象</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">SubThread</span><span class="params">(Object lock)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.lock = lock;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot; -- begin wait...&quot;</span>);</span><br><span class="line">                    lock.wait();</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot; -- end wait...&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line">t1 -- begin wait...</span><br><span class="line">t3 -- begin wait...</span><br><span class="line">t2 -- begin wait...</span><br><span class="line">t2 -- end wait...</span><br><span class="line">t3 -- end wait...</span><br><span class="line">t1 -- end wait...</span><br></pre></td></tr></table></figure>

<h2 id="wait-long"><a href="#wait-long" class="headerlink" title="wait(long)"></a>wait(long)</h2><p>​        wait(long)带有 long 类型参数的 wait()等待,如果在参数指定的时间内没有被唤醒,超时后会自动唤醒。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WaitTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Object obj = <span class="keyword">new</span> Object();</span><br><span class="line">        Thread t = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (obj) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;thread begin wait&quot;</span>);</span><br><span class="line">                  	<span class="comment">// 如果 3000 毫秒内没有被唤醒 ,会自动 唤醒</span></span><br><span class="line">                    obj.wait(<span class="number">3000</span>);</span><br><span class="line">                    System.out.println(<span class="string">&quot;end wait....&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        t.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="通知过早"><a href="#通知过早" class="headerlink" title="通知过早"></a>通知过早</h2><p>​        线程 wait()等待后，可以调用 notify()唤醒线程， 如果 notify()唤醒的过早，在等待之前就调用了notify()可能会打乱程序正常的运行逻辑。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NotifyTest02</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Object lock = <span class="keyword">new</span> Object();</span><br><span class="line">        <span class="comment">//定义对象作为锁对象</span></span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;begin wait&quot;</span>);</span><br><span class="line">                    lock.wait();</span><br><span class="line">                    System.out.println(<span class="string">&quot;wait end...&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;begin notify&quot;</span>);</span><br><span class="line">                lock.notify();</span><br><span class="line">                System.out.println(<span class="string">&quot;end notify&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 如果先开启t1,再开启t2线程,大多数情况下,t1先等待,t2再把t1唤醒</span></span><br><span class="line">        <span class="comment">// t1.start();</span></span><br><span class="line">        <span class="comment">// t2.start();</span></span><br><span class="line">        <span class="comment">// 如果先开启t2通知线程,再开启t1等待线程,可能会出现t1线程等待没有收到通知的情况</span></span><br><span class="line">        t2.start();</span><br><span class="line">        t1.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出</span></span><br><span class="line">begin notify</span><br><span class="line">end notify</span><br><span class="line">begin wait</span><br></pre></td></tr></table></figure>

<h2 id="wait等待条件发生了变化"><a href="#wait等待条件发生了变化" class="headerlink" title="wait等待条件发生了变化"></a>wait等待条件发生了变化</h2><p>​        在使用 wait/nofity 模式时，注意 wait 条件发生了变化，也可能会造成逻辑的混乱。 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WaitTest02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//定义添加数据的线程对象</span></span><br><span class="line">        ThreadAdd threadAdd = <span class="keyword">new</span> ThreadAdd();</span><br><span class="line">        <span class="comment">//定义取数据的线程对象</span></span><br><span class="line">        ThreadSubtract threadSubtract = <span class="keyword">new</span> ThreadSubtract();</span><br><span class="line">        threadSubtract.setName(<span class="string">&quot;subtract 1 &quot;</span>);</span><br><span class="line">        <span class="comment">//测试一: 先开启添加数据的线程,再开启一个取数据的线程,大多数情况下会正常取数据</span></span><br><span class="line">        <span class="comment">// threadAdd.start();</span></span><br><span class="line">        <span class="comment">// threadSubtract.start();</span></span><br><span class="line">        <span class="comment">// 测试二: 先开启取数据的线程,再开启添加数据的线程, 取数据的线程会先等待, 等到添加数据之后 ,再取数据</span></span><br><span class="line">        <span class="comment">// threadSubtract.start();</span></span><br><span class="line">        <span class="comment">// threadAdd.start();</span></span><br><span class="line">        <span class="comment">// 测试三: 开启两个取数据的线程,再开启添加数据的线程</span></span><br><span class="line">        ThreadSubtract threadSubtract2 = <span class="keyword">new</span> ThreadSubtract();</span><br><span class="line">        threadSubtract2.setName(<span class="string">&quot;subtract 2 &quot;</span>);</span><br><span class="line">        threadSubtract.start();</span><br><span class="line">        threadSubtract2.start();</span><br><span class="line">        threadAdd.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     某一次执行结果如下:</span></span><br><span class="line"><span class="comment">     subtract 1  begin wait....</span></span><br><span class="line"><span class="comment">     Thread-0存储了一个数据</span></span><br><span class="line"><span class="comment">     subtract 2 从集合中取了data后,集合中数据的数量:0</span></span><br><span class="line"><span class="comment">     subtract 1  end wait..</span></span><br><span class="line"><span class="comment">     Exception in thread &quot;subtract 1 &quot; java.lang.IndexOutOfBoundsException</span></span><br><span class="line"><span class="comment">     分析可能的执行顺序: threadSubtract 线程先启动, 取数据时,集合中没有数据,wait()等待</span></span><br><span class="line"><span class="comment">     threadAdd 线程获得CPU执行权, 添加数据, 把threadSubtract线程唤醒,</span></span><br><span class="line"><span class="comment">     threadSubtract2 线程开启后获得 CPU 执行权, 正常取数据</span></span><br><span class="line"><span class="comment">     threadSubtract 线程获得CPU执行权, 打印 end wait..., 然后再执行list.remove(0)取数据时,</span></span><br><span class="line"><span class="comment">     现在list集合中已经没有数据了,这时会产生java.lang.IndexOutOfBoundsException异常</span></span><br><span class="line"><span class="comment">     出现异常的原因是: 向list集合中添加了一个数据,remove()了两次</span></span><br><span class="line"><span class="comment">     如何解决?</span></span><br><span class="line"><span class="comment">     当等待的线程被唤醒后, 再判断一次集合中是否有数据可取. 即需要把 subtract()方法中的if判断改为while</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">// 1 定义 List 集合</span></span><br><span class="line">    <span class="keyword">static</span> List list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2 定义方法从集合中取数据</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">subtract</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (list) &#123;</span><br><span class="line"><span class="comment">//             if (list.size() == 0) &#123;</span></span><br><span class="line">            <span class="keyword">while</span> (list.size() == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot; begin wait....&quot;</span>);</span><br><span class="line">                    list.wait();</span><br><span class="line">                    <span class="comment">//等待</span></span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot; end wait..&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            Object data = list.remove(<span class="number">0</span>);</span><br><span class="line">            <span class="comment">//从集合中取出一个数据</span></span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;从集合中取了&quot;</span> + data + <span class="string">&quot;后,集合中数据的数量:&quot;</span> + list.size());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3 定义方法向集合中添加数据后,通知等待的线程取数据</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (list) &#123;</span><br><span class="line">            list.add(<span class="string">&quot;data&quot;</span>);</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;存储了一个数据&quot;</span>);</span><br><span class="line">            list.notifyAll();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4 定义线程类调用 add()取数据的方法</span></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadAdd</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            add();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5 定义线程类调用 subtract()方法</span></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadSubtract</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            subtract();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>多线程</category>
      </categories>
      <tags>
        <tag>多线程</tag>
      </tags>
  </entry>
  <entry>
    <title>多线程08-线程管理、线程组</title>
    <url>/posts/a5631d00.html</url>
    <content><![CDATA[<h1 id="线程管理"><a href="#线程管理" class="headerlink" title="线程管理"></a>线程管理</h1><h2 id="线程组（选择性看）"><a href="#线程组（选择性看）" class="headerlink" title="线程组（选择性看）"></a>线程组（选择性看）</h2><p>​        线程组开始是出于安全的考虑设计用来区分不同的 Applet，然而ThreadGroup 并未实现这一目标，在新开发的系统中,已经不常用线程组, 现在一般会将一组相关的线程存入一个数组或一个集合中，如果仅仅是用来区分线程时，可以使用线程名称来区分， 多数情况下，可以忽略线程组。</p>
<p>​        线程组管理线程就类似于在计算机中使用文件夹管理文件， 在线程组中定义一组相似(相关)的线程，在线程组中也可以定义子线程组。</p>
<p>​        Thread 类有几个构造方法允许在创建线程时指定线程组，如果在创建线程时没有指定线程组则该线程就属于父线程所在的线程组。JVM 在创建 main 线程时会为它指定一个线程组，因此每个 Java 线程都有一个线程组与之关联，可以调用线程的 getThreadGroup()方法返回线程组。</p>
<h3 id="创建线程组"><a href="#创建线程组" class="headerlink" title="创建线程组"></a>创建线程组</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadGroupTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1 返回当前 main 线程的线程组</span></span><br><span class="line">        ThreadGroup mainGroup = Thread.currentThread().getThreadGroup();</span><br><span class="line">        System.out.println(mainGroup);</span><br><span class="line">        <span class="comment">// 2 定义线程组,如果不指定所属线程组,则自动归属当前线程所属的线程组中</span></span><br><span class="line">        ThreadGroup group1 = <span class="keyword">new</span> ThreadGroup(<span class="string">&quot;group1&quot;</span>);</span><br><span class="line">        System.out.println(group1);</span><br><span class="line">        <span class="comment">// 3 定义线程组, 同时指定父线程组</span></span><br><span class="line">        ThreadGroup group2 = <span class="keyword">new</span> ThreadGroup(mainGroup, <span class="string">&quot;group2&quot;</span>);</span><br><span class="line">        <span class="comment">// 现在group1与group2都是mainGroup线程组中的子线程组, 调用线程组的getParent()方法返回父线程组</span></span><br><span class="line">        System.out.println(group1.getParent() == mainGroup); <span class="comment">// true</span></span><br><span class="line">        System.out.println(group2.getParent() == mainGroup); <span class="comment">// true</span></span><br><span class="line">        <span class="comment">// 4 在创建线程时指定所属线程组</span></span><br><span class="line">        Runnable r = () -&gt; System.out.println(Thread.currentThread());</span><br><span class="line">        <span class="comment">// 在创建线程时,如果没有指定线程组,则默认线程归属到父线程的线程组中</span></span><br><span class="line">        <span class="comment">// 在main线程中创建了t1线程,称main线程为父线程,t1线程为子线程,</span></span><br><span class="line">        <span class="comment">// t1没有指定线程组则t1线程就归属到父线程main线程的线程组中</span></span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(r, <span class="string">&quot;t1&quot;</span>);</span><br><span class="line">        System.out.println(t1);<span class="comment">//Thread[t1,5,main], t1 的线程组 是 main 线程组</span></span><br><span class="line">        <span class="comment">// 创建线程时,可以指定线程所属线程组</span></span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(group1, r, <span class="string">&quot;t2&quot;</span>);</span><br><span class="line">        Thread t3 = <span class="keyword">new</span> Thread(group2, r, <span class="string">&quot;t3&quot;</span>);</span><br><span class="line">        System.out.println(t2);<span class="comment">//Thread[t2,5,group1]</span></span><br><span class="line">        System.out.println(t3);<span class="comment">//Thread[t3,5,group2]</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="线程组的基本操作"><a href="#线程组的基本操作" class="headerlink" title="线程组的基本操作"></a>线程组的基本操作</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> D丶Cheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 线程组基本使用</span></span><br><span class="line"><span class="comment"> * activeCount() 返回当前线程组及子线程组中活动线程的数量(近似值) </span></span><br><span class="line"><span class="comment"> * activeGroupCount() 返回当前线程组及子线程组中活动线程组的数量(近似值) </span></span><br><span class="line"><span class="comment"> * int enumerate(Thread[] list) 将当前线程组中的活动线程复制到参数数组中 </span></span><br><span class="line"><span class="comment"> * enumerate(ThreadGroup[] list) 将当前线程组中的活动线程组复制到参数数组中 </span></span><br><span class="line"><span class="comment"> * getMaxPriority() 返回线程组的最大优先级，默认是 10 </span></span><br><span class="line"><span class="comment"> * getName() 返回线程组的名称 </span></span><br><span class="line"><span class="comment"> * getParent() 返回父线程组 </span></span><br><span class="line"><span class="comment"> * interrupt() 中断线程组中所有的线程 </span></span><br><span class="line"><span class="comment"> * isDaemon() 判断当前线程组是否为守护线程组 </span></span><br><span class="line"><span class="comment"> * list() 将当前线程组中的活动线程打印出来</span></span><br><span class="line"><span class="comment"> * parentOf(ThreadGroup g) 判断当前线程组是否为参数线程组的父线程组</span></span><br><span class="line"><span class="comment"> * setDaemon(boolean daemon) 设置线程组为守护线程组</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadGroupTest02</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//返回当前线程组</span></span><br><span class="line">        ThreadGroup mainGroup = Thread.currentThread().getThreadGroup();</span><br><span class="line">        <span class="comment">// 再定义线程组，默认 group 的父线程组是 main 线程组</span></span><br><span class="line">        ThreadGroup group = <span class="keyword">new</span> ThreadGroup(<span class="string">&quot;group&quot;</span>);</span><br><span class="line">        Runnable r = () -&gt; &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;-----------当前线程: &quot;</span> + Thread.currentThread());</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">//默认在main</span></span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(r, <span class="string">&quot;t1&quot;</span>);</span><br><span class="line">        <span class="comment">//在指定的group线程组中创建线程</span></span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(group, r, <span class="string">&quot;t2&quot;</span>);</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        <span class="comment">//打印线程组的相关属性</span></span><br><span class="line">        <span class="comment">//4, main 线程组中活动线程: main, t1, t2, 垃圾回收器</span></span><br><span class="line">        System.out.println(<span class="string">&quot;main线程组中活动线程数量: &quot;</span> + mainGroup.activeCount());</span><br><span class="line">        System.out.println(<span class="string">&quot;group子线程组中活动线程数量: &quot;</span> + group.activeCount());<span class="comment">//1, t2</span></span><br><span class="line">        System.out.println(<span class="string">&quot;main线程组中子线程组数量: &quot;</span> + mainGroup.activeGroupCount()); <span class="comment">//1, group</span></span><br><span class="line">        System.out.println(<span class="string">&quot;group子线程组中子线程组数量: &quot;</span> + group.activeGroupCount()); <span class="comment">//0</span></span><br><span class="line">        <span class="comment">//main线程组的父线程组是system</span></span><br><span class="line">        System.out.println(<span class="string">&quot;main线程组的父线程组: &quot;</span> + mainGroup.getParent());</span><br><span class="line">        System.out.println(<span class="string">&quot;group线程组的父线程组: &quot;</span> + group.getParent()); <span class="comment">//main</span></span><br><span class="line">        <span class="comment">//true， 线程组也是它自己的父线程组</span></span><br><span class="line">        System.out.println(mainGroup.parentOf(mainGroup));</span><br><span class="line">        System.out.println(mainGroup.parentOf(group)); <span class="comment">//true</span></span><br><span class="line">        <span class="comment">//把 main 线程组中所有的线程打印输出</span></span><br><span class="line">        mainGroup.list();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="复制线程组中的线程及子线程组"><a href="#复制线程组中的线程及子线程组" class="headerlink" title="复制线程组中的线程及子线程组"></a>复制线程组中的线程及子线程组</h3><p>​        enumerate(Thread[] list) 把当前线程组和子线程组中所有的线程复制到参数数组中 </p>
<p>​        enumerate(Thread[] list, boolean recursive) ，如果第二个参数设置为false，则只复制当前线程组中所有的线程，不复制子线程组中的线程 。</p>
<p>​        enumerate(ThreadGroup[] list) 把当前线程组和子线程组中所有的线程组复制到参数数组中。</p>
<p>​        enumerate(ThreadGroup[] list, boolean recurse) 第二个参数设置false，则只复制当前线程组的子线程组。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadGroupTest03</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//返回 main 线程的 main 线程组</span></span><br><span class="line">        ThreadGroup mainGroup = Thread.currentThread().getThreadGroup();</span><br><span class="line">        <span class="comment">//main 线程组中定义了两个子线程组</span></span><br><span class="line">        <span class="comment">//默认group1的父线程组就是当前线程组 main</span></span><br><span class="line">        ThreadGroup group1 = <span class="keyword">new</span> ThreadGroup(<span class="string">&quot;group1&quot;</span>);</span><br><span class="line">        ThreadGroup group2 = <span class="keyword">new</span> ThreadGroup(mainGroup, <span class="string">&quot;group2&quot;</span>);</span><br><span class="line">        Runnable r = () -&gt; &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;----当前线程: &quot;</span> + Thread.currentThread());</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">//创建并启动三个线程</span></span><br><span class="line">        <span class="comment">//默认在 main 线程组中创建线程</span></span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(r, <span class="string">&quot;t1&quot;</span>);</span><br><span class="line">        <span class="comment">//在 group1 线程组中创建线程</span></span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(group1, r, <span class="string">&quot;t2&quot;</span>);</span><br><span class="line">        <span class="comment">//在 group2 线程组中创建线程</span></span><br><span class="line">        Thread t3 = <span class="keyword">new</span> Thread(group2, r, <span class="string">&quot;t3&quot;</span>);</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.start();</span><br><span class="line">        <span class="comment">//1 把 main 线程组中的线程复制到数组中</span></span><br><span class="line">        <span class="comment">//先定义存储线程的数组,数组的长度为main线程组中活动线程的数量</span></span><br><span class="line">        Thread[] threadList = <span class="keyword">new</span> Thread[mainGroup.activeCount()];</span><br><span class="line">         <span class="comment">/*</span></span><br><span class="line"><span class="comment">        //把main线程组包括子线程组中的所有的线程复制到数组中</span></span><br><span class="line"><span class="comment">        mainGroup.enumerate(threadList);</span></span><br><span class="line"><span class="comment">        //遍历 threadList 数组</span></span><br><span class="line"><span class="comment">        for (Thread thread : threadList) &#123;</span></span><br><span class="line"><span class="comment">            System.out.println(thread);</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        System.out.println(&quot;----------------------------&quot;);</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">// 只把 main 线程组中的线程复制到数组中,不包含子线程组的线程</span></span><br><span class="line">        mainGroup.enumerate(threadList, <span class="keyword">false</span>);</span><br><span class="line">        <span class="comment">//遍历 threadList 数组</span></span><br><span class="line">        <span class="keyword">for</span> (Thread thread : threadList) &#123;</span><br><span class="line">            System.out.println(thread);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;----------------------------&quot;</span>);</span><br><span class="line">        <span class="comment">//2 把 main 线程组中的子线程组复制到数组中</span></span><br><span class="line">        <span class="comment">//定义数组存储线程组</span></span><br><span class="line">        ThreadGroup[] threadGroups = <span class="keyword">new</span> ThreadGroup[mainGroup.activeGroupCount()];</span><br><span class="line">        <span class="comment">//把 main 线程组中的子线程组复制到数组中</span></span><br><span class="line">        mainGroup.enumerate(threadGroups);</span><br><span class="line">        System.out.println(<span class="string">&quot;============================&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (ThreadGroup threadGroup : threadGroups) &#123;</span><br><span class="line">            System.out.println(threadGroup);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="捕获线程的执行异常"><a href="#捕获线程的执行异常" class="headerlink" title="捕获线程的执行异常"></a>捕获线程的执行异常</h2><p>​        在线程的run方法中，如果有受检异常必须进行捕获处理，如果想要获得run()方法中出现的运行时异常信息，可以通过回调<code>UncaughtExceptionHandler</code>接口获得哪个线程出现了运行时异常。在Thread 类中有关处理运行异常的方法有: </p>
<p><code>getDefaultUncaughtExceptionHandler()</code> 获得全局的 ( 默认的)<code>UncaughtExceptionHandler</code></p>
<p><code>getUncaughtExceptionHandler()</code> 获得当前线程的<code>UncaughtExceptionHandler</code> </p>
<p><code>setDefaultUncaughtExceptionHandler(Thread.UncaughtExceptionHandler eh)</code> 设置全局的 <code>UncaughtExceptionHandler</code> </p>
<p><code>setUncaughtExceptionHandler(Thread.UncaughtExceptionHandler eh)</code>设置当前线程的 <code>UncaughtExceptionHandler</code></p>
<p>​        当线程运行过程中出现异常，JVM会调用Thread类的<code>dispatchUncaughtException(Throwable e)</code>方法 , 该方法会调用<code>getUncaughtExceptionHandler().uncaughtException(this, e)</code> 如果想要获得线程中出现异常的信息，就需要设置线程的<code>UncaughtExceptionHandler</code>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UnCaughtExceptionHandlerTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1 设置线程全局的回调接口</span></span><br><span class="line">        Thread.setDefaultUncaughtExceptionHandler(<span class="keyword">new</span> Thread.UncaughtExceptionHandler() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">uncaughtException</span><span class="params">(Thread t, Throwable e)</span> </span>&#123;</span><br><span class="line">                <span class="comment">//t 参数接收发生异常的线程, e 就是该线程中的异常</span></span><br><span class="line">                System.out.println(t.getName() + <span class="string">&quot;线程产生了异常: &quot;</span> + e.getMessage());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;开始运行&quot;</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123; <span class="comment">//线程中的受检异常必须捕获处理</span></span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 制造一个异常</span></span><br><span class="line">            System.out.println(<span class="number">12</span> / <span class="number">0</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        t1.start();</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            String txt = <span class="keyword">null</span>;</span><br><span class="line">            <span class="comment">//制造一个异常</span></span><br><span class="line">            System.out.println(txt.length());</span><br><span class="line">        &#125;).start();</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        在实际开发中,这种设计异常处理的方式还是比较常用的,尤其是异常执行的方法如果线程产生了异常,</span></span><br><span class="line"><span class="comment">        JVM会调用dispatchUncaughtException()方法,在该方法中调用了getUncaughtExceptionHandler()</span></span><br><span class="line"><span class="comment">        .uncaughtException(this, e); 如果当前线程设置了UncaughtExceptionHandler</span></span><br><span class="line"><span class="comment">        回调接口就直接调用它自己的uncaughtException方法,如果没有设置则调用当前线程所在线程组</span></span><br><span class="line"><span class="comment">        UncaughtExceptionHandler回调接口的uncaughtException方法,</span></span><br><span class="line"><span class="comment">        如果线程组也没有设置回调接口,则直接把异常的栈信息定向到 System.err 中</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="注入Hook钩子线程"><a href="#注入Hook钩子线程" class="headerlink" title="注入Hook钩子线程"></a>注入Hook钩子线程</h2><p>​        现在很多软件包括 MySQL， Zookeeper， kafka 等都存在 Hook 线程的校验机制，目的是校验进程是否已启动，防止重复启动程序。Hook 线程也称为钩子线程，当 JVM退出的时候会执行Hook线程。经常在程序启动时创建一个.lock 文件， 用.lock 文件校验程序是否启动，在程序退出(JVM 退出)时删除该.lock 文件，在 Hook 线程中除了防止重新启动进程外，还可以做资源释放，尽量避免在 Hook 线程中进行复杂的操作。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HookTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1 注入 Hook 线程,在程序退出时删除.lock 文件</span></span><br><span class="line">        Runtime.getRuntime().addShutdownHook(<span class="keyword">new</span> Thread() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;JVM 退出,会启动当前Hook线程,在Hook线程中删除.lock文件&quot;</span>);</span><br><span class="line">                getLockFile().toFile().delete();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//2 程序运行时,检查 lock 文件是否存在,如果 lock 文件存在,则抛出异常</span></span><br><span class="line">        <span class="keyword">if</span> (getLockFile().toFile().exists()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;程序已启动&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//文件不存在,说明程序是第一次启动,创建 lock 文件</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                getLockFile().toFile().createNewFile();</span><br><span class="line">                System.out.println(<span class="string">&quot;程序在启动时创建了 lock 文件&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//模拟程序运行</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;程序正在运行&quot;</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Path <span class="title">getLockFile</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Paths.get(<span class="string">&quot;&quot;</span>, <span class="string">&quot;tmp.lock&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>多线程</category>
      </categories>
      <tags>
        <tag>多线程</tag>
      </tags>
  </entry>
  <entry>
    <title>多线程10-如何确定线程池大小</title>
    <url>/posts/5c4e7054.html</url>
    <content><![CDATA[<blockquote>
<p>虽然使用线程池的好处很多，但是如果其线程数配置不合理，不仅可能达不到预期效果，反而可能降低应用的性能。</p>
</blockquote>
<p>​        使用标准构造器 ThreadPoolExecutor 去创建线程池线程池时，会涉及到线程数的配置，而线程数的配置与异步任务类型是分不开的。这里将线程池的异步任务大致分为以下三类： </p>
<ul>
<li><strong>IO 密集型任务</strong> </li>
</ul>
<p>​        此类任务主要是执行 IO 操作。由于执行 IO 操作的时间较长，导致 CPU 的利用率不高，这类任务 CPU 常处于空闲状态。Netty 的 IO 读写操作，为此类任务的典型例子。 </p>
<ul>
<li><strong>CPU 密集型任务</strong> </li>
</ul>
<p>​        此类任务主要是执行计算任务。由于响应时间很快，CPU 一直在运行，这种任务 CPU 的利用率很高。 </p>
<ul>
<li><strong>混合型任务</strong> </li>
</ul>
<p>​        此类任务既要执行逻辑计算，又要进行 IO 操作（如 RPC 调用、数据库访问）。相对来说由于执行 IO 操作的耗时较长（一次网络往返往往在数百毫秒级别），这类任务 CPU 利用率也不是太高。Web 服务器的 HTTP 请求处理操作，为此类任务的典型例子。 </p>
<p>一般情况下，针对以上不同类型的异步任务，需要创建不同类型的线程池，并进行针对性的参数配置。 </p>
<h2 id="CPU密集型"><a href="#CPU密集型" class="headerlink" title="CPU密集型"></a>CPU密集型</h2><p>​        由于 IO 密集型任务的 CPU 使用率较低，导致线程空余时间很多，所以通常就需要开 CPU核心数两倍的线程。当 IO 线程空闲时，可以启用其他线程继续使用 CPU，以提高 CPU 的使用率。 </p>
<p>​        Netty 的 IO 处理任务，就是典型的 IO 密集型任务。所以，Netty 的 Reactor 反应器实现类（定制版的线程池）的 IO 处理线程数，默认正好为 CPU 核数的 2 倍，以下是其相关的代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">MultithreadEventLoopGroup</span> <span class="keyword">extends</span> <span class="title">MultithreadEventExecutorGroup</span> <span class="keyword">implements</span> <span class="title">EventLoopGroup</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> InternalLogger logger = InternalLoggerFactory.getInstance(MultithreadEventLoopGroup.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_EVENT_LOOP_THREADS;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        DEFAULT_EVENT_LOOP_THREADS = Math.max(<span class="number">1</span>, SystemPropertyUtil.getInt(</span><br><span class="line">                <span class="string">&quot;io.netty.eventLoopThreads&quot;</span>, NettyRuntime.availableProcessors() * <span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">            logger.debug(<span class="string">&quot;-Dio.netty.eventLoopThreads: &#123;&#125;&quot;</span>, DEFAULT_EVENT_LOOP_THREADS);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ....</span></span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure>

<h2 id="IO密集型"><a href="#IO密集型" class="headerlink" title="IO密集型"></a>IO密集型</h2><p>​        CPU 密集型任务也叫计算密集型任务，其特点是要进行大量计算而需要消耗 CPU 资源，比如计算圆周率、对视频进行高清解码等等。CPU 密集型任务虽然也可以并行完成，但是并行的任务越多，花在任务切换的时间就越多，CPU 执行任务的效率就越低，所以，要最高效地利用 CPU，CPU 密集型任务的并行执行的数量应当等于 CPU 的核心数。比如说 4 个核心的 CPU，通过 4 个线程并行执行 4 个 CPU 密集型任务，此时的效率是最高的。但是如果线程数远远超出 CPU 核心数量，需要频繁的切换线程，线程上下文切换时需要消耗时间的，反而会使得任务效率下降。因此对于 CPU 密集型的任务来说，线程数等于 CPU 数就行。</p>
<h2 id="混合任务型"><a href="#混合任务型" class="headerlink" title="混合任务型"></a>混合任务型</h2><p>​        混合型任务既要执行逻辑计算，又要进行大量非 CPU 耗时操作（如 RPC 调用、数据库访问、 网络通信等），所以，混合型任务 CPU 利用率不是太高，非 CPU 耗时往往是 CPU 耗时的数倍。 比如在 Web 应用处理 HTTP 请求处理时，一次请求处理会包括 DB 操作、RPC 操作、缓存操作等 多种耗时操作。一般来说，一次 Web 请求的 CPU 计算耗时往往较少，大致在 100ms-500ms 之间，而其他耗时操作会占用 500ms-1000ms 甚至更多的时间。 </p>
<p>​        在为混合型任务创建线程池时，如何确定线程数呢？业界有一个比较成熟的估算公式，具体如下：</p>
<blockquote>
<p>最佳线程数 = （（线程等待时间+线程 CPU 时间）/线程 CPU 时间 ）* CPU 核数 </p>
<p>经过简单的换算，以上公式可进一步转换为： </p>
<p>最佳线程数目 =（线程等待时间与线程 CPU 时间之比 + 1）* CPU 核数</p>
</blockquote>
<p>通过公式可以看出：等待时间所占比例越高，需要越多线程；CPU 耗时所占比例越高，需要越少线程。下面举个例子：比如在 Web 服务器处理 HTTP 请求时，假设平均线程 CPU 运行时间为 100ms，而线程等待时间（比如包括 DB 操作、RPC 操作、缓存操作等）为 900ms，如果 CPU 核数为 8，那么根据上面这个公式，估算如下： </p>
<blockquote>
<p>（900ms+100ms）/100ms × 8= 10 × 8 = 80</p>
</blockquote>
<h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><p>ThreadPoolExecutorDeam:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadPoolSizeDemo</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * CPU核数</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CPU_COUNT = Runtime.getRuntime().availableProcessors();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 空闲保活时限，单位秒</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> KEEP_ALIVE_SECONDS = <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 有界队列size</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> QUEUE_SIZE = <span class="number">10000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAXIMUM_POOL_SIZE = CPU_COUNT;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//懒汉式单例创建线程池：用于CPU密集型任务</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">CpuIntenseTargetThreadPoolLazyHolder</span> </span>&#123;</span><br><span class="line">        <span class="comment">//线程池： 用于CPU密集型任务</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadPoolExecutor EXECUTOR = <span class="keyword">new</span> ThreadPoolExecutor(</span><br><span class="line">                MAXIMUM_POOL_SIZE,</span><br><span class="line">                MAXIMUM_POOL_SIZE,</span><br><span class="line">                KEEP_ALIVE_SECONDS,</span><br><span class="line">                TimeUnit.SECONDS,</span><br><span class="line">                <span class="keyword">new</span> LinkedBlockingQueue(QUEUE_SIZE),</span><br><span class="line">                <span class="keyword">new</span> SimpleThreadFactory(<span class="string">&quot;CPU&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">static</span> &#123;</span><br><span class="line">            EXECUTOR.allowCoreThreadTimeOut(<span class="keyword">true</span>);</span><br><span class="line">            <span class="comment">//JVM关闭时的钩子函数</span></span><br><span class="line">            Runtime.getRuntime().addShutdownHook(</span><br><span class="line">                    <span class="keyword">new</span> ShutdownHookThread(<span class="string">&quot;CPU密集型任务线程池&quot;</span>, <span class="keyword">new</span> Callable&lt;Void&gt;() &#123;</span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="function"><span class="keyword">public</span> Void <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                            <span class="comment">//优雅关闭线程池</span></span><br><span class="line">                            shutdownThreadPoolGracefully(EXECUTOR);</span><br><span class="line">                            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * IO线程池最大线程数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> IO_MAX = Math.max(<span class="number">2</span>, CPU_COUNT * <span class="number">2</span>);</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * IO线程池核心线程数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> IO_CORE = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取执行CPU密集型任务的线程池</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ThreadPoolExecutor <span class="title">getCpuIntenseTargetThreadPool</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> CpuIntenseTargetThreadPoolLazyHolder.EXECUTOR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//懒汉式单例创建线程池：用于IO密集型任务</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">IoIntenseTargetThreadPoolLazyHolder</span> </span>&#123;</span><br><span class="line">        <span class="comment">//线程池： 用于IO密集型任务</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadPoolExecutor EXECUTOR = <span class="keyword">new</span> ThreadPoolExecutor(</span><br><span class="line">                IO_MAX,</span><br><span class="line">                IO_MAX,</span><br><span class="line">                KEEP_ALIVE_SECONDS,</span><br><span class="line">                TimeUnit.SECONDS,</span><br><span class="line">                <span class="keyword">new</span> LinkedBlockingQueue(QUEUE_SIZE),</span><br><span class="line">                <span class="keyword">new</span> SimpleThreadFactory(<span class="string">&quot;io&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">static</span> &#123;</span><br><span class="line">            EXECUTOR.allowCoreThreadTimeOut(<span class="keyword">true</span>);</span><br><span class="line">            <span class="comment">//JVM关闭时的钩子函数</span></span><br><span class="line">            Runtime.getRuntime().addShutdownHook(</span><br><span class="line">                    <span class="keyword">new</span> ShutdownHookThread(<span class="string">&quot;IO密集型任务线程池&quot;</span>, <span class="keyword">new</span> Callable&lt;Void&gt;() &#123;</span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="function"><span class="keyword">public</span> Void <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                            <span class="comment">//优雅关闭线程池</span></span><br><span class="line">                            shutdownThreadPoolGracefully(EXECUTOR);</span><br><span class="line">                            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取执行IO密集型任务的线程池</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ThreadPoolExecutor <span class="title">getIoIntenseTargetThreadPool</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> IoIntenseTargetThreadPoolLazyHolder.EXECUTOR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MIXED_MAX = <span class="number">128</span>;  <span class="comment">//最大线程数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String MIXED_THREAD_AMOUNT = <span class="string">&quot;mixed.thread.amount&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//懒汉式单例创建线程池：用于混合型任务</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MixedTargetThreadPoolLazyHolder</span> </span>&#123;</span><br><span class="line">        <span class="comment">//首先从环境变量 mixed.thread.amount 中获取预先配置的线程数</span></span><br><span class="line">        <span class="comment">//如果没有对 mixed.thread.amount 做配置，则使用常量 MIXED_MAX 作为线程数</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> max = (<span class="keyword">null</span> != System.getProperty(MIXED_THREAD_AMOUNT)) ?</span><br><span class="line">                Integer.parseInt(System.getProperty(MIXED_THREAD_AMOUNT)) : MIXED_MAX;</span><br><span class="line">        <span class="comment">//线程池： 用于混合型任务</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadPoolExecutor EXECUTOR = <span class="keyword">new</span> ThreadPoolExecutor(</span><br><span class="line">                max,</span><br><span class="line">                max,</span><br><span class="line">                KEEP_ALIVE_SECONDS,</span><br><span class="line">                TimeUnit.SECONDS,</span><br><span class="line">                <span class="keyword">new</span> LinkedBlockingQueue(QUEUE_SIZE),</span><br><span class="line">                <span class="keyword">new</span> SimpleThreadFactory(<span class="string">&quot;mixed&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">static</span> &#123;</span><br><span class="line">            EXECUTOR.allowCoreThreadTimeOut(<span class="keyword">true</span>);</span><br><span class="line">            <span class="comment">//JVM关闭时的钩子函数</span></span><br><span class="line">            Runtime.getRuntime().addShutdownHook(<span class="keyword">new</span> ShutdownHookThread(<span class="string">&quot;混合型任务线程池&quot;</span>, <span class="keyword">new</span> Callable&lt;Void&gt;() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> Void <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                    <span class="comment">//优雅关闭线程池</span></span><br><span class="line">                    shutdownThreadPoolGracefully(EXECUTOR);</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取执行混合型任务的线程池</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ThreadPoolExecutor <span class="title">getMixedTargetThreadPool</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> MixedTargetThreadPoolLazyHolder.EXECUTOR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleThreadFactory</span> <span class="keyword">implements</span> <span class="title">ThreadFactory</span> </span>&#123;</span><br><span class="line">        <span class="comment">//线程池数量</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> AtomicInteger poolNumber = <span class="keyword">new</span> AtomicInteger(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> ThreadGroup group;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//线程数量</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> AtomicInteger threadNumber = <span class="keyword">new</span> AtomicInteger(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> String threadTag;</span><br><span class="line"></span><br><span class="line">        SimpleThreadFactory(String threadTag) &#123;</span><br><span class="line">            SecurityManager s = System.getSecurityManager();</span><br><span class="line">            group = (s != <span class="keyword">null</span>) ? s.getThreadGroup() :</span><br><span class="line">                    Thread.currentThread().getThreadGroup();</span><br><span class="line">            <span class="keyword">this</span>.threadTag = <span class="string">&quot;pool-&quot;</span> + poolNumber.getAndIncrement() + <span class="string">&quot;-&quot;</span> + threadTag + <span class="string">&quot;-&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Thread <span class="title">newThread</span><span class="params">(Runnable target)</span> </span>&#123;</span><br><span class="line">            Thread t = <span class="keyword">new</span> Thread(group, target,</span><br><span class="line">                    threadTag + threadNumber.getAndIncrement(),</span><br><span class="line">                    <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">if</span> (t.isDaemon()) &#123;</span><br><span class="line">                t.setDaemon(<span class="keyword">false</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (t.getPriority() != Thread.NORM_PRIORITY) &#123;</span><br><span class="line">                t.setPriority(Thread.NORM_PRIORITY);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> t;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 优雅关闭线程池</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> threadPool</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">shutdownThreadPoolGracefully</span><span class="params">(ExecutorService threadPool)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (threadPool == <span class="keyword">null</span> || threadPool.isTerminated()) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            threadPool.shutdown();   <span class="comment">//拒绝接受新任务</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SecurityException | NullPointerException e) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 等待 60 s，等待线程池中的任务完成执行</span></span><br><span class="line">            <span class="keyword">if</span> (!threadPool.awaitTermination(<span class="number">60</span>, TimeUnit.SECONDS)) &#123;</span><br><span class="line">                <span class="comment">// 调用 shutdownNow 取消正在执行的任务</span></span><br><span class="line">                threadPool.shutdownNow();</span><br><span class="line">                <span class="comment">// 再次等待 60 s，如果还未结束，可以再次尝试，或则直接放弃</span></span><br><span class="line">                <span class="keyword">if</span> (!threadPool.awaitTermination(<span class="number">60</span>, TimeUnit.SECONDS)) &#123;</span><br><span class="line">                    System.err.println(<span class="string">&quot;线程池任务未正常执行结束&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException ie) &#123;</span><br><span class="line">            <span class="comment">// 捕获异常，重新调用 shutdownNow</span></span><br><span class="line">            threadPool.shutdownNow();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//任然没有关闭，循环关闭1000次，每次等待10毫秒</span></span><br><span class="line">        <span class="keyword">if</span> (!threadPool.isTerminated()) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (threadPool.awaitTermination(<span class="number">10</span>, TimeUnit.MILLISECONDS)) &#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    threadPool.shutdownNow();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">                System.err.println(e.getMessage());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>ShutdownHookThread：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShutdownHookThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> hasShutdown = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> AtomicInteger shutdownTimes = <span class="keyword">new</span> AtomicInteger(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Callable callback;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Create the standard hook thread, with a call back, by using &#123;<span class="doctag">@link</span> Callable&#125; interface.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> callback The call back function.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ShutdownHookThread</span><span class="params">(String name, Callable callback)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(<span class="string">&quot;JVM退出钩子(&quot;</span> + name + <span class="string">&quot;)&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.callback = callback;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Thread run method.</span></span><br><span class="line"><span class="comment">     * Invoke when the jvm shutdown.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(getName() + <span class="string">&quot; starting.... &quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (!<span class="keyword">this</span>.hasShutdown)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">this</span>.hasShutdown = <span class="keyword">true</span>;</span><br><span class="line">                <span class="keyword">long</span> beginTime = System.currentTimeMillis();</span><br><span class="line">                <span class="keyword">try</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">this</span>.callback.call();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e)</span><br><span class="line">                &#123;</span><br><span class="line">                    System.out.println(getName() + <span class="string">&quot; error: &quot;</span> + e.getMessage());</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">long</span> consumingTimeTotal = System.currentTimeMillis() - beginTime;</span><br><span class="line">                System.out.println(getName() + <span class="string">&quot;  耗时(ms): &quot;</span> + consumingTimeTotal);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>多线程</category>
      </categories>
      <tags>
        <tag>多线程</tag>
      </tags>
  </entry>
  <entry>
    <title>01.集合常见面试题</title>
    <url>/posts/712091b3.html</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/image-20201123135855532.png" alt="image-20201123135855532"></p>
<h1 id="说说-List-Set-Map-三者的区别？"><a href="#说说-List-Set-Map-三者的区别？" class="headerlink" title="说说 List,Set,Map 三者的区别？"></a>说说 List,Set,Map 三者的区别？</h1><ul>
<li><strong>List</strong> (对付顺序的好帮⼿)： 存储的元素是<strong>有序的、可重复的</strong>。</li>
<li><strong>Set</strong> (注重独⼀⽆⼆的性质): 存储的元素是<strong>⽆序的、不可重复的</strong>。</li>
<li><strong>Map</strong> (⽤ Key 来搜索的专家): 使⽤<strong>键值对（kye-value）存储</strong>，类似于数学上的函数 y=f(x)，“x”代表 key，”y”代表 value，Key 是⽆序的、不可重复的，value 是⽆序的、可重复的，每个键最多映射到⼀个值。</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/image-20210302112410102.png" alt="image-20210302112410102"></p>
<h1 id="集合框架底层数据结构总结"><a href="#集合框架底层数据结构总结" class="headerlink" title="集合框架底层数据结构总结"></a>集合框架底层数据结构总结</h1><h2 id="Collection-接⼝下⾯的集合"><a href="#Collection-接⼝下⾯的集合" class="headerlink" title="Collection 接⼝下⾯的集合"></a>Collection 接⼝下⾯的集合</h2><h3 id="List"><a href="#List" class="headerlink" title="List"></a><strong>List</strong></h3><ul>
<li><p><strong>Arraylist</strong> ：</p>
<p>底层用<strong>数组</strong>实现的存储。</p>
<p><strong>特点</strong>：查询效率高，增删效率低，线程不安全。使用频率很高。</p>
</li>
<li><p><strong>Vector</strong> ：</p>
<p>底层用<strong>数组</strong>实现的存储。</p>
<p><strong>特点</strong>：线程安全</p>
</li>
<li><p><strong>LinkedList</strong> ： </p>
<p>底层使用<strong>双向链表</strong>(JDK1.6 之前为循环链表，JDK1.7 取消了循环)实现</p>
<p><strong>特点</strong>：增删效率高，查询效率低，线程不安全。</p>
</li>
</ul>
<h3 id="Set"><a href="#Set" class="headerlink" title="Set"></a><strong>Set</strong></h3><ul>
<li><p><strong>HashSet （⽆序，唯⼀）</strong>: <strong>基于HashMap</strong>实现的，底层采⽤ <strong>HashMap</strong>来保存元素</p>
</li>
<li><p><strong>LinkedHashSet</strong> ： LinkedHashSet 是 HashSet 的⼦类，并且其<strong>内部是通过LinkedHashMap 来实现</strong>的。</p>
</li>
<li><p><strong>TreeSet</strong> （有序，唯⼀）： 红⿊树(⾃平衡的排序⼆叉树)</p>
</li>
</ul>
<h2 id="Map-接⼝下⾯的集合"><a href="#Map-接⼝下⾯的集合" class="headerlink" title="Map 接⼝下⾯的集合"></a>Map 接⼝下⾯的集合</h2><h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a><strong>Map</strong></h3><p><strong>HashMap</strong> ： <strong>JDK1.8 之前 HashMap 由数组+链表</strong>组成的，数组是 HashMap 的主体，链表则是主要为了解决哈希冲突⽽存在的（“拉链法”解决冲突）。JDK1.8 以后在解决哈希冲突时有了较⼤的变化，当链表⻓度⼤于阈值（默认为 8）（将链表转换成红⿊树前会判断，如果当前数组的⻓度⼩于 64，那么会选择先进⾏数组扩容，⽽不是转换为红⿊树）时，将链表转化为红⿊树，以减少搜索时间</p>
<p><strong>LinkedHashMap</strong> ： LinkedHashMap 继承⾃ HashMap ，所以它的底层仍然是基于拉链式散列结构即由数组和链表或红⿊树组成。另外， LinkedHashMap 在上⾯结构的基础上，增加了⼀条双向链表，使得上⾯的结构可以保持键值对的插⼊顺序。</p>
<p><strong>Hashtable</strong> ： <strong>数组+链表组成</strong>的，数组是 HashMap 的主体，链表则是主要为了解决哈希冲突⽽存在的</p>
<p><strong>TreeMap</strong> ： 红⿊树（⾃平衡的排序⼆叉树）</p>
<h1 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h1><h2 id="ArrayList底层时Object-，数组的长度是有限制的-那ArrayList是怎么自动扩容的"><a href="#ArrayList底层时Object-，数组的长度是有限制的-那ArrayList是怎么自动扩容的" class="headerlink" title="ArrayList底层时Object[]，数组的长度是有限制的,那ArrayList是怎么自动扩容的"></a>ArrayList底层时Object[]，数组的长度是有限制的,那ArrayList是怎么自动扩容的</h2><p>ArrayList可以通过构造方法在初始化的时候指定底层数组的大小。</p>
<p>通过无参构造方法的方式ArrayList()初始化，则赋值底层数Object[] elementData为一个默认空数组Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = {}所以数组容量为0，只有真正对数据进行添加add时，才分配默认DEFAULT_CAPACITY = 10的初始容量。</p>
<p>大家可以分别看下他的无参构造器和有参构造器，无参就是默认大小0，有参会判断参数。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * Constructs an empty list with the specified initial capacity.</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span>  initialCapacity  the initial capacity of the list</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@throws</span> IllegalArgumentException if the specified initial capacity</span></span><br><span class="line"><span class="comment">  *         is negative</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">if</span> (initialCapacity &gt; <span class="number">0</span>) &#123;</span><br><span class="line">         <span class="keyword">this</span>.elementData = <span class="keyword">new</span> Object[initialCapacity];</span><br><span class="line">     &#125; <span class="keyword">else</span> <span class="keyword">if</span> (initialCapacity == <span class="number">0</span>) &#123;</span><br><span class="line">         <span class="keyword">this</span>.elementData = EMPTY_ELEMENTDATA;</span><br><span class="line">     &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Illegal Capacity: &quot;</span>+</span><br><span class="line">                                            initialCapacity);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * Constructs an empty list with an initial capacity of ten.</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     <span class="keyword">this</span>.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;<span class="comment">// 默认为空</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p><strong>ArrayList长度不受限制的实现方式比较简单，他就是通过数组扩容的方式去实现的。</strong></p>
<p>就比如我们现在有一个长度为10的数组，现在我们要新增一个元素，发现已经满了，它就会执行如下操作:</p>
<ul>
<li><p>第一步他会重新定义一个长度为当前1.5倍的数组。</p>
</li>
<li><p>把原数组的数据，原封不动的复制到新数组中，这个时候再把指向原数的地址换到新数组，ArrayList就这样完成了一次改头换面。</p>
</li>
</ul>
<h2 id="ArrayList新增逻辑？"><a href="#ArrayList新增逻辑？" class="headerlink" title="ArrayList新增逻辑？"></a>ArrayList新增逻辑？</h2><p>他有指定index新增，也有直接新增的，在这之前他会有一步校验长度的判断<strong>ensureCapacityInternal</strong>，就是说如果长度不够，是需要扩容的。</p>
<p><strong>直接新增：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">  ensureCapacityInternal(size + <span class="number">1</span>);  <span class="comment">// Increments modCount!!</span></span><br><span class="line">  elementData[size++] = e;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在扩容的时候，老版本的jdk和8以后的版本是有区别的，8之后的效率更高了，采用了位运算，<strong>右移</strong>一位，其实就是除以2这个操作。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">grow</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// overflow-conscious code</span></span><br><span class="line">  <span class="keyword">int</span> oldCapacity = elementData.length;</span><br><span class="line">  <span class="keyword">int</span> newCapacity = oldCapacity + (oldCapacity &gt;&gt; <span class="number">1</span>); <span class="comment">// 右移扩容</span></span><br><span class="line">  <span class="keyword">if</span> (newCapacity - minCapacity &lt; <span class="number">0</span>)</span><br><span class="line">  newCapacity = minCapacity;</span><br><span class="line">  <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)</span><br><span class="line">  newCapacity = hugeCapacity(minCapacity);</span><br><span class="line">  <span class="comment">// minCapacity is usually close to size, so this is a win:</span></span><br><span class="line">  elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>指定位置新增的时候，在校验之后的操作很简单，就是数组的copy，大家可以看下代码。</p>
<p><strong>指定位置新增：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">  rangeCheckForAdd(index);</span><br><span class="line"></span><br><span class="line">  ensureCapacityInternal(size + <span class="number">1</span>);  <span class="comment">// Increments modCount!!</span></span><br><span class="line">  <span class="comment">// 数组拷贝</span></span><br><span class="line">  System.arraycopy(elementData, index, elementData, index + <span class="number">1</span>, size - index);</span><br><span class="line">  elementData[index] = element;</span><br><span class="line">  size++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>ArrayList源码建议看这边：<a href="https://mp.weixin.qq.com/s/3PNWmtS-bEZgZjd9wyMiDA">ArrayList源码</a></p>
<h1 id="区别相关"><a href="#区别相关" class="headerlink" title="区别相关"></a>区别相关</h1><h2 id="HashMap与HashTable的区别？"><a href="#HashMap与HashTable的区别？" class="headerlink" title="HashMap与HashTable的区别？"></a>HashMap与HashTable的区别？</h2><ol>
<li>HashMap没有考虑同步，是线程不安全的；Hashtable使用了synchronized关键字，是线程安全的；</li>
<li>HashMap允许K/V都为null；后者K/V都不允许为null；</li>
<li>HashMap继承自AbstractMap类；而Hashtable继承自Dictionary类；</li>
</ol>
<h1 id="安全性"><a href="#安全性" class="headerlink" title="安全性"></a>安全性</h1><h2 id="有哪些集合是线程不安全的？怎么解决呢？"><a href="#有哪些集合是线程不安全的？怎么解决呢？" class="headerlink" title="有哪些集合是线程不安全的？怎么解决呢？"></a>有哪些集合是线程不安全的？怎么解决呢？</h2><p>我们常⽤的 <strong>Arraylist, LinkedList , Hashmap , HashSet , TreeSet , TreeMap ， PriorityQueue</strong> 都不是线程安全的。</p>
<p>解决办法很简单，可以使⽤线程安全的集合来代替。</p>
<p>如果你要使⽤线程安全的集合的话， java.util.concurrent 包中提供了很多并发容器供你使⽤：</p>
<ol>
<li><p><strong>ConcurrentHashMap</strong> : 可以看作是线程安全的 <strong>HashMap</strong>。</p>
</li>
<li><p><strong>CopyOnWriteArrayList</strong> :可以看作是线程安全的 <strong>ArrayList</strong> ，在读多写少的场合性能⾮常好，远远好于 Vector。</p>
</li>
<li><p><strong>ConcurrentLinkedQueue</strong> :⾼效的并发队列，使⽤链表实现。可以看做⼀个线程安全的<strong>LinkedList</strong> ，这是⼀个⾮阻塞队列。</p>
</li>
<li><p><strong>BlockingQueue</strong> : 这是⼀个接⼝，JDK 内部通过链表、数组等⽅式实现了这个接⼝。表示阻塞队列，⾮常适合⽤于作为数据共享的通道。</p>
</li>
<li><p><strong>ConcurrentSkipListMap</strong> :跳表的实现。这是⼀个 Map ，使⽤跳表的数据结构进⾏快速查找。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>集合</category>
      </categories>
      <tags>
        <tag>集合</tag>
      </tags>
  </entry>
  <entry>
    <title>HashMap源码分析</title>
    <url>/posts/ca4438af.html</url>
    <content><![CDATA[<h1 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h1><p><code>HashMap</code>中的主要参数 = 容量、加载因子、扩容阈值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 容量（capacity）： HashMap中数组的长度</span></span><br><span class="line"><span class="comment">// a. 容量范围：必须是2的幂 &amp; &lt;最大容量（2的30次方）</span></span><br><span class="line"><span class="comment">// b. 初始容量 = 哈希表创建时的容量</span></span><br><span class="line">  <span class="comment">// 默认容量 = 16 = 1&lt;&lt;4 = 00001中的1向左移4位 = 10000 = 十进制的2^4=16</span></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_INITIAL_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">4</span>;</span><br><span class="line">  <span class="comment">// 最大容量 =  2的30次方（若传入的容量过大，将被最大值替换）</span></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAXIMUM_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 加载因子(Load factor)：HashMap在其容量自动增加前可达到多满的一种尺度</span></span><br><span class="line"><span class="comment">// a. 加载因子越大、填满的元素越多 = 空间利用率高、但冲突的机会加大、查找效率变低（因为链表变长了）</span></span><br><span class="line"><span class="comment">// b. 加载因子越小、填满的元素越少 = 空间利用率小、冲突的机会减小、查找效率高（链表不长）</span></span><br><span class="line">  <span class="comment">// 实际加载因子</span></span><br><span class="line">  <span class="keyword">final</span> <span class="keyword">float</span> loadFactor;</span><br><span class="line">  <span class="comment">// 默认加载因子 = 0.75</span></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> DEFAULT_LOAD_FACTOR = <span class="number">0.75f</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 扩容阈值（threshold）：当哈希表的大小 ≥ 扩容阈值时，就会扩容哈希表（即扩充HashMap的容量） </span></span><br><span class="line"><span class="comment">// a. 扩容 = 对哈希表进行resize操作（即重建内部数据结构），从而哈希表将具有大约两倍的桶数</span></span><br><span class="line"><span class="comment">// b. 扩容阈值 = 容量 x 加载因子</span></span><br><span class="line">  <span class="keyword">int</span> threshold;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 其他</span></span><br><span class="line"> <span class="comment">// 存储数据的Entry类型 数组，长度 = 2的幂</span></span><br><span class="line"> <span class="comment">// HashMap的实现方式 = 拉链法，Entry数组上的每个元素本质上是一个单向链表</span></span><br><span class="line">  <span class="keyword">transient</span> Entry&lt;K,V&gt;[] table = (Entry&lt;K,V&gt;[]) EMPTY_TABLE;  </span><br><span class="line"> <span class="comment">// HashMap的大小，即 HashMap中存储的键值对的数量</span></span><br><span class="line">  <span class="keyword">transient</span> <span class="keyword">int</span> size;</span><br><span class="line"> </span><br></pre></td></tr></table></figure>

<h2 id="JDK1-7"><a href="#JDK1-7" class="headerlink" title="JDK1.7"></a>JDK1.7</h2><p>在JDK1.7中，HashMap是由数组+链表实现的，原理图如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/1559393079633-f01038db-0d1b-420d-a9f3-2c238e39c71f.png" alt="image"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">HashMap map = <span class="keyword">new</span> HashMap(); <span class="comment">// 伪初始化</span></span><br><span class="line">map.put(<span class="string">&quot;键&quot;</span>，<span class="string">&quot;值&quot;</span>); <span class="comment">// 真初始化</span></span><br></pre></td></tr></table></figure>

<p>HashMap的构造方法在执行时会初始化一个数组table，大小为0。HashMap的put方法在执行时首先会判断table的大小是否为0，如果为0则会进行真初始化，也叫做延迟初始化。</p>
<p>当进行真初始化时，数组的默认大小为16，当然也可以调用HashMap的有参构造方法由你来指定一个数组的初始化容量。</p>
<p><strong>注：</strong>并不是你真正说了算，比如你现在想让数组的初始化容量为6，那么HashMap会生成一个大小为8的数组，如果你想数组的初始化容量为20，那么HashMap会生成一个大小为32的数组，也就是你想初始化一个大小为n的数组，但是HashMap会初始化一个大小<strong>大于等于n的二次方数</strong>的一个数组。。</p>
<p>对于put方法，当无需对table进行初始化或已经初始化完了之后，它接下来的主要任务是将key和value存到数组或链表中。<strong>那么怎么将一个key-value给存到数组中去呢？</strong></p>
<p>我们知道，如果我们想往数组中存入数据，我们首先得有一个数组下标，而我们在进行put的时候并不需要再传一个参数来作为数组的下标，那是因为HashMap会利用hash算法将key转换为数组下标。</p>
<p><strong>但是还有一个问题就是，HashCode它能直接作为数组下标吗？</strong></p>
<p>HashCode它通常是一个比较大的数字，比如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(<span class="string">&quot;键&quot;</span>.hashCode()); <span class="comment">// 38190</span></span><br><span class="line"><span class="comment">// 为什么是这个结果，大家自行去看String类中的hashCode方法</span></span><br></pre></td></tr></table></figure>

<p>所以我们不可能把这么大的一个数字作为数组下标，那怎么办？</p>
<p>大家可能通常会想到取模运算，但是HashMap没有用取模，而是：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">indexFor</span><span class="params">(<span class="keyword">int</span> h, <span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// assert Integer.bitCount(length) == 1 : &quot;length must be a non-zero power of 2&quot;;</span></span><br><span class="line">    <span class="keyword">return</span> h &amp; (length-<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个方法就是JDK1.7HashMap中put和get方法中获取数组下标的方法，这个方法中h代表hashcode，length代表数组长度。我们发现它是用的<strong>逻辑与</strong>操作，那么问题就来了，逻辑与操作能准确的算出来一个数组下标？我们来算算，假设hashcode是01010101(二进制表示)，length为00010000(16的二进制表示)，那么h &amp; (length-1)则为：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">h:  0101 0101</span><br><span class="line">15: 0000 1111</span><br><span class="line">  &amp;</span><br><span class="line">    0000 0101</span><br></pre></td></tr></table></figure>

<p>对于上面这个运行结果的取值方法我们来讨论一下：因为15的高四位都是0，低四位都是1，而与操作的逻辑是两个运算位都为1结果才为1，所以对于上面这个运算结果的高四位肯定都是0，而低四位和h的低四位是一样的，所以结果的取值范围就是h的低四位的一个取值范围：0000-1111，也就是0至15，所以这个结果是符合数组下标的取值范围的。</p>
<p>那么假设length为17呢？那么h &amp; (length-1)则为：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">h:  0101 0101</span><br><span class="line">16: 0001 0000</span><br><span class="line">  &amp;</span><br><span class="line">    0001 0000</span><br></pre></td></tr></table></figure>

<p>当length为17时，上面的运算的结果取值范围只有两个值，要么是0000 0000，要么是0001 000，这是不太好的。</p>
<p>所以，如果我们想把HashCode转换为覆盖数组下标取值范围的下标，跟我们的length是非常相关的，length如果是16，那么减一之后就是15(0000 1111)，正是这种高位都为0，低位都为1的二级制数才保证了可以对任意一个hashcode经过逻辑与操作后得到的结果是我们想要的数组下标。<strong>这就是为什么在真初始化HashMap的时候，对于数组的长度一定要是二次方数，二次方数和算数组下标是息息相关的，而这种位运算是要比取模更快的。</strong></p>
<p><strong>总结</strong>：在调用put方法时，会对传入的key进行哈希运算得到一个hashcode，然后再通过逻辑与操作得到一个数组下标，最后将key-value存在这个数组下标处。</p>
<h3 id="Hash冲突解决"><a href="#Hash冲突解决" class="headerlink" title="Hash冲突解决"></a>Hash冲突解决</h3><p>HashMap存储结构如下图：</p>
<img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/1559539766929-fa3be7f9-072a-46e9-b0f4-d7e922b43bef.png" alt="image.png" style="zoom:50%;" />

<p>那么节点1和节点2组成了一个链表，那么现在如果再来put一个节点3，假设节点3也需要插在这个链表中，我们考虑链表的插入效率，将节点3插在链表的头部是最快的，那么就会如下图：</p>
<img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/1559539733346-e2fdebef-8aa2-4657-b1c7-73700ceb21a8.png" alt="image.png" style="zoom:50%;" />

<p>那么按照上图这种插入办法，会出现一个问题：</p>
<ul>
<li>当需要get(节点2)时，只需要先将节点2的key进行哈希然后算出下标，拿到下标后可以定位到数组中的节点1，但是发现节点1不等于节点2，所以不是最终的结果，但是节点1存在下一个节点，所以可以顺着向下的指针找到节点2。</li>
<li>那么当需要get(节点3)时呢，我们可以发现是找不到节点3的，<strong>所以当把节点简单的插在链表的头部是不行的。</strong></li>
</ul>
<p>那HashMap是怎么实现的呢？HashMap确实是将节点插在链表的头部，但是在插完之后HashMap会将整个链表向下移动一位，移动完之后就会变成：</p>
<img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/1559540332883-f7792773-13cb-4e27-ada2-fcbc14ed86bf.png" alt="image.png" style="zoom:50%;" />

<p>那么现在put的时候插入一个元素的思路就是：<strong>将新节点插在链表的头部，此时新节点就是当前这个链表的头节点，接下来把头节点移动到数组位置即可。</strong></p>
<p>当我们在使用HashMap的时候，还可能会出现下面的使用方式:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">HashMap&lt;String, String&gt; hashMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">hashMap.put(<span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>);</span><br><span class="line">String value = hashMap.put(<span class="string">&quot;1&quot;</span>, <span class="string">&quot;3&quot;</span>);</span><br><span class="line">System.out.println(value);</span><br></pre></td></tr></table></figure>

<p>第三行代码也是put，而这个时候在HashMap里会将value覆盖，也就是key=”1”对应的value最终为”3”，而第三行代码返回的value将会是2。</p>
<p>我们现在来考虑这个put它是如何实现的，其实很简单，第三行代码的逻辑也是先对”1”计算哈希值以及对应的数组下标，有了数组下标之后就可以找到对应的位置的链表，而在将新节点插入到链表之前，还需要判断一下当前新节点的key值是不是已经在这个链表上存在，所以需要先去遍历当前这个位置的链表，在遍历的过程中如果找到了相同的key则会进行value的覆盖，并且返回oldvalue。</p>
<p>写到这里其实对于HashMap的put的主要逻辑也差不多了，总结一下：</p>
<ol>
<li><strong>先put一个k-v对</strong>：put(key，value) </li>
<li><strong>对key计算一个hashcode</strong>：int hashcode = key.hashCode();</li>
<li><strong>hashcode和(length - 1)进行运算</strong>：int index = hashcode &amp; (数组长度-1)</li>
<li>遍历index位置的链表，如果存在相同的key，则进行value覆盖，并且返回之前的value值</li>
<li>将key，value封装为节点对象（Entry）</li>
<li>将节点插在index位置上的链表的头部</li>
<li>将链表头节点移动到数组上</li>
</ol>
<p>这是最核心的7步，然后在这个过程中还有很重要的一步就是<strong>扩容</strong>，而<strong>扩容是发生在插入节点之前</strong>的，也就是步骤4和5之间的。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><table>
<thead>
<tr>
<th>不同</th>
<th>JDK 1.7</th>
<th>JDK 1.8</th>
</tr>
</thead>
<tbody><tr>
<td>存储结构</td>
<td>数组 + 链表</td>
<td>数组 + 链表 + 红黑树</td>
</tr>
<tr>
<td>初始化方式</td>
<td>单独函数：<code>inflateTable()</code></td>
<td>直接集成到了扩容函数<code>resize()</code>中</td>
</tr>
<tr>
<td>hash值计算方式</td>
<td>扰动处理 = 9次扰动 = 4次位运算 + 5次异或运算</td>
<td>扰动处理 = 2次扰动 = 1次位运算 + 1次异或运算</td>
</tr>
<tr>
<td>存放数据的规则</td>
<td>无冲突时，存放数组；冲突时，存放链表</td>
<td>无冲突时，存放数组；冲突 &amp; 链表长度 &lt; 8：存放单链表；冲突 &amp; 链表长度 &gt; 8：树化并存放红黑树</td>
</tr>
<tr>
<td>插入数据方式</td>
<td>头插法（先将原位置的数据移到后1位，再插入数据到该位置）</td>
<td>尾插法（直接插入到链表尾部/红黑树）</td>
</tr>
<tr>
<td>扩容后存储位置的计算方式</td>
<td>全部按照原来方法进行计算（即hashCode -&gt;&gt; 扰动函数 -&gt;&gt; (h&amp;length-1)）</td>
<td>按照扩容后的规律计算（即扩容后的位置=原位置 or 原位置 + 旧容量）</td>
</tr>
</tbody></table>
<p><strong>注</strong>：JDK1.8以后并不是所有链表大于8的时候链表都会转化为红黑树的：<strong>当链表长度大于阈值（默认为 8）（将链表转换成红黑树前会判断，如果当前数组的长度小于 64，那么会选择先进行数组扩容，而不是转换为红黑树）时，将链表转化为红黑树，以减少搜索时间。</strong></p>
<ul>
<li><p><strong>问题1：为什么不直接采用经过hashCode（）处理的哈希码作为存储数组table的下标位置？</strong></p>
<p>容易出现 哈希码 与 数组大小范围不匹配的情况，即计算出来的哈希码可能 不在数组大小范围内，从而导致无法匹配存储位置</p>
<p><img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/aHR0cDovL3VwbG9hZC1pbWFnZXMuamlhbnNodS5pby91cGxvYWRfaW1hZ2VzLzk0NDM2NS1kMThlZTA2OTdhMWExYjUzLnBuZz9pbWFnZU1vZ3IyL2F1dG8tb3JpZW50L3N0cmlwJTdDaW1hZ2VWaWV3Mi8yL3cvMTI0MA.png" alt="示意图"></p>
<p>为了解决 “哈希码与数组大小范围不匹配” 的问题，<code>HashMap</code>给出了解决方案：<strong>哈希码 与运算（&amp;） （数组长度-1）</strong>；</p>
</li>
<li><p><strong>问题2：为什么在计算数组下标前，需对哈希码进行二次处理：扰动处理？</strong></p>
<p>加大哈希码低位的随机性，使得分布更均匀，从而提高对应数组存储下标位置的随机性 &amp; 均匀性，最终减少Hash冲突</p>
</li>
<li><p><strong>问题3，HashMap如何扩容</strong></p>
<ul>
<li>扩容：创建一个新的Entry空数组，长度是原数组的2倍。</li>
<li>ReHash：遍历原Entry数组，把所有的Entry重新Hash到新数组。</li>
</ul>
</li>
<li><p><strong>问题4：为什么要ReHash？</strong></p>
<p>因为Hash函数的公式是 <code>index = HashCode（Key） &amp; （Length - 1）</code>，所以如果原来长度（Length）是8，你位运算出来的值是2 ，新的长度是16你位运算出来的值明显不一样了。</p>
</li>
<li><p><strong>问题5：为什么JDK1.8会使用尾插法代替头插法</strong></p>
<p><strong>使用头插</strong>会改变链表的上的顺序，但是如果<strong>使用尾插</strong>，在扩容时会保持链表元素原本的顺序，就不会出现链表成环的问题了。</p>
</li>
<li><p><strong>问题6：JDK1.7和1.8中hash()函数有何区别？</strong></p>
<p><strong>相比在1.7中的4次位运算，5次异或运算（9次扰动），在1.8中，只进行了1次位运算和1次异或运算（2次扰动）</strong></p>
</li>
<li><p><strong>问题7：HashMap 多线程操作导致死循环问题</strong></p>
<p>主要原因在于并发下的 Rehash 会造成元素之间会形成一个循环链表。不过，jdk 1.8 后解决了这个问题，但是还是不建议在多线程下使用 HashMap,因为多线程下使用 HashMap 还是会存在其他问题比如数据丢失。并发环境下推荐使用 ConcurrentHashMap 。</p>
<p>详情请查看：<a href="https://coolshell.cn/articles/9606.html">https://coolshell.cn/articles/9606.html</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>集合</category>
      </categories>
      <tags>
        <tag>集合</tag>
      </tags>
  </entry>
  <entry>
    <title>springboot对接微信公众号授权登录接口</title>
    <url>/posts/a74cd567.html</url>
    <content><![CDATA[<h1 id="获取测试账号"><a href="#获取测试账号" class="headerlink" title="获取测试账号"></a>获取测试账号</h1><p>以下引用自微信开发者文档，有账号的可以跳过</p>
<blockquote>
<p>由于用户体验和安全性方面的考虑，微信公众号的注册有一定门槛，某些高级接口的权限需要微信认证后才可以获取。</p>
<p>所以，为了帮助开发者快速了解和上手微信公众号开发，熟悉各个接口的调用，我们推出了微信公众帐号测试号，通过手机微信扫描二维码即可获得测试号。</p>
</blockquote>
<h2 id="申请测试账号"><a href="#申请测试账号" class="headerlink" title="申请测试账号"></a>申请测试账号</h2><p>申请很简单，点击下面的链接，微信登录，填写信息即可申请成功。</p>
<p><a href="https://mp.weixin.qq.com/debug/cgi-bin/sandbox?t=sandbox/login">进入微信公众帐号测试号申请系统</a></p>
<p>申请完以后就能看到appId和appsecret了</p>
<img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/image-20201125134549671.png" alt="image-20201125134549671" style="zoom: 33%;" />

<h2 id="测试账号配置"><a href="#测试账号配置" class="headerlink" title="测试账号配置"></a>测试账号配置</h2><p><strong>1. 首先我们在刚刚的页面，往下翻，找到这个修改入口</strong></p>
<img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/64d61b8303344ac298e5956eee139ed3.png" alt="64d61b8303344ac298e5956eee139ed3.png" style="zoom:33%;" />

<p><strong>2. 在弹出的窗口中配置域名</strong></p>
<p>这边填写域名就行，但是注意这个域名一定要公网能访问到</p>
<img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/image-20201125135147371.png" alt="image-20201125135147371" style="zoom:33%;" />

<p><strong>3. 填写js安全域名</strong></p>
<p>​    这个地址和上一步一样就行，区别就是上一步不需要加https，这一步需要</p>
<p><img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/2ac3b922f8aa41a69c71237c4e9fb9b7.png" alt="2ac3b922f8aa41a69c71237c4e9fb9b7.png"></p>
<p><strong>4. 配置接口</strong></p>
<p>​    这个比较简单，主要是为了让这边访问一下，不然就会失败。参考代码如下：</p>
<p><strong>controller</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/test&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">login</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        Enumeration pNames = request.getParameterNames();</span><br><span class="line">        <span class="keyword">while</span> (pNames.hasMoreElements()) &#123;</span><br><span class="line">            String name = (String) pNames.nextElement();</span><br><span class="line">            String value = request.getParameter(name);</span><br><span class="line">            String log = <span class="string">&quot;name =&quot;</span> + name + <span class="string">&quot; value =&quot;</span> + value;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String signature = request.getParameter(<span class="string">&quot;signature&quot;</span>);<span class="comment">/// 微信加密签名</span></span><br><span class="line">        String timestamp = request.getParameter(<span class="string">&quot;timestamp&quot;</span>);<span class="comment">/// 时间戳</span></span><br><span class="line">        String nonce = request.getParameter(<span class="string">&quot;nonce&quot;</span>); <span class="comment">/// 随机数</span></span><br><span class="line">        String echostr = request.getParameter(<span class="string">&quot;echostr&quot;</span>); <span class="comment">// 随机字符串</span></span><br><span class="line">        PrintWriter out = response.getWriter();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (SignUtil.checkSignature(signature, timestamp, nonce)) &#123;</span><br><span class="line">            out.print(echostr);</span><br><span class="line">        &#125;</span><br><span class="line">        out.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><strong>SignUtil</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SignUtil</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String token = <span class="string">&quot;weixin&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 校验签名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">checkSignature</span><span class="params">(String signature, String timestamp, String nonce)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;signature:&quot;</span> + signature + <span class="string">&quot;timestamp:&quot;</span> + timestamp + <span class="string">&quot;nonc:&quot;</span> + nonce);</span><br><span class="line">        String[] arr = <span class="keyword">new</span> String[]&#123;token, timestamp, nonce&#125;;</span><br><span class="line">        <span class="comment">// 将token、timestamp、nonce三个参数进行字典序排序</span></span><br><span class="line">        Arrays.sort(arr);</span><br><span class="line">        StringBuilder content = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            content.append(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        MessageDigest md = <span class="keyword">null</span>;</span><br><span class="line">        String tmpStr = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            md = MessageDigest.getInstance(<span class="string">&quot;SHA-1&quot;</span>);</span><br><span class="line">        <span class="comment">// 将三个参数字符串拼接成一个字符串进行sha1加密</span></span><br><span class="line">            <span class="keyword">byte</span>[] digest = md.digest(content.toString().getBytes());</span><br><span class="line">            tmpStr = byteToStr(digest);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchAlgorithmException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        content = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">// 将sha1加密后的字符串可与signature对比，标识该请求来源于微信</span></span><br><span class="line">        System.out.println(tmpStr.equals(signature.toUpperCase()));</span><br><span class="line">        <span class="keyword">return</span> tmpStr != <span class="keyword">null</span> ? tmpStr.equals(signature.toUpperCase()) : <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将字节数组转换为十六进制字符串</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> byteArray</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">byteToStr</span><span class="params">(<span class="keyword">byte</span>[] byteArray)</span> </span>&#123;</span><br><span class="line">        String strDigest = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; byteArray.length; i++) &#123;</span><br><span class="line">            strDigest += byteToHexStr(byteArray[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> strDigest;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将字节转换为十六进制字符串</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> mByte</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">byteToHexStr</span><span class="params">(<span class="keyword">byte</span> mByte)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">char</span>[] Digit = &#123;<span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;9&#x27;</span>, <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;E&#x27;</span>, <span class="string">&#x27;F&#x27;</span>&#125;;</span><br><span class="line">        <span class="keyword">char</span>[] tempArr = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">2</span>];</span><br><span class="line">        tempArr[<span class="number">0</span>] = Digit[(mByte &gt;&gt;&gt; <span class="number">4</span>) &amp; <span class="number">0X0F</span>];</span><br><span class="line">        tempArr[<span class="number">1</span>] = Digit[mByte &amp; <span class="number">0X0F</span>];</span><br><span class="line"></span><br><span class="line">        String s = <span class="keyword">new</span> String(tempArr);</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>配置截图</strong></p>
<img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/image-20201125140514288.png" alt="image-20201125140514288" style="zoom: 33%;" />

<p>至此，配置完毕。</p>
<h2 id="授权"><a href="#授权" class="headerlink" title="授权"></a>授权</h2><p><strong>注：这里必须先关注测试账号，不然无法授权成功</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/image-20201125140737132.png" alt="image-20201125140737132"></p>
<h2 id="获取code"><a href="#获取code" class="headerlink" title="获取code"></a>获取code</h2><p>用微信浏览器打开如下地址：</p>
<p><a href="https://open.weixin.qq.com/connect/oauth2/authorize?appid=appId&amp;redirect_uri=redirectUri&amp;response_type=code&amp;scope=snsapi_userinfo&amp;state=STATE#wechat_redirect">https://open.weixin.qq.com/connect/oauth2/authorize?appid=appId&amp;redirect_uri=redirectUri&amp;response_type=code&amp;scope=snsapi_userinfo&amp;state=STATE#wechat_redirect</a> </p>
<p><strong>注：将链接中的appId和redirectUri换成自己的</strong></p>
<h2 id="获取AccessToken及用户信息相关代码参考"><a href="#获取AccessToken及用户信息相关代码参考" class="headerlink" title="获取AccessToken及用户信息相关代码参考"></a>获取AccessToken及用户信息相关代码参考</h2><p><strong>yml</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">auth:</span></span><br><span class="line">  <span class="attr">wechat:</span></span><br><span class="line">    <span class="attr">accounts:</span></span><br><span class="line">      <span class="attr">appId:</span> <span class="string">xxxxxxxx</span>		<span class="comment"># 换成自己的测试账号</span></span><br><span class="line">      <span class="attr">appSecret:</span> <span class="string">xxxxxx</span> <span class="comment"># 换成自己的测试账号</span></span><br></pre></td></tr></table></figure>

<p><strong>WechatAuth关键代码</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;auth.wechat.accounts&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WechatAuth</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String appId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String appSecret;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取openId</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String GET_ACCESS_TOKEN_URL = <span class="string">&quot;https://api.weixin.qq.com/sns/oauth2/access_token?appid=%s&amp;secret=%s&amp;code=%s&amp;grant_type=authorization_code&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取openId</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String GET_INFO_URL = <span class="string">&quot;https://api.weixin.qq.com/sns/userinfo?access_token=%s&amp;openid=%s&amp;lang=zh_CN&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取openId</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> code</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Map <span class="title">getInfoByCode</span><span class="params">(String code)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 通过code换取网页授权access_token</span></span><br><span class="line">        String url = String.format(GET_ACCESS_TOKEN_URL, appId, appSecret, code);</span><br><span class="line">        JSONObject jsonObject = HttpUtils.sendWechatGet(url, JSONObject.class);</span><br><span class="line">        String openId = jsonObject.getString(APIConstant.OPEN_ID);</span><br><span class="line">        String accessToken = jsonObject.getString(APIConstant.ACCESS_TOKEN);</span><br><span class="line">        System.out.println(<span class="string">&quot;access_Token&quot;</span> + accessToken + <span class="string">&quot; opeId:&quot;</span> + openId);</span><br><span class="line">        <span class="comment">// 拉取用户信息(需scope为 snsapi_userinfo)</span></span><br><span class="line">        url = String.format(GET_INFO_URL, accessToken, openId);</span><br><span class="line">        Map&lt;String, Object&gt; infoMap = HttpUtils.sendWechatGet(url, HashMap.class);</span><br><span class="line">        infoMap.put(APIConstant.OPEN_ID, openId);</span><br><span class="line">        infoMap.put(APIConstant.ACCESS_TOKEN, accessToken);</span><br><span class="line">        <span class="keyword">return</span> infoMap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**** getter/setter ****/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getAppId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> appId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAppId</span><span class="params">(String appId)</span> </span>&#123;</span><br><span class="line">        WechatAuth.appId = appId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getAppSecret</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> appSecret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAppSecret</span><span class="params">(String appSecret)</span> </span>&#123;</span><br><span class="line">        WechatAuth.appSecret = appSecret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>sendWechatGet方法参考</strong></p>
<p>之前测试的时候，RestTemplate调用小程序有个小坑，所以加入了这个Converter，换成自己的http请求方式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">sendWechatGet</span><span class="params">(String url, Class&lt;T&gt; clazz)</span> </span>&#123;</span><br><span class="line">        RestTemplate restTemplate = <span class="keyword">new</span> RestTemplate();</span><br><span class="line">        restTemplate.getMessageConverters().add(<span class="keyword">new</span> WxMappingJackson2HttpMessageConverter()); <span class="comment">// 加这个是因为这边有个坑</span></span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForObject(url, clazz);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>WxMappingJackson2HttpMessageConverter类代码</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 参考https://www.cnblogs.com/eternityz/p/12241211.html</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WxMappingJackson2HttpMessageConverter</span> <span class="keyword">extends</span> <span class="title">MappingJackson2HttpMessageConverter</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WxMappingJackson2HttpMessageConverter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;MediaType&gt; mediaTypes = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        mediaTypes.add(MediaType.TEXT_PLAIN);</span><br><span class="line">        setSupportedMediaTypes(mediaTypes);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>至此，就能获取成功了。</p>
<h1 id="错误"><a href="#错误" class="headerlink" title="错误"></a>错误</h1><ul>
<li><p><strong>微信网页授权errcode:48001</strong></p>
<blockquote>
<p>出现errcode”:48001,”errmsg”:”api unauthorized, hints: [ req_id: 86klWa06252167 ]，</p>
</blockquote>
<p>原因：</p>
<p>①：你的服务号必须是通过腾讯认证，每年是300元，如果没有认证而导致的错误提示，那就去认证，别往下看了！如果你已认证，本条原因排除。</p>
<p>②：你是否是<strong>第三方网页授权</strong>，那么你的url地址里面的<code>scope</code>这个参数要写<code>snsapi_userinfo</code>,否则会报这个错！原因如下：</p>
<p>snssapi_base静默授权，只能获取openid，获取不了用户其他信息。而snsapi_userinfo需要用户手动同意，才可以获取用户的信息。</p>
</li>
<li><p><strong>获取不到unionId</strong></p>
<p>根据文档中的说明，绑定一下开放平台就行了。<a href="https://developers.weixin.qq.com/doc/offiaccount/OA_Web_Apps/Wechat_webpage_authorization.html">文档地址</a></p>
</li>
</ul>
<img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/image-20201125164536855.png" alt="image-20201125164536855" style="zoom: 50%;" />

<img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/image-20201125164602381.png" alt="image-20201125164602381" style="zoom:50%;" />

]]></content>
      <categories>
        <category>微信</category>
      </categories>
      <tags>
        <tag>微信</tag>
      </tags>
  </entry>
  <entry>
    <title>01.设计模式概念及工厂模式</title>
    <url>/posts/bcfa4501.html</url>
    <content><![CDATA[<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><h3 id="软件设计原则"><a href="#软件设计原则" class="headerlink" title="软件设计原则"></a>软件设计原则</h3><table>
<thead>
<tr>
<th>设计原则</th>
<th>解释</th>
</tr>
</thead>
<tbody><tr>
<td>开闭原则</td>
<td>对扩展开放，对修改关闭。</td>
</tr>
<tr>
<td>依赖倒置原则</td>
<td>通过抽象使各个类或者模块不相互影响，实现松耦合。</td>
</tr>
<tr>
<td>单一职责原则</td>
<td>一个类、接口、方法只做一件事。</td>
</tr>
<tr>
<td>接口隔离原则</td>
<td>尽量保证接口的纯洁性，客户端不应该依赖不需要的接口。</td>
</tr>
<tr>
<td>迪米特法则</td>
<td>又叫最少知道原则，一个类对其所依赖的类知道得越少越好。</td>
</tr>
<tr>
<td>里氏替换原则</td>
<td>子类可以扩展父类的功能但不能改变父类原有的功能。</td>
</tr>
<tr>
<td>合成复用原则</td>
<td>尽量使用对象组合、聚合，而不使用继承关系达到代码复用的目的。</td>
</tr>
</tbody></table>
<h2 id="创建型模式"><a href="#创建型模式" class="headerlink" title="创建型模式"></a>创建型模式</h2><p>创建型模式的作用就是创建对象，说到创建一个对象，最熟悉的就是 new 一个对象，然后 set 相关属性。但是，在很多场景下，我们需要给客户端提供更加友好的创建对象的方式，尤其是那种我们定义了类，但是需要提供给其他开发者用的时候。</p>
<h3 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h3><p>简单工厂模式(Simple Factory Pattern):又称为静态工厂方法(Static Factory Method)模式，它属于类创建型模式。在简单工厂模式中，可以<strong>根据参数的不同返回不同类的实例</strong>。简单工厂模式专门定义一个类来负责创建其他类的实例，被创建的实例通常都具有共同的父类。</p>
<p><img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/image-20201112144549270.png" alt="image-20201112144549270"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Product <span class="title">create</span><span class="params">(String type)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;A&quot;</span>.equals(type)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ProductA();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;B&quot;</span>.equals(type)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ProductB();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ProductFactory factory = <span class="keyword">new</span> ProductFactory();</span><br><span class="line">        Product product = factory.create(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">        product.print();</span><br><span class="line">        product = factory.create(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">        product.print();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductA</span> <span class="keyword">implements</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductB</span> <span class="keyword">implements</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em>其中，ProductA 和 ProductB 都继承自 Product。</em></p>
<p>简单地说，简单工厂模式通常就是这样，一个工厂类 XxxFactory，里面有一个静态方法，根据我们不同的参数，返回不同的派生自同一个父类（或实现同一接口）的实例对象。</p>
<blockquote>
<p>我们强调<strong>职责单一</strong>原则，一个类只提供一种功能，ProductFactory 的功能就是只要负责生产各种 Product。</p>
</blockquote>
<h3 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h3><p><strong>定义一个用于创建对象的接口，让子类决定实例化哪个类。工厂方法使一个类的实例化延迟到其子类。</strong>在工厂方法 模式中用户只需要关心所需产品对应的工厂，无须关心创建细节，而且加入新的产品符合开闭原则。 </p>
<p><img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/image-20201112150057245.png" alt="image-20201112150057245"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Factory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Product <span class="title">createProduct</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建A</span></span><br><span class="line">        Factory factory = <span class="keyword">new</span> FactoryA();</span><br><span class="line">        Product product = factory.createProduct();</span><br><span class="line">        product.print();</span><br><span class="line">        <span class="comment">// 创建B</span></span><br><span class="line">        factory = <span class="keyword">new</span> FactoryB();</span><br><span class="line">        product = factory.createProduct();</span><br><span class="line">        product.print();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FactoryA</span> <span class="keyword">implements</span> <span class="title">Factory</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Product <span class="title">createProduct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ProductA();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FactoryB</span> <span class="keyword">implements</span> <span class="title">Factory</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Product <span class="title">createProduct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ProductB();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductA</span> <span class="keyword">implements</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductB</span> <span class="keyword">implements</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ul>
<li>只能创建一大类产品</li>
</ul>
<h3 id="抽象工厂"><a href="#抽象工厂" class="headerlink" title="抽象工厂"></a>抽象工厂</h3><p><img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/image-20201112153326283.png" alt="image-20201112153326283"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 抽象工厂</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">AbstractFactory</span> </span>&#123;</span><br><span class="line">    <span class="function">Phone <span class="title">createPhone</span><span class="params">(String param)</span></span>;</span><br><span class="line">    <span class="function">Mask <span class="title">createMask</span><span class="params">(String param)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 具体工厂</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SuperFactory</span> <span class="keyword">implements</span> <span class="title">AbstractFactory</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Phone <span class="title">createPhone</span><span class="params">(String param)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> iPhone();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Mask <span class="title">createMask</span><span class="params">(String param)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> N95();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 产品大类一手机</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Phone</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">iPhone</span> <span class="keyword">implements</span> <span class="title">Phone</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 产品大类一口罩</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Mask</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">N95</span> <span class="keyword">implements</span> <span class="title">Mask</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>03.原型模式</title>
    <url>/posts/6f23de90.html</url>
    <content><![CDATA[<h1 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h1><p>原型模式（Prototype Pattern）属于创建型模式，主要用于创建重复的对象，我们通常创建重复对象的时候都是通过set方法一个一个copy属性值的，这样如果类中属性特别多的话非常不好用，而且效率也不高在日常开发中，例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">submitRepair</span><span class="params">(RepairForm repairForm)</span> </span>&#123;</span><br><span class="line">        Repair repair = <span class="keyword">new</span> Repair();</span><br><span class="line">        repair.setAppraisal(repairForm.getAppraisal());</span><br><span class="line">        repair.setContent(repairForm.getContent());</span><br><span class="line">        repair.setReply(repairForm.getReply());</span><br><span class="line">        repair.setReplyTime(repairForm.getReplyTime());</span><br><span class="line">        repair.setStarNum(repairForm.getStarNum());</span><br><span class="line">        repair.setState(repairForm.getState());</span><br><span class="line">        repair.setVisitTime(repairForm.getVisitTime());</span><br><span class="line">        repair.setTime(repairForm.getCreateTime());</span><br><span class="line">        repair.setTitle(RepairTypeEnums.getTextByType(repairForm.getType()));</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        xxxService.submit(repair);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样的代码，一旦类属性过多，就会显得很臃肿，而原型模式，能帮助我们解决这样的问题。</p>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>原型模式(Prototype Pattern)是指原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象。</p>
<p>原型模式主要适用于以下场景:</p>
<ul>
<li><p>类初始化消耗资源较多。</p>
</li>
<li><p>new 产生的一个对象需要非常繁琐的过程(数据准备、访问权限等)</p>
</li>
<li><p>构造函数比较复杂。</p>
</li>
<li><p>循环体中生产大量对象时。</p>
</li>
</ul>
<p>在 Spring 中，原型模式应用得非常广泛。例如 scope=“prototype”，在我们经常用 的 JSON.parseObject()也是一种原型模式。下面，我们来看看原型模式类结构图:</p>
<p><img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/image-20200918101451519.png" alt="image-20200918101451519"></p>
<h2 id="简单克隆"><a href="#简单克隆" class="headerlink" title="简单克隆"></a>简单克隆</h2><p>简单原型模式的设计代码如下：</p>
<ul>
<li>定义一个Prototype接口</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Prototype</span> </span>&#123;</span><br><span class="line">    <span class="function">Prototype <span class="title">clone</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>创建需要被克隆的类</li>
</ul>
<p>有多个可以使用类似的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrototypeA</span> <span class="keyword">implements</span> <span class="title">Prototype</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> List hobbies;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// getter...</span></span><br><span class="line">    <span class="comment">// setter...</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Prototype <span class="title">clone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        PrototypeA concretePrototype = <span class="keyword">new</span> PrototypeA();</span><br><span class="line">        concretePrototype.setAge(<span class="keyword">this</span>.age);</span><br><span class="line">        concretePrototype.setName(<span class="keyword">this</span>.name);</span><br><span class="line">        concretePrototype.setHobbies(<span class="keyword">this</span>.hobbies);</span><br><span class="line">        <span class="keyword">return</span> concretePrototype;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>创建一个client</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Prototype prototype;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Client</span><span class="params">(Prototype prototype)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.prototype = prototype;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Prototype <span class="title">startClone</span><span class="params">(Prototype concretePrototype)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (Prototype) concretePrototype.clone();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>测试</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrototypeTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建一个具体的需要克隆的对象</span></span><br><span class="line">        PrototypeA concretePrototype = <span class="keyword">new</span> PrototypeA();</span><br><span class="line">        <span class="comment">// 填充属性，方便测试</span></span><br><span class="line">        concretePrototype.setAge(<span class="number">18</span>);</span><br><span class="line">        concretePrototype.setName(<span class="string">&quot;prototype&quot;</span>);</span><br><span class="line">        List hobbies = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        concretePrototype.setHobbies(hobbies);</span><br><span class="line">        System.out.println(concretePrototype);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建 Client 对象，准备开始克隆</span></span><br><span class="line">        Client client = <span class="keyword">new</span> Client(concretePrototype);</span><br><span class="line">        PrototypeA concretePrototypeClone = (PrototypeA)</span><br><span class="line">                client.startClone(concretePrototype);</span><br><span class="line">        System.out.println(concretePrototypeClone);</span><br><span class="line">        System.out.println(<span class="string">&quot;克隆对象中的引用类型地址值:&quot;</span> + concretePrototypeClone.getHobbies());</span><br><span class="line">        System.out.println(<span class="string">&quot;原对象中的引用类型地址值:&quot;</span> + concretePrototype.getHobbies());</span><br><span class="line">        System.out.println(<span class="string">&quot;对象地址比较:&quot;</span> + (concretePrototypeClone.getHobbies() ==</span><br><span class="line">                concretePrototype.getHobbies()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>运行结果</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">com.design.pattern.prototype.simple.PrototypeA@<span class="number">24d</span>46ca6</span><br><span class="line">com.design.pattern.prototype.simple.PrototypeA@<span class="number">4517d</span>9a3</span><br><span class="line">克隆对象中的引用类型地址值:[]</span><br><span class="line">原对象中的引用类型地址值:[]</span><br><span class="line">对象地址比较:<span class="keyword">true</span></span><br></pre></td></tr></table></figure>

<p>从测试结果看出 hobbies 的引用地址是相同的，意味着复制的不是值，而是引用的地址。 这样的话，如果我们修改任意一个对象中的属性值，concretePrototype 和 concretePrototypeCone 的 hobbies 值都会改变，这个就是我们说的浅克隆。</p>
<h2 id="深克隆"><a href="#深克隆" class="headerlink" title="深克隆"></a>深克隆</h2><p>我们知道公司的员工除了自己的信息以外，都会有一个工位，但是每个人的工位都是不相同的，我们用深克隆来实现这个场景。</p>
<ul>
<li>定义员工信息类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaffInfo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>工位类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Station</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 区域</span></span><br><span class="line">    <span class="keyword">public</span> String area;</span><br><span class="line">    <span class="comment">// 号码</span></span><br><span class="line">    <span class="keyword">public</span> String number;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>员工类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Staff</span> <span class="keyword">extends</span> <span class="title">StaffInfo</span> <span class="keyword">implements</span> <span class="title">Serializable</span>, <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> Station station;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Staff</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        station = <span class="keyword">new</span> Station();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.deepClone();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 深克隆</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">deepClone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ByteArrayOutputStream bos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">            ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(bos);</span><br><span class="line">            oos.writeObject(<span class="keyword">this</span>);</span><br><span class="line">            ByteArrayInputStream bis = <span class="keyword">new</span> ByteArrayInputStream(bos.toByteArray());</span><br><span class="line">            ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(bis);</span><br><span class="line">            Staff copy = (Staff) ois.readObject();</span><br><span class="line">            <span class="keyword">return</span> copy;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 浅克隆</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> target</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Staff <span class="title">shallowClone</span><span class="params">(Staff target)</span> </span>&#123;</span><br><span class="line">        Staff staff = <span class="keyword">new</span> Staff();</span><br><span class="line">        staff.age = target.age;</span><br><span class="line">        staff.name = target.name;</span><br><span class="line">        staff.station = target.station;</span><br><span class="line">        <span class="keyword">return</span> staff;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>测试</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeepCloneTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Staff staff = <span class="keyword">new</span> Staff();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Staff clone = (Staff) staff.clone();</span><br><span class="line">            System.out.println(<span class="string">&quot;深克隆:&quot;</span> + (staff.station == clone.station));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        Staff q = <span class="keyword">new</span> Staff();</span><br><span class="line">        Staff n = q.shallowClone(q);</span><br><span class="line">        System.out.println(<span class="string">&quot;浅克隆:&quot;</span> + (q.station == n.station));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>结果</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">深克隆:false</span><br><span class="line">浅克隆:true</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>04.代理模式</title>
    <url>/posts/e012e6a3.html</url>
    <content><![CDATA[<blockquote>
<p><strong>代理模式</strong>是一种结构型设计模式， 让你能够提供对象的替代品或其占位符。 <strong>代理控制着对于原对象的访问， 并允许在将请求提交给对象前后进行一些处理。</strong></p>
</blockquote>
<h1 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h1><p><strong>有一个UserDao的接口，拥有save方法()</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">save</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>UserDaoImpl实现该接口，重写save()方法</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;已经保存数据...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>现在，我想要在<strong>save()方法保存数据前开启事务、保存数据之后关闭事务</strong>…(当然啦，直接再上面写不就行了吗…<strong>业务方法少的时候，确实没毛病</strong>…)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;开启事务&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;已经保存数据...&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;关闭事务&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但是呢，现在如果我有好多好多个业务方法都需要开启事务、关闭事务呢？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  System.out.println(<span class="string">&quot;开启事务&quot;</span>);</span><br><span class="line">  System.out.println(<span class="string">&quot;已经保存数据...&quot;</span>);</span><br><span class="line">  System.out.println(<span class="string">&quot;关闭事务&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  System.out.println(<span class="string">&quot;开启事务&quot;</span>);</span><br><span class="line">  System.out.println(<span class="string">&quot;已经保存数据...&quot;</span>);</span><br><span class="line">  System.out.println(<span class="string">&quot;关闭事务&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  System.out.println(<span class="string">&quot;开启事务&quot;</span>);</span><br><span class="line">  System.out.println(<span class="string">&quot;已经保存数据...&quot;</span>);</span><br><span class="line">  System.out.println(<span class="string">&quot;关闭事务&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">login</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  System.out.println(<span class="string">&quot;开启事务&quot;</span>);</span><br><span class="line">  System.out.println(<span class="string">&quot;已经保存数据...&quot;</span>);</span><br><span class="line">  System.out.println(<span class="string">&quot;关闭事务&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们发现就<strong>有了很多很多的重复代码了</strong>…我们要做的就是：当<strong>用户调用UserDaoImpl方法的时候，找的是代理对象、而代理帮我在解决这么繁琐的代码</strong></p>
<p>于是呢，我们就<strong>用了一个代理了</strong></p>
<ul>
<li><strong>这个代理要和UserDaoImpl有相同的方法…没有相同的方法的话，用户怎么调用啊？？</strong></li>
<li><strong>代理只是对UserDaoImpl进行增强，真正做事的还是UserDaoImpl..</strong></li>
</ul>
<p>因此，我们的代理就要实现UserDao接口，这样的话，代理就跟UserDaoImpl有相同的方法了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoProxy</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 接收保存目标对象【真正做事的还是UserDao】，因此需要维护userDao的引用</span></span><br><span class="line">    <span class="keyword">private</span> UserDao target;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserDaoProxy</span><span class="params">(UserDao target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;开始事务...&quot;</span>);</span><br><span class="line">        target.save();          <span class="comment">// 执行目标对象的方法</span></span><br><span class="line">        System.out.println(<span class="string">&quot;提交事务...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>外界并不是直接去找UserDaoImpl,而是要通过代理才能找到UserDaoImpl</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 目标对象</span></span><br><span class="line">        UserDao target = <span class="keyword">new</span> UserDaoImpl();</span><br><span class="line">        <span class="comment">// 代理</span></span><br><span class="line">        UserDao proxy = <span class="keyword">new</span> UserDaoProxy(target);</span><br><span class="line">        proxy.save();  <span class="comment">// 执行的是，代理的方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="为什么要用动态代理？"><a href="#为什么要用动态代理？" class="headerlink" title="为什么要用动态代理？"></a>为什么要用动态代理？</h3><p>我们首先来看一下<strong>静态代理的不足</strong>：</p>
<ul>
<li><strong>如果接口改了，代理的也要跟着改，很烦！</strong></li>
<li><strong>因为代理对象，需要与目标对象实现一样的接口。所以会有很多代理类，类太多。</strong></li>
</ul>
<p>动态代理比静态代理好的地方：</p>
<ul>
<li>代理对象，不需要实现接口【就不会有太多的代理类了】</li>
<li>代理对象的生成，是利用JDKAPI， <strong>动态地在内存中构建代理对象(需要我们指定创建 代理对象/目标对象 实现的接口的类型；</strong>)</li>
</ul>
<h1 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h1><p><strong>Java提供了一个Proxy类，调用它的newInstance方法可以生成某个对象的代理对象,该方法需要三个参数：</strong></p>
<ul>
<li>参数一：生成代理对象使用哪个类装载器【一般我们使用的是代理类的装载器】</li>
<li>参数二：生成哪个对象的代理对象，通过接口指定【指定要代理类的接口】</li>
<li>参数三：生成的代理对象的方法里干什么事【实现handler接口，我们想怎么实现就怎么实现】</li>
</ul>
<p><strong>在编写动态代理之前，要明确两个概念：</strong></p>
<ul>
<li><strong>代理对象拥有目标对象相同的方法【因为参数二指定了对象的接口】</strong></li>
<li><strong>用户调用代理对象的什么方法，都是在调用处理器的invoke方法。</strong></li>
<li><strong>使用JDK动态代理必须要有接口【参数二需要接口</strong></li>
</ul>
<p>小明是一个明星，拥有唱歌和跳舞的方法。实现了人的接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XiaoMing</span> <span class="keyword">implements</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sing</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;小明唱&quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dance</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;小明跳&quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sing</span><span class="params">(String name)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dance</span><span class="params">(String name)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="代理类"><a href="#代理类" class="headerlink" title="代理类"></a>代理类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XiaoMingProxy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//代理只是一个中介，实际干活的还是小明，于是需要在代理类上维护小明这个变量</span></span><br><span class="line">    XiaoMing xiaoMing = <span class="keyword">new</span> XiaoMing();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回代理对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Person <span class="title">getProxy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 参数一：代理类的类加载器</span></span><br><span class="line"><span class="comment">         * 参数二：被代理对象的接口</span></span><br><span class="line"><span class="comment">         * 参数三：InvocationHandler实现类</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">return</span> (Person)Proxy.newProxyInstance(XiaoMingProxy.class.getClassLoader(), xiaoMing.getClass().getInterfaces(), <span class="keyword">new</span> InvocationHandler() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * proxy : 把代理对象自己传递进来</span></span><br><span class="line"><span class="comment">             * method：把代理对象当前调用的方法传递进来</span></span><br><span class="line"><span class="comment">             * args:把方法参数传递进来</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                <span class="comment">//如果别人想要让小明唱歌</span></span><br><span class="line">                <span class="keyword">if</span> (method.getName().equals(<span class="string">&quot;sing&quot;</span>)) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;给1000万来再唱&quot;</span>);</span><br><span class="line">                    <span class="comment">//实际上唱歌的还是小明</span></span><br><span class="line">                    method.invoke(xiaoMing, args);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">  <span class="comment">//外界通过代理才能让小明唱歌</span></span><br><span class="line">  XiaoMingProxy xiaoMingProxy = <span class="keyword">new</span> XiaoMingProxy();</span><br><span class="line">  Person proxy = xiaoMingProxy.getProxy();</span><br><span class="line">  proxy.sing(<span class="string">&quot;我爱你&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>动态代理也有个约束：<strong>目标对象一定是要有接口的，没有接口就不能实现动态代理</strong>，因此出现了cglib代理</p>
<p>cglib代理也叫子类代理，<strong>从内存中构建出一个子类来扩展目标对象的功能！</strong></p>
<ul>
<li><strong>CGLIB是一个强大的高性能的代码生成包，它可以在运行期扩展Java类与实现Java接口。它广泛的被许多AOP的框架使用，例如Spring AOP和dynaop，为他们提供方法的interception（拦截）。</strong></li>
</ul>
<h2 id="cglib代理"><a href="#cglib代理" class="headerlink" title="cglib代理"></a>cglib代理</h2><p>使用cglib代需要注意以下几点：</p>
<ul>
<li>需要引入cglib–jar文件， 但是spring的核心包中已经包括了cglib功能，所以直接引入spring-core-xxx.jar即可。</li>
<li>引入功能包后，就可以在内存中动态构建子类</li>
<li><strong>代理的类不能为final</strong>，否则报错【在内存中构建子类来做扩展，当然不能为final，有final就不能继承了】</li>
<li><strong>目标对象的方法如果为final/static, 那么就不会被拦截</strong>，即不会执行目标对象额外的业务方法。</li>
<li><strong>代理类需要实现MethodInterceptor接口</strong></li>
</ul>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><ul>
<li>UserDao</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;保存...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>ProxyFactory</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//需要实现MethodInterceptor接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyFactory</span> <span class="keyword">implements</span> <span class="title">MethodInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 维护目标对象</span></span><br><span class="line">    <span class="keyword">private</span> Object target;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ProxyFactory</span><span class="params">(Object target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 给目标对象创建代理对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getProxyInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1. 工具类</span></span><br><span class="line">        Enhancer en = <span class="keyword">new</span> Enhancer();</span><br><span class="line">        <span class="comment">//2. 设置父类</span></span><br><span class="line">        en.setSuperclass(target.getClass());</span><br><span class="line">        <span class="comment">//3. 设置回调函数</span></span><br><span class="line">        en.setCallback(<span class="keyword">this</span>);</span><br><span class="line">        <span class="comment">//4. 创建子类(代理对象)</span></span><br><span class="line">        <span class="keyword">return</span> en.create();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Object obj, Method method, Object[] args,</span></span></span><br><span class="line"><span class="function"><span class="params">                            MethodProxy proxy)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;开始事务.....&quot;</span>);</span><br><span class="line">        <span class="comment">// 执行目标对象的方法</span></span><br><span class="line">        Object returnValue = method.invoke(target, args);</span><br><span class="line">        System.out.println(<span class="string">&quot;提交事务.....&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> returnValue;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>测试</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">  UserDao userDao = <span class="keyword">new</span> UserDao();</span><br><span class="line">  UserDao factory = (UserDao) <span class="keyword">new</span> ProxyFactory(userDao).getProxyInstance();</span><br><span class="line">  factory.save();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式目录</title>
    <url>/posts/b296eb6f.html</url>
    <content><![CDATA[<h1 id="设计模式的原则"><a href="#设计模式的原则" class="headerlink" title="设计模式的原则"></a>设计模式的原则</h1><table>
<thead>
<tr>
<th align="center">设计原则名称</th>
<th align="center">定 义</th>
</tr>
</thead>
<tbody><tr>
<td align="center">单一职责原则</td>
<td align="center">一个类只负责一个功能领域中的相应职责</td>
</tr>
<tr>
<td align="center">开闭原则</td>
<td align="center">软件实体应对扩展开放，而对修改关闭</td>
</tr>
<tr>
<td align="center">里氏代换原则</td>
<td align="center">所有引用基类对象的地方能够透明地使用其子类的对象</td>
</tr>
<tr>
<td align="center">依赖倒转原则</td>
<td align="center">抽象不应该依赖于细节，细节应该依赖于抽象</td>
</tr>
<tr>
<td align="center">接口隔离原则</td>
<td align="center">使用多个专门的接口，而不使用单一的总接口</td>
</tr>
<tr>
<td align="center">合成复用原则</td>
<td align="center">尽量使用对象组合，而不是继承来达到复用的目的</td>
</tr>
<tr>
<td align="center">迪米特法则</td>
<td align="center">一个软件实体应当尽可能少地与其他实体发生相互作用</td>
</tr>
</tbody></table>
<h1 id="啰嗦几句："><a href="#啰嗦几句：" class="headerlink" title="啰嗦几句："></a>啰嗦几句：</h1><p>​        很久以前就看了设计模式，也写了几篇笔记。虽然写的很长很细，但是还是感觉不太好，于是打算重写。这次就分为3大类写吧，分别为创建型模式、结构型模式和行为型模式。写一篇23种设计模式汇总或者分为23篇总感觉可能会让读者产生内容太多或太长的错觉，从而导致直接吃灰的结果。（反正我就是这样的，🤣）。</p>
<p>​        废话不多说，目录如下，没链接就表示拖更了🤣。</p>
<p>创建型模式</p>
<p>结构型模式</p>
<p>行为型模式</p>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis面试题</title>
    <url>/posts/6db4d4c4.html</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="密码不正确，请重新输入！" data-whm="文章不能被校验, 不过您还是能看看解密后的内容！">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">该文章还未完全完成, 请输入密码查看。</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="8747c6a42215c66fbdda328404624bba38f29ecea6d532e8c37b332996068e14"></script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>面试</category>
      </categories>
      <tags>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Cloud Alibaba面试题</title>
    <url>/posts/57176509.html</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="密码不正确，请重新输入！" data-whm="文章不能被校验, 不过您还是能看看解密后的内容！">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">该文章还未完全完成, 请输入密码查看。</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="c5e2883853d09938da9ac0765e0d5eb36fe438fefa57677dc59cb1bf58cd14b1">249d63f61f66a83e2cce6900f57704ca0dfceed793e38fd205dc88f783a92fd2be0a0996736a281a23eeb76fad75b726ba524b945f2606a09f4a140e409d334ecdaa0a963fa539261b00663befa2aed8f3de3240d61b567fa2b2d0f4e3835ebf36d53c3b2b27d02d05d14feb231e6486a50cb689272adcb6ed3bdd31d0b2d883b7baef03fefe0b76737a6d8de87c180d0a18751993865f6bf36936dd9fb02653d9654f4bcffa4d29a5d26845197642633c6dd4d6b19cd8bb3bb701eb0cbeb57eca842dabb5e7ff6e7345d712e4e947be211da7c50f9f73618820f0df9d94ec810a37dea361c071f18c8fcc1a829373ec5e60e2c832f3c40d4d61175a5afec647a9264046ab7ee21f4affb9e86c2e3b293f12b3f66e40585b4c67b560750b017e8b50106e6ad2f105179f1769e048b3812c7fb618edae6066ae4d8e9433f017fdb28fc2485919b53c09477088e1cd5eded060e360a2486a90f58f05478cf940b79e5333bb18e4df0b59ca9eb88142ed2434952fc2a74b33a5ae7dcabed0cfb1571464b112685768881ac8ff20274365639953081ad3be88fea7fd94c0a1977eddfec68959a81a275172e5e8cf0f0c0dea3a3fdc19a6e54d9793bf930c6c1cc8b9f813aec7b3755c5dbbf2499a064bada2add2c944ae5a9a8db7cd4dfc18e2e265c2216e757a5e835b3e076b991d07b469b66480e2211c49b3ba7a9d805d00bce7750ed09ed1a53837d55b21db475911d1e012fe784b77da30f927cb0e605d5d65a1e7969470f5054f28debc9b83eb703cce2da4cecdd61affdd0700fd3fff104be02cb824f12cccc04eccaa57fa64ee87472dea1d7d7073ec73f0549e5f7142b11c03f497e234fd39673cee3bb54e85d51c5911faff7dedda7abd2463d79a44da907c50577f93d69e87e4c0fec88770343af643dd49405dbeae6ed6905949d6c34f8765b5e1d7865f0f90e0df30f53744697b5a42574f30242691ccaf1f434e8d0d02b7655b7d8f4735d2928629f41b609c1dbe43fe78abebc3ede487858aca9d3b5c2fee08b38c3038c2c108cc9962dd0c3811775c1ff059af1ba283aee7cfe87baaa75f7fb87129d19a0a9bda12cf91b67cf8d58da15b1e7ef08e094fb1a22af3815eb06e5f6147524526c157f4381b946a54bff2fe7bf48d99d66b12b68b11aea23d287a541c409c1a713e30eae27acb7dfaa2cc6aa1eaa74e4b482e77c6ab2ec29ce3ba86a5c8d315478e950f69b70abb5da2b5e1fd92fa90ccde6e1c5c6349814ec1c62e48e8db278b0790417edb3b3bc211877a222351712d8915abf6dc98c17efcceb88a6e5fae5776a0622c0f6e8ffb3aeb96c29e3955699cfc61bbcf474301986708362da88372633f91a14e605d16146b3863771532c0c9804b2d4a25373cd34a8ea88fc7f20406e1fe45bf913ecbdf66ec12d501d9222220c1fd666c541c5695634706acd7421b8f16f5c313bab9b0561c101494ef110e5660680f47ed5fc966bb02c511acf68d19b7c6c8c1a5b93e3f96a3263e40ffc3dda60954d7c4be0b133ab1b4b6b158997a8f1fd14d90345c526568dbb894770aa66a9f352511c972c70f8147a801776fa378cef5655b37381b97600a230b931258c8a81fb9b3d9121b7cfd0189b61cbd2fd3bba299ed74433b6bf15d6807a65f329673931cd6ca1fbea1ff924de83d69d1249c8edebeeb4910de66c363bd57b56bec278a6928c5dc6cac443631c7680d0bd9a361b9cf0917b5ad5e6259b8e3631bd364bc7b777e728cd17472f459be82f1dc1c609114199d005153ff35c8c85a67ce38e57916f4537871da1b0bea5f36441f9fc81fc8c3bb13cbcdf032436c4925064d047811c20b76cef0cf13518be4aecf0fc943f631a4e2e9b6240d3f4141a7808b2d4b76db5eb0a36c4716757f74db41f643d4c91547c95fe44672d2d30506c8bb6dc31d2d86dfcb13e3af77e3e0941fd61f5047b28c9022b863b6e30afc5271e32e40685023965aab9a3e4ca89999906873b651812d268fddef56996fcc1b398f062c07fad0d696f038bd73933809c4e4da70c8e291a989c04b27c78d373145db480d12f44c7d4b6c1f2d4e3b2f2b943a17c5585f3f8484213429cdc27098d223fad575f61f2ce35d3e98aceb1b8cccc6e21cb6bcacbfab3ca3f81f3d1dd947ddb8ec514f971ada45057e1de3b8cc73377eeff225eb71daae3302763b72609ca2c7532939f9f3b37959bcb39164babbeb97333f21e02634241a67d14b03d6d9c33fde2ce90789d46986463a64a0740d84d92bfba57ad6eaab4f5d82ebab3b279e8990145a2c1f376526be391614b09c37bcda96244e548e6a543e1ac14a42b5ef095bdf7afba772ac9d350e5226597b485add8e994dd17eff90738bd12766228378b51e14bd87d7a241cb33d836cd8d5d8e0d92576befbed60403f53e5ce8c0d791a8b9c5e34edbd97f8ac4ae0c5c493fcc90d6d5df307f07c747bdc09451881a1033e1339228ad60b54d6cdb7516dd43732c076e373e133f9d676104c657ee15ab9e3844c4d9c200f78d63e160e32f608b88ce5a668e41d9dd203ff298b7fa60f019d43c793a9a9b397efdb6636ede1fcaa604636b27b021be21c9d48d59a8ad2f53c47a92504fba95c07b096bdd3fb726286fd3bb745a2e4cd73aa64f4c999f8b64c70ef5ea1670341853cb744ce4ab019d254b09a43907c42addffd2df77ab4d696eaa40cc3825c3ea2db76c26aa89415dcbe9aab5b71a3c6a06b9bbb2f64235c6edfb9400b8139c84771d2c658f44dc91d6c1bc0194037cc0f52e6fdf6663da665dc92980ac121e3d01a9d0788651bcde983827ed490675fe86adf452eace4c577c6b192afdb82d2a97d4bd9174f3593fd6025b092debf25bca3d14afe674e8cf410749d247082cbd9afb0844a1158421d475fda923538dc6c750223769527c2c8a2f2d1ed4f9aa333b0030d0c0b7aee8bd86c5a4a4fbdc1fbdd997b500a14187ba3dd5edeb6c1c1ebec1f68b83ad58041124499a4879636ad17f8ffe44b3172ce0f2a0072dd76978e6aead439848b1efd2918f8db2314bda66945811ac892e47f348f396d46d7262e4de676c7d5a83ab1b824a24809808ea2078229fa0f974c9dc0fbaaf484a666c7fbff5155c36555662b36ae6e53210b1df151ec92f89088a5029e17acf9456d140dc25e16885e7deb6439c7ab0282746fa44642a4c5189cccfc31f02c59acaadfc478bd0d35a9c0bff3e9bb4ebb5ac16a69fa87e24a407a6617fbe43c7f124e04f4a63a5272da94aae568e8eb0bb4d31342cb73fee199de3141397a29ca508cbc200f36cfdc6d7a4292a4b4d317cb0d07b526324c8c4cf14b75f19d543618eaba6121c7c2e12b25f00a95825166fb953fee65f1e1b89b4ce0d1312ac3eb6e4cf9aa7471a25827522865d4da96047c4ce86e04d32df6f984ec80fc12c2d71b2c90647d37d6650202d3786aa26b4bb585ed094d80d613509630d707c984a954bce5f243e5a15e60a4c23a4c25777edc0e71a77880e644f1cbe84af9a19c912d73d31bd327f565413d41081be830120220e4d96d28b7f7617cfc095829e479ac32b8f2c64f5ef913f99f89e5ba54583b9d19c82c65c0d6f701c011d3ba0e74cc5f7da9fb01be7b9f5778ddb190dc429ea16e1b055e7c0540ceb78b53683eb9adf4ee4c0a312ecd018443ce5293e8439a82e181c69bd61dbeaedbbd0c26e849e03c81ba4025b1f31bf382d6588564b27d5a81137cbfe6797276df014ae65c25636cbd43d568efaeb9d27b5a0ae8a96a206a870b17fddf5e223cacff489d78f7bb6d18c7bca923df6055031a5336e4918ce62794d6b620791ee4a7b882e24d906354894f10c99f8d76be9853aa07f1f7f0ec5c2315c8b27034a9810836b15168fa63075c97c6c9da023b9b29613b6860f252b283b9b5a849527adb72b4610930dc2c873551e8503e5e4927e37ebb211d7298cff8a16145402d256c558c60c9c6413ca8fe995bf425fc43629aa990736042e0f78a9feb3b38855f53b691294b2965f4371b6ac25ed8d1a41f382e33afcdfb8eb3e6ff70bc3dcc9dc3e977099afa808d904ac93504965b97284e9955c80b89187f065ce61818118baff299093bbb8ec030a380de409ae186567bb7b3ab478011adf7678a597d478fb42f357e46cb3b5a0fe394eefda6300d3fe0f49437635af685963534626b6f32b04e02d89df6b99c9e8d66bd241823a93fc1e641bbb03e3d111b52a373831af97ae7c7c7d71957d9f7c811f366e06f8b73d2a2ef1bf5abe386a415343c482e4a65d141d62ed5bbcd71ffed1166af323873d40186514a30bdf2f0d7b56a817e8a898b6431ac5f3bcb95af76c8d0a54d9c27e251de6914ba1c76bee993314667af20f07812700c1d1b503342b4b9dcb27ab9392d6bdaa92a4930a6f71b6187b9214db215d81cb347cc62cf9d6f085a2dcd3acdfb0b04847fe2c5680bcad6bd522d4cd6a4993a37da02085c3edc38ad9b097c5fbb8249316e5c156a358bf4eb4e61fcf1d86eb86f61517a115c083bd7c0d42a7c14a00a6a49e15f3ea9ae864799201ae6bd2ed93a670b65d858271eb9f44c868fddaa337080befb3a6d11e441987ac6e1b8e36fcdcae4b38aa13089a998e89dbefabfc0b408baa6479fac38724ff036f46ee7f4670c23269dbe8062a913b101d4181857384ec8b2ef791ad214e994227c4d72cc7ce1c93adddd56ed1388074aa039c502feced4f63d6b37e841bd6dfbc06e91dc260aead41d8f31dff801ca2f08073e0005265f11dbaaf5a984e6864259706dab45046aba0b694439923e73c38639f986bc6cef8d3b7b63a01ad0a3d30b4ca07d746ab6a36d21eeb2251814e6275774ba0a6a14553694e12ecda9b918c13ffbba007687c75fd36c454709774e000381190b580aab6d832c332f8f643eef72237aeda753f5e3acfe1b02931559d0085d5b34a9b7073582bea04382d27d0b4b734a9ae6bb0297a8611570b2368ab445026c153489e406ee4ee382b00c2b91200952cb931a0f64eb4a7b80f354cd40131f12a76645da02422c3f157ebbf113868ae179d9b86b0f4a532c97ee6c0baaf281ee62af1b5f8c7c0cd08ea23f8df6e5221021e0285eaecbee5c2ef0444e38e0cb172b030312ae66f95d948689335a04625f56038fcd7d59818b9ff7f0209fa1e07b9c16c568ab1b064dbbb636f96da9b377edac287fb2b99f63a36997ab6fe7b35e5726b8b3fb58f81f4b540bca616f87769abee353dd54c435bdbfc5865988b1de8b66377a097180eb98fb50dd7f85bbdd2d4d87b5940f3106451da7cfa8523cf66ba9273603045b004dc9aaa441a2e3002bb752d314f07fd7b8cbdffe1d50e86814549227e3050574e5a7d841fa47608b5117bac9716ea1a5e1e0a2855db9d1442d8424bce072d82a57c3cd20d45fbcbf2d1bd3c6a7a4fa3d47ff3572325dd1a2fcefbea47c58e5e4a839a8fac5a00b2905788d626b49a7089f66679f367d784e6c943c1a2ed8aa5cf9d5bda025658022f57a0bbc0d309061f9019ca9e7120152d21296b1bf91bad415f174c37f11c387c3e022588e2a53781e91e2356fa8eb32dae8ec08694755ef5cac041753a92df11ac6c1bd32b8768b6b86e8fd0bf1c877b6f389d4c21d0434aa6eb632606cd590aca02b99b9eabda562f574a208ede1b0a630cea83e95bf3af51c1724330e21f17bab15ef94ecca2d4caa8c01d429f3189c17b97bfda7f3641344f8739061b3b35b9ed2a7bce0a3f7374fb680dfe4556f6f004ad547710edf20927f231348b50135150992a901596d804c720eacb9d0bb989b860e9e2cda0f52e69c3ead137af0af4d73f88b6f7898e2a6c79bbc703aa588765e9c8c06bf4fb22b4ecbe4f41c55804666b18f401945a4253d82763619dd3ef91d5ee71c3bcae0a00183e292c43fc79052b82bd6522d870f3578f6a3c633692490bc5faef1772db41009e049d8dfe46614e3f74e264d2958bc36bbe3435d11f3084feed3eb0a6a477e69fab7b695bd8c1085d3419cf916cd44fca245372e0c6932a49fc8cd98cb47630030a9aa3788c091637d5d85f4f8e0ca056ceb075e9eb1c2c4e05dcb51c52b74b5b90004faa53435c3e7123806fc880358b183efcfe4f86d2cb37bf0e760af8286584ed75cd91babffdc03e9a75c26de00477180899ae48115f081a2f7634bd60d23019835c5507e1804ddc4cbef60dfbc36f9b899e05ade344252ffb06b80e7ac3edbc8f894d024ab6556b860a957e69d809e4c2f95c3bb60ca2534c776776fcfa36d4da5304a64151ddffe539a9da5ad3d119c97514de11fa6f0e4a0e0d2ab1dbe994e96ee66a44437b2b3714064befcf7c1ae7ff8806f37f1d7a34e9743daa5fc99b769235713c7eac4aa4bb5c46b2c1745ec5586208eb0882ffce60d202263e64f3f8142c5ab3c7d53c58277a95323f18a6a3ea96c5af258cff343ba677af9ebc6a335d20e79de85a0670f1df10dcc0ffa323a18db7b5e8acd179a65cd5094f9357f7af26c702b69f111b4eb9ea03b7a91f81b149cb62ee3d4ca0c0e57af9f046a5272cbc26d5b39ad03ecd27c2611cca262fcc41878d5283ad4608e0f2344ca200786b313fe3717b73a34549630f4df374e3918723981555b7c7d5bf17be6b3cba26a96a4877fce92cef358cb15ae9b3abbcc7edd931afb38d6176b6db62138bbb145a2881041b96393ed2242d362a6f409576e6623ce8d4a9547268b79d905d96a0a68eb3e07658b2e08f6650dc31ca2009ba51f3e861eee0be7ff36a542119d87895858119d3c97d683a7659b013b89707226f854ca0a63337ec77ec54ec8cf49404142c5cb8711df00def70ee889655792bcc1e14875a8684fb39404c10c668ba10ee3b46ec20c39cd25f03d54daef1d2a4e78d6f68fbba4bfe197ad8366e1736d9520048281ab07ee298345ee353062ceb101352b7babb6f01d2725479e76237e19844e19fd265c21862b8b5b01abf0466e29d627e7077a2b27a4089c4711acb0ef29f5cc48c90009c85de3359294901282ed20f134acdea48aeb5e129d68dda953611cb2666caf18194bbf325bdd4490b1cb155379465ed6ae402c6bef867682dcf72e4912d2c8a15c5f92badcfb923c17efeecad5f3b08e9cea9d659e3692bde19104993718a25041648000fe5d62ee216e64ca289874da9a4b0b90e3832266730b121edc9cd414a21108021973bc822bbf43ef9bb27e7f18932e21d9dd05dddb6e32c13f1cecbb65d65e5227bc2c2923cd7de3a82fc2663a39d41ad366a7021e1850420d56a2e61b185ce2605d064b69426bed24795a83a0f02fa3d4a416dc1323922b32059fa12df7c613136ac33506c418c9c2ccf744b504f063708d0e80d40f78e46bac398548b89d34b9c9063a47c71aff3541082d45c498f735ce210b9530835ea4a3a17dae5dac62e4a5b134baf74b1fd970efe053b3c5f83afa48b549f5f0cecfcc1895b0d11cfbede91928722caa072a67b2f7091498f9abef8e36edc6cc6405716b763187cafd42edc8c511376ab47b8c494a4ac0317e40a0581746599eaf1cca1220f52e75195e341144a534823028f983d332d2a1025e3cbb1bfdcdd411089ef493eda37b8a1ab5bec8215afd2bdcd42bfd4298cb5400f36d60dad6d32fb245c6584d4349db24e865f2e0a8c6645abb125ae20a1bc218f41ca3a9573018c9731858b529e1cbe1f6ccbf2fa77f730e3d657535ee61c013df296584edb5c821f438213c69d161400419e89a3e68d349614c9b03e665aa6a215c0967f008865ee5fc2e70f93e241cb679c64f457c491726b815d8796c5cbccb4c239de5dda7977be4a670b3c6e29639080e200640cd8f78e6f86e66148f6f3877a06553ec21b3976c20911088fa65ad5ec7a2e73ac7f4dc97f38c9d8367b67336d965784ce15a8e2b588b4e07dc2fd1f9b20b164e99f2c1c421b7194eaf6bf3e62abf4e88c84cae6edd4df4c8192fdcea826c68f786cff45ead35655b6fb35452f2d4848b170d546e361e5c3adcb6a495c37fed68e78c8e49c9fbbc914af627765f218797993961e191f4ab221467f496fec0467cea8e7a90e62a7731609c2ecee3e85358234d57a9ee1595073cc74f54f514cbdd081d54bc575683848286aee54ce8706d2ee827ead1f9ff0bc691b817407fff108545ef8d53d79127c19fb35bc3327de498f141308b6affcc83ab60e87149be5bf121e615a32af16bbbea178fab84cd6195ee7bf3a862ffb707108e389e1904188d380f3be40ba5c4859c4671447345b990aa8c87b7637641c0e068890a7df6aad28b774f168fed91b61359fe08ca51255db0d31522da6a9d3dc2d5a7b44909d39088efac52f1ec8addf83a29f99ca7e828e8c4600c77ec79cc839e1f25d068c435de331167d13be9944c21e5587ad133f94a3a4006f7eba8105b0a169137786da7d42e5395246cf774eeaf4072e60304a81dda34eff12e64463e488fd6240c65aada1ab6616912ccb049fd653cff57f43910e8c02f61fd956a4989fcc962f0a288389a57859fadfcff97b29fc38a35bf6a3f0164ca9307b9665d735964bd7e31acfec3a812bc986b4cf6d5f6a3bfe2cd1d0db29ea8bb5c0ad09472f9657d5d063a24aa569ff5fe865cb98b5a51722cc580c61b894f4ca36e9edc6e80c2b33b8126ed23d307b661837382c5b3fb177627f0bc0800b3cdfd76c592768d021ca1507b559458715abe1dd78f60e9598c254e831c2471d48dda0315fa54fa013195beae07bfb44011da85537c5cfeadf8b5a4481b35c5a766a46b99666d65f7b373e8ab0201bd3a29c092a28d4599cd79426530d588435bcbfd0ebf7ab1869d04fb89c1a101b636313798abab811de249d3d2bf47fbebc56e9b34884397acefc882e639b1faf7fd2a7e99f914d1c853fca19230e1d10c92e0ca7e1cda850382973eacc132e1864a98da10b66931fe41e0d3fce5a3e2962bdbee92d1f952a1d4bd510a168063f9d38fd1c4671212d19cf4acf5d7c6fd988d373e9fc37c5650baa97e69a4d694fa2de4d4ada12b26fe8f3983619b9c3dd08daf8c07b9ba30f0fed9943fa5ecd525b0b8371a2d5d8ac9dcbf1ec67054665f911e9e7e47988d5b1dab677553e3f675937172592abc964bc5a77268038522843ea6d8ebcdd3f304316b2924555148fb2b7ed980ab12e00f7715347d6ee9aca6a3d5e61aa6dc6b880ff0bdbbd4ef632b15075cc74d535ca5b4decaec0328a2b5214d24b43f5497d11699ddb56c4afa1db4618634d07f6b01f72a9fc57c56fa92797b87b2a4ba452abdf80b0ee50e2c2b9fc5dd5570502f2f010b578b7240620d014981dd1fc332698dbe33b3da2adf2a651449d346c590c796abd9fb966c7c702cf1dd02e5438efa2eb2d3a9cc644d6e6e061e133bc4ac500901eef6925cd6e394fbfc6863d97f5c8bd94d0320e979fd8f81ee3a3b04eb5479b5eb1f9ba188f4191d58299741de039683981a8c69a2ec5562a45319a566d9db345a2ce96a9cd69e9eb0e0d83a306beb9cbc1de4a2c44ecb55c2b6068cf86bd57fdd87d731b607c198b21cbdf9e39f9bc6cd76adadb00d52fa1ca5913fc84a833a7316629793071b31f05f974090fc35094afb5d8006f777ed95dcc50a28cf530f6e6c65da8e97a5242a00a29b9bb666dfd4e314eecaad565bd38ef93444f1abc4e5863ac734e55ee25461b1bb990158437b45ab52b8dc4f8cf6f9d225f65cce9cbc3ecb16ee3261937130c200f05240d53e3f55026ca451b710b0f62cf2e831779c597f05e2424bf36d54ec23458d7dfe626cd3bcda954e939677c29cfd6fa78612fb7446e28061ece63892b35e38e07a2a64a8336ecf733d541b17160d5c5a40499719f8ae9957956c4ad70737c5a57ce9e42bddd8677656cc78cc63dca82e1267cc53842262a7f71c68fe0f7e0b6621ce9344db418d852dca026bf21e4c34d405874e8a34652363f9cd089c31782de40907df06e217a70783163fbb89d1c80b460795e9275871ef4b3f8443bbbfab7c7c1a3dfe999042028c6c34cf5df46287544ff0f275b74ef992fa99a472c9a223abe067e4e96f1201cea327ea2afa9f5e06d2536892cc3dbdbb9f342f85cdda5647965bdfb4c7f977d2ab13a34d25c33544aee885cff3b4b69d72754b5cb10ab52ce70d8182b77045feb5cef829d90f0fa4ffac44a3a16499948cd137502c0b0098067b7cd85ae9a69469a9c1dd3db137e782c45eaa505cfcdcf706160c600e1bff501a560ef02d3a62c3d801179b4697405b86947f34939b407ff3bcd63427a490f07489adc1ed0f77f8e89b138d13adf16bd6a01f8df30082e50803d6c03a97755b9b2170a4211906415dd2cbd7ab82b31db816b32b4935d4f4647dc14dcc3cba6126fea0408c86ba480a2622a39b5ac62c7465dc3d0e7c24f918054d8e0e8ed04a82966c6bd35c98ed741b41f5692646948999c6776833b0789a14ae368e893709ef9455dd7a69aead2a784f76b85e1057741e00b0f7374866dd23409f40fd4d247103d5ff5e54aa6061557dda110d445fe18b2c312e62a310beba335b3f5a4e8fedd33c6e083eae1c6ae83a807c7b26c91deb90d5da6d5158b4191d1b9a29a2e3f033017a8c2b8a60558a8c7cc8e94b7bd192bc012936b19c790e73ff2124cbf0cb9ff37d8e03745b9d670199f985fdd0e09facf95eafb4574359a87d73bcb5ed9ae1fa2d570536bfa7fe8dfb182b48344f6d5211e00123d58769f9ea340442d91fc14dbcec531ffdf84b58e6a30ad454bf62f17ac4342ca130c20dd83c13be9a699014bf160f88bdc3beb9c8ef331f7fc56425d4c4d1aaa4e54323c5a14b4e81b1ee2afed76ec1d0f1cdb2f796c5c4f0f8ba4d5d5bf98c72ea57f226c93abd943146915a1139ad848174d8a26489e6fe1469429027b8a1e27c68e418eca7880dd5e8a742096a66c89885693ca1bf833427ce6592bdd1ab8f8d1869b4c8900e8a557ce222cc7cd7b874dee9d47ba31a16ff62cdb706e22f23d82af0e16acb39f5b5862381fa9a181ce378f2f22bb7b1e32814043e9046ed546792c0c4178ea749cfbf04c1a3a38e077f6079b278ce74070fcbf60857dc01bb8820e318da1fe80f08087795a55adc327593e53e1604641f04a9d135e0a6e33e139b69e13fb33e01594f62dd84df2b80b450f8e15dc59669572b5c20062d58b7f69d1564a0c0d24d8239fc367e2aebd8c368697b60fc87accdb60d03f5203e1352c526dc627ea2dc0eaa5aca732e0bd32f54199f9cdb781a207cbd52f89d37ecf01100ab59a884c73e78d63d5250930729d368c023bef42811a2685a462cb2dbc2eb88d1d145a4e3f88e78b5cca5e26c65f932fd3b32d042ba5484a98d07991158011c0abdb8eb51139cca934dc9ac3ee7db6ecbb7c6cde574c29018218cb3262da92963fe1ac3c9feccf39eb68797c2b1acb7d53017009026623ea031155dedfdeabcde520bdd42c1f4618eae7eb7d4458c13393bde2f2fdafbdf22104b2aff0d8bca8cc59a6c5fa0feaf846c05ab8f271a6e8968a62361294cae48313fd72eaec33c67df7172fccaddc1f461881775889efb8274b00534ece2a2ad871da71bd3e8c807de479e03bfc5dcf5b11eb104117c7692b828f9d3d25c2db5ebd2e26fd26dad375eae4d14d3d548c7b5000cb6aef2ba5d9ace3f4d359e038ff3c81c07e78943e4db1ab038c4bfc7bef780e45e7d48dd844388f8ceb46a1e58cffa057c70da802b01d0c205532f86bfbb77c3f851222b8cc7bacb620534e9c71b5940738a83f0b57ad7828fad6cb0bdb7bbb0a6997cb404787c5b31276e1d16bdaf93fdea1cd1a28b03d8aa1d71222b997d4f076a71885c053ffcc1695811770427fe1bd7db86305e6a15e65d45456d54afe9960b2a265f661863f7bd36dcb34a953aa4185b06a05e2c2a959d17b2fe4fb6d1cd1c0ba34817b4172ed98c77d89f45cecec4c722c0008308686c4e3b76c8ef5047be66e522ac2cbe2887dbe7aa3bc196b3520e0a4c131ba91c26f19c9f0b8797b0cbbb68b3749e191ccff2b98986daaeb169ae63953c69e8cc0853a47e7f233e7aad0dc0eb10a8fc84b146fbffd05fbdb874f91429c3c7a9d726eecaa7960e3f1f39dd6200981dd3169478fdc6dabab60e1837b61f373924eab4306a9f75929d5603d8d7250d239a1d68b4fcd0248bc3e0db67f12fd94551e7743147d338191c2fc0e2391b54ebea6291cd1aef900ac796c756b288348a46e255609c7602d3dc9b0bbfeaa78d4edeb4aeaf05a4a0bbc0cf5df9abfb4343f81dfa30929f80a9327ca83d77402ba1de4b41788a7ccf90251c6eb3033b97fd8f77e951e90c9dcdecf9454ec3e605de2ce0a57ed36e76246be326b4ba7f3ee4cafea8212e7a62a894913fe90ecb8778f48aa18f3fc16d327a002eda0a2aefe431650b23f9bbd674e46f86c3f66bcef4671578f4e14ab45b82bd1bbd070567c3a9f83f23e7acb4b1e4fdc6867ec044d6679ee92610334446d6b58748aa9da3028c27f9d6cf067bcf71a63714e328c284e8e1fbe0bf1eb3050f2ae989589c71fbfbaecc5a27d86584b31812cd0e9c7ebda0326903bd4351a230aed2ae934d5f926943da18d06ca86e30260a9e9070fc6f2a508c1dff44b0f61727834432c96bbcc5e85189a016f8b323fceab271773044885ac960a608760ecc76896cbe4612c5eb0017b5cb30868480a1704bd4291bae6bc5c320d78e24ef84520e59b2cf27a531d494e711a26bb616b48bdee39949b833f3920dc035aa7e91cb05857fcc91e4484f78038462401c0eba2bb71b4591ecf7d9e7cb7ccfbfff9cf6c1e0a331d05f4cc2f39de8dfb2948c3eb48b45c32859c8766ee8be8a137f821748c681c8c363407182b374cf93cf8321d25071d0c7e8a8ab4a4e1a9fd1ab6d9ca59b7b12fc139173f7e9c1ac35e3d24d9ca04401cf1e764982ae3d5d136a1162d76dc28bc551153998d7b36ad07718865ff24776e4add885f992e5336513190697e23fd336789c02b7a6c7d5cb3b4f09d82cc1a145364a61a30574302e10436816c37b501eee78e43fda17d7c2c435430a7483eb27af7acb91655d6d1eb64243718de26029dc59510187876b54a167c5e34f358f01fd3f98cfc7f9668b0d70a8f9618e6b4b34227a1a57b2199c5b01c377fa29aaf347fcb00f525043752c7804610bb6aee8b47fcff8da64019484ad209a366b12834c6bfdffec51a7bd46e30b6f98a8f99f1b7e0859de1ed87221664d88b57c5ddfc46969df03ccabe54496cfdffc54570706588d9038b145be32f79113718f0193f10bec8da9007114a17e0daaba7e821db990002a62a7c432bc875a1340dc054b292552353547b45fac68a574f7018c211a5fa7b877ad04d28ae2992f62d0fcf8eb52bf7f5cb5de70ec119a45f936e757dbea71a39d2507c8aac353aba2529c7dd57ac799739e21d6676d250dc0dcf8599a024296311945ff9780a605999ad4b22ef50e259e30d81548ab658a2cb5ed0b66a04b4f55cbe1ea63c9b1924daa5bbfd4dda233d99735f2d4506284fada0fe450d00fe0f108c2a0016e67529bab386057cc4c1519903b8067e8b341a11db63a20bea4fe5bbf621e220889686dc3b367b1a21b8f6243d884c216d67528475140290bf16a43919323991c35b3a6cc36b07c8c4e1490ff7a1fbd96ea135532f0b0d431fefa3fd21e5aef8b8389dd8cdf6e817e6f1911aa792d42d82c6940c1a8c6a7e8e3c9504a275f16550697403caa8b8ae6d4d757fec69c92595b5c90b152e2cd390ed9a2414db1d827ef9d51e978b291178f7b3b72fccc0721a491356405444fad2f79d55c193ffb1517ef9aaee07ff5de1bcd13a9d99893730d3fba8828397d9d210d6c349ac7e54f35f0a942d75af215df17c6f32046555af683f26cdc3bacf70c030ca57c2b8de76ff925e3d07f51b89e25f0e8d86252530a033379d5f02700394afe986af58979f6586e0caa981ffd19857146f1334c7e696bfb1cea5976353d67034e0446d6982a4825f8ed0b59e982d64e2d25d21e616f5710aadcdccd39a1c39f8612454d53dcd05c0d87ee7064c84737b895210ad39c0e319be57a4aa35465fa917bfdf7151d2847ed4f7a89022f9eb070d114af92ac31231ebf5c078df2ff7463343d2a3c056c7237e5e00d7cabd4770037cf9ebb2dafe7726977be597f11ef107b8e56f900e815c99839c1c0f13bfbcd7e69bf7f5ad9028114e4ae74e626d248beeca9482f8584b95e42d7c7f0cc111bfd2f19d9f46279ff3d8b61b3c7fbe34a00bfdfe7fb526fd5b0d627d17627ff097c9a16bbb36d49a79257f4b553fa8317ce0969b9fcada19b08d3239d4b574af9b40a107d509cdb4510ba5b4371fe566df9aaf72c3149923c880ef65a4c5e529ac601df9a3a0792c9aba80a30eae64ac3b1bd410328e1ffab7a00bdaf43103a2d2f34013ff4d87f7ea9fe85ddc6a1f6cdd6d559eb064299821e7549c8138fd51a12a953b33f542996353e8f1529484389ed7196a4420168faae1b0c38aab9690a550f27d791698d135154d38576c681ccc86c963ccbe6c27026cf7459b0c7da45694bee70d75644f347bb74b27f031cddb159aa444e8799ae2c3f39ed538fd88e99157d170d1a7c4d89db0f8fd695fd8dd2ab9045ce1f6710b7d08618961ef3407ec795768673111cfe6964997eb745b8a430b9f254d0adf30b86c8609f80a9dffd1deeff1318af91b5bb8cf0ac197c5e9e6f05884</script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>面试</category>
      </categories>
      <tags>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL面试题</title>
    <url>/posts/d8c61fec.html</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="密码不正确，请重新输入！" data-whm="文章不能被校验, 不过您还是能看看解密后的内容！">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">该文章还未完全完成, 请输入密码查看。</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="71844e4a35f1670d4e90c59e0d75d2be852f5f575a4f4a166de1022bf779ccbb"></script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>面试</category>
      </categories>
      <tags>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>集合面试题</title>
    <url>/posts/4f9185fb.html</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="密码不正确，请重新输入！" data-whm="文章不能被校验, 不过您还是能看看解密后的内容！">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">该文章还未完全完成, 请输入密码查看。</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="6de09bf5865934bfc95ff768dfdbbe90740eff094ca4a1e5bb6f8a0965a32d57"></script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>面试</category>
      </categories>
      <tags>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>ElasticSearch映射</title>
    <url>/posts/9994ac37.html</url>
    <content><![CDATA[<h1 id="映射简介"><a href="#映射简介" class="headerlink" title="映射简介"></a>映射简介</h1><p>​        mappings是用来定义文档及其字段的存储方式、索引方式的手段，就类似于关系型数据库中的表结构定义。它可以分为两类：</p>
<h2 id="动态映射"><a href="#动态映射" class="headerlink" title="动态映射"></a><strong>动态映射</strong></h2><p>​        动态映射创建出来的映射。es根据存入的文档，自动分析出来文档中字段的类型以及存储方式，这种就是动态映射。默认情况下，文档中如果新增了字段，mappings 中也会自动新增进来。但是有的时候，如果希望新增字段时，能够抛出异常来提醒开发者，这个可以通过 mappings 中 dynamic 属性来配置。</p>
<p>dynamic 属性有三种取值：</p>
<ul>
<li>true，默认即此。自动添加新字段。</li>
<li>false，忽略新字段。</li>
<li>strict，严格模式，发现新字段会抛出异常。</li>
</ul>
<p>在新建索引时使用即可，操作如下：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">PUT &#123;&#123;domain&#125;&#125;/index_test</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;mappings&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;dynamic&quot;</span>:<span class="string">&quot;strict&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;properties&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;title&quot;</span>:&#123;</span><br><span class="line">        <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;text&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">&quot;num&quot;</span>:&#123;</span><br><span class="line">        <span class="attr">&quot;type&quot;</span>:<span class="string">&quot;long&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此时如果你在index_test索引下的文档中添加除了title和num以外的数据就会报错。</p>
<h2 id="静态映射"><a href="#静态映射" class="headerlink" title="静态映射"></a>静态映射</h2><p>​        静态映射就是我们自己设置的映射，例如：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">PUT &#123;&#123;domain&#125;&#125;/index_test</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;settings&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;index&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;number_of_shards&quot;</span> : <span class="string">&quot;2&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;number_of_replicas&quot;</span> : <span class="string">&quot;0&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;mappings&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;properties&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;title&quot;</span> : &#123;</span><br><span class="line">        <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;text&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;analyzer&quot;</span>: <span class="string">&quot;ik_max_word&quot;</span>, </span><br><span class="line">        <span class="attr">&quot;search_analyzer&quot;</span>: <span class="string">&quot;ik_smart&quot;</span>, </span><br><span class="line">        <span class="attr">&quot;fields&quot;</span>: &#123;</span><br><span class="line">          <span class="attr">&quot;keyword&quot;</span> : &#123;<span class="attr">&quot;ignore_above&quot;</span> : <span class="number">256</span>, <span class="attr">&quot;type&quot;</span> : <span class="string">&quot;keyword&quot;</span>&#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">&quot;desc&quot;</span> : &#123;<span class="attr">&quot;type&quot;</span>: <span class="string">&quot;text&quot;</span>, <span class="attr">&quot;analyzer&quot;</span>: <span class="string">&quot;ik_max_word&quot;</span>&#125;,</span><br><span class="line">      <span class="attr">&quot;num&quot;</span> : &#123;<span class="attr">&quot;type&quot;</span>: <span class="string">&quot;integer&quot;</span>&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="类型判断"><a href="#类型判断" class="headerlink" title="类型判断"></a>类型判断</h2><table>
<thead>
<tr>
<th>JSON中的数据</th>
<th>自动推断出来的数据类型</th>
</tr>
</thead>
<tbody><tr>
<td>null</td>
<td>没有字段被添加</td>
</tr>
<tr>
<td>true/false</td>
<td>boolean</td>
</tr>
<tr>
<td>浮点数</td>
<td>float</td>
</tr>
<tr>
<td>整型数字</td>
<td>long</td>
</tr>
<tr>
<td>JSON对象</td>
<td>object</td>
</tr>
<tr>
<td>数组</td>
<td>数组中的第一个非空值来决定</td>
</tr>
<tr>
<td>string</td>
<td>text/keyword/date/double/long都有可能</td>
</tr>
</tbody></table>
<h1 id="映射类型"><a href="#映射类型" class="headerlink" title="映射类型"></a>映射类型</h1><p>​        es中又丰富的数据类型，我们可以根据自己的需要选择合适的类型。类型大概可以分为如下几个大类。</p>
<h2 id="常见类型"><a href="#常见类型" class="headerlink" title="常见类型"></a>常见类型</h2><h3 id="字符类型"><a href="#字符类型" class="headerlink" title="字符类型"></a>字符类型</h3><h4 id="string"><a href="#string" class="headerlink" title="string"></a><del>string</del></h4><p>在 es5 已经没有了。</p>
<h4 id="text："><a href="#text：" class="headerlink" title="text："></a>text：</h4><p>​        这种字段在被索引存储前<strong>先进行分词</strong>，存储的是分词后的结果，而不是完整的字段。<code>text</code>字段不适合做排序和聚合。常见的参数如下：</p>
<ol>
<li><p>analyzer：用来分词，包含<strong>索引存储阶段</strong>和<strong>搜索阶段</strong>（其中查询阶段可以被<strong>search_analyzer</strong>参数覆盖），该参数默认设置为index的analyzer设置或者standard analyzer</p>
</li>
<li><p>index：是否可以被搜索到。默认是<code>true</code></p>
</li>
<li><p>fields：Multi-fields允许同一个字符串值同时被不同的方式索引，例如用不同的analyzer使一个field用来排序和聚类，另一个同样的string用来分析和全文检索。</p>
</li>
<li><p>search_analyzer：这个字段用来指定<strong>搜索阶段</strong>时使用的分词器，默认使用<code>analyzer</code>的设置</p>
</li>
<li><p>search_quote_analyzer：搜索遇到短语时使用的分词器，默认使用<code>search_analyzer</code>的设置</p>
</li>
</ol>
<h4 id="keyword"><a href="#keyword" class="headerlink" title="keyword"></a>keyword</h4><p>​        这种字段用于索引结构化内容（例如电子邮件地址，电话）的字段，这些字段被拆分后不具有意义，所以在es中应<strong>索引完整的字段</strong>，而不是分词后的结果。通常用于过滤、排序和聚合。<code>keyword</code>只能按照字段精确搜索，例如根据文章id查询文章详情。</p>
<h3 id="数字类型"><a href="#数字类型" class="headerlink" title="数字类型"></a>数字类型</h3><table>
<thead>
<tr>
<th>类型</th>
<th>取值范围</th>
</tr>
</thead>
<tbody><tr>
<td>long</td>
<td>带符号的64位整数，最小值-263，最大值263-1</td>
</tr>
<tr>
<td>integer</td>
<td>带符号的32位整数，最小值-231，最大值231-1</td>
</tr>
<tr>
<td>short</td>
<td>带符号的16位整数，最小值-32768，最大值32767</td>
</tr>
<tr>
<td>byte</td>
<td>带符号的8位整数，最小值-128，最小值127</td>
</tr>
<tr>
<td>double</td>
<td>双精度64位IEEE754浮点数</td>
</tr>
<tr>
<td>float</td>
<td>单精度32位IEEE754浮点数</td>
</tr>
<tr>
<td>half_float</td>
<td>半精度16位IEEE754浮点数</td>
</tr>
<tr>
<td>scaled_float</td>
<td>带有缩放因子的缩放类型浮点数</td>
</tr>
</tbody></table>
<p><strong>注：</strong>浮点数，优先考虑使用 scaled_float，但是要注意es索引时，原始值会乘以该缩放因子并四舍五入得到新值，ES内部储存的是这个新值，但返回结果仍是原始值。例如：scale_factor为10的scaled_float字段将在内部存储1.54为15。</p>
<h3 id="日期类型"><a href="#日期类型" class="headerlink" title="日期类型"></a>日期类型</h3><p>​        日期类型支持排序，且可以通过<code>format</code>字段对时间格式进行格式化。并且这个能解析的类型比较多，例如：</p>
<ul>
<li>一段格式化的字符串，例如<code>&quot;2015-01-01&quot;</code>、<code>&quot;2015/01/01 12:10:30&quot;</code>或者<code>2020-11-11T11:11:11Z</code>等</li>
<li>一段<code>long</code>类型的数字，指距某个时间的毫秒数，例如<code>1420070400001</code></li>
<li>一段<code>integer</code>类型的数字，指距某个时间的秒数</li>
</ul>
<h3 id="布尔类型（boolean）"><a href="#布尔类型（boolean）" class="headerlink" title="布尔类型（boolean）"></a>布尔类型（boolean）</h3><p> “true”、“false”、true、false 都可以。</p>
<h3 id="二进制类型（binary）"><a href="#二进制类型（binary）" class="headerlink" title="二进制类型（binary）"></a>二进制类型（binary）</h3><p>二进制接受的是 base64 编码的字符串，默认不存储，也不可搜索。</p>
<h3 id="范围类型"><a href="#范围类型" class="headerlink" title="范围类型"></a>范围类型</h3><table>
<thead>
<tr>
<th align="left">类型</th>
<th>范围</th>
</tr>
</thead>
<tbody><tr>
<td align="left">integer_range</td>
<td>-2<sup>31</sup> 到 -2<sup>31</sup>-1.</td>
</tr>
<tr>
<td align="left">float_range</td>
<td>32位单精度浮点数</td>
</tr>
<tr>
<td align="left">long_range</td>
<td>-2<sup>63</sup> 到 -2<sup>63</sup>-1</td>
</tr>
<tr>
<td align="left">double_range</td>
<td>64位双精度浮点数</td>
</tr>
<tr>
<td align="left">date_range</td>
<td>unsigned 64-bit integer milliseconds</td>
</tr>
<tr>
<td align="left">ip_range</td>
<td>ipv4和ipv6或者两者的混合</td>
</tr>
</tbody></table>
<p>定义的时候，指定范围类型即可：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">PUT range_index</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;settings&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;number_of_shards&quot;</span>: <span class="number">2</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;mappings&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;properties&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;age_range&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;integer_range&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">&quot;time_frame&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;date_range&quot;</span>, </span><br><span class="line">        <span class="attr">&quot;format&quot;</span>: <span class="string">&quot;yyyy-MM-dd HH:mm:ss||yyyy-MM-dd||epoch_millis&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PUT range_index/_doc/1?refresh</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;age_range&quot;</span> : &#123; </span><br><span class="line">    <span class="attr">&quot;gte&quot;</span> : <span class="number">10</span>,</span><br><span class="line">    <span class="attr">&quot;lte&quot;</span> : <span class="number">20</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;time_frame&quot;</span> : &#123; </span><br><span class="line">    <span class="attr">&quot;gte&quot;</span> : <span class="string">&quot;2015-10-31 12:00:00&quot;</span>, </span><br><span class="line">    <span class="attr">&quot;lte&quot;</span> : <span class="string">&quot;2015-11-01&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>指定范围的时，可以使用 gt、gte、lt、lte。</p>
<h2 id="复杂类型"><a href="#复杂类型" class="headerlink" title="复杂类型"></a>复杂类型</h2><h3 id="数组类型"><a href="#数组类型" class="headerlink" title="数组类型"></a>数组类型</h3><p>​        es中没有专门的数组类型。默认情况下，任何字段都可以有一个或者多个值。需要注意的是，数组中的元素必须是同一种类型。添加数组是，数组中的第一个元素决定了整个数组的类型。</p>
<h3 id="对象类型"><a href="#对象类型" class="headerlink" title="对象类型"></a>对象类型</h3><p>由于 JSON 本身具有层级关系，所以文档包含内部对象。内部对象中，还可以再包含内部对象。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">PUT &#123;&#123;domain&#125;&#125;/index_test/_doc/2</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;date&quot;</span>:<span class="string">&quot;2020-12-02T14:11:11Z&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;info&quot;</span>:&#123;</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>:<span class="string">&quot;TOM&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;age&quot;</span>:<span class="number">12</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="嵌套类型（nested）"><a href="#嵌套类型（nested）" class="headerlink" title="嵌套类型（nested）"></a>嵌套类型（nested）</h3><p>​        nested 是 object 中的一个特例，由于 Lucene 没有内部对象的概念，所以 es 会将对象层次扁平化，将一个对象转为字段名和值构成的简单列表，例如有这么一个object文档：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;group&quot; : &quot;student&quot;,</span><br><span class="line">  &quot;user&quot; : [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;first&quot; : &quot;san&quot;,</span><br><span class="line">      &quot;last&quot; :  &quot;zhang&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;first&quot; : &quot;wu&quot;,</span><br><span class="line">      &quot;last&quot; :  &quot;wang&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>即上面的文档，最终存储形式如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&quot;group&quot;:&quot;student&quot;</span><br><span class="line">&quot;user.first&quot;:[&quot;san&quot;,&quot;wu&quot;],</span><br><span class="line">&quot;user.last&quot;:[&quot;zhang&quot;,&quot;wang&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​        扁平化之后，姓名之间的关系没了。这样会导致能搜索这两个人姓名的组合，例如wang san。怎么解决呢？答案就是 nested 类型，nested 对象类型可以保持数组中每个对象的独立性。nested 类型将数组中的每一组对象作为独立隐藏文档来索引，这样每一个嵌套对象都可以独立被索引。</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &#123;</span><br><span class="line">  	&quot;user.first&quot;:&quot;san&quot;,</span><br><span class="line">  	&quot;user.last&quot;:&quot;zhang&quot;</span><br><span class="line">  &#125;,&#123;</span><br><span class="line">  	&quot;user.first&quot;:&quot;wu&quot;,</span><br><span class="line">  	&quot;user.last&quot;:&quot;wang&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="地理类型"><a href="#地理类型" class="headerlink" title="地理类型"></a>地理类型</h2><h3 id="geo-point"><a href="#geo-point" class="headerlink" title="geo_point"></a>geo_point</h3><p>geo_point 就是一个坐标点，定义方式如下：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">PUT &#123;&#123;domain&#125;&#125;/position</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;mappings&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;properties&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;location&quot;</span>:&#123;</span><br><span class="line">        <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;geo_point&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>创建时指定字段类型，先经度后纬度，存储的时候，支持四种方式：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">PUT &#123;&#123;domain&#125;&#125;/position/_doc/1</span><br><span class="line"># 结构一</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;location&quot;</span>:&#123;</span><br><span class="line">    <span class="attr">&quot;lat&quot;</span>: <span class="number">34.27</span>,</span><br><span class="line">    <span class="attr">&quot;lon&quot;</span>: <span class="number">108.94</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 结构二</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;location&quot;</span>:<span class="string">&quot;34.27,108.94&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 结构三 geo_hash</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;location&quot;</span>:<span class="string">&quot;uzbrgzfxuzup&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 结构四</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;location&quot;</span>:[<span class="number">108.94</span>,<span class="number">34.27</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="geo-shape"><a href="#geo-shape" class="headerlink" title="geo_shape"></a>geo_shape</h3><table>
<thead>
<tr>
<th>GeoJSON</th>
<th>ElasticSearch</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>Point</td>
<td>point</td>
<td>由经纬度描述的点</td>
</tr>
<tr>
<td>LineString</td>
<td>linestring</td>
<td>任意的线条，由两个以上的点组成</td>
</tr>
<tr>
<td>Polygon</td>
<td>polygon</td>
<td>封闭多边形</td>
</tr>
<tr>
<td>MultiPoint</td>
<td>multipoint</td>
<td>一组不连续的点</td>
</tr>
<tr>
<td>Multil_ineString</td>
<td>mulilinestring</td>
<td>多条不关联的线</td>
</tr>
<tr>
<td>MultiPolygon</td>
<td>multipolygon</td>
<td>多个多边形</td>
</tr>
<tr>
<td>GeometryCollection</td>
<td>geometrycollection</td>
<td>几何对象的集合</td>
</tr>
<tr>
<td></td>
<td>circle</td>
<td>圆形</td>
</tr>
<tr>
<td></td>
<td>envelope</td>
<td>通过左，上角和右下角两个点确定的矩形</td>
</tr>
</tbody></table>
<p>这个使用和很简单，把上面geo_point添加映射方式中的type改为geo_shape即可。添加的例子如下：</p>
<p>添加文档时需要指定具体的类型：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">PUT position/_doc/1</span><br><span class="line"># point类型</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;location&quot;</span>:&#123;</span><br><span class="line">    <span class="attr">&quot;type&quot;</span>:<span class="string">&quot;point&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;coordinates&quot;</span>: [<span class="number">108.94</span>,<span class="number">34.27</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"># linestring类型</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;location&quot;</span>:&#123;</span><br><span class="line">    <span class="attr">&quot;type&quot;</span>:<span class="string">&quot;linestring&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;coordinates&quot;</span>: [[<span class="number">108.94</span>,<span class="number">34.27</span>],[<span class="number">100</span>,<span class="number">33</span>]]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><ul>
<li>查找某一个范围内的地理位置</li>
<li>通过地理位置或者相对中心点的距离来聚合文档</li>
<li>通过距离对文档进行排序</li>
</ul>
<h2 id="特殊类型"><a href="#特殊类型" class="headerlink" title="特殊类型"></a>特殊类型</h2><h3 id="IP"><a href="#IP" class="headerlink" title="IP"></a>IP</h3><p>存储 IP 地址，类型是 ip：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">PUT ip_index</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;mappings&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;properties&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;ip&quot;</span>:&#123;</span><br><span class="line">        <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;ip&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>添加文档：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">PUT ip_index/_doc/1</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;ip&quot;</span>:<span class="string">&quot;192.168.91.1&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>搜索文档：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET ip_index/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;queip_indexry&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;term&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;ip&quot;</span>: <span class="string">&quot;192.168.0.0/16&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="映射参数"><a href="#映射参数" class="headerlink" title="映射参数"></a>映射参数</h1><h2 id="analyzer"><a href="#analyzer" class="headerlink" title="analyzer"></a>analyzer</h2><blockquote>
<p>定义文本字段的分词器</p>
</blockquote>
<p>​        默认对索引和查询都是有效的。假设不用分词器，我们先来看一下索引的结果，创建一个索引并添加一个文档：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">PUT index_test</span><br><span class="line"></span><br><span class="line">PUT index_test/_doc/1</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;title&quot;</span>:<span class="string">&quot;这是一段文本&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后我们查看词条向量可以发现</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET index_test/_termvectors/1?fields=title</span><br><span class="line"># 方式一</span><br><span class="line"># GET index_test/_termvectors/1?fields=title,....</span><br><span class="line"># 方式二</span><br><span class="line"># GET &#123;&#123;domain&#125;&#125;/index_test/_termvectors/1</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;fields&quot;</span>: [<span class="string">&quot;title&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line"># 结果如下</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;_index&quot;</span>:<span class="string">&quot;index_test&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;_type&quot;</span>:<span class="string">&quot;_doc&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;_id&quot;</span>:<span class="string">&quot;1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;_version&quot;</span>:<span class="number">1</span>,</span><br><span class="line">    <span class="attr">&quot;found&quot;</span>:<span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;took&quot;</span>:<span class="number">28</span>,</span><br><span class="line">    <span class="attr">&quot;term_vectors&quot;</span>:&#123;</span><br><span class="line">        <span class="attr">&quot;title&quot;</span>:&#123;</span><br><span class="line">            <span class="attr">&quot;field_statistics&quot;</span>:&#123;</span><br><span class="line">                <span class="attr">&quot;sum_doc_freq&quot;</span>:<span class="number">6</span>,</span><br><span class="line">                <span class="attr">&quot;doc_count&quot;</span>:<span class="number">1</span>,</span><br><span class="line">                <span class="attr">&quot;sum_ttf&quot;</span>:<span class="number">6</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">&quot;terms&quot;</span>:&#123;</span><br><span class="line">                <span class="attr">&quot;一&quot;</span>:&#123;</span><br><span class="line">                    <span class="attr">&quot;term_freq&quot;</span>:<span class="number">1</span>,</span><br><span class="line">                    <span class="attr">&quot;tokens&quot;</span>:[</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="attr">&quot;position&quot;</span>:<span class="number">2</span>,</span><br><span class="line">                            <span class="attr">&quot;start_offset&quot;</span>:<span class="number">2</span>,</span><br><span class="line">                            <span class="attr">&quot;end_offset&quot;</span>:<span class="number">3</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    ]</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">&quot;文&quot;</span>:&#123;</span><br><span class="line">                    <span class="attr">&quot;term_freq&quot;</span>:<span class="number">1</span>,</span><br><span class="line">                    <span class="attr">&quot;tokens&quot;</span>:[</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="attr">&quot;position&quot;</span>:<span class="number">4</span>,</span><br><span class="line">                            <span class="attr">&quot;start_offset&quot;</span>:<span class="number">4</span>,</span><br><span class="line">                            <span class="attr">&quot;end_offset&quot;</span>:<span class="number">5</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    ]</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">&quot;是&quot;</span>:&#123;</span><br><span class="line">                    <span class="attr">&quot;term_freq&quot;</span>:<span class="number">1</span>,</span><br><span class="line">                    <span class="attr">&quot;tokens&quot;</span>:[</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="attr">&quot;position&quot;</span>:<span class="number">1</span>,</span><br><span class="line">                            <span class="attr">&quot;start_offset&quot;</span>:<span class="number">1</span>,</span><br><span class="line">                            <span class="attr">&quot;end_offset&quot;</span>:<span class="number">2</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    ]</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">&quot;本&quot;</span>:&#123;</span><br><span class="line">                    <span class="attr">&quot;term_freq&quot;</span>:<span class="number">1</span>,</span><br><span class="line">                    <span class="attr">&quot;tokens&quot;</span>:[</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="attr">&quot;position&quot;</span>:<span class="number">5</span>,</span><br><span class="line">                            <span class="attr">&quot;start_offset&quot;</span>:<span class="number">5</span>,</span><br><span class="line">                            <span class="attr">&quot;end_offset&quot;</span>:<span class="number">6</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    ]</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">&quot;段&quot;</span>:&#123;</span><br><span class="line">                    <span class="attr">&quot;term_freq&quot;</span>:<span class="number">1</span>,</span><br><span class="line">                    <span class="attr">&quot;tokens&quot;</span>:[</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="attr">&quot;position&quot;</span>:<span class="number">3</span>,</span><br><span class="line">                            <span class="attr">&quot;start_offset&quot;</span>:<span class="number">3</span>,</span><br><span class="line">                            <span class="attr">&quot;end_offset&quot;</span>:<span class="number">4</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    ]</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">&quot;这&quot;</span>:&#123;</span><br><span class="line">                    <span class="attr">&quot;term_freq&quot;</span>:<span class="number">1</span>,</span><br><span class="line">                    <span class="attr">&quot;tokens&quot;</span>:[</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="attr">&quot;position&quot;</span>:<span class="number">0</span>,</span><br><span class="line">                            <span class="attr">&quot;start_offset&quot;</span>:<span class="number">0</span>,</span><br><span class="line">                            <span class="attr">&quot;end_offset&quot;</span>:<span class="number">1</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    ]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​        可以发现默认的中文都是一个字一个字分词的，这种分词没有意义，因为查询只能一个字查询。这是因为我们没有给title设置分词，现在我们设置一下看看结果：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">PUT &#123;&#123;domain&#125;&#125;/index_test</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;mappings&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;properties&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;title&quot;</span>:&#123;</span><br><span class="line">        <span class="attr">&quot;type&quot;</span>:<span class="string">&quot;text&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;analyzer&quot;</span>: <span class="string">&quot;ik_smart&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后我们添加几条数据</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">POST &#123;&#123;domain&#125;&#125;/index_test/_doc/1</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;title&quot;</span>:<span class="string">&quot;美国留给伊拉克的是个烂摊子吗&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">POST &#123;&#123;domain&#125;&#125;/index_test/_doc/2</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;title&quot;</span>:<span class="string">&quot;公安部：各地校车将享最高路权&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">POST &#123;&#123;domain&#125;&#125;/index_test/_doc/3</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;title&quot;</span>:<span class="string">&quot;中韩渔警冲突调查：韩警平均每天扣1艘中国渔船&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​        此时我们分别查看这几条数据的词条向量会发现title已经按照中文分词了，然后我们就可以按照分词结果查询了，例如查询伊拉克：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET &#123;&#123;domain&#125;&#125;/index_test/_search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;query&quot;</span>:&#123;</span><br><span class="line">        <span class="attr">&quot;match&quot;</span>:&#123;</span><br><span class="line">            <span class="attr">&quot;title&quot;</span>:<span class="string">&quot;伊拉克&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 查询结果</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;took&quot;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">&quot;timed_out&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">&quot;_shards&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;total&quot;</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">&quot;successful&quot;</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">&quot;skipped&quot;</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">&quot;failed&quot;</span>: <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;hits&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;total&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;value&quot;</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="attr">&quot;relation&quot;</span>: <span class="string">&quot;eq&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;max_score&quot;</span>: <span class="number">1.0552598</span>,</span><br><span class="line">        <span class="attr">&quot;hits&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">&quot;_index&quot;</span>: <span class="string">&quot;index_test&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;_type&quot;</span>: <span class="string">&quot;_doc&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;_id&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;_score&quot;</span>: <span class="number">1.0552598</span>,</span><br><span class="line">                <span class="attr">&quot;_source&quot;</span>: &#123;</span><br><span class="line">                    <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;美国留给伊拉克的是个烂摊子吗&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="search-analyzer"><a href="#search-analyzer" class="headerlink" title="search_analyzer"></a>search_analyzer</h2><blockquote>
<p> 查询时候的分词器。</p>
</blockquote>
<p>​        默认情况下，es在查询时，会首先查看有没有 search_analyzer，有的话，就会使用 search_analyzer 来进行分词，如果没有，则看有没有 analyzer，如果有，则用 analyzer 来进行分词，否则使用 es 默认的分词器。</p>
<h2 id="normalizer"><a href="#normalizer" class="headerlink" title="normalizer"></a>normalizer</h2><blockquote>
<p> normalizer 参数用于解析前（索引或者查询）的标准化配置。</p>
</blockquote>
<p>​        在 es 中，对于一些我们不想切分的字符串，我们通常会将其设置为 keyword，搜索时候也是使用整个词进行搜索。如果在索引前没有做好数据清洗，导致大小写不一致，例如 mysql 和 MySQL等，此时，我们就可以使用 normalizer 在索引之前以及查询之前进行文档的标准化。首先我们进行一个简单的操作：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"># 1. 新建一个索引，定义name的类型为keyword</span><br><span class="line">PUT index_test2</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;mappings&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;properties&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;name&quot;</span>:&#123;</span><br><span class="line">          <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;keyword&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"># 2. 新建文档并添加两条数据</span><br><span class="line">POST index_test2/_doc/1</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>:<span class="string">&quot;mysql&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">POST index_test2/_doc/2</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>:<span class="string">&quot;MySQL&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"># 3. 搜索 </span><br><span class="line">GET index_test2/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;term&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;mysql&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​        执行上述过程，你会发现mysql不能搜索到MySQL只能搜索到自己，反之亦然，但是很多情况下，我们查询并不需要对大小写这么敏感，所以我们可以用normalizer来进行文档的标准化配置。我们先删除一下index_test2这个索引，然后把上文中的步骤一替换成下面这个请求，其他不变，重新执行。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"># 在 settings 中定义 normalizer，然后在 mappings 中引用。</span><br><span class="line">PUT index_test2</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;settings&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;analysis&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;normalizer&quot;</span>:&#123;</span><br><span class="line">        <span class="attr">&quot;my_normalizer&quot;</span>:&#123;</span><br><span class="line">          <span class="attr">&quot;type&quot;</span>:<span class="string">&quot;custom&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;filter&quot;</span>:[<span class="string">&quot;lowercase&quot;</span>]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, </span><br><span class="line">  <span class="attr">&quot;mappings&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;properties&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;author&quot;</span>:&#123;</span><br><span class="line">        <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;keyword&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;normalizer&quot;</span>:<span class="string">&quot;my_normalizer&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​        此时我们可以发现，使用mysql查询，不仅能查询到mysql也能查询到MySQL了，这是因为无论是索引还是查询，都会es都会将name从大写转为小写。</p>
<h2 id="boost"><a href="#boost" class="headerlink" title="boost"></a>boost</h2><blockquote>
<p>boost 参数可以设置字段的权重。</p>
</blockquote>
<p>​        boost 有两种使用思路，一种就是在定义 mappings 的时候使用，在指定字段类型时使用；另一种就是在查询时使用。</p>
<p><strong>注：</strong>实际开发中建议使用后者，前者有问题：如果不重新索引文档，权重无法修改。</p>
<p><strong>方法一：</strong>mapping 中使用 boost（不推荐）：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">PUT index_test</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;mappings&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;properties&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;content&quot;</span>:&#123;</span><br><span class="line">        <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;text&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;boost&quot;</span>: <span class="number">2</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>方法二：</strong>在查询的时候，指定 boost</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET index_test/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;match&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;content&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;query&quot;</span>: <span class="string">&quot;Elastic&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;boost&quot;</span>: <span class="number">2</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="coerce"><a href="#coerce" class="headerlink" title="coerce"></a>coerce</h2><blockquote>
<p>coerce 用来清除脏数据，默认为 true。</p>
</blockquote>
<p>​        例如一个数字，在 JSON 中，用户可能写成了字符串或者浮点数：{“age”:”12”}或者{“age”:12.2}，这些都不是正确的整型数字格式，但是默认情况下，以下操作没问题，就是 coerce 起作用：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PUT index_test</span><br><span class="line">&#123;</span><br><span class="line">  &quot;mappings&quot;: &#123;</span><br><span class="line">    &quot;properties&quot;: &#123;</span><br><span class="line">      &quot;age&quot;:&#123;</span><br><span class="line">        &quot;type&quot;: &quot;integer&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">POST index_test&#x2F;_doc</span><br><span class="line">&#123;</span><br><span class="line">  &quot;age&quot;:&quot;12.2&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果需要修改 coerce ，方式如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PUT index_test</span><br><span class="line">&#123;</span><br><span class="line">  &quot;mappings&quot;: &#123;</span><br><span class="line">    &quot;properties&quot;: &#123;</span><br><span class="line">      &quot;age&quot;:&#123;</span><br><span class="line">        &quot;type&quot;: &quot;integer&quot;,</span><br><span class="line">        &quot;coerce&quot;: false</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">POST index_test&#x2F;_doc</span><br><span class="line">&#123;</span><br><span class="line">  &quot;age&quot;:12</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当 coerce 修改为 false 之后，数字就只能是数字了，不可以是字符串，该字段传入字符串会报错。</p>
<h2 id="copy-to"><a href="#copy-to" class="headerlink" title="copy_to"></a>copy_to</h2><blockquote>
<p>copy_to属性，可以将多个字段的值，复制到同一个字段中。</p>
</blockquote>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"># 1.新建一个索引，并配置copy_to属性</span><br><span class="line">PUT index_test</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;mappings&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;properties&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;value1&quot;</span>:&#123;</span><br><span class="line">        <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;text&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;copy_to&quot;</span>: <span class="string">&quot;value&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">&quot;value2&quot;</span>:&#123;</span><br><span class="line">        <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;text&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;copy_to&quot;</span>: <span class="string">&quot;value&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">&quot;value&quot;</span>:&#123;</span><br><span class="line">        <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;text&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"># 2.添加一个文档</span><br><span class="line">POST index_test/_doc/1</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;value1&quot;</span>:<span class="string">&quot;火影&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;value2&quot;</span>:<span class="string">&quot;忍者&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 3.此时可以使用value进行搜索</span><br><span class="line">GET index_test/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;term&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;value&quot;</span>: <span class="string">&quot;火&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="doc-values-和-fielddata"><a href="#doc-values-和-fielddata" class="headerlink" title="doc_values 和 fielddata"></a>doc_values 和 fielddata</h2><p>​        es 中的搜索主要是用到倒排索引，doc_values 参数是为了加快排序、聚合操作而生的。当建立倒排索引的时候，会额外增加列式存储映射。</p>
<p>​        如果确定某个字段不需要排序或者不需要聚合，那么可以关闭 doc_values。大部分的字段在索引时都会生成 doc_values，除了 text。text 字段在查询时会生成一个 fielddata 的数据结构，fieldata 在字段首次被聚合、排序的时候生成。</p>
<p>​        <strong>doc_values 默认开启，fielddata 默认关闭。</strong></p>
<table>
<thead>
<tr>
<th>doc_values</th>
<th>felddata</th>
</tr>
</thead>
<tbody><tr>
<td>索引时创建</td>
<td>使用时动态创建</td>
</tr>
<tr>
<td>磁盘</td>
<td>内存</td>
</tr>
<tr>
<td>不占用内存</td>
<td>不占用磁盘</td>
</tr>
<tr>
<td>索引速度稍微低一点</td>
<td>文档很多时，动态创建慢，占内存</td>
</tr>
</tbody></table>
<p>doc_values 演示：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">PUT users</span><br><span class="line"></span><br><span class="line">PUT users/_doc/1</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;age&quot;</span>:<span class="number">100</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PUT users/_doc/2</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;age&quot;</span>:<span class="number">99</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PUT users/_doc/3</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;age&quot;</span>:<span class="number">98</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PUT users/_doc/4</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;age&quot;</span>:<span class="number">101</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET users/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;match_all&quot;</span>: &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;sort&quot;</span>:[</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;age&quot;</span>:&#123;</span><br><span class="line">        <span class="attr">&quot;order&quot;</span>: <span class="string">&quot;desc&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>由于 doc_values 默认时开启的，所以可以直接使用该字段排序，如果想关闭 doc_values ，如下：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">PUT users</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;mappings&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;properties&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;age&quot;</span>:&#123;</span><br><span class="line">        <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;integer&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;doc_values&quot;</span>: <span class="literal">false</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="dynamic"><a href="#dynamic" class="headerlink" title="dynamic"></a>dynamic</h2><p>​        这个这篇文章开头已经介绍过，直接到上面看吧。</p>
<h2 id="enabled"><a href="#enabled" class="headerlink" title="enabled"></a>enabled</h2><p>​        es 默认会索引所有的字段，但是有的字段可能只需要存储，不需要索引，例如头像地址、部分链接等。此时可以通过 enabled 字段来控制：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">PUT index_test</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;mappings&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;properties&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;avatar&quot;</span>:&#123;</span><br><span class="line">        <span class="attr">&quot;enabled&quot;</span>: <span class="literal">false</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PUT index_test/_doc/1</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;avatar&quot;</span>:<span class="string">&quot;http://www.baidu.com/12.jpg&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET index_test/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;term&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;avatar&quot;</span>: <span class="string">&quot;http://www.baidu.com/12.jpg&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>从上面的结果可以发现，设置了 enabled 为 false 之后，就不能再通过该字段进行搜索了。</p>
<h2 id="format"><a href="#format" class="headerlink" title="format"></a>format</h2><blockquote>
<p>format用来进行日期格式设置</p>
</blockquote>
<p>format 可以规范日期格式，而且一次可以定义多个 format。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PUT users</span><br><span class="line">&#123;</span><br><span class="line">  &quot;mappings&quot;: &#123;</span><br><span class="line">    &quot;properties&quot;: &#123;</span><br><span class="line">      &quot;birthday&quot;:&#123;</span><br><span class="line">        &quot;type&quot;: &quot;date&quot;,</span><br><span class="line">        &quot;format&quot;: &quot;yyyy-MM-dd||yyyy-MM-dd HH:mm:ss&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PUT users&#x2F;_doc&#x2F;1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;birthday&quot;:&quot;2020-12-02&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PUT users&#x2F;_doc&#x2F;2</span><br><span class="line">&#123;</span><br><span class="line">  &quot;birthday&quot;:&quot;2020-12-02 15:01:12&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>多个日期格式之间，使用 || 符号连接，注意没有空格。</li>
<li>如果用户没有指定日期的 format，默认的日期格式是 <code>strict_date_optional_time||epoch_mills</code></li>
</ul>
<p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-date-format.html">所有的日期格式可以在这边查看</a></p>
<h2 id="ignore-above"><a href="#ignore-above" class="headerlink" title="ignore_above"></a>ignore_above</h2><blockquote>
<p>igbore_above 用于指定分词和索引的字符串最大长度，超过最大长度的话，该字段将不会被索引。</p>
</blockquote>
<p><strong>注：</strong>只适用于 keyword 类型</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">PUT index_test</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;mappings&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;properties&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;title&quot;</span>:&#123;</span><br><span class="line">        <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;keyword&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;ignore_above&quot;</span>: <span class="number">10</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PUT index_test/_doc/1</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;title&quot;</span>:<span class="string">&quot;这是一本书&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PUT index_test/_doc/2</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;title&quot;</span>:<span class="string">&quot;这是一本书，这是一本书，这是一本书&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET index_test/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;term&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;这是一本书，这是一本书，这是一本书&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​        上面的搜索结果不会有对应的数据，因为_id为2的数据长度超过了设定的ignore_above值，所以不被索引了。</p>
<h2 id="ignore-malformed"><a href="#ignore-malformed" class="headerlink" title="ignore_malformed"></a>ignore_malformed</h2><blockquote>
<p>ignore_malformed 可以忽略不规则的数据，该参数默认为 false。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PUT users</span><br><span class="line">&#123;</span><br><span class="line">  &quot;mappings&quot;: &#123;</span><br><span class="line">    &quot;properties&quot;: &#123;</span><br><span class="line">      &quot;birthday&quot;:&#123;</span><br><span class="line">        &quot;type&quot;: &quot;date&quot;,</span><br><span class="line">        &quot;format&quot;: &quot;yyyy-MM-dd||yyyy-MM-dd HH:mm:ss&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;age&quot;:&#123;</span><br><span class="line">        &quot;type&quot;: &quot;integer&quot;,</span><br><span class="line">        &quot;ignore_malformed&quot;: true</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"># 可以添加</span><br><span class="line">PUT users&#x2F;_doc&#x2F;1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;birthday&quot;:&quot;2020-11-11&quot;,</span><br><span class="line">  &quot;age&quot;:99</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 可以添加，因为设置了ignore_malformed</span><br><span class="line">PUT users&#x2F;_doc&#x2F;2</span><br><span class="line">&#123;</span><br><span class="line">  &quot;birthday&quot;:&quot;2020-11-11 11:11:11&quot;,</span><br><span class="line">  &quot;age&quot;:&quot;abc&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 不能添加，因为没有设置ignore_malformed且时间格式不正确</span><br><span class="line">PUT users&#x2F;_doc&#x2F;2</span><br><span class="line">&#123;</span><br><span class="line">  &quot;birthday&quot;:&quot;2020-11-11 11:11:11aaa&quot;,</span><br><span class="line">  &quot;age&quot;:&quot;abc&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="include-in-all"><a href="#include-in-all" class="headerlink" title="include_in_all"></a>include_in_all</h2><p>这个是针对 <code>_all</code> 字段的，<strong>es7 中，已被废弃</strong>。</p>
<h2 id="index"><a href="#index" class="headerlink" title="index"></a>index</h2><blockquote>
<p>index 属性指定一个字段是否被索引，该属性为 true 表示字段被索引，false 表示字段不被索引。</p>
</blockquote>
<p>如果 index 为 false，则不能通过对应的字段搜索，设置方法如下：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">PUT users</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;mappings&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;properties&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;age&quot;</span>:&#123;</span><br><span class="line">        <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;integer&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;index&quot;</span>: <span class="literal">false</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>:&#123;</span><br><span class="line">        <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;text&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PUT users/_doc/1</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;age&quot;</span>:<span class="number">99</span>,</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>:<span class="string">&quot;张三&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET users/_search</span><br><span class="line"># 不能搜索，有报错提示</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;term&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;age&quot;</span>: <span class="number">99</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"># 能搜索</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;term&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;张&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="index-options"><a href="#index-options" class="headerlink" title="index_options"></a>index_options</h2><p>​        index_options 控制索引时哪些信息被存储到倒排索引中（用在 text 字段中），有四种取值：</p>
<table>
<thead>
<tr>
<th>index_options</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>docs</td>
<td>默认,只存储文档编号</td>
</tr>
<tr>
<td>freqs</td>
<td>在docs基础上，存储词项频率</td>
</tr>
<tr>
<td>positions</td>
<td>在freqs基础上，存储词项偏移位置</td>
</tr>
<tr>
<td>offsets</td>
<td>在positions基础上，存储词项开始和结束的字符位置</td>
</tr>
</tbody></table>
<h2 id="norms"><a href="#norms" class="headerlink" title="norms"></a>norms</h2><blockquote>
<p>norms 对字段评分有用。</p>
</blockquote>
<p>text 默认开启 norms，如果不是特别需要，不要开启 norms。</p>
<h2 id="null-value"><a href="#null-value" class="headerlink" title="null_value"></a>null_value</h2><p>​        在 es 中，值为 null 的字段不索引也不可以被搜索，null_value 可以让值为 null 的字段显式的可索引、可搜索：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">PUT users</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;mappings&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;properties&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>:&#123;</span><br><span class="line">        <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;keyword&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;null_value&quot;</span>: <span class="string">&quot;is_null&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PUT users/_doc/1</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>:<span class="literal">null</span>,</span><br><span class="line">  <span class="attr">&quot;age&quot;</span>:<span class="number">99</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET users/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;term&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;is_null&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="position-increment-gap"><a href="#position-increment-gap" class="headerlink" title="position_increment_gap"></a>position_increment_gap</h2><p>​        被解析的 text 字段会将 term 的位置考虑进去，目的是为了支持近似查询和短语查询，当我们去索引一个含有多个值的 text 字段时，会在各个值之间添加一个假想的空间，将值隔开，这样就可以有效避免一些无意义的短语匹配，间隙大小通过 position_increment_gap 来控制，默认是 100。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">PUT users</span><br><span class="line"></span><br><span class="line">PUT users/_doc/1</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>:[<span class="string">&quot;zhang san&quot;</span>,<span class="string">&quot;li si&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET users/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;match_phrase&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;query&quot;</span>: <span class="string">&quot;san li&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>san li</code> 搜索不到，因为两个短语之间有一个假想的空隙，为 100。</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET users/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;match_phrase&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;query&quot;</span>: <span class="string">&quot;san li&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;slop&quot;</span>: <span class="number">100</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以通过 slop 指定空隙大小。</p>
<p>也可以在定义索引的时候，指定空隙：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">PUT users</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;mappings&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;properties&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>:&#123;</span><br><span class="line">        <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;text&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;position_increment_gap&quot;</span>: <span class="number">0</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PUT users/_doc/1</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>:[<span class="string">&quot;zhang san&quot;</span>,<span class="string">&quot;li si&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET users/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;match_phrase&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;query&quot;</span>: <span class="string">&quot;san li&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="properties"><a href="#properties" class="headerlink" title="properties"></a>properties</h2><h2 id="similarity"><a href="#similarity" class="headerlink" title="similarity"></a>similarity</h2><p>​        similarity 指定文档的评分模型，默认有三种：</p>
<table>
<thead>
<tr>
<th>similarity</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>BM25</td>
<td>es和lucene默认的评分模型</td>
</tr>
<tr>
<td>classic</td>
<td>TF/IDF评分</td>
</tr>
<tr>
<td>boolean</td>
<td>boolean模型评分</td>
</tr>
</tbody></table>
<h3 id="store"><a href="#store" class="headerlink" title="store"></a>store</h3><p>​        默认情况下，字段会被索引，也可以搜索，但是不会存储，虽然不会被存储的，但是 <code>_source</code> 中有一个字段的备份。如果想将字段存储下来，可以通过配置 store 来实现。</p>
<h3 id="10-22-term-vectors"><a href="#10-22-term-vectors" class="headerlink" title="10.22 term_vectors"></a>10.22 term_vectors</h3><p>term_vectors 是通过分词器产生的信息，包括：</p>
<ul>
<li>一组 terms</li>
<li>每个 term 的位置</li>
<li>term 的首字符/尾字符与原始字符串原点的偏移量</li>
</ul>
<p>term_vectors 取值：</p>
<table>
<thead>
<tr>
<th>取值</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>no</td>
<td>不存储信息，默认即此</td>
</tr>
<tr>
<td>yes</td>
<td>term被存储</td>
</tr>
<tr>
<td>with_positions</td>
<td>在yes的基础上增加位置信息</td>
</tr>
<tr>
<td>with_offset</td>
<td>在yes的基础上增加偏移信息</td>
</tr>
<tr>
<td>with_positions_offsets</td>
<td>term、位置、偏移量都存储</td>
</tr>
</tbody></table>
<h3 id="fields"><a href="#fields" class="headerlink" title="fields"></a>fields</h3><p>fields 参数可以让同一字段有多种不同的索引方式。例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PUT index_test</span><br><span class="line">&#123;</span><br><span class="line">  &quot;mappings&quot;: &#123;</span><br><span class="line">    &quot;properties&quot;: &#123;</span><br><span class="line">      &quot;title&quot;:&#123;</span><br><span class="line">        &quot;type&quot;: &quot;text&quot;,</span><br><span class="line">        &quot;fields&quot;: &#123;</span><br><span class="line">          &quot;raw&quot;:&#123;</span><br><span class="line">            &quot;type&quot;:&quot;keyword&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PUT index_test&#x2F;_doc&#x2F;1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;title&quot;:&quot;javaboy&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET index_test&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;term&quot;: &#123;</span><br><span class="line">      &quot;title.raw&quot;: &quot;mysql&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="映射模板"><a href="#映射模板" class="headerlink" title="映射模板"></a>映射模板</h1><p>​        es 中有动态映射，但是有的时候默认的动态映射规则并不能满足我们的需求，这个时候可以通过映射模版来解决。举一个简单例子，将所有的数字默认映射为 integer：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PUT index_test</span><br><span class="line">&#123;</span><br><span class="line">  &quot;mappings&quot;: &#123;</span><br><span class="line">    &quot;dynamic_templates&quot;:[</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;long2integer&quot;:&#123;</span><br><span class="line">          &quot;match_mapping_type&quot;:&quot;long&quot;,</span><br><span class="line">          &quot;mapping&quot;:&#123;</span><br><span class="line">            &quot;type&quot;:&quot;integer&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PUT index_test&#x2F;_doc&#x2F;1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;count&quot;:12</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​        存储完成后，默认的会被识别为 long 类型的数据，现在就被识别为 integer 了，再来一个复杂点的：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">PUT index_test</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;mappings&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;dynamic_templates&quot;</span>:[</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;string2long&quot;</span>:&#123;</span><br><span class="line">          <span class="attr">&quot;match_mapping_type&quot;</span>:<span class="string">&quot;string&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;match&quot;</span>:<span class="string">&quot;num_*&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;unmatch&quot;</span>:<span class="string">&quot;*_text&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;mapping&quot;</span>:&#123;</span><br><span class="line">            <span class="attr">&quot;type&quot;</span>:<span class="string">&quot;integer&quot;</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PUT index_test/_doc/1</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;num_count&quot;</span>:<span class="string">&quot;12&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;num_text&quot;</span>:<span class="string">&quot;mysql&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PUT index_test/_doc/2</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;num_count&quot;</span>:<span class="string">&quot;12&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;num_text&quot;</span>:<span class="string">&quot;mysql&quot;</span>,</span><br><span class="line">  &quot;num_aaa&quot;:999 # 这个会被识别为long,应为他不是字符串类型的</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>参考：<a href="https://www.bilibili.com/video/BV1ft4y1e7tq%E5%AF%B9%E5%BA%94%E7%9A%84%E7%AC%94%E8%AE%B0%E3%80%82">https://www.bilibili.com/video/BV1ft4y1e7tq对应的笔记。</a></p>
]]></content>
      <categories>
        <category>ElasticSearch</category>
      </categories>
      <tags>
        <tag>ElasticSearch</tag>
      </tags>
  </entry>
  <entry>
    <title>ElasticSearch查询进阶</title>
    <url>/posts/df344a34.html</url>
    <content><![CDATA[<p>注：本内容参考的是江南一点雨的这个公众号的文章及视频，需要数据源可以直接在他的微信公众号后台回复 <strong>bookdata.json</strong> 下载脚本，数据准备参考上一篇文章，文末有他视频和文章的链接。</p>
<h1 id="复合查询"><a href="#复合查询" class="headerlink" title="复合查询"></a>复合查询</h1><h3 id="constant-score-query"><a href="#constant-score-query" class="headerlink" title="constant_score query"></a>constant_score query</h3><p>​        当我们不关心检索词项的频率（TF）对搜索结果排序的影响时，可以使用 constant_score 将查询语句或者过滤语句包裹起来。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET books/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;constant_score&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;filter&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;term&quot;</span>: &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;java&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">&quot;boost&quot;</span>: <span class="number">1.5</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>注：</strong>设置了boost后，查询结果中的_score都会变为和他一样的值。</p>
<h3 id="bool-query"><a href="#bool-query" class="headerlink" title="bool query"></a>bool query</h3><blockquote>
<p> bool query 可以将任意多个简单查询组装在一起，有四个关键字可供选择，四个关键字所描述的条件可以有一个或者多个。</p>
</blockquote>
<ul>
<li><strong>must</strong>：文档必须匹配 must 选项下的查询条件。</li>
<li><strong>should</strong>：文档可以匹配 should 下的查询条件，也可以不匹配。</li>
<li><strong>must_not</strong>：文档必须不满足 must_not 选项下的查询条件。</li>
<li><strong>filter</strong>：类似于 must，但是 filter 不评分，只是过滤数据。</li>
</ul>
<p>​        例如查询 name 属性中必须包含 java，同时书价不在 [0,35] 区间内，info 属性可以包含 程序设计 也可以不包含程序设计：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET books&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;bool&quot;: &#123;</span><br><span class="line">      &quot;must&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;term&quot;: &#123;</span><br><span class="line">            &quot;name&quot;: &#123;</span><br><span class="line">              &quot;value&quot;: &quot;java&quot;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      &quot;must_not&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;range&quot;: &#123;</span><br><span class="line">            &quot;price&quot;: &#123;</span><br><span class="line">              &quot;gte&quot;: 0,</span><br><span class="line">              &quot;lte&quot;: 35</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      &quot;should&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;match&quot;: &#123;</span><br><span class="line">            &quot;info&quot;: &quot;程序设计&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​        这里还涉及到一个关键字，<code>minmum_should_match</code> 参数。<code>minmum_should_match</code> 参数在 es 官网上称作最小匹配度。在之前学习的 <code>multi_match</code> 或者这里的 should 查询中，都可以设置 <code>minmum_should_match</code> 参数。</p>
<p>假设我们要做一次查询，查询 name 中包含 语言程序设计 关键字的文档：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET books/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;match&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;语言程序设计&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​        在这个查询过程中，首先会进行分词，分词结果为：语言、程序、设计、程序设计这四个。分词后的 term 会构造成一个 should 的 bool query，每一个 term 都会变成一个 term query 的子句。换句话说，上面的查询和下面的查询等价：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET books/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;bool&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;should&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;term&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;name&quot;</span>: &#123;</span><br><span class="line">              <span class="attr">&quot;value&quot;</span>: <span class="string">&quot;语言&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;term&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;name&quot;</span>: &#123;</span><br><span class="line">              <span class="attr">&quot;value&quot;</span>: <span class="string">&quot;程序设计&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;term&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;name&quot;</span>: &#123;</span><br><span class="line">              <span class="attr">&quot;value&quot;</span>: <span class="string">&quot;程序&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;term&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;name&quot;</span>: &#123;</span><br><span class="line">              <span class="attr">&quot;value&quot;</span>: <span class="string">&quot;设计&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​        在这两个查询语句中，都是文档只需要包含词项中的任意一项即可，文档就回被返回，在 match 查询中，可以通过 operator 参数设置文档必须匹配所有词项。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET books/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;match&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;query&quot;</span>: <span class="string">&quot;语言程序设计&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;operator&quot;</span>: <span class="string">&quot;and&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​        如果想匹配一部分词项，就涉及到一个参数，就是 <code>minmum_should_match</code>，即最小匹配度。即至少匹配多少个词。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET books/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;bool&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;should&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;term&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;name&quot;</span>: &#123;</span><br><span class="line">              <span class="attr">&quot;value&quot;</span>: <span class="string">&quot;语言&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;term&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;name&quot;</span>: &#123;</span><br><span class="line">              <span class="attr">&quot;value&quot;</span>: <span class="string">&quot;程序设计&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;term&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;name&quot;</span>: &#123;</span><br><span class="line">              <span class="attr">&quot;value&quot;</span>: <span class="string">&quot;程序&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;term&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;name&quot;</span>: &#123;</span><br><span class="line">              <span class="attr">&quot;value&quot;</span>: <span class="string">&quot;设计&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">&quot;minimum_should_match&quot;</span>: <span class="string">&quot;50%&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;from&quot;</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">&quot;size&quot;</span>: <span class="number">70</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>**50% 表示词项个数的 50%**，如下两个查询等价（参数 4 是因为查询关键字分词后有 4 项）：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET books/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;match&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;query&quot;</span>: <span class="string">&quot;语言程序设计&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;minimum_should_match&quot;</span>: <span class="number">4</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">GET books/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;match&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;query&quot;</span>: <span class="string">&quot;语言程序设计&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;operator&quot;</span>: <span class="string">&quot;and&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="dis-max-query"><a href="#dis-max-query" class="headerlink" title="dis_max query"></a>dis_max query</h3><p>假设现在有两本书：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">PUT blog</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;mappings&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;properties&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;title&quot;</span>:&#123;</span><br><span class="line">        <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;text&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;analyzer&quot;</span>: <span class="string">&quot;ik_max_word&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">&quot;content&quot;</span>:&#123;</span><br><span class="line">        <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;text&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;analyzer&quot;</span>: <span class="string">&quot;ik_max_word&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">POST blog/_doc</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;title&quot;</span>:<span class="string">&quot;如何通过Java代码调用ElasticSearch&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;content&quot;</span>:<span class="string">&quot;松哥力荐，这是一篇很好的解决方案&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">POST blog/_doc</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;title&quot;</span>:<span class="string">&quot;初识 MongoDB&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;content&quot;</span>:<span class="string">&quot;简单介绍一下 MongoDB，以及如何通过 Java 调用 MongoDB，MongoDB 是一个不错 NoSQL 解决方案&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>现在假设搜索 <strong>Java解决方案</strong> 关键字，但是不确定关键字是在 title 还是在 content，所以两者都搜索：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET blog/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;bool&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;should&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;match&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;java解决方案&quot;</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;match&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;content&quot;</span>: <span class="string">&quot;java解决方案&quot;</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>查询结果如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/image-20210224154437001.png" alt="image-20210224154437001"></p>
<p>​        肉眼观察，感觉第二个和查询关键字相似度更高，但是实际查询结果并非这样。要理解这个原因，我们需要来看下 should query 中的评分策略：</p>
<ol>
<li>首先会执行 should 中的两个查询</li>
<li>对两个查询结果的评分求和</li>
<li>对求和结果乘以匹配语句总数</li>
<li>在对第三步的结果除以所有语句总数</li>
</ol>
<p>反映到具体的查询中：</p>
<p><strong>前者</strong></p>
<ol>
<li>title 中 包含 java，假设评分是 1.1</li>
<li>content 中包含解决方案，假设评分是 1.2</li>
<li>有得分的 query 数量，这里是 2</li>
<li>总的 query 数量也是 2，最终结果：<code>（1.1+1.2）*2/2=2.3</code></li>
</ol>
<p><strong>后者</strong></p>
<ol>
<li>title 中 不包含查询关键字，没有得分</li>
<li>content 中包含解决方案和 java，假设评分是 2</li>
<li>有得分的 query 数量，这里是 1</li>
<li>总的 query 数量也是 2，最终结果：<code>2*1/2=1</code></li>
</ol>
<p>​        在这种查询中，title 和 content 相当于是相互竞争的关系，所以我们需要找到一个最佳匹配字段。为了解决这一问题，就需要用到 dis_max query（disjunction max query，分离最大化查询）：匹配的文档依然返回，但是只将最佳匹配的评分作为查询的评分。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET blog/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;dis_max&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;queries&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;match&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;java解决方案&quot;</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;match&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;content&quot;</span>: <span class="string">&quot;java解决方案&quot;</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>查询结果为：</p>
<img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/image-20210224155147615.png" alt="image-20210224155147615" style="zoom: 67%;" />    

<p>​        在 dis_max query 中，还有一个参数 <code>tie_breaker</code>（取值在0～1），在 dis_max query 中，是完全不考虑其他 query 的分数，只是将最佳匹配的字段的评分返回。但是，有的时候，我们又不得不考虑一下其他 query 的分数，此时，可以通过 <code>tie_breaker</code> 来优化 dis_max query。<code>tie_breaker</code> 会将其他 query 的分数，乘以 <code>tie_breaker</code>，然后和分数最高的 query 进行一个综合计算。</p>
<h3 id="function-score-query"><a href="#function-score-query" class="headerlink" title="function_score query"></a>function_score query</h3><p>​        场景：例如想要搜索附近的餐厅，搜索的关键字是餐厅名字，但是我希望能够将评分较高的餐厅优先展示出来。但是默认的评分策略是没有办法考虑到餐厅评分的，其只是考虑相关性，这个时候可以通过 function_score query 来实现。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">PUT book</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;mappings&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;properties&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>:&#123;</span><br><span class="line">        <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;text&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;analyzer&quot;</span>: <span class="string">&quot;ik_max_word&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">&quot;votes&quot;</span>:&#123;</span><br><span class="line">        <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;integer&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PUT book/_doc/1</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;title&quot;</span>:<span class="string">&quot;Java并发编程&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;votes&quot;</span>:<span class="number">100</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PUT book/_doc/2</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;title&quot;</span>:<span class="string">&quot;Java多线程详解，Java基础&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;votes&quot;</span>:<span class="number">10</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET book/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;match&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;java&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>查询结果如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/image-20210224160145932.png" alt="image-20210224160145932"></p>
<p>​        默认情况下，id 为 2 的记录得分较高，因为他的 title 中包含两个 java。如果我们在查询中，希望能够充分考虑 votes 字段，将 votes 较高的文档优先展示，就可以通过 function_score 来实现。</p>
<p>具体的思路，就是在旧的得分基础上，根据 votes 的数值进行综合运算，重新得出一个新的评分。具体有几种不同的计算方式：</p>
<ul>
<li>weight</li>
<li>random_score</li>
<li><strong>script_score</strong></li>
<li><strong>field_value_factor</strong></li>
</ul>
<h4 id="weight"><a href="#weight" class="headerlink" title="weight"></a><strong>weight</strong></h4><p>​        weight 可以对评分设置权重，就是在旧的评分基础上乘以 weight，他其实无法解决我们上面所说的问题。具体用法如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET blog&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;function_score&quot;: &#123;</span><br><span class="line">      &quot;query&quot;: &#123;</span><br><span class="line">        &quot;match&quot;: &#123;&quot;title&quot;: &quot;java&quot;&#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;functions&quot;: [&#123;&quot;weight&quot;: 10&#125;]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行一下会发现从查询结果可以看到，此时评分会在之前的评分基础上<code>*</code>10</p>
<h4 id="random-score"><a href="#random-score" class="headerlink" title="random_score"></a>random_score</h4><p>​        <code>random_score</code> 会根据 uid 字段进行 hash 运算，生成分数，使用 <code>random_score</code> 时可以配置一个种子，如果不配置，默认使用当前时间。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET blog/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;function_score&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;match&quot;</span>: &#123;<span class="attr">&quot;title&quot;</span>: <span class="string">&quot;java&quot;</span>&#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">&quot;functions&quot;</span>: [</span><br><span class="line">        &#123;<span class="attr">&quot;random_score&quot;</span>: &#123;&#125;&#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="script-score-重要"><a href="#script-score-重要" class="headerlink" title="script_score(重要)"></a><strong>script_score(重要)</strong></h4><p>自定义评分脚本。假设每个文档的最终得分是旧的分数加上votes。查询方式如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET blog&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;function_score&quot;: &#123;</span><br><span class="line">      &quot;query&quot;: &#123;</span><br><span class="line">        &quot;match&quot;: &#123;&quot;title&quot;: &quot;java&quot;&#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;functions&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;script_score&quot;: &#123;</span><br><span class="line">            &quot;script&quot;: &#123;</span><br><span class="line">              &quot;lang&quot;: &quot;painless&quot;,</span><br><span class="line">              &quot;source&quot;: &quot;_score + doc[&#39;votes&#39;].value&quot;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>现在，最终得分是 <code>(oldScore+votes)*oldScore</code>，如果不想乘以 oldScore，查询方式如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET blog&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;function_score&quot;: &#123;</span><br><span class="line">      &quot;query&quot;: &#123;</span><br><span class="line">        &quot;match&quot;: &#123;&quot;title&quot;: &quot;java&quot;&#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;functions&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;script_score&quot;: &#123;</span><br><span class="line">            &quot;script&quot;: &#123;</span><br><span class="line">              &quot;lang&quot;: &quot;painless&quot;,</span><br><span class="line">              &quot;source&quot;: &quot;_score + doc[&#39;votes&#39;].value&quot;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      &quot;boost_mode&quot;: &quot;replace&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过 <code>boost_mode</code> 参数，可以设置最终的计算方式。该参数还有其他取值：</p>
<ul>
<li>multiply：分数相乘</li>
<li>sum：分数相加</li>
<li>avg：求平均数</li>
<li>max：最大分</li>
<li>min：最小分</li>
<li>replace：不进行二次计算</li>
</ul>
<h4 id="field-value-factor-重要"><a href="#field-value-factor-重要" class="headerlink" title="field_value_factor(重要)"></a><strong>field_value_factor(重要)</strong></h4><p>​        这个的功能类似于 <code>script_score</code>，但是不用自己写脚本。假设每个文档的最终得分是旧的分数乘以votes。查询方式如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET blog&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;function_score&quot;: &#123;</span><br><span class="line">      &quot;query&quot;: &#123;</span><br><span class="line">        &quot;match&quot;: &#123;&quot;title&quot;: &quot;java&quot;&#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;functions&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;field_value_factor&quot;: &#123;</span><br><span class="line">            &quot;field&quot;: &quot;votes&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>默认的得分就是<code>oldScore*votes</code>，还可以利用 es 内置的函数进行一些更复杂的运算：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET blog&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;function_score&quot;: &#123;</span><br><span class="line">      &quot;query&quot;: &#123;</span><br><span class="line">				&quot;match&quot;: &#123;&quot;title&quot;: &quot;java&quot;&#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;functions&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;field_value_factor&quot;: &#123;</span><br><span class="line">            &quot;field&quot;: &quot;votes&quot;,</span><br><span class="line">            &quot;modifier&quot;: &quot;sqrt&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      &quot;boost_mode&quot;: &quot;replace&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此时，最终的得分是（sqrt(votes)）。modifier 中可以设置内置函数，其他的内置函数还有：</p>
<table>
<thead>
<tr>
<th>参数名</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>none</td>
<td>默认的，不进行任何计算</td>
</tr>
<tr>
<td>log</td>
<td>对字段值取对数</td>
</tr>
<tr>
<td>log1p</td>
<td>字段值加1然后取对数</td>
</tr>
<tr>
<td>log2p</td>
<td>字段值加2然后取对数</td>
</tr>
<tr>
<td>In</td>
<td>取字段值的自然对数</td>
</tr>
<tr>
<td>In1p</td>
<td>字段值加1然后取自然对数</td>
</tr>
<tr>
<td>In2p</td>
<td>字段值加2然后取自然对数</td>
</tr>
<tr>
<td>sqrt</td>
<td>字段值求平方根</td>
</tr>
<tr>
<td>square</td>
<td>字段值的平方</td>
</tr>
<tr>
<td>reciprocal</td>
<td>倒数</td>
</tr>
</tbody></table>
<p>另外还有个参数 factor ，影响因子。字段值先乘以影响因子，然后再进行计算。以 sqrt 为例，计算方式为 <code>sqrt(factor*votes)</code>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET blog&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;function_score&quot;: &#123;</span><br><span class="line">      &quot;query&quot;: &#123;</span><br><span class="line">				&quot;match&quot;: &#123;&quot;title&quot;: &quot;java&quot;&#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;functions&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;field_value_factor&quot;: &#123;</span><br><span class="line">            &quot;field&quot;: &quot;votes&quot;,</span><br><span class="line">            &quot;modifier&quot;: &quot;sqrt&quot;,</span><br><span class="line">            &quot;factor&quot;: 10</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      &quot;boost_mode&quot;: &quot;replace&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>还有一个参数 <code>max_boost</code>，控制计算结果的范围：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET blog&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;function_score&quot;: &#123;</span><br><span class="line">      &quot;query&quot;: &#123;</span><br><span class="line">				&quot;match&quot;: &#123;&quot;title&quot;: &quot;java&quot;&#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;functions&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;field_value_factor&quot;: &#123;</span><br><span class="line">            &quot;field&quot;: &quot;votes&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      &quot;boost_mode&quot;: &quot;sum&quot;,</span><br><span class="line">      &quot;max_boost&quot;: 100</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>max_boost</code> 参数表示 functions 模块中，最终的计算结果上限。如果超过上限，就按照上线计算。</p>
<h4 id="boosting-query"><a href="#boosting-query" class="headerlink" title="boosting query"></a>boosting query</h4><p>boosting query 中包含三部分：</p>
<ul>
<li>positive：得分不变</li>
<li>negative：降低得分</li>
<li>negative_boost：降低的权重</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET books&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;boosting&quot;: &#123;</span><br><span class="line">      &quot;positive&quot;: &#123;</span><br><span class="line">        &quot;match&quot;: &#123;</span><br><span class="line">          &quot;name&quot;: &quot;java&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;negative&quot;: &#123;</span><br><span class="line">        &quot;match&quot;: &#123;</span><br><span class="line">          &quot;name&quot;: &quot;2008&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;negative_boost&quot;: 0.5</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行完以后会发现name中包含2008的权重会*0.5</p>
<h1 id="嵌套查询"><a href="#嵌套查询" class="headerlink" title="嵌套查询"></a>嵌套查询</h1><h2 id="嵌套文档"><a href="#嵌套文档" class="headerlink" title="嵌套文档"></a>嵌套文档</h2><p>​        这里需要了解一下nested相关内容，不清楚的可以到<a href="./9994ac37.html">这里查看</a>，了解完相关概念后，我们执行如下操作：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PUT movies</span><br><span class="line">&#123;</span><br><span class="line">  &quot;mappings&quot;: &#123;</span><br><span class="line">    &quot;properties&quot;: &#123;</span><br><span class="line">      &quot;actors&quot;:&#123;</span><br><span class="line">        &quot;type&quot;: &quot;nested&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PUT movies&#x2F;_doc&#x2F;1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;:&quot;霸王别姬&quot;,</span><br><span class="line">  &quot;actors&quot;:[</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;name&quot;:&quot;张国荣&quot;,</span><br><span class="line">      &quot;gender&quot;:&quot;男&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;name&quot;:&quot;巩俐&quot;,</span><br><span class="line">      &quot;gender&quot;:&quot;女&quot;</span><br><span class="line">    &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>添加完以后我们查看文档数量：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET _cat&#x2F;indices?v</span><br></pre></td></tr></table></figure>

<p>查看结果如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/image-20210224165056265.png" alt="image-20210224165056265"></p>
<p>​        此时你会发现虽然我们就添加一条数据，但是docs.count却是3，这是因为 nested 文档在 es 内部其实也是独立的 lucene 文档，只是在我们查询的时候，es 内部帮我们做了 join 处理，所以最终看起来就像一个独立文档一样。因此这种方案性能并不是特别好。</p>
<h3 id="嵌套查询-1"><a href="#嵌套查询-1" class="headerlink" title="嵌套查询"></a>嵌套查询</h3><p>这个用来查询嵌套文档：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET movies&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;nested&quot;: &#123;</span><br><span class="line">      &quot;path&quot;: &quot;actors&quot;,</span><br><span class="line">      &quot;query&quot;: &#123;</span><br><span class="line">        &quot;bool&quot;: &#123;</span><br><span class="line">          &quot;must&quot;: [</span><br><span class="line">            &#123;</span><br><span class="line">              &quot;match&quot;: &#123;</span><br><span class="line">                &quot;actors.name&quot;: &quot;张国荣&quot;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              &quot;match&quot;: &#123;</span><br><span class="line">                &quot;actors.gender&quot;: &quot;男&quot;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="父子文档"><a href="#父子文档" class="headerlink" title="父子文档"></a>父子文档</h2><p>相比于嵌套文档，父子文档主要有如下优势：</p>
<ul>
<li>更新父文档时，不会重新索引子文档</li>
<li>创建、修改或者删除子文档时，不会影响父文档或者其他的子文档。</li>
<li>子文档可以作为搜索结果独立返回。</li>
</ul>
<p>例如学生和班级的关系：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PUT stu_class</span><br><span class="line">&#123;</span><br><span class="line">  &quot;mappings&quot;: &#123;</span><br><span class="line">    &quot;properties&quot;: &#123;</span><br><span class="line">      &quot;name&quot;:&#123;</span><br><span class="line">        &quot;type&quot;: &quot;keyword&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;s_c&quot;:&#123;</span><br><span class="line">        &quot;type&quot;: &quot;join&quot;,</span><br><span class="line">        &quot;relations&quot;:&#123;</span><br><span class="line">          &quot;class&quot;:&quot;student&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​        <code>s_c</code> 表示父子文档关系的名字，可以自定义。join 表示这是一个父子文档。relations 里边，class 这个位置是 parent名称，student 这个位置是 child名称。接下来，插入两个父文档：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PUT stu_class&#x2F;_doc&#x2F;1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;:&quot;一班&quot;,</span><br><span class="line">  &quot;s_c&quot;:&#123;</span><br><span class="line">    &quot;name&quot;:&quot;class&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">PUT stu_class&#x2F;_doc&#x2F;2</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;:&quot;二班&quot;,</span><br><span class="line">  &quot;s_c&quot;:&#123;</span><br><span class="line">    &quot;name&quot;:&quot;class&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>再来添加三个子文档：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PUT stu_class&#x2F;_doc&#x2F;3?routing&#x3D;1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;:&quot;zhangsan&quot;,</span><br><span class="line">  &quot;s_c&quot;:&#123;</span><br><span class="line">    &quot;name&quot;:&quot;student&quot;,</span><br><span class="line">    &quot;parent&quot;:1</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">PUT stu_class&#x2F;_doc&#x2F;4?routing&#x3D;1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;:&quot;lisi&quot;,</span><br><span class="line">  &quot;s_c&quot;:&#123;</span><br><span class="line">    &quot;name&quot;:&quot;student&quot;,</span><br><span class="line">    &quot;parent&quot;:1</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">PUT stu_class&#x2F;_doc&#x2F;5?routing&#x3D;2</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;:&quot;wangwu&quot;,</span><br><span class="line">  &quot;s_c&quot;:&#123;</span><br><span class="line">    &quot;name&quot;:&quot;student&quot;,</span><br><span class="line">    &quot;parent&quot;:2</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​        首先大家可以看到，子文档都是独立的文档。特别需要注意的地方是，子文档需要和父文档在同一个分片上，所以 routing 关键字的值为父文档的 id。另外，name 属性表明这是一个子文档。</p>
<p>父子文档需要注意的地方：</p>
<ol>
<li>每个索引只能定义一个 join filed</li>
<li><strong>父子文档需要在同一个分片上</strong>（查询，修改需要routing）</li>
<li>可以向一个已经存在的 join filed 上新增关系</li>
</ol>
<h3 id="has-child-query"><a href="#has-child-query" class="headerlink" title="has_child query"></a>has_child query</h3><p>通过子文档查询父文档使用 <code>has_child</code> query。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET stu_class&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;has_child&quot;: &#123;</span><br><span class="line">      &quot;type&quot;: &quot;student&quot;,</span><br><span class="line">      &quot;query&quot;: &#123;</span><br><span class="line">        &quot;match&quot;: &#123;</span><br><span class="line">          &quot;name&quot;: &quot;wangwu&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>查询 wangwu 所属的班级。</p>
<h3 id="has-parent-query"><a href="#has-parent-query" class="headerlink" title="has_parent query"></a>has_parent query</h3><p>通过父文档查询子文档：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET stu_class&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;has_parent&quot;: &#123;</span><br><span class="line">      &quot;parent_type&quot;: &quot;class&quot;,</span><br><span class="line">      &quot;query&quot;: &#123;</span><br><span class="line">        &quot;match&quot;: &#123;</span><br><span class="line">          &quot;name&quot;: &quot;二班&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>查询二班的学生。但是大家注意，这种查询没有评分。</p>
<p>可以使用 parent id 查询子文档：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET stu_class&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;parent_id&quot;:&#123;</span><br><span class="line">      &quot;type&quot;:&quot;student&quot;,</span><br><span class="line">      &quot;id&quot;:1</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过 parent id 查询，默认情况下使用相关性计算分数。</p>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>整体上来说：</p>
<ol>
<li>普通子对象实现一对多，会损失子文档的边界，子对象之间的属性关系丢失。</li>
<li>nested 可以解决第 1 点的问题，但是 nested 有两个缺点：更新主文档的时候要全部更新，不支持子文档属于多个主文档。</li>
<li>父子文档解决 1、2 点的问题，但是它主要适用于写多读少的场景。</li>
</ol>
<h1 id="地理位置查询"><a href="#地理位置查询" class="headerlink" title="地理位置查询"></a>地理位置查询</h1><h2 id="数据准备"><a href="#数据准备" class="headerlink" title="数据准备"></a>数据准备</h2><p>创建一个索引：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PUT geo</span><br><span class="line">&#123;</span><br><span class="line">  &quot;mappings&quot;: &#123;</span><br><span class="line">    &quot;properties&quot;: &#123;</span><br><span class="line">      &quot;name&quot;:&#123;</span><br><span class="line">        &quot;type&quot;: &quot;keyword&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;location&quot;:&#123;</span><br><span class="line">        &quot;type&quot;: &quot;geo_point&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>准备一个 geo.json 文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&quot;index&quot;:&#123;&quot;_index&quot;:&quot;geo&quot;,&quot;_id&quot;:1&#125;&#125;</span><br><span class="line">&#123;&quot;name&quot;:&quot;西安&quot;,&quot;location&quot;:&quot;34.288991865037524,108.9404296875&quot;&#125;</span><br><span class="line">&#123;&quot;index&quot;:&#123;&quot;_index&quot;:&quot;geo&quot;,&quot;_id&quot;:2&#125;&#125;</span><br><span class="line">&#123;&quot;name&quot;:&quot;北京&quot;,&quot;location&quot;:&quot;39.926588421909436,116.43310546875&quot;&#125;</span><br><span class="line">&#123;&quot;index&quot;:&#123;&quot;_index&quot;:&quot;geo&quot;,&quot;_id&quot;:3&#125;&#125;</span><br><span class="line">&#123;&quot;name&quot;:&quot;上海&quot;,&quot;location&quot;:&quot;31.240985378021307,121.53076171875&quot;&#125;</span><br><span class="line">&#123;&quot;index&quot;:&#123;&quot;_index&quot;:&quot;geo&quot;,&quot;_id&quot;:4&#125;&#125;</span><br><span class="line">&#123;&quot;name&quot;:&quot;天津&quot;,&quot;location&quot;:&quot;39.13006024213511,117.20214843749999&quot;&#125;</span><br><span class="line">&#123;&quot;index&quot;:&#123;&quot;_index&quot;:&quot;geo&quot;,&quot;_id&quot;:5&#125;&#125;</span><br><span class="line">&#123;&quot;name&quot;:&quot;杭州&quot;,&quot;location&quot;:&quot;30.259067203213018,120.21240234375001&quot;&#125;</span><br><span class="line">&#123;&quot;index&quot;:&#123;&quot;_index&quot;:&quot;geo&quot;,&quot;_id&quot;:6&#125;&#125;</span><br><span class="line">&#123;&quot;name&quot;:&quot;武汉&quot;,&quot;location&quot;:&quot;30.581179257386985,114.3017578125&quot;&#125;</span><br><span class="line">&#123;&quot;index&quot;:&#123;&quot;_index&quot;:&quot;geo&quot;,&quot;_id&quot;:7&#125;&#125;</span><br><span class="line">&#123;&quot;name&quot;:&quot;合肥&quot;,&quot;location&quot;:&quot;31.840232667909365,117.20214843749999&quot;&#125;</span><br><span class="line">&#123;&quot;index&quot;:&#123;&quot;_index&quot;:&quot;geo&quot;,&quot;_id&quot;:8&#125;&#125;</span><br><span class="line">&#123;&quot;name&quot;:&quot;重庆&quot;,&quot;location&quot;:&quot;29.592565403314087,106.5673828125&quot;&#125;</span><br></pre></td></tr></table></figure>

<p>最后，执行如下命令，批量导入 geo.json 数据：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl -XPOST &quot;http:&#x2F;&#x2F;localhost:9200&#x2F;geo&#x2F;_bulk?pretty&quot; -H &quot;content-type:application&#x2F;json&quot; --data-binary @geo.json</span><br></pre></td></tr></table></figure>

<h3 id="geo-distance-query"><a href="#geo-distance-query" class="headerlink" title="geo_distance query"></a>geo_distance query</h3><p>给出一个中心点，查询距离该中心点指定范围内的文档：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET geo&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;bool&quot;: &#123;</span><br><span class="line">      &quot;must&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;match_all&quot;: &#123;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      &quot;filter&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;geo_distance&quot;: &#123;</span><br><span class="line">            &quot;distance&quot;: &quot;600km&quot;,</span><br><span class="line">            &quot;location&quot;: &#123;</span><br><span class="line">              &quot;lat&quot;: 34.288991865037524,</span><br><span class="line">              &quot;lon&quot;: 108.9404296875</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以(34.288991865037524,108.9404296875) 为圆心，以 600KM 为半径，这个范围内的数据。</p>
<h3 id="geo-bounding-box-query"><a href="#geo-bounding-box-query" class="headerlink" title="geo_bounding_box query"></a>geo_bounding_box query</h3><p>在某一个矩形内的点，通过两个点锁定一个矩形：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET geo&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;bool&quot;: &#123;</span><br><span class="line">      &quot;must&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;match_all&quot;: &#123;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      &quot;filter&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;geo_bounding_box&quot;: &#123;</span><br><span class="line">            &quot;location&quot;: &#123;</span><br><span class="line">              &quot;top_left&quot;: &#123;</span><br><span class="line">                &quot;lat&quot;: 32.0639555946604,</span><br><span class="line">                &quot;lon&quot;: 118.78967285156249</span><br><span class="line">              &#125;,</span><br><span class="line">              &quot;bottom_right&quot;: &#123;</span><br><span class="line">                &quot;lat&quot;: 29.98824461550903,</span><br><span class="line">                &quot;lon&quot;: 122.20642089843749</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以南京经纬度作为矩形的左上角，以舟山经纬度作为矩形的右下角，构造出来的矩形中，包含上海和杭州两个城市。</p>
<h3 id="geo-polygon-query"><a href="#geo-polygon-query" class="headerlink" title="geo_polygon query"></a>geo_polygon query</h3><p>在某一个多边形范围内的查询。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET geo&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;bool&quot;: &#123;</span><br><span class="line">      &quot;must&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;match_all&quot;: &#123;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      &quot;filter&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;geo_polygon&quot;: &#123;</span><br><span class="line">            &quot;location&quot;: &#123;</span><br><span class="line">              &quot;points&quot;: [</span><br><span class="line">                &#123;</span><br><span class="line">                  &quot;lat&quot;: 31.793755581217674,</span><br><span class="line">                  &quot;lon&quot;: 113.8238525390625</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                  &quot;lat&quot;: 30.007273923504556,</span><br><span class="line">                  &quot;lon&quot;:114.224853515625</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                  &quot;lat&quot;: 30.007273923504556,</span><br><span class="line">                  &quot;lon&quot;:114.8345947265625</span><br><span class="line">                &#125;</span><br><span class="line">              ]</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>给定多个点，由多个点组成的多边形中的数据。</p>
<h3 id="geo-shape-query"><a href="#geo-shape-query" class="headerlink" title="geo_shape query"></a>geo_shape query</h3><p><code>geo_shape</code> 用来查询图形，针对 <code>geo_shape</code>，两个图形之间的关系有：相交、包含、不相交。</p>
<p>新建索引：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PUT geo_shape</span><br><span class="line">&#123;</span><br><span class="line">  &quot;mappings&quot;: &#123;</span><br><span class="line">    &quot;properties&quot;: &#123;</span><br><span class="line">      &quot;name&quot;:&#123;</span><br><span class="line">        &quot;type&quot;: &quot;keyword&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;location&quot;:&#123;</span><br><span class="line">        &quot;type&quot;: &quot;geo_shape&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后添加一条线：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PUT geo_shape&#x2F;_doc&#x2F;1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;:&quot;西安-郑州&quot;,</span><br><span class="line">  &quot;location&quot;:&#123;</span><br><span class="line">    &quot;type&quot;:&quot;linestring&quot;,</span><br><span class="line">    &quot;coordinates&quot;:[</span><br><span class="line">      [108.9404296875,34.279914398549934],</span><br><span class="line">      [113.66455078125,34.768691457552706]</span><br><span class="line">      ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接下来查询某一个图形中是否包含该线：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET geo_shape&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;bool&quot;: &#123;</span><br><span class="line">      &quot;must&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;match_all&quot;: &#123;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      &quot;filter&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;geo_shape&quot;: &#123;</span><br><span class="line">            &quot;location&quot;: &#123;</span><br><span class="line">              &quot;shape&quot;: &#123;</span><br><span class="line">                &quot;type&quot;: &quot;envelope&quot;,</span><br><span class="line">                &quot;coordinates&quot;: [</span><br><span class="line">                  [</span><br><span class="line">            106.5234375,</span><br><span class="line">            36.80928470205937</span><br><span class="line">          ],</span><br><span class="line">          [</span><br><span class="line">            115.33447265625,</span><br><span class="line">            32.24997445586331</span><br><span class="line">          ]</span><br><span class="line">                ]</span><br><span class="line">              &#125;,</span><br><span class="line">              &quot;relation&quot;: &quot;within&quot;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>relation 属性表示两个图形的关系：</p>
<ul>
<li>within 包含</li>
<li>intersects 相交</li>
<li>disjoint 不相交</li>
</ul>
<h1 id="特殊查询"><a href="#特殊查询" class="headerlink" title="特殊查询"></a>特殊查询</h1><h3 id="more-like-this-query"><a href="#more-like-this-query" class="headerlink" title="more_like_this query"></a>more_like_this query</h3><p><code>more_like_this</code> query 可以实现基于内容的推荐，给定一篇文章，可以查询出和该文章相似的内容。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET books&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;more_like_this&quot;: &#123;</span><br><span class="line">      &quot;fields&quot;: [</span><br><span class="line">        &quot;info&quot;</span><br><span class="line">      ],</span><br><span class="line">      &quot;like&quot;: &quot;大学战略&quot;,</span><br><span class="line">      &quot;min_term_freq&quot;: 1,</span><br><span class="line">      &quot;max_query_terms&quot;: 12</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>fields：要匹配的字段，可以有多个</li>
<li>like：要匹配的文本</li>
<li>min_term_freq：词项的最低频率，默认是 2。<strong>特别注意，这个是指词项在要匹配的文本中的频率，而不是 es 文档中的频率</strong></li>
<li>max_query_terms：query 中包含的最大词项数目</li>
<li>min_doc_freq：最小的文档频率，搜索的词，至少在多少个文档中出现，少于指定数目，该词会被忽略</li>
<li>max_doc_freq：最大文档频率</li>
<li>analyzer：分词器，默认使用字段的分词器</li>
<li>stop_words：停用词列表</li>
<li>minmum_should_match</li>
</ul>
<h3 id="script-query"><a href="#script-query" class="headerlink" title="script query"></a>script query</h3><p>脚本查询，例如查询所有价格大于 200 的图书：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET books&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;bool&quot;: &#123;</span><br><span class="line">      &quot;filter&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;script&quot;: &#123;</span><br><span class="line">            &quot;script&quot;: &#123;</span><br><span class="line">              &quot;lang&quot;: &quot;painless&quot;,</span><br><span class="line">              &quot;source&quot;: &quot;if(doc[&#39;price&#39;].size()!&#x3D;0)&#123;doc[&#39;price&#39;].value &gt; 200&#125;&quot;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="percolate-query"><a href="#percolate-query" class="headerlink" title="percolate query"></a>percolate query</h3><p>percolate query 译作渗透查询或者反向查询。</p>
<ul>
<li>正常操作：根据查询语句找到对应的文档 query-&gt;document</li>
<li>percolate query：根据文档，返回与之匹配的查询语句，document-&gt;query</li>
</ul>
<p>应用场景：</p>
<ul>
<li>价格监控</li>
<li>库存报警</li>
<li>股票警告</li>
<li>…</li>
</ul>
<p>例如阈值告警，假设指定字段值大于阈值，报警提示。</p>
<p>percolate mapping 定义：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PUT log</span><br><span class="line">&#123;</span><br><span class="line">  &quot;mappings&quot;: &#123;</span><br><span class="line">    &quot;properties&quot;: &#123;</span><br><span class="line">      &quot;threshold&quot;:&#123;</span><br><span class="line">        &quot;type&quot;: &quot;long&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;count&quot;:&#123;</span><br><span class="line">        &quot;type&quot;: &quot;long&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;query&quot;:&#123;</span><br><span class="line">        &quot;type&quot;:&quot;percolator&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>percolator 类型相当于 keyword、long 以及 integer 等。</p>
<p>插入文档：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PUT log&#x2F;_doc&#x2F;1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;threshold&quot;:10,</span><br><span class="line">  &quot;query&quot;:&#123;</span><br><span class="line">    &quot;bool&quot;:&#123;</span><br><span class="line">      &quot;must&quot;:&#123;</span><br><span class="line">        &quot;range&quot;:&#123;</span><br><span class="line">          &quot;count&quot;:&#123;</span><br><span class="line">            &quot;gt&quot;:10</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最后查询：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET log&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;percolate&quot;: &#123;</span><br><span class="line">      &quot;field&quot;: &quot;query&quot;,</span><br><span class="line">      &quot;documents&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;count&quot;:3</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;count&quot;:6</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;count&quot;:90</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;count&quot;:12</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;count&quot;:15</span><br><span class="line">        &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>查询结果中会列出不满足条件的文档。</p>
<p>查询结果中的 <code>_percolator_document_slot</code> 字段表示文档的 position，从 0 开始计。</p>
<h1 id="参考内容"><a href="#参考内容" class="headerlink" title="参考内容"></a>参考内容</h1><p><a href="https://www.bilibili.com/video/BV1ft4y1e7tq">参考</a></p>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzI1NDY0MTkzNQ==&mid=2247491292&idx=1&sn=a67c2d6710a60724a6b897bf182e3d8b&chksm=e9c34cbcdeb4c5aa3b1983a1a64fec827e8b7bd20d0ac33fb11ff5d92e9f23375837648fc95c&cur_album_id=1591614521561923586&scene=189#rd">参考2</a></p>
]]></content>
      <categories>
        <category>ElasticSearch</category>
      </categories>
      <tags>
        <tag>ElasticSearch</tag>
      </tags>
  </entry>
  <entry>
    <title>JVM-垃圾收集03【垃圾收集器】</title>
    <url>/posts/e421b1fb.html</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="密码不正确，请重新输入！" data-whm="文章不能被校验, 不过您还是能看看解密后的内容！">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">该文章未完成或暂不公开, 请输入密码查看。</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="6b5e1413fd637a824a883269f1fcb372640e23b5d9e4e0c02a75b20f6853ffef"></script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>JVM</category>
      </categories>
      <tags>
        <tag>JVM</tag>
      </tags>
  </entry>
  <entry>
    <title>JVM-对象的创建与内存分配</title>
    <url>/posts/8d52f34c.html</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="密码不正确，请重新输入！" data-whm="文章不能被校验, 不过您还是能看看解密后的内容！">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">该文章未完成或暂不公开, 请输入密码查看。</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="b60ac70fa887ec4ea3b684e061543b77cb6998dcd5dd8d4052692c47be66547f"></script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>JVM</category>
      </categories>
      <tags>
        <tag>JVM</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL优化</title>
    <url>/posts/37c83307.html</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="密码不正确，请重新输入！" data-whm="文章不能被校验, 不过您还是能看看解密后的内容！">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">该文章还未完全完成, 请输入密码查看。</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="3fd3517dfd6061f8539c15c33e1636feac5836ec25a25b0faa50059a53409e9e"></script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Explain关键字及索引使用分析</title>
    <url>/posts/a7e850f.html</url>
    <content><![CDATA[<blockquote>
<p>使用EXPLAIN关键字可以模拟优化器执行SQL语句，分析你的查询语句或是结构的性能瓶颈在 select 语句之前增加 explain 关键字，MySQL 会在查询上设置一个标记，执行查询会返回执行计划的信息，而不是执行这条SQL </p>
</blockquote>
<p><strong>注：</strong>如果 from 中包含子查询，仍会执行该子查询，将结果放入临时表中</p>
<h1 id="Explain介绍"><a href="#Explain介绍" class="headerlink" title="Explain介绍"></a>Explain介绍</h1><p>环境：MySQL 5.7.31 </p>
<p><strong>注：</strong>具体结果及列字段数在不同版本的MySQL中可能不唯一。</p>
<h2 id="测试数据库表结构"><a href="#测试数据库表结构" class="headerlink" title="测试数据库表结构"></a>测试数据库表结构</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SET NAMES utf8mb4;</span><br><span class="line">SET FOREIGN_KEY_CHECKS &#x3D; 0;</span><br><span class="line"></span><br><span class="line">DROP TABLE IF EXISTS &#96;author&#96;;</span><br><span class="line">CREATE TABLE &#96;author&#96; (</span><br><span class="line">  &#96;id&#96; int(11) NOT NULL,</span><br><span class="line">  &#96;name&#96; varchar(45) DEFAULT NULL,</span><br><span class="line">  &#96;update_time&#96; datetime DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (&#96;id&#96;)</span><br><span class="line">) ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;utf8;</span><br><span class="line"></span><br><span class="line">BEGIN;</span><br><span class="line">INSERT INTO &#96;author&#96; VALUES (1, &#39;a&#39;, &#39;2020-10-01 11:04:46&#39;);</span><br><span class="line">INSERT INTO &#96;author&#96; VALUES (2, &#39;b&#39;, &#39;2020-10-01 11:04:46&#39;);</span><br><span class="line">INSERT INTO &#96;author&#96; VALUES (3, &#39;c&#39;, &#39;2020-10-01 11:04:46&#39;);</span><br><span class="line">COMMIT;</span><br><span class="line"></span><br><span class="line">DROP TABLE IF EXISTS &#96;book&#96;;</span><br><span class="line">CREATE TABLE &#96;book&#96; (</span><br><span class="line">  &#96;id&#96; int(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  &#96;title&#96; varchar(10) DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (&#96;id&#96;),</span><br><span class="line">  KEY &#96;idx_title&#96; (&#96;title&#96;)</span><br><span class="line">) ENGINE&#x3D;InnoDB AUTO_INCREMENT&#x3D;4 DEFAULT CHARSET&#x3D;utf8;</span><br><span class="line"></span><br><span class="line">BEGIN;</span><br><span class="line">INSERT INTO &#96;book&#96; VALUES (2, &#39;Java&#39;);</span><br><span class="line">INSERT INTO &#96;book&#96; VALUES (1, &#39;一千零一夜&#39;);</span><br><span class="line">INSERT INTO &#96;book&#96; VALUES (3, &#39;人月神话&#39;);</span><br><span class="line">COMMIT;</span><br><span class="line"></span><br><span class="line">DROP TABLE IF EXISTS &#96;book_author&#96;;</span><br><span class="line">CREATE TABLE &#96;book_author&#96; (</span><br><span class="line">  &#96;id&#96; int(11) NOT NULL,</span><br><span class="line">  &#96;book_id&#96; int(11) NOT NULL,</span><br><span class="line">  &#96;author_id&#96; int(11) NOT NULL,</span><br><span class="line">  &#96;remark&#96; varchar(255) DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (&#96;id&#96;),</span><br><span class="line">  KEY &#96;idx_book_author_id&#96; (&#96;book_id&#96;,&#96;author_id&#96;)</span><br><span class="line">) ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;utf8;</span><br><span class="line"></span><br><span class="line">BEGIN;</span><br><span class="line">INSERT INTO &#96;book_author&#96; VALUES (1, 1, 1, NULL);</span><br><span class="line">INSERT INTO &#96;book_author&#96; VALUES (2, 1, 2, NULL);</span><br><span class="line">INSERT INTO &#96;book_author&#96; VALUES (3, 2, 1, NULL);</span><br><span class="line">COMMIT;</span><br><span class="line"></span><br><span class="line">SET FOREIGN_KEY_CHECKS &#x3D; 1;</span><br></pre></td></tr></table></figure>

<h2 id="explain-两个变种"><a href="#explain-两个变种" class="headerlink" title="explain 两个变种"></a>explain 两个变种</h2><ol>
<li>explain extended：会在 explain 的基础上额外提供一些查询优化的信息，<strong>紧随其后</strong>通过 <strong>show warnings 命令可以得到优化后的查询语句</strong>，从而看出优化器优化了什么。额外还有filtered 列，是一个半分比的值，rows * filtered / 100 可以估算出将要和 explain 中前一个表进行连接的行数（前一个表指 explain 中的id值比当前表id值小的表）。 </li>
</ol>
<blockquote>
<p>explain extended select * from book where id = 1; </p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/image-20201217111737718.png" alt="image-202012171117377128"></p>
<blockquote>
<p>show warnings; </p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/image-20201217111759824.png" alt="image-20201217111759824"></p>
<ol start="2">
<li>explain partitions：相比 explain 多了个 partitions 字段，如果查询是基于分区表的话，会显示查询将访问的分区。 </li>
</ol>
<h2 id="功能介绍"><a href="#功能介绍" class="headerlink" title="功能介绍"></a>功能介绍</h2><p>​        首先我们随意执行一条SQL语句并加上explain关键字，就会看到如下的信息：</p>
<blockquote>
<p>explain select * from author;</p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/image-20201216161426555.png" alt="image-20201216161426555"></p>
<p>​        从上表中能看到，加上explain后返回的是语句的执行计划的信息，而不是语句具体的查询结果，但是这么多列，每一列都是什么意思呢？下面我就来逐个介绍一下。</p>
<h3 id="id列"><a href="#id列" class="headerlink" title="id列"></a>id列</h3><p>​        id列的编号是 select 的序列号，<strong>有几个 select 就有几个id</strong>，并且id的顺序是按 select 出现的顺序增长的。 id列<strong>编号越大执行优先级越高，id相同则从上往下执行，id为NULL最后执行。</strong> </p>
<h3 id="select-type列"><a href="#select-type列" class="headerlink" title="select_type列"></a>select_type列</h3><p>​        select_type表示对应行是简单还是复杂的查询。 </p>
<ol>
<li><p><strong>simple：</strong>简单查询。查询不包含子查询和union（就比如上面那个查询）。</p>
</li>
<li><p><strong>primary：</strong>复杂查询中最外层的select</p>
</li>
<li><p><strong>subquery：</strong>包含在 select 中的子查询（不在 from 子句中） </p>
</li>
<li><p><strong>derived：</strong>包含在 from 子句中的子查询。MySQL会将结果存放在一个临时表中，也称为派生表。</p>
</li>
<li><p><strong>union：</strong>在 union 中的第二个和随后的 select </p>
<blockquote>
<p>explain select id,name from author union all SELECT id bookId,title FROM book;</p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/image-20201216162525555.png" alt="image-20201216162525555"></p>
<p><strong>primary、subquery 和 derived 类型举例：</strong></p>
</li>
</ol>
<p>​        在MySQL5.7中，默认对衍生表的有合并优化，所以在不关闭的情况下，看不到<strong>derived</strong>类型，所以我们要先设置一下（测试完记得还原）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">set session optimizer_switch&#x3D;&#39;derived_merge&#x3D;off&#39;; #关闭mysql5.7新特性对衍 生表的合并优化</span><br><span class="line">set session optimizer_switch&#x3D;&#39;derived_merge&#x3D;on&#39;; # 还原默认配置 测试完记得执行一下这个还原</span><br></pre></td></tr></table></figure>

<p>​        关闭以后，我们来进行一下测试：</p>
<blockquote>
<p> explain select (select 1 from author where id = 1) from (select * from book where id = 1) b;</p>
</blockquote>
<p>​      <img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/image-20201216163211208.png" alt="image-20201216163211208"></p>
<h3 id="table列"><a href="#table列" class="headerlink" title="table列"></a>table列</h3><p>​        这一列表示 explain 的一行正在访问哪个表。 </p>
<ul>
<li><p>当 from 子句中有子查询时，table列是 <derivenN> 格式，表示当前查询依赖 id=N 的查询，于是先执行id=N 的查询。 </p>
</li>
<li><p>当有 union 时，UNION RESULT 的 table 列的值为&lt;union1,2&gt;，1和2表示参与 union 的select 行id。 </p>
</li>
</ul>
<h3 id="type列"><a href="#type列" class="headerlink" title="type列"></a>type列</h3><p>​        这一列表示关联类型或访问类型，即MySQL决定如何查找表中的行，查找数据行记录的大概范围。 依次从最优到最差分别为：<strong>system &gt; const &gt; eq_ref &gt; ref &gt; range &gt; index &gt; ALL</strong>。一般来说，得保证查询达到range级别，最好达到ref。</p>
<p><strong>NULL：</strong>mysql能够在优化阶段分解查询语句，在执行阶段用不着再访问表或索引。例如：在索引列中选取最小值，可以单独查找索引来完成，不需要在执行时访问表 </p>
<blockquote>
<p> explain select min(id) from book;</p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/image-20201216164214463.png" alt="image-20201216164214463"></p>
<p><strong>const, system：</strong>mysql能对查询的某部分进行优化并将其转化成一个常量（可以看show warnings 的结果）。用于 primary key 或 unique key 的所有列与常数比较时，表最多有一个匹配行，读取1次，速度比较快。system是const的特例，表里只有一条元组匹配时为system。</p>
<blockquote>
<p>explain select * from (select * from book where id = 1) book; </p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/image-20201216170931639.png" alt="image-20201216170931639"></p>
<p><strong>eq_ref：</strong>当连接使用索引的所有部分时，<strong>索引是主键或唯一非 NULL 索引</strong>时 ，<strong>本表每条记录在关联表中关联最多只会返回一条符合条件的记录一一对应</strong>，就会出现该类型。这可能是在 const 之外最好的联接类型了，简单的 select 查询不会出现这种type。 </p>
<blockquote>
<p>explain select * from book_author left join book on book_author.book_id = book.id;</p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/image-20201216171356563.png" alt="image-20201216171356563"></p>
<p><strong>ref：</strong>相比 eq_ref，不使用唯一索引，而是<strong>使用普通索引或者唯一性索引的部分前缀，索引要和某个值相比较，可能会找到多个符合条件的行。</strong> </p>
<ol>
<li>简单 select 查询，title是普通索引（非唯一索引） </li>
</ol>
<blockquote>
<p>explain select * from book where title = ‘Java’; </p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/image-20201217102218237.png" alt="image-20201217102218237"></p>
<ol start="2">
<li>关联表查询，idx_book_author_id是book_id和author_id的联合索引，这里使用到了book_author的左边前缀book_id部分。 </li>
</ol>
<blockquote>
<p>explain select book_id from book left join book_author on book.id = book_author.book_id; </p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/image-20201217102430391.png" alt="image-20201217102430391"></p>
<p><strong>range：</strong>范围扫描通常出现在 in(), between ,&gt; ,&lt;, &gt;= 等操作中。使用一个索引来检索给定范围的行。 </p>
<blockquote>
<p>explain select * from author where id &gt; 1;</p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/image-20210312105254891.png" alt="image-20210312105254891"></p>
<p>但是要是全表都是索引，就不一定是range了：</p>
<blockquote>
<p>explain select * from book where id &gt; 1;</p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/image-20201217102524303.png" alt="image-20201217102524303"></p>
<p><strong>index：</strong>扫描全表索引，这通常比ALL快一些。 </p>
<blockquote>
<p>explain select * from book; </p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/image-20201217102558032.png" alt="image-20201217102558032"></p>
<p><strong>ALL：</strong>即全表扫描，意味着mysql需要从头到尾去查找所需要的行。通常情况下这需要增加索引来进行优化了 </p>
<blockquote>
<p>explain select * from author; </p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/image-20201217102722166.png" alt="image-20201217102722166"></p>
<p><strong>Q：</strong>为什么同样是select * 查询，上面的结果一个是<code>index</code>，一个是<code>ALL</code>呢？</p>
<p><strong>A：</strong>book表中所有字段都是索引，id为主键，title为自建索引，而author表中则不是。</p>
<h3 id="possible-keys列"><a href="#possible-keys列" class="headerlink" title="possible_keys列"></a>possible_keys列</h3><p>​        <strong>这一列用于显示查询可能使用哪些索引来查找。</strong> </p>
<p>​        explain 时可能出现 possible_keys 有列，而 key 显示 NULL 的情况，这种情况是因为表中数据不多，mysql认为索引对此查询帮助不大，选择了全表查询。 </p>
<p>​        如果该列是NULL，则没有相关的索引。在这种情况下，可以通过检查 where 子句看是否可以创造一个适当的索引来提高查询性能，然后用 explain 查看效果。 </p>
<h3 id="key列"><a href="#key列" class="headerlink" title="key列"></a>key列</h3><p>​        <strong>这一列显示mysql实际采用哪个索引来优化对该表的访问。</strong> 如果没有使用索引，则该列是 NULL。如果想强制mysql使用或忽视possible_keys列中的索引，可在查询中使用 force index、ignore index。 </p>
<h3 id="key-len列"><a href="#key-len列" class="headerlink" title="key_len列"></a>key_len列</h3><p>​        <strong>这一列显示了mysql在索引里使用的字节数，通过这个值可以算出具体使用了索引中的哪些列。</strong>就比如：</p>
<blockquote>
<p>explain select * from book_author where book_id = 1;</p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/image-20201217103603588.png" alt="image-20201217103603588"></p>
<blockquote>
<p>explain select * from book_author where book_id = 1 and author_id = 2;</p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/image-20201217103619992.png" alt="image-20201217103619992"></p>
<p>​        从上面的结果可以看出，book_author的联合索引 idx_book_author_id 由 book_id 和 author_id 两个int列组成，并且每个int是4字节。只使用book_id，则key_len=4，而使用book_id和author_id，则key_len=8。 </p>
<p>​        <strong>常见属性key_len计算规则如下（表格中都是不允许为NULL的情况，允许为 NULL需要再加1）：</strong> </p>
<table>
<thead>
<tr>
<th>属性</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>char(n)</td>
<td>n字节长度</td>
</tr>
<tr>
<td>varchar(n)</td>
<td>如果是gbk，长度就是2n+2，utf-8，长是 3n+2，utf8mb4，长度是4n+2</td>
</tr>
<tr>
<td>tinyint</td>
<td>1字节</td>
</tr>
<tr>
<td>smallint</td>
<td>2字节</td>
</tr>
<tr>
<td>int</td>
<td>4字节</td>
</tr>
<tr>
<td>bigint</td>
<td>8字节</td>
</tr>
<tr>
<td>date</td>
<td>3字节</td>
</tr>
<tr>
<td>timestamp</td>
<td>4字节</td>
</tr>
<tr>
<td>datetime</td>
<td>8字节</td>
</tr>
</tbody></table>
<p><strong>注：如果字段允许为 NULL，需要1字节记录是否为 NULL，</strong>索引最大长度是768字节，<strong>当字符串过长时，mysql会做一个类似左前缀索引的处理，将前半部分的字符提取出来做索引。</strong></p>
<h3 id="ref列"><a href="#ref列" class="headerlink" title="ref列"></a>ref列</h3><p>​        这一列显示了在key列记录的索引中，表查找值所用到的列或常量，常见的有：const（常量），字段名（例：book.id） </p>
<h3 id="rows列"><a href="#rows列" class="headerlink" title="rows列"></a>rows列</h3><p>​        这一列是mysql估计要读取并检测的行数，<strong>注意这个不是结果集里的行数。</strong> </p>
<h3 id="Extra列"><a href="#Extra列" class="headerlink" title="Extra列"></a>Extra列</h3><p>这一列展示的是额外信息。常见的重要值如下： </p>
<ol>
<li><strong>Using index：使用覆盖索引或者说SQL所需要返回的所有列数据均在一棵索引树上，而无需访问实际的行记录。</strong></li>
</ol>
<blockquote>
<p>explain select book_id from book_author where book_id = 1; </p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/image-20201217104935922.png" alt="image-20201217104935922"></p>
<ol start="2">
<li><strong>Using where：</strong>使用 where 语句来处理结果，<strong>查询的列未被索引覆盖</strong> ，这种一般要优化。</li>
</ol>
<blockquote>
<p>explain select * from author where name = ‘a’; </p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/image-20201217105101440.png" alt="image-20201217105101440"></p>
<ol start="3">
<li><strong>Using index condition：</strong>查询的<strong>列不完全被索引覆盖</strong>，where条件中是一个前导列的范围；</li>
</ol>
<blockquote>
<p>explain select * from book_author where book_id &gt; 1;</p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/image-20201217105401750.png" alt="image-20201217105401750"></p>
<ol start="4">
<li><strong>Using temporary：mysql需要创建一张临时表来处理查询</strong>。出现这种情况一般是要进行优化的，首先是想到用索引来优化。 </li>
</ol>
<ul>
<li>author.name没有索引，此时创建了张临时表来distinct </li>
</ul>
<blockquote>
<p>explain select distinct name from author; </p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/image-20201217105653196.png" alt="image-20201217105653196"></p>
<ul>
<li>book.title建立了idx_title索引，此时查询时extra是using index，没有用临时表 </li>
</ul>
<blockquote>
<p>explain select distinct title from book; </p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/image-20201217105809339.png" alt="image-20201217105809339"></p>
<ol start="5">
<li><strong>Using filesort：</strong>将用外部排序而不是索引排序，数据较小时从内存排序，否则需要在磁盘完成排序。这种情况下一般也是要考虑使用索引来优化的。 </li>
</ol>
<ul>
<li>author.name未创建索引，会浏览author整个表，保存排序关键字name和对应的id，然后排序name并检索行记录 </li>
</ul>
<blockquote>
<p>explain select * from author order by name; </p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/image-20201217105955030.png" alt="image-20201217105955030"></p>
<ul>
<li>book.title建立了idx_title索引,此时查询时extra是using index </li>
</ul>
<blockquote>
<p>explain select * from book order by title; </p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/image-20201217110015480.png" alt="image-20201217110015480"></p>
<ol start="6">
<li><strong>Select tables optimized away：</strong>使用<strong>某些聚合函数</strong>（比如 max、min等，而sum，avg等就不会）来访问存在索引的某个字段是 </li>
</ol>
<blockquote>
<p>explain select max(id) from book; </p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/image-20201217110132495.png" alt="image-20201217110132495"></p>
<p><a href="https://mp.weixin.qq.com/s?__biz=MjM5ODYxMDA5OQ==&mid=2651962587&idx=1&sn=d197aea0090ce93b156e0774c6dc3019&chksm=bd2d09078a5a801138922fb5f2b9bb7fdaace7e594d55f45ce4b3fc25cbb973bbc9b2deb2c31&mpshare=1&scene=1&srcid=&sharer_sharetime=1564102656434&sharer_shareid=7cd5f6d8b77d171f90b241828891a85f&key=c072b2c2faef4d9438b6f0b6badfe53fcf4db318fb2a87c291408a33555d137d4353da96dcb877b705e357a29afaa1479a898d0c98e72842de1bb41b2ff2a9c73a6131f5ce9fb58a76278f542f301b23&ascene=1&uin=MTAwMjA4NTM0Mw==&devicetype=Windows+7&version=62060739&lang=zh_CN&pass_ticket=+86JlczuokhjGWtJYlXewkRQ80VvS7ZrhQjqxZGhalDK9QZVXHBjqvVIoMCl8QmU">MySQL explain，Extra分析</a></p>
<h2 id="索引实践及问题分析"><a href="#索引实践及问题分析" class="headerlink" title="索引实践及问题分析"></a>索引实践及问题分析</h2><p>​        虽然创建索引能很大程度的提高查询效率，但是操作方式不对，创建完索引以后我们在查询时，索引并不会生效。</p>
<p>创建测试表并建立联合索引：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DROP TABLE IF EXISTS &#96;t_user&#96;;</span><br><span class="line">CREATE TABLE &#96;t_user&#96; (</span><br><span class="line">  &#96;pk_id&#96; int(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  &#96;account&#96; varchar(16) DEFAULT NULL,</span><br><span class="line">  &#96;age&#96; int(11) DEFAULT NULL,</span><br><span class="line">  &#96;nickname&#96; varchar(16) DEFAULT NULL,</span><br><span class="line">  &#96;create_time&#96; datetime DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (&#96;pk_id&#96;),</span><br><span class="line">  KEY &#96;idx_account_age_nickname&#96; (&#96;account&#96;,&#96;age&#96;,&#96;nickname&#96;)</span><br><span class="line">) ENGINE&#x3D;InnoDB AUTO_INCREMENT&#x3D;4 DEFAULT CHARSET&#x3D;utf8mb4;</span><br><span class="line"></span><br><span class="line">INSERT INTO &#96;t_user&#96; VALUES (1, &#39;zhangsan&#39;, 11, &#39;张三&#39;, &#39;2020-10-01 13:21:54&#39;);</span><br><span class="line">INSERT INTO &#96;t_user&#96; VALUES (2, &#39;lisi&#39;, 12, &#39;李四&#39;, &#39;2020-10-01 13:24:06&#39;);</span><br><span class="line">INSERT INTO &#96;t_user&#96; VALUES (3, &#39;wangwu&#39;, 13, &#39;王五&#39;, &#39;2020-10-01 13:24:29&#39;);</span><br></pre></td></tr></table></figure>

<p>然后我们分别执行如下三条语句：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">explain SELECT * from t_user WHERE account &#x3D; &#39;zhangsan&#39;;</span><br><span class="line">explain SELECT * from t_user WHERE account &#x3D; &#39;zhangsan&#39; and age &#x3D; 11 ;</span><br><span class="line">explain SELECT * from t_user WHERE account &#x3D; &#39;zhangsan&#39; and age &#x3D; 11 and nickname &#x3D; &#39;张三&#39;;</span><br></pre></td></tr></table></figure>

<p>执行结果如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/image-20201217133944757.png" alt="image-20201217133944757"></p>
<p><img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/image-20201217134003779.png" alt="image-20201217134003779"></p>
<p><img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/image-20201217134024741.png" alt="image-20201217134024741"></p>
<p>​        从上图中我们能发现，三条语句分别走了一个(16*4 + 2 + 1)、两个((16*4 + 2 + 1) + 4 + 1)、三个索引((16*4 + 2 + 1) + 4 + 1 + (16*4 + 2 + 1))。所以正常情况下，我们建立了索引以后，使用时是会生效的，但是在很多情况下，使用的不恰当，我们哪怕建立了索引，查询时可能也是无法生效的。</p>
<h4 id="最左前缀法则"><a href="#最左前缀法则" class="headerlink" title="最左前缀法则"></a>最左前缀法则</h4><p>​        在上一篇文章(<a href="./c468c6f9.html">MySQL索引</a>)中，介绍了<strong>联合索引</strong>最左前缀以及为什么不符合最左前缀的索引会失效的问题，忘记了的话可以回去回顾一下。简而言之就是<strong>联合索引</strong>查询<strong>要从索引的最左前列开始并且不跳过索引中的列，索引才会生效，且范围查询(&gt;、&lt;、between、like左匹配)等查询条件后的索引会生效</strong>，常见情况总结：</p>
<p>索引生效的情况：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT * from t_user WHERE account &#x3D; &#39;zhangsan&#39; and age &#x3D; 11;</span><br><span class="line">SELECT * from t_user WHERE account &#x3D; &#39;zhangsan&#39; and age &#x3D; 11 and nickname &#x3D; &#39;张三&#39;;</span><br></pre></td></tr></table></figure>

<p>索引不生效的情况：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT * from t_user WHERE age &#x3D; 11; -- 不是account起始，不走索引</span><br><span class="line">SELECT * from t_user WHERE age &#x3D; 11 and nickname &#x3D; &#39;张三&#39;; -- 不是account起始，不走索引</span><br></pre></td></tr></table></figure>

<p>部分索引失效的情况：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT * from t_user WHERE account &#x3D; &#39;zhangsan&#39; and age &gt; 10 and nickname &#x3D; &#39;张三&#39;; -- age使用了范围查询，只走了account和age两个索引,nickname索引失效</span><br></pre></td></tr></table></figure>

<h4 id="索引列上做计算、函数导致索引失效"><a href="#索引列上做计算、函数导致索引失效" class="headerlink" title="索引列上做计算、函数导致索引失效"></a>索引列上做计算、函数导致索引失效</h4><p>不能在查询条件上做计算或者使用函数，不然索引会失效，例如：</p>
<blockquote>
<p>explain SELECT * from t_user WHERE left(account,4) = ‘zhangsan’;</p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/image-20201217140337085.png" alt="image-20201217140337085"></p>
<h4 id="隐式转换导致索引失效"><a href="#隐式转换导致索引失效" class="headerlink" title="隐式转换导致索引失效"></a>隐式转换导致索引失效</h4><blockquote>
<p>explain SELECT *  from t_user WHERE account = 123;</p>
</blockquote>
<p>​        <code>account</code>是<code>varchar</code>，而查询条件缺使用了整型，会导致隐式转化，使得索引失效。</p>
<p><img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/image-20201217140624328.png" alt="image-20201217140624328"></p>
<p>​        网上都说隐式转化会导致索引失效，但是我测试发现，数值类型使用<code>String</code>查询好像还是能走索引，例如下面的情况，索引就能生效。</p>
<blockquote>
<p>explain SELECT * from t_user WHERE account = ‘zhangsan’ and age = ‘11’;</p>
<p>explain SELECT * from t_user WHERE id = ‘1’;</p>
</blockquote>
<p>​        查阅<a href="https://dev.mysql.com/doc/refman/5.7/en/type-conversion.html">官方文档</a>发现好像MySQL在字符串到数字隐式转换时情况比较复杂，实践后也发现：</p>
<ol>
<li><p>当操作符<strong>左右两边的数据类型不一致</strong>时，会发生<strong>隐式转换</strong>。</p>
</li>
<li><p>当where查询操作符<strong>左边为数值类型</strong>时发生了隐式转换，转换结果稳定，会走索引，但是不建议这么写。</p>
</li>
<li><p>当where查询操作符<strong>左边为字符类型</strong>时发生了隐式转换，那么会导致索引失效。</p>
<p>字符串转换为数值类型时，非数字开头的字符串会转化为<code>0</code>，以数字开头的字符串会截取从第一个字符到第一个非数字内容为止的值为转化结果，例如以下查询结果都是1。</p>
<blockquote>
<p>select ‘123aaa’ = 123;<br>select ‘123’ = 123;<br>select ‘aaa123’ = 0;</p>
</blockquote>
</li>
</ol>
<p><strong>注：不管怎样，还是建议规范写，避免发生隐式转化</strong></p>
<h4 id="对于频繁的查询优先考虑使用覆盖索引"><a href="#对于频繁的查询优先考虑使用覆盖索引" class="headerlink" title="对于频繁的查询优先考虑使用覆盖索引"></a>对于频繁的查询优先考虑使用覆盖索引</h4><blockquote>
<p>覆盖索引：就是包含了所有查询字段 (where,select,ordery by,group by 包含的字段) 的索引</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT account,age,nickname from t_user WHERE account &#x3D; &#39;zhangsan&#39; and age &#x3D; 11 and nickname &#x3D; &#39;张三&#39;; -- 覆盖索引样例</span><br></pre></td></tr></table></figure>

<p><strong>覆盖索引的好处：</strong></p>
<ul>
<li><strong>避免 Innodb 表进行索引的二次查询:</strong> Innodb 是以聚集索引的顺序来存储的，对于 <strong>Innodb</strong> 来说，<strong>二级索引在叶子节点中所保存的是行的主键信息</strong>，如果是用二级索引查询数据的话，在<strong>查找到相应的键值</strong>后，<strong>还要通过主键进行二次查询才能获取我们真实所需要的数据</strong>。而<strong>在覆盖索引中，二级索引的键值中可以获取所有的数据，避免了对主键的二次查询 ，减少了 IO 操作，提升了查询效率。</strong></li>
<li><strong>可以把随机 IO 变成顺序 IO 加快查询效率:</strong> 由于覆盖索引是按键值的顺序存储的，对于 IO 密集型的范围查找来说，对比随机从磁盘读取每一行的数据 IO 要少的多，因此利用覆盖索引在访问时也可以把磁盘的随机读取的 IO 转变成索引查找的顺序 IO。</li>
</ul>
<p><strong>所以在条件允许的情况下，最好不要直接使用select * 。</strong></p>
<h4 id="使用不等于（-或者-lt-gt-）无法使用索引"><a href="#使用不等于（-或者-lt-gt-）无法使用索引" class="headerlink" title="使用不等于（!=或者&lt;&gt;）无法使用索引"></a>使用不等于（!=或者&lt;&gt;）无法使用索引</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">explain SELECT * from t_user WHERE account !&#x3D; &#39;zhangsan&#39;</span><br><span class="line">explain SELECT * from t_user WHERE account &lt;&gt; &#39;zhangsan&#39;</span><br></pre></td></tr></table></figure>

<h4 id="is-null，is-not-null也无法使用索引"><a href="#is-null，is-not-null也无法使用索引" class="headerlink" title="is null，is not null也无法使用索引"></a>is null，is not null也无法使用索引</h4><p>​        这个也不是绝对的，研究透再写。</p>
<h4 id="like左模糊查询mysql索引失效"><a href="#like左模糊查询mysql索引失效" class="headerlink" title="like左模糊查询mysql索引失效"></a>like左模糊查询mysql索引失效</h4><blockquote>
<p>explain SELECT * from t_user WHERE account like ‘%zhangsan’ and age  = 11 </p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/image-20201217145539399.png" alt="image-20201217145539399"></p>
<p>右模糊可以生效</p>
<blockquote>
<p>explain SELECT * from t_user WHERE account like ‘zhang%’ and age  = 11 </p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/image-20201217145701674.png" alt="image-20201217145701674"></p>
<p><strong>Q：</strong>如何解决带左前缀like索引失效问题？ </p>
<p><strong>A：</strong></p>
<ul>
<li>使用覆盖索引，查询字段必须是建立覆盖索引字段 </li>
</ul>
<blockquote>
<p>SELECT account,age from t_user WHERE account like ‘%zhangsan’ and age  = 11;</p>
</blockquote>
<ul>
<li>借助其它数据库或搜索工具</li>
</ul>
<h4 id="少用or或in"><a href="#少用or或in" class="headerlink" title="少用or或in"></a>少用or或in</h4><p>​        用它查询时，mysql不一定使用索引，mysql内部优化器会根据检索比例、 表大小等多个因素整体评估是否使用索引。</p>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL索引</title>
    <url>/posts/c468c6f9.html</url>
    <content><![CDATA[<blockquote>
<p>MySQL索引使用的数据结构主要有<strong>BTree</strong>索引和哈希索引 。对于哈希索引来说，底层的数据结构就是哈希表，因此在绝大多数需求为单条记录查询的时候，可以选择哈希索引，查询性能最快;其余大部分场景，建议选择BTree索引。</p>
</blockquote>
<h1 id="MySQL索引介绍"><a href="#MySQL索引介绍" class="headerlink" title="MySQL索引介绍"></a>MySQL索引介绍</h1><h2 id="底层结构"><a href="#底层结构" class="headerlink" title="底层结构"></a>底层结构</h2><h3 id="MySQL有哪些索引结构？"><a href="#MySQL有哪些索引结构？" class="headerlink" title="MySQL有哪些索引结构？"></a>MySQL有哪些索引结构？</h3><p>​    hash、BTree</p>
<h3 id="为什么哈希表、二叉树、红黑树、B树、B-树都可以优化查询，为何Mysql独独喜欢B-树？"><a href="#为什么哈希表、二叉树、红黑树、B树、B-树都可以优化查询，为何Mysql独独喜欢B-树？" class="headerlink" title="为什么哈希表、二叉树、红黑树、B树、B+树都可以优化查询，为何Mysql独独喜欢B+树？"></a>为什么哈希表、二叉树、红黑树、B树、B+树都可以优化查询，为何Mysql独独喜欢B+树？</h3><ul>
<li><p><strong>为什么不选哈希表呢？</strong></p>
<ul>
<li>哈希索引没办法利用索引完成排序。</li>
<li>不能进行多字段查询。</li>
<li>在有大量重复键值的情况下，哈希索引的效率也是极低的（出现哈希碰撞问题）。</li>
<li>hash因为散列计算之后是乱序的，所以不支持范围查询。</li>
</ul>
</li>
<li><p><strong>为什么不用二叉树</strong></p>
<p>二叉树在的结构导致他在对<strong>递增</strong>数据索引时让树的高度变得很长，就类似于链表，所以不适合。</p>
</li>
<li><p><strong>为什么不用平衡二叉树或者红黑树</strong></p>
<p>平衡二叉树或红黑树与普通二叉树不同的是当一棵树的左右子树高度差 &gt; 1 时，它会进行<strong>自旋</strong>操作，保持树的平衡。它支持<strong>精确查找和范围查找（回旋查找）</strong>，但是主要原因还是因为<strong>树的深度依旧很大（不可控）</strong>，查找时IO操作可能会很多，所以不考虑。</p>
</li>
<li><p><strong>为什么不用B树</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L09vb29fbXVtdXhp,size_16,color_FFFFFF,t_70-20201113140903381.png" alt="在这里插入图片描述"></p>
<p>虽然有优化，即一个节点上能存储更多的数据，但是B数的每个节点上还附带了数据信息，而一个大节点所占用的空间是一定的，所以当数据信息比较大时，树的高度依旧不是很可控，相对B+树来说，<strong>IO操作依旧比B+多，而且范围查找也需要回旋查找，查询效率不是最优。</strong></p>
</li>
<li><p><strong>为什么用B+树</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L09vb29fbXVtdXhp,size_16,color_FFFFFF,t_70-20201113103933243.png" alt="在这里插入图片描述"></p>
<p>1、 <strong>B+树的磁盘读写代价更低</strong>：B+树的内部节点并没有指向关键字具体信息的指针，因此其内部节点相对B树更小，如果把所有同一内部节点的关键字存放在同一盘块中，那么盘块所能容纳的关键字数量也越多，一次性读入内存的需要查找的关键字也就越多，相对IO读写次数就降低了。</p>
<p>2、<strong>B+树的查询效率更加稳定</strong>：由于<strong>非终结点并不存储数据信息</strong>，而<strong>只是叶子结点中关键字的索引</strong>。所以<strong>任何关键字的查找必须走一条从根结点到叶子结点的路</strong>。所有关键字查询的路径长度相同，导致每一个数据的查询效率相当。</p>
<p>3、<strong>B+树更便于遍历</strong>：由于B+树的数据都存储在叶子结点中，分支结点均为索引，方便扫库，只需要扫一遍叶子结点即可，但是B树因为其分支结点同样存储着数据，我们要找到具体的数据，需要进行一次中序遍历按序来扫，所以B+树更加适合在区间查询的情况，所以通常B+树用于数据库索引。</p>
<p>4、<strong>B+树更适合基于范围的查询</strong>：B树在提高了IO性能的同时并没有解决元素遍历效率低下的问题，正是为了解决这个问题，B+树应运而生。B+树只需要去遍历叶子节点就可以实现整棵树的遍历。而且在数据库中基于范围的查询是非常频繁的，而B树不支持这样的操作或者说效率太低。</p>
</li>
</ul>
<h3 id="B-树中一个节点到底多大合适？"><a href="#B-树中一个节点到底多大合适？" class="headerlink" title="B+树中一个节点到底多大合适？"></a>B+树中一个节点到底多大合适？</h3><blockquote>
<p><strong>B+树中一个节点为一页或页的倍数最为合适</strong></p>
</blockquote>
<p>因为如果一个节点的大小小于1页，那么读取这个节点的时候其实也会读出1页，造成资源的浪费。如果一个节点的大小大于1页，比如1.2页，那么读取这个节点的时候会读出2页，也会造成资源的浪费。所以为了不造成浪费，所以最后把一个节点的大小控制在1页、2页、3页、4页等倍数页大小最为合适。</p>
<h2 id="如何创建索引"><a href="#如何创建索引" class="headerlink" title="如何创建索引"></a>如何创建索引</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 方式1 CREATE INDEX 索引名称 on 表名(字段名,字段名,.....);</span><br><span class="line">CREATE INDEX idx_name_phone on user_innodb(name,phone);</span><br><span class="line">-- 方式2 alter table 表名 add index 索引名称(字段名,字段名,.....)</span><br><span class="line">alter table user_innodb add index index_name(name,phone)</span><br></pre></td></tr></table></figure>

<h2 id="什么是回表，如何避免？"><a href="#什么是回表，如何避免？" class="headerlink" title="什么是回表，如何避免？"></a>什么是回表，如何避免？</h2><blockquote>
<p>说到回表，那就有必要先了解一下聚簇索引和非聚簇索引了</p>
</blockquote>
<h3 id="聚簇索引和非聚簇索引"><a href="#聚簇索引和非聚簇索引" class="headerlink" title="聚簇索引和非聚簇索引"></a>聚簇索引和非聚簇索引</h3><ul>
<li><p><strong>聚簇索引</strong></p>
<p>　　<strong>聚簇索引就是按照每张表的主键构造一棵B+树，同时叶子节点中存放的就是整张表的行记录数据</strong>，也将聚集索引的叶子节点称为数据页。这个特性决定了索引组织表中数据也是索引的一部分，<strong>每张表只能拥有一个聚簇索引。</strong></p>
<p>  　　Innodb通过主键聚集数据，如果没有定义主键，innodb会选择非空的唯一索引代替。如果没有这样的索引，innodb会隐式的定义一个主键来作为聚簇索引。</p>
<p><strong>聚簇索引的优缺点</strong></p>
<p>　　<strong>优点：</strong></p>
<p>　　　　1.<strong>数据访问更快</strong>，因为聚簇索引将索引和数据保存在同一个B+树中，因此从聚簇索引中获取数据比非聚簇索引更快</p>
<p>　　　　2.聚簇索引对于主键的排序查找和范围查找速度非常快<br>　　<strong>缺点：</strong></p>
<p>　　　　1.插入速度严重依赖于插入顺序，按照主键的<strong>顺序插入</strong>是最快的方式，否则将会出现页分裂，严重影响性能。因此，对于InnoDB表，我们一般都会定义一个<strong>自增的ID列为主键</strong><br>　　　　2.<strong>更新主键的代价很高</strong>，因为将会导致被更新的行移动。因此，对于InnoDB表，我们一般定义主键为不可更新。<br>　　　　3.二级索引访问需要两次索引查找，第一次找到主键值，第二次根据主键值找到行数据。</p>
</li>
<li><p><strong>非聚簇索引</strong></p>
<p>MySQL innodb的主键索引是簇集索引，也就是索引的叶子节点存的是整个单条记录的所有字段值，所以通俗点讲，<strong>不是主键索引的就是非簇集索引，非簇集索引的叶子节点存的是主键字段的值。</strong></p>
</li>
</ul>
<h3 id="什么是回表？"><a href="#什么是回表？" class="headerlink" title="什么是回表？"></a>什么是回表？</h3><blockquote>
<p>回表大概就是我们有个主键为Id的索引，和一个普通a字段的索引。执行的流程是先查询到a索引上的数据，然后找到他的id，最后利用id去主键索引，找到id对应的值。所以回到主键索引树搜索的过程，就是<strong>回表</strong>。</p>
</blockquote>
<p>例如：表t_test有id,a,b三个字段，其中id是主键，a上建了索引，然后编写sql语句</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT * FROM t_test WHERE id&#x3D;1</span><br></pre></td></tr></table></figure>

<p>这样不会产生回表，因为所有的数据在a的索引树中均能找到</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT * FROM t_test WHERE a&#x3D;&#39;aaa&#39;</span><br></pre></td></tr></table></figure>

<p>这样就会产生回表，因为where条件是a字段，那么会去a的索引树里查找数据，但a的索引里面只有id，a两个字段的值，没有b，那么这个查询为了取到b字段，就要取出主键id的值，然后去id的索引树去找b字段的数据。查了两个索引树，这就叫回表。</p>
<ul>
<li><p>如何避免回表？</p>
<ul>
<li><p>用主键搜索</p>
</li>
<li><p>只查询被联合索引覆盖的字段</p>
</li>
</ul>
</li>
</ul>
<h2 id="最左前缀"><a href="#最左前缀" class="headerlink" title="最左前缀"></a>最左前缀</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><ul>
<li>索引可以简单如一个列 (a)，也可以复杂如多个列 (a,b,c,d)，即联合索引。</li>
<li>如果是联合索引，那么key也由多个列组成，同时，索引只能用于查找key是否<strong>存在（相等）</strong>，遇到范围查询 (&gt;、&lt;、between、like左匹配)等就<strong>不能进一步匹配</strong>了，后续退化为线性查找。</li>
<li>因此，<strong>列的排列顺序决定了可命中索引的列数</strong>。</li>
</ul>
<p><strong>例子：</strong></p>
<ul>
<li>如有索引 (a,b,c,d)，查询条件 a=1 and b=2 and c&gt;3 and d=4，则会在每个节点依次命中a、b、c，无法命中d。(c已经是范围查询了，d肯定是排不了序了)</li>
</ul>
<h3 id="为什么不符合最左前缀的索引会失效？"><a href="#为什么不符合最左前缀的索引会失效？" class="headerlink" title="为什么不符合最左前缀的索引会失效？"></a>为什么不符合最左前缀的索引会失效？</h3><p>首先我们看看联合索引的结构</p>
<p><img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/image-20201113114147955.png" alt="image-20201113114147955"></p>
<p>上图我们建立了(a, b)联合索引在 B+Tree 中是复合的数据结构，它是按照从左到右的顺序来建立搜索树的 （a 在左边，b 在右边）。 从这张图可以看出来，<strong>a 是有序的，b 是无序的。且当 a 相等的时候，b才是有序的。</strong> </p>
<p>这个时候我们使用 where a ‘123’ and b = ‘456’去查询数据的时候，B+Tree 会优先比较 a 来确定下一步应该搜索的方向，往左还是往右。如果 a 相同的时候再比较 b。但是如果查询条件没有 a，就不知道第一步应该查哪个点，因为建立搜索树的时候 a 是第一个比较因子，所以用不到索引。</p>
<h2 id="前缀索引"><a href="#前缀索引" class="headerlink" title="前缀索引"></a>前缀索引</h2><p>当字段值比较长的时候，建立索引会消耗很多的空间，搜索起来也会很慢。我们可以通过截取字段的前面一部分内容建立索引，这个就叫前缀索引。 </p>
<p>创建一张商户表，因为地址字段比较长，在地址字段上建立前缀索引： </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table shop(address varchar(120) not null); </span><br><span class="line">alter table shop add key (address(12)); </span><br></pre></td></tr></table></figure>

<p>问题是，截取多少呢？截取得多了，达不到节省索引存储空间的目的，截取得少了，重复内容太多，字段的散列度（选择性）会降低。怎么计算不同的长度的选择性呢？ </p>
<p>先看一下字段在全部数据中的选择度： </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select count(distinct address) &#x2F; count(*) from shop; </span><br></pre></td></tr></table></figure>

<p>通过不同长度去计算，与全表的选择性对比： </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT</span><br><span class="line">	count(</span><br><span class="line">	DISTINCT LEFT ( address, 10 ))&#x2F; count(*) AS sub10,</span><br><span class="line">	count(</span><br><span class="line">	DISTINCT LEFT ( address, 11 ))&#x2F; count(*) AS sub11,</span><br><span class="line">	count(</span><br><span class="line">	DISTINCT LEFT ( address, 12 ))&#x2F; count(*) AS sub12,</span><br><span class="line">	count(</span><br><span class="line">	DISTINCT LEFT ( address, 13 ))&#x2F; count(*) AS sub13 </span><br><span class="line">FROM</span><br><span class="line">	shop;</span><br></pre></td></tr></table></figure>

<h2 id="索引添加下推（ICP）"><a href="#索引添加下推（ICP）" class="headerlink" title="索引添加下推（ICP）"></a>索引添加下推（ICP）</h2><p>再来看这么一张表，在 last_name 和 first_name 上面创建联合索引。 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DROP TABLE  IF EXISTS employees;</span><br><span class="line"></span><br><span class="line">CREATE TABLE &#96;employees&#96; (</span><br><span class="line">	&#96;emp_no&#96; int(11) NOT NULL,</span><br><span class="line">	&#96;birth_date&#96; date NULL,</span><br><span class="line">	&#96;first_name&#96; varchar(14) NOT NULL,</span><br><span class="line">	&#96;last_name&#96; varchar(16) NOT NULL,</span><br><span class="line">	&#96;gender&#96; enum(&#39;M&#39;, &#39;F&#39;) NOT NULL,</span><br><span class="line">	&#96;hire_date&#96; date NULL,</span><br><span class="line">	PRIMARY KEY (&#96;emp_no&#96;)</span><br><span class="line">) ENGINE &#x3D; InnoDB CHARSET &#x3D; latin1;</span><br><span class="line"></span><br><span class="line">ALTER TABLE employees ADD INDEX idx_lastname_firstname (last_name, first_name);</span><br><span class="line"></span><br><span class="line">INSERT INTO &#96;employees&#96; (&#96;emp_no&#96;, &#96;birth_date&#96;, &#96;first_name&#96;, &#96;last_name&#96;, &#96;gender&#96;, &#96;hire_date&#96;) VALUES (1, NULL, &#39;698&#39;, &#39;liu&#39;, &#39;F&#39;, NULL);</span><br><span class="line"></span><br><span class="line">INSERT INTO &#96;employees&#96; (&#96;emp_no&#96;, &#96;birth_date&#96;, &#96;first_name&#96;, &#96;last_name&#96;, &#96;gender&#96;, &#96;hire_date&#96;)VALUES (2, NULL, &#39;d99&#39;, &#39;zheng&#39;, &#39;F&#39;, NULL);</span><br><span class="line"></span><br><span class="line">INSERT INTO &#96;employees&#96; (&#96;emp_no&#96;, &#96;birth_date&#96;, &#96;first_name&#96;, &#96;last_name&#96;, &#96;gender&#96;, &#96;hire_date&#96;)VALUES (3, NULL, &#39;e08&#39;, &#39;huang&#39;, &#39;F&#39;, NULL);</span><br><span class="line"></span><br><span class="line">INSERT INTO &#96;employees&#96; (&#96;emp_no&#96;, &#96;birth_date&#96;, &#96;first_name&#96;, &#96;last_name&#96;, &#96;gender&#96;, &#96;hire_date&#96;)VALUES (4, NULL, &#39;59d&#39;, &#39;lu&#39;, &#39;F&#39;, NULL);</span><br><span class="line"></span><br><span class="line">INSERT INTO &#96;employees&#96; (&#96;emp_no&#96;, &#96;birth_date&#96;, &#96;first_name&#96;, &#96;last_name&#96;, &#96;gender&#96;, &#96;hire_date&#96;)VALUES (5, NULL, &#39;0dc&#39;, &#39;yu&#39;, &#39;F&#39;, NULL);</span><br><span class="line"></span><br><span class="line">INSERT INTO &#96;employees&#96; (&#96;emp_no&#96;, &#96;birth_date&#96;, &#96;first_name&#96;, &#96;last_name&#96;, &#96;gender&#96;, &#96;hire_date&#96;)VALUES (6, NULL, &#39;989&#39;, &#39;wang&#39;, &#39;F&#39;, NULL);</span><br><span class="line"></span><br><span class="line">INSERT INTO &#96;employees&#96; (&#96;emp_no&#96;, &#96;birth_date&#96;, &#96;first_name&#96;, &#96;last_name&#96;, &#96;gender&#96;, &#96;hire_date&#96;)VALUES (7, NULL, &#39;e38&#39;, &#39;wang&#39;, &#39;F&#39;, NULL);</span><br><span class="line"></span><br><span class="line">INSERT INTO &#96;employees&#96; (&#96;emp_no&#96;, &#96;birth_date&#96;, &#96;first_name&#96;, &#96;last_name&#96;, &#96;gender&#96;, &#96;hire_date&#96;)VALUES (8, NULL, &#39;0zi&#39;, &#39;wang&#39;, &#39;F&#39;, NULL);</span><br><span class="line"></span><br><span class="line">INSERT INTO &#96;employees&#96; (&#96;emp_no&#96;, &#96;birth_date&#96;, &#96;first_name&#96;, &#96;last_name&#96;, &#96;gender&#96;, &#96;hire_date&#96;)VALUES (9, NULL, &#39;dc9&#39;, &#39;xie&#39;, &#39;F&#39;, NULL);</span><br><span class="line"></span><br><span class="line">INSERT INTO &#96;employees&#96; (&#96;emp_no&#96;, &#96;birth_date&#96;, &#96;first_name&#96;, &#96;last_name&#96;, &#96;gender&#96;, &#96;hire_date&#96;)VALUES (10, NULL, &#39;5ba&#39;, &#39;zhou&#39;, &#39;F&#39;, NULL);</span><br></pre></td></tr></table></figure>

<p><strong>关闭 ICP：(测试用)</strong> </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">set optimizer_switch&#x3D;&#39;index_condition_pushdown&#x3D;off&#39;; </span><br></pre></td></tr></table></figure>

<p><strong>查看参数：</strong> </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show variables like &#39;optimizer_switch&#39;; </span><br></pre></td></tr></table></figure>

<p>现在我们要查询所有姓 wang，并且名字最后一个字是 zi 的员工，比如王胖子，王瘦子。查询的 SQL： </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from employees where last_name&#x3D;&#39;wang&#39; and first_name LIKE &#39;%zi&#39; ; </span><br></pre></td></tr></table></figure>

<p>这条 SQL 有两种执行方式： </p>
<p>1、根据联合索引查出所有姓 wang 的二级索引数据，然后回表，到主键索引上查询 全部符合条件的数据（3 条数据）。然后返回给 Server 层，在 Server 层过滤出名字以 zi 结尾的员工。 </p>
<p>2、根据联合索引查出所有姓 wang 的二级索引数据（3 个索引），然后从二级索引中筛选出 first_name 以 zi 结尾的索引（1 个索引），然后再回表，到主键索引上查询全部符合条件的数据（1 条数据），返回给 Server 层。 </p>
<p><strong>很明显，第二种方式到主键索引上查询的数据更少。</strong> </p>
<p>注意，<strong>索引的比较是在存储引擎进行的，数据记录的比较，是在 Server 层进行的。</strong>而当 first_name 的条件不能用于索引过滤时，Server 层不会把 first_name 的条件传递 给存储引擎，所以读取了两条没有必要的记录。 这时候，如果满足 last_name=’wang’的记录有 100000 条，就会有 99999 条没有必要读取的记录。 </p>
<p><strong>测试：</strong></p>
<p><strong>执行分析SQL：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">explain select * from employees where last_name&#x3D;&#39;wang&#39; and first_name LIKE &#39;%zi&#39; ;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/image-20201113150329640.png" alt="image-20201113150329640"></p>
<p>Using Where 代表从存储引擎取回的数据不全部满足条件，需要在 Server 层过滤。 </p>
<p>先用 last_name 条件进行索引范围扫描，读取数据表记录，然后进行比较，检查是否符合 first_name LIKE ‘%zi’ 的条件。此时 3 条中只有 1 条符合条件。 </p>
<p><strong>开启 ICP：</strong> </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">set optimizer_switch&#x3D;&#39;index_condition_pushdown&#x3D;on&#39;; </span><br></pre></td></tr></table></figure>

<p><strong>再次执行上面的SQL分析</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/image-20201113150541648.png" alt="image-20201113150541648"></p>
<p>把<code>first_name LIKE &#39;%zi&#39;</code>下推给存储引擎后，只会从数据表读取所需的 1 条记录。 </p>
<p><strong>注：</strong>索引条件下推（Index Condition Pushdown）是5.6 以后完善的功能。只适用于<strong>二级索引</strong>。ICP 的目标是减少访问表的完整行的读数量从而减少 I/O 操作。 </p>
<h2 id="MySQL-数据存储文件及索引数据结构"><a href="#MySQL-数据存储文件及索引数据结构" class="headerlink" title="MySQL 数据存储文件及索引数据结构"></a>MySQL 数据存储文件及索引数据结构</h2><blockquote>
<p>每个数据库有一个目录，我们新建了一个叫做 db_test 的数据库，那么这里就有一个db_test 的文件夹。 </p>
<p>这个数据库里面我们又建了 5 张表：archive、innodb、memory、myisam、csv。 我们进入 db_test 的目录，就能发现里面有一些跟我们创建的表名对应的文件。 区别如下：</p>
<p>每张 InnoDB 的表有两个文件（.frm 和.ibd），MyISAM 的表 有三个文件（.frm、.MYD、.MYI）。</p>
</blockquote>
<p>有一个是相同的文件：.frm。 .frm 是 MySQL 里面表结构定义的文件，不管你建表的时候选用任何一个存储引擎都会生成。</p>
<h3 id="MyISAM（非聚集）"><a href="#MyISAM（非聚集）" class="headerlink" title="MyISAM（非聚集）"></a>MyISAM（非聚集）</h3><p><strong>注：MyISAM索引文件和数据文件是分离的（非聚集）</strong></p>
<p>在 MyISAM 里面，<strong>除了.frm文件</strong>另外有两个文件： </p>
<ul>
<li><p><strong>.MYD 文件：D代表 Data，是 MyISAM 的数据文件，存放数据记录</strong>，比如 archive 表的所有的表数据。 </p>
</li>
<li><p><strong>.MYI 文件： I代表 Index，是 MyISAM 的索引文件，存放索引</strong>，比如我们在 id 字段上面创建了一个主键索引，那么主键索引就是在这个索引文件里面。 </p>
</li>
</ul>
<p>也就是说，在 <strong>MyISAM 里面，索引和数据是两个独立的文件</strong>。 那我们怎么根据索引找到数据呢？ MyISAM 的 B+Tree 里面，<strong>叶子节点存储的是数据文件对应的磁盘地址</strong>。所以从<strong>索引文件.MYI 中找到键值后，会到数据文件.MYD 中获取相应的数据记录</strong>。</p>
<img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/image-20201113140159755.png" alt="image-20201113140159755" style="zoom:50%;" />

<p>这是主键索引，在 MyISAM 里面，辅助索引也在这个.MYI 文件里面。 辅助索引跟主键索引存储和检索数据的方式是没有任何区别的，一样是在索引文件 里面找到磁盘地址，然后到数据文件里面获取数据。 </p>
<img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/image-20201113140344683.png" alt="image-20201113140344683" style="zoom:50%;" />

<h3 id="InnoDB-（聚集）"><a href="#InnoDB-（聚集）" class="headerlink" title="InnoDB （聚集）"></a>InnoDB （聚集）</h3><p>InnoDB <strong>除了.frm文件外</strong>只有一个文件（.ibd 文件），这个<strong>文件本身就按按照B+树组织的一个索引结构的文件</strong>，那索引放在哪里呢？ 在 InnoDB 里面，它是以主键为索引来组织数据的存储的，所以索引文件和数据文 件是同一个文件，都在.ibd 文件里面。 在 InnoDB 的<strong>主键索引的叶子节点上，包含了索引对应的完整数据记录</strong>。</p>
<img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/image-20201113140538497.png" alt="image-20201113140538497" style="zoom:50%;" />

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h3 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h3><h4 id="问：为什么InnoDB表必须有主键。并且推荐使用整型的自增主键："><a href="#问：为什么InnoDB表必须有主键。并且推荐使用整型的自增主键：" class="headerlink" title="问：为什么InnoDB表必须有主键。并且推荐使用整型的自增主键："></a>问：为什么InnoDB表必须有主键。并且推荐使用整型的自增主键：</h4><p>1、如果设置了主键，那么InnoDB会选择主键作为聚集索引、如果没有显式定义主键，则InnoDB会选择第一个不包含有NULL值的唯一索引作为主键索引、如果也没有这样的唯一索引，则InnoDB会选择内置6字节长的ROWID作为隐含的聚集索引(ROWID随着行记录的写入而主键递增)。</p>
<p>2、如果表使用自增主键<br>那么每次插入新的记录，记录就会顺序添加到当前索引节点的后续位置，主键的顺序按照数据记录的插入顺序排列，自动有序。当一页写满，就会自动开辟一个新的页</p>
<p>3、如果使用非自增主键（如果身份证号或学号等）<br>由于每次插入主键的值近似于随机，因此每次新纪录都要被插到现有索引页得中间某个位置，此时MySQL不得不为了将新记录插到合适位置而移动数据，甚至目标页面可能已经被回写到磁盘上而从缓存中清掉，此时又要从磁盘上读回来，这增加了很多开销，同时频繁的移动、分页操作造成了大量的碎片，得到了不够紧凑的索引结构，后续不得不通过OPTIMIZE TABLE来重建表并优化填充页面。</p>
<h4 id="问：为什么非主键索引结构叶子结点存储的是主键值："><a href="#问：为什么非主键索引结构叶子结点存储的是主键值：" class="headerlink" title="问：为什么非主键索引结构叶子结点存储的是主键值："></a>问：为什么非主键索引结构叶子结点存储的是主键值：</h4><p>减少了出现行移动或者数据页分裂时二级索引的维护工作（当数据需要更新的时候，二级索引不需要修改，只需要修改聚簇索引，一个表只能有一个聚簇索引，其他的都是二级索引，这样只需要修改聚簇索引就可以了，不需要重新构建二级索引）</p>
<p>聚簇索引也称为主键索引，其索引树的叶子节点中存的是整行数据，表中行的物理顺序与键值的逻辑（索引）顺序相同。一个表只能包含一个聚集索引。因为索引（目录）只能按照一种方法进行排序。</p>
<p>非聚簇索引（普通索引）的叶子节点内容是主键的值。在 InnoDB 里，非主键索引也被称为二级索引（secondary index）。</p>
<h4 id="为什么Mysql存储引擎中默认每个页的大小为16KB？"><a href="#为什么Mysql存储引擎中默认每个页的大小为16KB？" class="headerlink" title="为什么Mysql存储引擎中默认每个页的大小为16KB？"></a>为什么Mysql存储引擎中默认每个页的大小为16KB？</h4><p>假设我们一行数据大小为1K，那么一页就能存16条数据，包含指针+数据+索引。假设一行数据大小为1K，那么一页（1个叶子节点）就能存16条数据；对于非叶子节点，假设ID为bigint类型那么长度为8B，指针大小在Innodb源码中为6B，一共就是14B，那么一页里就可以存储16K/14=1170个(主键+指针)，这样一颗高度为3的B+树能存储的数据为：1170*1170*16≈2千万级别。</p>
<h4 id="索引建立注意事项"><a href="#索引建立注意事项" class="headerlink" title="索引建立注意事项"></a>索引建立注意事项</h4><ul>
<li><p>索引的个数不要过多–浪费空间，更新变慢</p>
</li>
<li><p>区分度低的字段，例如性别，不要建索引。 –离散度太低，导致扫描行数过多。 </p>
</li>
<li><p>频繁更新的值，不要作为主键或者索引。–页分裂 </p>
</li>
<li><p>避免冗余、重复索引</p>
</li>
<li><p>联合索引，最左前缀</p>
</li>
<li><p>多表join的关联列</p>
</li>
<li><p>区分度最高的放在联合索引的最左侧（区分度=列中不同值的数量/列的总行数）</p>
</li>
<li><p>尽量把字段长度小的列放在联合索引的最左侧（因为字段长度越小，一页能存储的数据量越大，IO 性能也就越好）</p>
</li>
<li><p>使用最频繁的列放到联合索引的左侧（这样可以比较少的建立一些索引）</p>
</li>
<li><p>避免数据类型的隐式转换</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select name,phone from customer where id &#x3D; &#39;111&#39;; # 隐式转换会导致索引失效</span><br></pre></td></tr></table></figure>
</li>
<li><p>禁止对列进行函数转换和计算</p>
</li>
</ul>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>02.Spring IOC</title>
    <url>/posts/288f5944.html</url>
    <content><![CDATA[<h3 id="Spring-IoC-和-DI-简介"><a href="#Spring-IoC-和-DI-简介" class="headerlink" title="Spring IoC 和 DI 简介"></a>Spring IoC 和 DI 简介</h3><h4 id="IoC：Inverse-of-Control（控制反转）"><a href="#IoC：Inverse-of-Control（控制反转）" class="headerlink" title="IoC：Inverse of Control（控制反转）"></a>IoC：Inverse of Control（控制反转）</h4><ul>
<li>读作 <strong>“反转控制”</strong>，更好理解，不是什么技术，而是一种<strong>设计思想</strong>，就是<strong>将原本在程序中手动创建对象的控制权，交由Spring框架来管理。</strong></li>
<li><strong>正控：</strong>若要使用某个对象，需要<strong>自己去负责对象的创建</strong></li>
<li><strong>反控：</strong>若要使用某个对象，只需要<strong>从 Spring 容器中获取需要使用的对象，不关心对象的创建过程</strong>，也就是把<strong>创建对象的控制权反转给了Spring框架</strong></li>
<li><strong>好莱坞法则：</strong> Don’t call me ,I’ll call you</li>
</ul>
<blockquote>
<h4 id="一个例子"><a href="#一个例子" class="headerlink" title="一个例子"></a>一个例子</h4><p>控制反转显然是一个抽象的概念，我们举一个鲜明的例子来说明。</p>
</blockquote>
<blockquote>
<p>在现实生活中，人们要用到一样东西的时候，第一反应就是去找到这件东西，比如想喝新鲜橙汁，在没有饮品店的日子里，最直观的做法就是：买果汁机、买橙子，然后准备开水。值得注意的是：这些都是你自己<strong>“主动”创造</strong>的过程，也就是说一杯橙汁需要你自己创造。</p>
</blockquote>
<blockquote>
<p>然而到了今时今日，由于饮品店的盛行，当我们想喝橙汁时，第一想法就转换成了找到饮品店的联系方式，通过电话等渠道描述你的需要、地址、联系方式等，下订单等待，过一会儿就会有人送来橙汁了。请注意你并没有“主动”去创造橙汁，橙汁是由饮品店创造的，而不是你，然而也完全达到了你的要求，甚至比你创造的要好上那么一些。</p>
</blockquote>
<h4 id="更经典全方位的理解"><a href="#更经典全方位的理解" class="headerlink" title="更经典全方位的理解"></a>更经典全方位的理解</h4><p>要了解<strong>控制反转( Inversion of Control )</strong>, 我觉得有必要先了解软件设计的一个重要思想：<strong>依赖倒置原则（Dependency Inversion Principle ）</strong>。</p>
<p><img src="https://pic3.zhimg.com/v2-d53c75e91d959acbb0d95a835212ada5_r.jpg?source=1940ef5c" alt="img"></p>
<p><strong>什么是依赖倒置原则？</strong>假设我们设计一辆汽车：先设计轮子，然后根据轮子大小设计底盘，接着根据底盘设计车身，最后根据车身设计好整个汽车。这里就出现了一个“依赖”关系：汽车依赖车身，车身依赖底盘，底盘依赖轮子。</p>
<p><img src="https://pic1.zhimg.com/v2-c68248bb5d9b4d64d22600571e996446_r.jpg?source=1940ef5c" alt="img"></p>
<p>这样的设计看起来没问题，但是可维护性却很低。假设设计完工之后，上司却突然说根据市场需求的变动，要我们把车子的轮子设计都改大一码。这下我们就蛋疼了：因为我们是根据轮子的尺寸设计的底盘，轮子的尺寸一改，底盘的设计就得修改；同样因为我们是根据底盘设计的车身，那么车身也得改，同理汽车设计也得改——整个设计几乎都得改！</p>
<p>我们现在换一种思路。我们先设计汽车的大概样子，然后根据汽车的样子来设计车身，根据车身来设计底盘，最后根据底盘来设计轮子。这时候，依赖关系就倒置过来了：轮子依赖底盘， 底盘依赖车身， 车身依赖汽车。</p>
<p><img src="https://pic4.zhimg.com/v2-e64bf72c5c04412f626b21753aa9e1a1_r.jpg?source=1940ef5c" alt="img"></p>
<p>这时候，上司再说要改动轮子的设计，我们就只需要改动轮子的设计，而不需要动底盘，车身，汽车的设计了。</p>
<p>这就是<strong>依赖倒置原则——把原本的高层建筑依赖底层建筑“倒置”过来，变成底层建筑依赖高层建筑。高层建筑决定需要什么，底层去实现这样的需求，但是高层并不用管底层是怎么实现的。</strong>这样就不会出现前面的“牵一发动全身”的情况。</p>
<p><img src="https://pic4.zhimg.com/v2-d53c75e91d959acbb0d95a835212ada5_r.jpg?source=1940ef5c" alt="img"></p>
<p><strong>控制反转（Inversion of Control）</strong> 就是依赖倒置原则的一种代码设计的思路。具体采用的方法就是所谓的<strong>依赖注入（Dependency Injection）</strong>。其实这些概念初次接触都会感到云里雾里的。说穿了，这几种概念的关系大概如下：</p>
<p><img src="https://pic1.zhimg.com/v2-ee924f8693cff51785ad6637ac5b21c1_r.jpg?source=1940ef5c" alt="img"></p>
<p>为了理解这几个概念，我们还是用上面汽车的例子。只不过这次换成代码。我们先定义四个Class，车，车身，底盘，轮胎。然后初始化这辆车，最后跑这辆车。代码结构如下：</p>
<p><img src="https://pic2.zhimg.com/v2-8ec294de7d0f9013788e3fb5c76069ef_r.jpg?source=1940ef5c" alt="img"></p>
<p>这样，就相当于上面第一个例子，上层建筑依赖下层建筑——每一个类的构造函数都直接调用了底层代码的构造函数。假设我们需要改动一下轮胎（Tire）类，把它的尺寸变成动态的，而不是一直都是30。我们需要这样改：</p>
<p><img src="https://pic1.zhimg.com/50/v2-64e8b19eeb70d9cf87c27fe4c5c0fc81_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic4.zhimg.com/v2-64e8b19eeb70d9cf87c27fe4c5c0fc81_r.jpg?source=1940ef5c" alt="img"></p>
<p>由于我们修改了轮胎的定义，为了让整个程序正常运行，我们需要做以下改动：</p>
<p><img src="https://pic4.zhimg.com/v2-82e0c12a1b26f7979ed9241e169affda_r.jpg?source=1940ef5c" alt="img"></p>
<p>由此我们可以看到，仅仅是为了修改轮胎的构造函数，这种设计却需要<strong>修改整个上层所有类的构造函数</strong>！在软件工程中，<strong>这样的设计几乎是不可维护的</strong>——在实际工程项目中，有的类可能会是几千个类的底层，如果每次修改这个类，我们都要修改所有以它作为依赖的类，那软件的维护成本就太高了。</p>
<p>所以我们需要进行控制反转（IoC），及上层控制下层，而不是下层控制着上层。我们用依赖注入（Dependency Injection）这种方式来实现控制反转。<strong>所谓依赖注入，就是把底层类作为参数传入上层类，实现上层类对下层类的“控制</strong>”。这里我们用<strong>构造方法传递的依赖注入方式</strong>重新写车类的定义：</p>
<p><img src="https://pic4.zhimg.com/v2-c920a0540ce0651003a5326f6ef9891d_r.jpg?source=1940ef5c" alt="img"></p>
<p>这里我们再把轮胎尺寸变成动态的，同样为了让整个系统顺利运行，我们需要做如下修改：</p>
<p><img src="https://pic2.zhimg.com/v2-99ad2cd809fcb86dd791ff7f65fb1779_r.jpg?source=1940ef5c" alt="img"></p>
<p>看到没？这里<strong>我只需要修改轮胎类就行了，不用修改其他任何上层类。</strong>这显然是更容易维护的代码。不仅如此，在实际的工程中，这种设计模式还有利于<strong>不同组的协同合作和单元测试：</strong>比如开发这四个类的分别是四个不同的组，那么只要定义好了接口，四个不同的组可以同时进行开发而不相互受限制；而对于单元测试，如果我们要写Car类的单元测试，就只需要Mock一下Framework类传入Car就行了，而不用把Framework, Bottom, Tire全部new一遍再来构造Car。</p>
<p>这里我们是采用的<strong>构造函数传入</strong>的方式进行的依赖注入。其实还有另外两种方法：<strong>Setter传递</strong>和<strong>接口传递</strong>。这里就不多讲了，核心思路都是一样的，都是为了实现<strong>控制反转</strong>。</p>
<p><img src="https://pic1.zhimg.com/v2-861683acac47577c81f2b7493dd05649_r.jpg?source=1940ef5c" alt="img"></p>
<p><img src="https://pic1.zhimg.com/v2-d53c75e91d959acbb0d95a835212ada5_r.jpg?source=1940ef5c" alt="img"></p>
<p>看到这里你应该能理解什么控制反转和依赖注入了。那什么是**控制反转容器(IoC Container)**呢？其实上面的例子中，对车类进行初始化的那段代码发生的地方，就是控制反转容器。</p>
<p><img src="https://pic2.zhimg.com/v2-c845802f9187953ed576e0555f76da42_r.jpg?source=1940ef5c" alt="img"></p>
<p>显然你也应该观察到了，因为采用了依赖注入，在初始化的过程中就不可避免的会写大量的new。这里IoC容器就解决了这个问题。<strong>这个容器可以自动对你的代码进行初始化，你只需要维护一个Configuration（可以是xml可以是一段代码），而不用每次初始化一辆车都要亲手去写那一大段初始化的代码</strong>。这是引入IoC Container的第一个好处。</p>
<p>IoC Container的第二个好处是：<strong>我们在创建实例的时候不需要了解其中的细节。</strong>在上面的例子中，我们自己手动创建一个车instance时候，是从底层往上层new的：</p>
<p><img src="https://pic1.zhimg.com/v2-555b2be7d76e78511a6d6fed3304927f_r.jpg?source=1940ef5c" alt="img"></p>
<p>这个过程中，我们需要了解整个Car/Framework/Bottom/Tire类构造函数是怎么定义的，才能一步一步new/注入。</p>
<p>而IoC Container在进行这个工作的时候是反过来的，它先从最上层开始往下找依赖关系，到达最底层之后再往上一步一步new（有点像深度优先遍历）：</p>
<p><img src="https://pic4.zhimg.com/v2-24a96669241e81439c636e83976ba152_r.jpg?source=1940ef5c" alt="img"></p>
<p>这里IoC Container可以直接隐藏具体的创建实例的细节，在我们来看它就像一个工厂：</p>
<p><img src="https://pic4.zhimg.com/v2-5ca61395f37cef73c7bbe7808f9ea219_r.jpg?source=1940ef5c" alt="img"></p>
<p>我们就像是工厂的客户。我们只需要向工厂请求一个Car实例，然后它就给我们按照Config创建了一个Car实例。我们完全不用管这个Car实例是怎么一步一步被创建出来。</p>
<p>实际项目中，有的Service Class可能是十年前写的，有几百个类作为它的底层。假设我们新写的一个API需要实例化这个Service，我们总不可能回头去搞清楚这几百个类的构造函数吧？IoC Container的这个特性就很完美的解决了这类问题——<strong>因为这个架构要求你在写class的时候需要写相应的Config文件，所以你要初始化很久以前的Service类的时候，前人都已经写好了Config文件，你直接在需要用的地方注入这个Service就可以了</strong>。这大大增加了项目的可维护性且降低了开发难度。</p>
<p><img src="https://pic4.zhimg.com/v2-d53c75e91d959acbb0d95a835212ada5_r.jpg?source=1940ef5c" alt="img"></p>
<p>这里只是很粗略的讲了一下我自己对IoC和DI的理解。主要的目的是在于<strong>最大限度避免晦涩难懂的专业词汇，用尽量简洁，通俗，直观的例子</strong>来解释这些概念。如果让大家能有一个类似“哦！原来就是这么个玩意嘛！”的印象，我觉得就OK了。想要深入了解的话，可以上网查阅一些更权威的资料。这里推荐一下 <a href="https://link.zhihu.com/?target=https://en.wikipedia.org/wiki/Dependency_injection">Dependency injection </a> 和 <a href="https://link.zhihu.com/?target=https://martinfowler.com/articles/injection.html">Inversion of Control Containers and the Dependency Injection pattern</a> 这两篇文章，讲的很好很详细。</p>
<h3 id="Spring-IOC-容器源码分析"><a href="#Spring-IOC-容器源码分析" class="headerlink" title="Spring IOC 容器源码分析"></a>Spring IOC 容器源码分析</h3><h4 id="Spring-IoC-容器的设计"><a href="#Spring-IoC-容器的设计" class="headerlink" title="Spring IoC 容器的设计"></a>Spring IoC 容器的设计</h4><p>Spring IoC 容器的设计主要是基于以下两个接口：</p>
<ul>
<li><strong>BeanFactory</strong></li>
<li><strong>ApplicationContext</strong></li>
</ul>
<p>其中 ApplicationContext 是 BeanFactory 的子接口之一，换句话说：<strong>BeanFactory 是 Spring IoC 容器所定义的最底层接口，</strong>而 ApplicationContext 是其最高级接口之一，并对 BeanFactory 功能做了许多的扩展，所以在<strong>绝大部分的工作场景下</strong>，都会使用 ApplicationContext 作为 Spring IoC 容器。</p>
<p><img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/7896890-539d3860abb6b3f7.png"></p>
<h5 id="BeanFactory"><a href="#BeanFactory" class="headerlink" title="BeanFactory"></a>BeanFactory</h5><p>从上图中我们可以几乎看到， BeanFactory 位于设计的最底层，它提供了 Spring IoC 最底层的设计，为此，我们先来看看该类中提供了哪些方法：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/7896890-ec7f8eb4cc563216.png"></p>
<p>由于这个接口的重要性，所以有必要在这里作一下简短的说明：</p>
<ul>
<li><p>【getBean】 对应了多个方法来获取配置给 Spring IoC 容器的 Bean。<br>① 按照类型拿 bean：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">bean = (Bean) factory.getBean(Bean.class)</span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong> 要求在 Spring 中只配置了一个这种类型的实例，否则报错。（如果有多个那 Spring 就懵了，不知道该获取哪一个）<br>② 按照 bean 的名字拿 bean:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">bean = (Bean) factory.getBean(<span class="string">&quot;beanName&quot;</span>);</span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong> 这种方法不太安全，IDE 不会检查其安全性（关联性）<br>③ 按照名字和类型拿 bean：<strong>（推荐）</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">bean = (Bean) factory.getBean(<span class="string">&quot;beanName&quot;</span>, Bean.class);</span><br></pre></td></tr></table></figure>
</li>
<li><p>【isSingleton】 用于判断是否单例，如果判断为真，其意思是该 Bean 在容器中是作为一个唯一单例存在的。而【isPrototype】则相反，如果判断为真，意思是当你从容器中获取 Bean，容器就为你生成一个新的实例。</p>
<p><strong>注意：</strong> 在默认情况下，【isSingleton】为 ture，而【isPrototype】为 false</p>
</li>
<li><p>关于 type 的匹配，这是一个按 Java 类型匹配的方式</p>
</li>
<li><p>【getAliases】方法是获取别名的方法</p>
</li>
</ul>
<p>这就是 Spring IoC 最底层的设计，所有关于 Spring IoC 的容器将会遵守它所定义的方法</p>
<h5 id="ApplicationContext"><a href="#ApplicationContext" class="headerlink" title="ApplicationContext"></a>ApplicationContext</h5><p>根据 ApplicationContext 的类继承关系图，可以看到 ApplicationContext 接口扩展了许许多多的接口，因此它的功能十分强大，所以在实际应用中常常会使用到的是 ApplicationContext 接口，因为 BeanFactory 的方法和功能较少，而 ApplicationContext 的方法和功能较多。</p>
<p>我们来认识一个 ApplicationContext 的子类——ClassPathXmlApplicationContext。</p>
<ol>
<li>先在【src】目录下创建一个 【bean.xml】 文件：</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">COPY<span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 通过 xml 方式装配 bean --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">&quot;source&quot;</span> <span class="attr">class</span>=<span class="string">&quot;pojo.Source&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;fruit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;橙子&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sugar&quot;</span> <span class="attr">value</span>=<span class="string">&quot;多糖&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;size&quot;</span> <span class="attr">value</span>=<span class="string">&quot;超大杯&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>这里定义了一个 bean ，这样 Spring IoC 容器在初始化的时候就能找到它们，然后使用ClassPathXmlApplicationContext 容器就可以将其初始化：</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">COPYApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;bean.xml&quot;</span>);</span><br><span class="line">Source source = (Source) context.getBean(<span class="string">&quot;source&quot;</span>, Source.class);</span><br><span class="line"></span><br><span class="line">System.out.println(source.getFruit());</span><br><span class="line">System.out.println(source.getSugar());</span><br><span class="line">System.out.println(source.getSize());</span><br></pre></td></tr></table></figure>

<p>这样就会使用 Application 的实现类 <code>ClassPathXmlApplicationContext</code> 去初始化 Spring IoC 容器，然后开发者就可以通过 IoC 容器来获取资源了！</p>
<p><strong>ApplicationContext 常见实现类：</strong></p>
<p><strong>ClassPathXmlApplicationContext：</strong><br>读取classpath中的资源</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">COPYApplicationContext ctx = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br></pre></td></tr></table></figure>

<p><strong>FileSystemXmlApplicationContext:-</strong><br>读取指定路径的资源</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">COPYApplicationContext ac = <span class="keyword">new</span> FileSystemXmlApplicationContext(<span class="string">&quot;c:/applicationContext.xml&quot;</span>);</span><br></pre></td></tr></table></figure>

<p><strong>XmlWebApplicationContext:</strong><br>需要在Web的环境下才可以运行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">COPYXmlWebApplicationContext ac = <span class="keyword">new</span> XmlWebApplicationContext(); <span class="comment">// 这时并没有初始化容器</span></span><br><span class="line">ac.setServletContext(servletContext); <span class="comment">// 需要指定ServletContext对象</span></span><br><span class="line">ac.setConfigLocation(<span class="string">&quot;/WEB-INF/applicationContext.xml&quot;</span>); <span class="comment">// 指定配置文件路径，开头的斜线表示Web应用的根目录</span></span><br><span class="line">ac.refresh(); <span class="comment">// 初始化容器</span></span><br></pre></td></tr></table></figure>

<h5 id="BeanFactory-和-ApplicationContext-的区别："><a href="#BeanFactory-和-ApplicationContext-的区别：" class="headerlink" title="BeanFactory 和 ApplicationContext 的区别："></a>BeanFactory 和 ApplicationContext 的区别：</h5><ul>
<li><p><strong>BeanFactory：</strong> 是Spring中最底层的接口，只提供了最简单的IoC功能,负责配置，创建和管理bean。<br>在应用中，一般不使用 BeanFactory，而推荐使用ApplicationContext（应用上下文），原因如下。</p>
</li>
<li><p><strong>ApplicationContext：</strong></p>
<p>1.继承了 BeanFactory，拥有了基本的 IoC 功能；<br>2.除此之外，ApplicationContext 还提供了以下功能：<br>① 支持国际化；<br>② 支持消息机制；<br>③ 支持统一的资源加载；<br>④ 支持AOP功能；</p>
</li>
</ul>
<h3 id="Spring-IoC-的容器的初始化和依赖注入"><a href="#Spring-IoC-的容器的初始化和依赖注入" class="headerlink" title="Spring IoC 的容器的初始化和依赖注入"></a>Spring IoC 的容器的初始化和依赖注入</h3><p>虽然 Spring IoC 容器的生成十分的复杂，但是大体了解一下 Spring IoC 初始化的过程还是必要的。这对于理解 Spring 的一系列行为是很有帮助的。</p>
<p><strong>注意：</strong> Bean 的定义和初始化在 Spring IoC 容器是两大步骤，它是先定义，然后初始化和依赖注入的。</p>
<ul>
<li><p><strong>Bean 的定义分为 3 步：定位、加载、注册</strong></p>
</li>
<li><p>Resource 定位<br>Spring IoC 容器先根据开发者的配置，进行资源的定位，在 Spring 的开发中，通过 XML 或者注解都是十分常见的方式，定位的内容是由开发者提供的。</p>
</li>
<li><p>BeanDefinition 的加载<br>这个时候只是将 Resource 定位到的信息，保存到 Bean 定义（BeanDefinition）中，此时并不会创建 Bean 的实例</p>
</li>
<li><p>BeanDefinition 的注册<br>这个过程就是将 BeanDefinition 的信息发布到 Spring IoC 容器中<br><strong>注意：</strong>此时仍然没有对应的 Bean 的实例。</p>
</li>
</ul>
<p>做完了以上 3 步，Bean 就在 Spring IoC 容器中被定义了，而没有被初始化，更没有完成依赖注入，也就是没有注入其配置的资源给 Bean，那么它还不能完全使用。</p>
<p>对于初始化和依赖注入，Spring Bean 还有一个配置选项——<strong>【lazy-init】</strong>，其含义就是<strong>是否初始化 Spring Bean</strong>。在没有任何配置的情况下，它的默认值为 default，实际值为 false，也就是 <strong>Spring IoC 默认会自动初始化 Bean</strong>。如果将其设置为 true，那么只有当我们使用 Spring IoC 容器的 getBean 方法获取它时，它才会进行 Bean 的初始化，完成依赖注入。</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://www.zhihu.com/question/23277575/answer/169698662">https://www.zhihu.com/question/23277575/answer/169698662</a></p>
<p><a href="https://www.wmyskxz.com/2018/04/11/spring-xue-xi-2-spring-ioc-xiang-jie/">https://www.wmyskxz.com/2018/04/11/spring-xue-xi-2-spring-ioc-xiang-jie/</a></p>
<p><a href="https://javadoop.com/post/spring-ioc">https://javadoop.com/post/spring-ioc</a></p>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis基础</title>
    <url>/posts/fe29e710.html</url>
    <content><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><h2 id="Redis优缺点"><a href="#Redis优缺点" class="headerlink" title="Redis优缺点"></a>Redis优缺点</h2><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ul>
<li><strong>读写性能优异</strong>， Redis能读的速度是 <code>110000</code> 次/s，写的速度是 <code>81000</code> 次/s。</li>
<li><strong>支持数据持久化</strong>，支持 AOF 和 RDB 两种持久化方式。</li>
<li><strong>支持事务</strong>，Redis 的所有操作都是原子性的，同时 Redis 还支持对几个操作合并后的原子性执行。</li>
<li><strong>数据结构丰富</strong>，除了支持 string 类型的 value 外还支持 hash、set、zset、list 等数据结构。这使得 Redis 很容易被用来解决各种问题，因为我们知道哪些问题可以更好使用地哪些数据类型来处理解决。</li>
<li><strong>支持主从复制</strong>，主机会自动将数据同步到从机，可以进行读写分离。</li>
<li><strong>操作具有原子性</strong>，所有 Redis 操作都是原子操作，这确保如果两个客户端并发访问，Redis 服务器能接收更新的值。</li>
</ul>
<h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ul>
<li>数据库 <strong>容量受到物理内存的限制</strong>，不能用作海量数据的高性能读写，因此 Redis 适合的场景主要局限在较小数据量的高性能操作和运算上。</li>
<li>Redis <strong>不具备自动容错和恢复功能</strong>，主机从机的宕机都会导致前端部分读写请求失败，需要等待机器重启或者手动切换前端的 IP 才能恢复。</li>
<li>主机宕机，宕机前有部分数据未能及时同步到从机，切换 IP 后还会引入数据不一致的问题，降低了 <strong>系统的可用性</strong>。</li>
<li><strong>Redis 较难支持在线扩容</strong>，在集群容量达到上限时在线扩容会变得很复杂。为避免这一问题，运维人员在系统上线时必须确保有足够的空间，这对资源造成了很大的浪费。</li>
</ul>
<h2 id="为什么要用Redis？"><a href="#为什么要用Redis？" class="headerlink" title="为什么要用Redis？"></a>为什么要用Redis？</h2><p>因为传统的关系型数据库如MySQL已经不能适用所有的场景了，比如秒杀的库存扣减，APP首页的访问流量高峰等等，都很容易把数据库打崩，所以引入了缓存中间件。</p>
<h2 id="Redis使用的几个考量点"><a href="#Redis使用的几个考量点" class="headerlink" title="Redis使用的几个考量点"></a>Redis使用的几个考量点</h2><ul>
<li><strong>业务数据常用吗？命中率如何？</strong> 如果命中率很低，就没有必要写入缓存；</li>
<li><strong>该业务数据是读操作多，还是写操作多？</strong> 如果写操作多，频繁需要写入数据库，也没有必要使用缓存；</li>
<li><strong>业务数据大小如何？</strong> 如果要存储几百兆字节的文件，会给缓存带来很大的压力，这样也没有必要；</li>
</ul>
<h2 id="Redis为什么快"><a href="#Redis为什么快" class="headerlink" title="Redis为什么快"></a>Redis为什么快</h2><ul>
<li>完全基于内存，绝大部分请求是纯粹的内存操作，非常快速。它的，数据存在内存中，类似于<strong>HashMap</strong>，<strong>HashMap</strong>的优势就是查找和操作的时间复杂度都是O(1)；</li>
<li>数据结构简单，对数据操作也简单，<strong>Redis</strong>中的数据结构是专门进行设计的；</li>
<li>采用<strong>单线程，避免了不必要的上下文切换和竞争条件</strong>，也不存在多进程或者多线程导致的切换而消耗 <strong>CPU</strong>，不用去考虑各种锁的问题，不存在加锁释放锁操作，没有因为可能出现死锁而导致的性能消耗；</li>
<li><strong>使用多路I/O复用模型，非阻塞IO</strong>；</li>
<li><strong>高效的数据结构，加上底层做了大量优化</strong>：Redis 对于底层的数据结构和内存占用做了大量的优化，例如不同长度的字符串使用不同的结构体表示，HyperLogLog 的密集型存储结构等等</li>
</ul>
<h1 id="配置文件解析"><a href="#配置文件解析" class="headerlink" title="配置文件解析"></a>配置文件解析</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">是否在后台运行；no：不是后台运行</span></span><br><span class="line">daemonize yes</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">是否开启保护模式，默认开启。要是配置里没有指定<span class="built_in">bind</span>和密码。开启该参数后，redis只会本地进行访问，拒绝外部访问。</span></span><br><span class="line">protected-mode yes</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">redis的进程文件</span></span><br><span class="line">pidfile /var/run/redis/redis-server.pid</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">redis监听的端口号。</span></span><br><span class="line">port 6379</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">此参数确定了TCP连接中已完成队列(完成三次握手之后)的长度， 当然此值必须不大于Linux系统定义的/proc/sys/net/core/somaxconn值，默认是511，而Linux的默认参数值是128。当系统并发量大并且客户端速度缓慢的时候，可以将这二个参数一起参考设定。该内核参数默认值一般是128，对于负载很大的服务程序来说大大的不够。一般会将它修改为2048或者更大。在/etc/sysctl.conf中添加:net.core.somaxconn = 2048，然后在终端中执行sysctl -p。</span></span><br><span class="line">tcp-backlog 511</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">指定 redis 只接收来自于该 IP 地址的请求，如果不进行设置，那么将处理所有请求</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="built_in">bind</span> 127.0.0.1</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="built_in">bind</span> 0.0.0.0</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">配置unix socket来让redis支持监听本地连接。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> unixsocket /var/run/redis/redis.sock</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">配置unix socket使用文件的权限</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> unixsocketperm 700</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash"> 此参数为设置客户端空闲超过timeout，服务端会断开连接，为0则服务端不会主动断开连接，不能小于0。</span></span><br><span class="line">timeout 0</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">tcp keepalive参数。如果设置不为0，就使用配置tcp的SO_KEEPALIVE值，使用keepalive有两个好处:检测挂掉的对端。降低中间设备出问题而导致网络看似连接却已经与对端端口的问题。在Linux内核中，设置了keepalive，redis会定时给对端发送ack。检测到对端关闭需要两倍的设置值。</span></span><br><span class="line">tcp-keepalive 0</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">指定了服务端日志的级别。级别包括：debug（很多信息，方便开发、测试），verbose（许多有用的信息，但是没有debug级别信息多），notice（适当的日志级别，适合生产环境），warn（只有非常重要的信息）</span></span><br><span class="line">loglevel notice</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">指定了记录日志的文件。空字符串的话，日志会打印到标准输出设备。后台运行的redis标准输出是/dev/null。</span></span><br><span class="line">logfile /var/log/redis/redis-server.log</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">是否打开记录syslog功能</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> syslog-enabled no</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">syslog的标识符。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> syslog-ident redis</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">日志的来源、设备</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> syslog-facility local0</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">数据库的数量，默认使用的数据库是DB 0。可以通过SELECT命令选择一个db</span></span><br><span class="line">databases 16</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash"> redis是基于内存的数据库，可以通过设置该值定期写入磁盘。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 注释掉“save”这一行配置项就可以让保存数据库功能失效</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 900秒（15分钟）内至少1个key值改变（则进行数据库保存--持久化） </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 300秒（5分钟）内至少10个key值改变（则进行数据库保存--持久化） </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 60秒（1分钟）内至少10000个key值改变（则进行数据库保存--持久化）</span></span><br><span class="line">save 900 1</span><br><span class="line">save 300 10</span><br><span class="line">save 60 10000</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">当RDB持久化出现错误后，是否依然进行继续进行工作，yes：不能进行工作，no：可以继续进行工作，可以通过info中的rdb_last_bgsave_status了解RDB持久化是否有错误</span></span><br><span class="line">stop-writes-on-bgsave-error yes</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">使用压缩rdb文件，rdb文件压缩使用LZF压缩算法，yes：压缩，但是需要一些cpu的消耗。no：不压缩，需要更多的磁盘空间</span></span><br><span class="line">rdbcompression yes</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">是否校验rdb文件。从rdb格式的第五个版本开始，在rdb文件的末尾会带上CRC64的校验和。这跟有利于文件的容错性，但是在保存rdb文件的时候，会有大概10%的性能损耗，所以如果你追求高性能，可以关闭该配置。</span></span><br><span class="line">rdbchecksum yes</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">rdb文件的名称</span></span><br><span class="line">dbfilename dump.rdb</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">数据目录，数据库的写入会在这个目录。rdb、aof文件也会写在这个目录</span></span><br><span class="line">dir /data</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">############## 主从复制 ###############</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">复制选项，slave复制对应的master。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> slaveof &lt;masterip&gt; &lt;masterport&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">如果master设置了requirepass，那么slave要连上master，需要有master的密码才行。masterauth就是用来配置master的密码，这样可以在连上master后进行认证。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> masterauth &lt;master-password&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">当从库同主机失去连接或者复制正在进行，从机库有两种运行方式：1) 如果slave-serve-stale-data设置为yes(默认设置)，从库会继续响应客户端的请求。2) 如果slave-serve-stale-data设置为no，除去INFO和SLAVOF命令之外的任何请求都会返回一个错误”SYNC with master <span class="keyword">in</span> progress”。</span></span><br><span class="line">slave-serve-stale-data yes</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">作为从服务器，默认情况下是只读的（yes），可以修改成NO，用于写（不建议）。</span></span><br><span class="line">slave-read-only yes</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">是否使用socket方式复制数据。目前redis复制提供两种方式，disk和socket。如果新的slave连上来或者重连的slave无法部分同步，就会执行全量同步，master会生成rdb文件。有2种方式：disk方式是master创建一个新的进程把rdb文件保存到磁盘，再把磁盘上的rdb文件传递给slave。socket是master创建一个新的进程，直接把rdb文件以socket的方式发给slave。disk方式的时候，当一个rdb保存的过程中，多个slave都能共享这个rdb文件。socket的方式就的一个个slave顺序复制。在磁盘速度缓慢，网速快的情况下推荐用socket方式。</span></span><br><span class="line">repl-diskless-sync no</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">diskless复制的延迟时间，防止设置为0。一旦复制开始，节点不会再接收新slave的复制请求直到下一个rdb传输。所以最好等待一段时间，等更多的slave连上来。</span></span><br><span class="line">repl-diskless-sync-delay 5</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">slave根据指定的时间间隔向服务器发送ping请求。时间间隔可以通过 repl_ping_slave_period 来设置，默认10秒。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> repl-ping-slave-period 10</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">复制连接超时时间。master和slave都有超时时间的设置。master检测到slave上次发送的时间超过repl-timeout，即认为slave离线，清除该slave信息。slave检测到上次和master交互的时间超过repl-timeout，则认为master离线。需要注意的是repl-timeout需要设置一个比repl-ping-slave-period更大的值，不然会经常检测到超时。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> repl-timeout 60</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">是否禁止复制tcp链接的tcp nodelay参数，可传递yes或者no。默认是no，即使用tcp nodelay。如果master设置了yes来禁止tcp nodelay设置，在把数据复制给slave的时候，会减少包的数量和更小的网络带宽。但是这也可能带来数据的延迟。默认我们推荐更小的延迟，但是在数据量传输很大的场景下，建议选择yes。</span></span><br><span class="line">repl-disable-tcp-nodelay no</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">复制缓冲区大小，这是一个环形复制缓冲区，用来保存最新复制的命令。这样在slave离线的时候，不需要完全复制master的数据，如果可以执行部分同步，只需要把缓冲区的部分数据复制给slave，就能恢复正常复制状态。缓冲区的大小越大，slave离线的时间可以更长，复制缓冲区只有在有slave连接的时候才分配内存。没有slave的一段时间，内存会被释放出来，默认1m。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> repl-backlog-size 5mb</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">master没有slave一段时间会释放复制缓冲区的内存，repl-backlog-ttl用来设置该时间长度。单位为秒。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> repl-backlog-ttl 3600</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">当master不可用，Sentinel会根据slave的优先级选举一个master。最低的优先级的slave，当选master。而配置成0，永远不会被选举。</span></span><br><span class="line">slave-priority 100</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">redis提供了可以让master停止写入的方式，如果配置了min-slaves-to-write，健康的slave的个数小于N，mater就禁止写入。master最少得有多少个健康的slave存活才能执行写命令。这个配置虽然不能保证N个slave都一定能接收到master的写操作，但是能避免没有足够健康的slave的时候，master不能写入来避免数据丢失。设置为0是关闭该功能。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> min-slaves-to-write 3</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">延迟小于min-slaves-max-lag秒的slave才认为是健康的slave。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> min-slaves-max-lag 10</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置1或另一个设置为0禁用这个特性。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Setting one or the other to 0 disables the feature.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> By default min-slaves-to-write is <span class="built_in">set</span> to 0 (feature disabled) and</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> min-slaves-max-lag is <span class="built_in">set</span> to 10.</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">############## 安全相关 ###############</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">requirepass配置可以让用户使用AUTH命令来认证密码，才能使用其他命令。这让redis可以使用在不受信任的网络中。为了保持向后的兼容性，可以注释该命令，因为大部分用户也不需要认证。使用requirepass的时候需要注意，因为redis太快了，每秒可以认证15w次密码，简单的密码很容易被攻破，所以最好使用一个更复杂的密码。注意只有密码没有用户名。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> requirepass foobared</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">把危险的命令给修改成其他名称。比如CONFIG命令可以重命名为一个很难被猜到的命令，这样用户不能使用，而内部工具还能接着使用。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> rename-command CONFIG b840fc02d524045429941cc15f59e41cb7be6c52</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">设置成一个空的值，可以禁止一个命令</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> rename-command CONFIG <span class="string">&quot;&quot;</span></span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">############## 进程限制相关 ###############</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置能连上redis的最大客户端连接数量。默认是10000个客户端连接。由于redis不区分连接是客户端连接还是内部打开文件或者和slave连接等，所以maxclients最小建议设置到32。如果超过了maxclients，redis会给新的连接发送’max number of clients reached’，并关闭连接。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> maxclients 10000</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">redis配置的最大内存容量。当内存满了，需要配合maxmemory-policy策略进行处理。注意slave的输出缓冲区是不计算在maxmemory内的。所以为了防止主机内存使用完，建议设置的maxmemory需要更小一些。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> maxmemory &lt;bytes&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">内存容量超过maxmemory后的处理策略。</span></span><br><span class="line"><span class="meta">#</span><span class="bash">volatile-lru：利用LRU算法移除设置过过期时间的key。</span></span><br><span class="line"><span class="meta">#</span><span class="bash">volatile-random：随机移除设置过过期时间的key。</span></span><br><span class="line"><span class="meta">#</span><span class="bash">volatile-ttl：移除即将过期的key，根据最近过期时间来删除（辅以TTL）</span></span><br><span class="line"><span class="meta">#</span><span class="bash">allkeys-lru：利用LRU算法移除任何key。</span></span><br><span class="line"><span class="meta">#</span><span class="bash">allkeys-random：随机移除任何key。</span></span><br><span class="line"><span class="meta">#</span><span class="bash">noeviction：不移除任何key，只是返回一个写错误。</span></span><br><span class="line"><span class="meta">#</span><span class="bash">上面的这些驱逐策略，如果redis没有合适的key驱逐，对于写命令，还是会返回错误。redis将不再接收写请求，只接收get请求。写命令包括：<span class="built_in">set</span> setnx setex append incr decr rpush lpush rpushx lpushx linsert lset rpoplpush sadd sinter sinterstore sunion sunionstore sdiff sdiffstore zadd zincrby zunionstore zinterstore hset hsetnx hmset hincrby incrby decrby getset mset msetnx <span class="built_in">exec</span> sort。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> maxmemory-policy noeviction</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">lru检测的样本数。使用lru或者ttl淘汰算法，从需要淘汰的列表中随机选择sample个key，选出闲置时间最长的key移除。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> maxmemory-samples 5</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">############## APPEND ONLY 持久化方式 ###############</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">默认redis使用的是rdb方式持久化，这种方式在许多应用中已经足够用了。但是redis如果中途宕机，会导致可能有几分钟的数据丢失，根据save来策略进行持久化，Append Only File是另一种持久化方式，可以提供更好的持久化特性。Redis会把每次写入的数据在接收后都写入 appendonly.aof 文件，每次启动时Redis都会先把这个文件的数据读入内存里，先忽略RDB文件。</span></span><br><span class="line">appendonly no</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">aof文件名</span></span><br><span class="line">appendfilename &quot;appendonly.aof&quot;</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">aof持久化策略的配置</span></span><br><span class="line"><span class="meta">#</span><span class="bash">no表示不执行fsync，由操作系统保证数据同步到磁盘，速度最快。</span></span><br><span class="line"><span class="meta">#</span><span class="bash">always表示每次写入都执行fsync，以保证数据同步到磁盘。</span></span><br><span class="line"><span class="meta">#</span><span class="bash">everysec表示每秒执行一次fsync，可能会导致丢失这1s数据。</span></span><br><span class="line">appendfsync everysec</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash"> 在aof重写或者写入rdb文件的时候，会执行大量IO，此时对于everysec和always的aof模式来说，执行fsync会造成阻塞过长时间，no-appendfsync-on-rewrite字段设置为默认设置为no，是最安全的方式，不会丢失数据，但是要忍受阻塞的问题。如果对延迟要求很高的应用，这个字段可以设置为yes，，设置为yes表示rewrite期间对新写操作不fsync,暂时存在内存中,不会造成阻塞的问题（因为没有磁盘竞争），等rewrite完成后再写入，这个时候redis会丢失数据。Linux的默认fsync策略是30秒。可能丢失30秒数据。因此，如果应用系统无法忍受延迟，而可以容忍少量的数据丢失，则设置为yes。如果应用系统无法忍受数据丢失，则设置为no。</span></span><br><span class="line">no-appendfsync-on-rewrite no</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">aof自动重写配置。当目前aof文件大小超过上一次重写的aof文件大小的百分之多少进行重写，即当aof文件增长到一定大小的时候Redis能够调用bgrewriteaof对日志文件进行重写。当前AOF文件大小是上次日志重写得到AOF文件大小的二倍（设置为100）时，自动启动新的日志重写过程。</span></span><br><span class="line">auto-aof-rewrite-percentage 100</span><br><span class="line"><span class="meta">#</span><span class="bash">设置允许重写的最小aof文件大小，避免了达到约定百分比但尺寸仍然很小的情况还要重写</span></span><br><span class="line">auto-aof-rewrite-min-size 64mb</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">aof文件可能在尾部是不完整的，当redis启动的时候，aof文件的数据被载入内存。重启可能发生在redis所在的主机操作系统宕机后，尤其在ext4文件系统没有加上data=ordered选项（redis宕机或者异常终止不会造成尾部不完整现象。）出现这种现象，可以选择让redis退出，或者导入尽可能多的数据。如果选择的是yes，当截断的aof文件被导入的时候，会自动发布一个<span class="built_in">log</span>给客户端然后load。如果是no，用户必须手动redis-check-aof修复AOF文件才可以。</span></span><br><span class="line">aof-load-truncated yes</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">############## LUA SCRIPTING ###############</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果达到最大时间限制（毫秒），redis会记个<span class="built_in">log</span>，然后返回error。当一个脚本超过了最大时限。只有SCRIPT KILL和SHUTDOWN NOSAVE可以用。第一个可以杀没有调write命令的东西。要是已经调用了write，只能用第二个命令杀。</span></span><br><span class="line">lua-time-limit 5000</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">############## 集群相关 ###############</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">集群开关，默认是不开启集群模式。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> cluster-enabled yes</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">集群配置文件的名称，每个节点都有一个集群相关的配置文件，持久化保存集群的信息。这个文件并不需要手动配置，这个配置文件有Redis生成并更新，每个Redis集群节点需要一个单独的配置文件，请确保与实例运行的系统中配置文件名称不冲突</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> cluster-config-file nodes-6379.conf</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">节点互连超时的阀值。集群节点超时毫秒数</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> cluster-node-timeout 15000</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">在进行故障转移的时候，全部slave都会请求申请为master，但是有些slave可能与master断开连接一段时间了，导致数据过于陈旧，这样的slave不应该被提升为master。该参数就是用来判断slave节点与master断线的时间是否过长。判断方法是：</span></span><br><span class="line"><span class="meta">#</span><span class="bash">比较slave断开连接的时间和(node-timeout * slave-validity-factor) + repl-ping-slave-period</span></span><br><span class="line"><span class="meta">#</span><span class="bash">如果节点超时时间为三十秒, 并且slave-validity-factor为10,假设默认的repl-ping-slave-period是10秒，即如果超过310秒slave将不会尝试进行故障转移 </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> cluster-slave-validity-factor 10</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">master的slave数量大于该值，slave才能迁移到其他孤立master上，如这个参数若被设为2，那么只有当一个主节点拥有2 个可工作的从节点时，它的一个从节点会尝试迁移。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> cluster-migration-barrier 1</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">默认情况下，集群全部的slot有节点负责，集群状态才为ok，才能提供服务。设置为no，可以在slot没有全部分配的时候提供服务。不建议打开该配置。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> cluster-require-full-coverage yes</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">############## SLOW LOG 慢查询日志 ###############</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">##slog log是用来记录redis运行中执行比较慢的命令耗时。当命令的执行超过了指定时间，就记录在slow log中，slog log保存在内存中，所以没有IO操作。</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">执行时间比slowlog-log-slower-than大的请求记录到slowlog里面，单位是微秒，所以1000000就是1秒。注意，负数时间会禁用慢查询日志，而0则会强制记录所有命令。</span></span><br><span class="line">slowlog-log-slower-than 10000</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">慢查询日志长度。当一个新的命令被写进日志的时候，最老的那个记录会被删掉。这个长度没有限制。只要有足够的内存就行。你可以通过 SLOWLOG RESET 来释放内存。</span></span><br><span class="line">slowlog-max-len 128</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">############## 延迟监控 ###############</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">延迟监控功能是用来监控redis中执行比较缓慢的一些操作，用LATENCY打印redis实例在跑命令时的耗时图表。只记录大于等于下边设置的值的操作。0的话，就是关闭监视。默认延迟监控功能是关闭的，如果你需要打开，也可以通过CONFIG SET命令动态设置。</span></span><br><span class="line">latency-monitor-threshold 0</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">############## EVENT NOTIFICATION 订阅通知 ###############</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">键空间通知使得客户端可以通过订阅频道或模式，来接收那些以某种方式改动了 Redis 数据集的事件。因为开启键空间通知功能需要消耗一些 CPU ，所以在默认配置下，该功能处于关闭状态。</span></span><br><span class="line"><span class="meta">#</span><span class="bash">notify-keyspace-events 的参数可以是以下字符的任意组合，它指定了服务器该发送哪些类型的通知：</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#K 键空间通知，所有通知以 __keyspace@__ 为前缀</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#E 键事件通知，所有通知以 __keyevent@__ 为前缀</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#g DEL 、 EXPIRE 、 RENAME 等类型无关的通用命令的通知</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#$ 字符串命令的通知</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#l 列表命令的通知</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#s 集合命令的通知</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#h 哈希命令的通知</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#z 有序集合命令的通知</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#x 过期事件：每当有过期键被删除时发送</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#e 驱逐(evict)事件：每当有键因为 maxmemory 政策而被删除时发送</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#A 参数 g$lshzxe 的别名</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">输入的参数中至少要有一个 K 或者 E，否则的话，不管其余的参数是什么，都不会有任何 通知被分发。详细使用可以参考http://redis.io/topics/notifications</span></span><br><span class="line"> </span><br><span class="line">notify-keyspace-events &quot;&quot;</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">############## ADVANCED CONFIG 高级配置 ###############</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">数据量小于等于hash-max-ziplist-entries的用ziplist，大于hash-max-ziplist-entries用<span class="built_in">hash</span></span></span><br><span class="line">hash-max-ziplist-entries 512</span><br><span class="line"><span class="meta">#</span><span class="bash">value大小小于等于hash-max-ziplist-value的用ziplist，大于hash-max-ziplist-value用<span class="built_in">hash</span>。</span></span><br><span class="line">hash-max-ziplist-value 64</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">数据量小于等于list-max-ziplist-entries用ziplist，大于list-max-ziplist-entries用list。</span></span><br><span class="line">list-max-ziplist-entries 512</span><br><span class="line"><span class="meta">#</span><span class="bash">value大小小于等于list-max-ziplist-value的用ziplist，大于list-max-ziplist-value用list。</span></span><br><span class="line">list-max-ziplist-value 64</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">数据量小于等于set-max-intset-entries用iniset，大于set-max-intset-entries用<span class="built_in">set</span>。</span></span><br><span class="line">set-max-intset-entries 512</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">数据量小于等于zset-max-ziplist-entries用ziplist，大于zset-max-ziplist-entries用zset。</span></span><br><span class="line">zset-max-ziplist-entries 128</span><br><span class="line"><span class="meta">#</span><span class="bash">value大小小于等于zset-max-ziplist-value用ziplist，大于zset-max-ziplist-value用zset。</span></span><br><span class="line">zset-max-ziplist-value 64</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">value大小小于等于hll-sparse-max-bytes使用稀疏数据结构（sparse），大于hll-sparse-max-bytes使用稠密的数据结构（dense）。一个比16000大的value是几乎没用的，建议的value大概为3000。如果对CPU要求不高，对空间要求较高的，建议设置到10000左右。</span></span><br><span class="line">hll-sparse-max-bytes 3000</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">Redis将在每100毫秒时使用1毫秒的CPU时间来对redis的<span class="built_in">hash</span>表进行重新<span class="built_in">hash</span>，可以降低内存的使用。当你的使用场景中，有非常严格的实时性需要，不能够接受Redis时不时的对请求有2毫秒的延迟的话，把这项配置为no。如果没有这么严格的实时性要求，可以设置为yes，以便能够尽可能快的释放内存。</span></span><br><span class="line">activerehashing yes</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#对客户端输出缓冲进行限制可以强迫那些不从服务器读取数据的客户端断开连接，用来强制关闭传输缓慢的客户端。</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">对于normal client，第一个0表示取消hard <span class="built_in">limit</span>，第二个0和第三个0表示取消soft <span class="built_in">limit</span>，normal client默认取消限制，因为如果没有寻问，他们是不会接收数据的。</span></span><br><span class="line">client-output-buffer-limit normal 0 0 0</span><br><span class="line"><span class="meta">#</span><span class="bash">对于slave client和MONITER client，如果client-output-buffer一旦超过256mb，又或者超过64mb持续60秒，那么服务器就会立即断开客户端连接。</span></span><br><span class="line">client-output-buffer-limit slave 256mb 64mb 60</span><br><span class="line"><span class="meta">#</span><span class="bash">对于pubsub client，如果client-output-buffer一旦超过32mb，又或者超过8mb持续60秒，那么服务器就会立即断开客户端连接。</span></span><br><span class="line">client-output-buffer-limit pubsub 32mb 8mb 60</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">redis执行任务的频率为1s除以hz。</span></span><br><span class="line">hz 10</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">在aof重写的时候，如果打开了aof-rewrite-incremental-fsync开关，系统会每32MB执行一次fsync。这对于把文件写入磁盘是有帮助的，可以避免过大的延迟峰值。</span></span><br><span class="line">aof-rewrite-incremental-fsync yes</span><br></pre></td></tr></table></figure>

<h1 id="Redis常见数据类型应用场景总结"><a href="#Redis常见数据类型应用场景总结" class="headerlink" title="Redis常见数据类型应用场景总结"></a>Redis常见数据类型应用场景总结</h1><p><a href="https://blog.csdn.net/yu_kang/article/details/86254297">常见使用场景举例</a></p>
<p><img src="https://cdn.jsdelivr.net/gh/suolongY/warehouse@master/zk/image-20201122145813904.png" alt="image-20201122145813904"></p>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><table>
<thead>
<tr>
<th align="center">类型</th>
<th align="center">简介</th>
<th align="center">特性</th>
<th align="center">场景</th>
</tr>
</thead>
<tbody><tr>
<td align="center">string（字符串）</td>
<td align="center">二进制安全</td>
<td align="center">可以包含任何数据，比如jpg图片或者序列化对象</td>
<td align="center">缓存、session、计数器</td>
</tr>
<tr>
<td align="center">Hash（字典）</td>
<td align="center">键值对集合，即编程语言中的map类型</td>
<td align="center">适合存储对象，并且可以像数据库中的update一个属性一样只修改某一项属性值</td>
<td align="center">存储、读取、修改用户属性</td>
</tr>
<tr>
<td align="center">List（列表）</td>
<td align="center">链表（双向链表）</td>
<td align="center">增删快，提供了操作某一元素的api</td>
<td align="center">最新消息排行；消息队列</td>
</tr>
<tr>
<td align="center">set（集合）</td>
<td align="center">hash表实现，元素不重复</td>
<td align="center">添加、删除、查找的复杂度都是O(1)，提供了求交集、并集、差集的操作</td>
<td align="center">共同好友；利用唯一性，统计访问网站的所有ip</td>
</tr>
<tr>
<td align="center">zset（有序集合）</td>
<td align="center">将set中的元素增加一个权重参数score，元素按score有序排列</td>
<td align="center">数据插入集合时，已经进行了天然排序</td>
<td align="center">排行榜；带权重的消息队列</td>
</tr>
<tr>
<td align="center">HyperLogLog</td>
<td align="center"></td>
<td align="center"></td>
<td align="center">统计用户访问量</td>
</tr>
</tbody></table>
<p>还有<strong>HyperLogLog、Geo、Pub/Sub</strong></p>
<ul>
<li><p><strong>string</strong></p>
<p>Redis 中的字符串是一种 <strong>动态字符串</strong>，这意味着使用者可以修改，它的底层实现有点类似于 Java 中的 <strong>ArrayList</strong>，有一个字符数组</p>
</li>
<li><p><strong>list</strong></p>
<p>Redis 的列表相当于 Java 语言中的 <strong>LinkedList</strong>，注意它是链表而不是数组。这意味着 list 的插入和删除操作非常快，时间复杂度为 O(1)，但是索引定位很慢，时间复杂度为 O(n)。</p>
</li>
<li><p><strong>hash</strong></p>
<p>相当于 Java 中的 <strong>HashMap</strong>，内部实现也差不多类似，都是通过 <strong>“数组 + 链表”</strong> 的链地址法来解决部分 <strong>哈希冲突</strong>，同时这样的结构也吸收了两种不同数据结构的优点。</p>
</li>
<li><p><strong>set</strong></p>
<p>相当于 Java 语言中的 <strong>HashSet</strong>，它内部的键值对是无序、唯一的。它的内部实现相当于一个特殊的字典，字典中所有的 value 都是一个值 NULL。</p>
</li>
<li><p><strong>zset</strong></p>
<p>它类似于 Java 中 <strong>SortedSet</strong> 和 <strong>HashMap</strong> 的结合体，一方面它是一个 set，保证了内部 value 的唯一性，另一方面它可以为每个 value 赋予一个 score 值，用来代表排序的权重。</p>
</li>
<li><p><strong>HyperLogLog</strong></p>
</li>
</ul>
<p>Redis 在 2.8.9 版本添加了 HyperLogLog 结构。</p>
<p>Redis HyperLogLog 是用来做基数统计的算法，HyperLogLog 的优点是，在输入元素的数量或者体积非常非常大时，计算基数所需的空间总是固定 的、并且是很小的。</p>
<p>在 Redis 里面，每个 HyperLogLog 键只需要花费 12 KB 内存，就可以计算接近 2^64 个不同元素的基数。这和计算基数时，元素越多耗费内存就越多的集合形成鲜明对比。</p>
<p>但是，因为 HyperLogLog 只会根据输入元素来计算基数，而不会储存输入元素本身，所以 HyperLogLog 不能像集合那样，返回输入的各个元素。</p>
<p><strong>什么是基数?</strong></p>
<p>比如数据集 {1, 3, 5, 7, 5, 7, 8}， 那么这个数据集的基数集为 {1, 3, 5 ,7, 8}, 基数(不重复元素)为5。 基数估计就是在误差可接受的范围内，快速计算基数。</p>
<p><strong>实例</strong></p>
<p>以下实例演示了 HyperLogLog 的工作过程：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; PFADD runoobkey &quot;redis&quot;</span><br><span class="line">1) (integer) 1</span><br><span class="line">redis 127.0.0.1:6379&gt; PFADD runoobkey &quot;mongodb&quot;</span><br><span class="line">1) (integer) 1</span><br><span class="line">redis 127.0.0.1:6379&gt; PFADD runoobkey &quot;mysql&quot;</span><br><span class="line">1) (integer) 1</span><br><span class="line">redis 127.0.0.1:6379&gt; PFCOUNT runoobkey</span><br><span class="line">(integer) 3</span><br></pre></td></tr></table></figure>

<h1 id="Redis分布式锁"><a href="#Redis分布式锁" class="headerlink" title="Redis分布式锁"></a>Redis分布式锁</h1><p>先拿<strong>setnx</strong>来争抢锁，抢到之后，再用<strong>expire</strong>给锁加一个过期时间防止锁忘记了释放。</p>
<h1 id="Redis事物"><a href="#Redis事物" class="headerlink" title="Redis事物"></a>Redis事物</h1><p>TODO</p>
<h1 id="Redis-的线程模型"><a href="#Redis-的线程模型" class="headerlink" title="Redis 的线程模型"></a>Redis 的线程模型</h1><p><strong>Redis</strong> 内部使用文件事件处理器 <code>file event handler</code>，这个文件事件处理器是单线程的，所以 <strong>Redis</strong> 才叫做单线程的模型。它采用 IO 多路复用机制同时监听多个 <strong>Socket</strong>，根据 <strong>Socket</strong> 上的事件来选择对应的事件处理器进行处理。</p>
<p>文件事件处理器的结构包含 4 个部分：</p>
<ul>
<li>多个 <strong>Socket</strong></li>
<li>IO 多路复用程序</li>
<li>文件事件分派器</li>
<li>事件处理器（连接应答处理器、命令请求处理器、命令回复处理器）</li>
</ul>
<p>多个 <strong>Socket</strong> 可能会并发产生不同的操作，每个操作对应不同的文件事件，但是 IO 多路复用程序会监听多个 <strong>Socket</strong>，会将 <strong>Socket</strong> 产生的事件放入队列中排队，事件分派器每次从队列中取出一个事件，把该事件交给对应的事件处理器进行处理。</p>
<h1 id="过期的数据的删除策略"><a href="#过期的数据的删除策略" class="headerlink" title="过期的数据的删除策略"></a>过期的数据的删除策略</h1><p>如果假设你设置了一批 key 只能存活 1 分钟，那么 1 分钟后，Redis 是怎么对这批 key 进行删除的呢？</p>
<p>常用的过期数据的删除策略就两个：</p>
<ol>
<li>（被动）<strong>惰性删除</strong> ：只会在取出key的时候才对数据进行过期检查。这样对CPU最友好，但是可能会造成太多过期 key 没有被删除。</li>
<li>（主动）<strong>定期删除</strong> ： 每隔一段时间抽取一批 key 执行删除过期key操作。并且，Redis 底层会通过限制删除操作执行的时长和频率来减少删除操作对CPU时间的影响。</li>
</ol>
<p><strong>定期删除对内存更加友好，惰性删除对CPU更加友好</strong>。两者各有千秋，所以Redis 采用的是 <strong>定期删除+惰性/懒汉式删除</strong> 。</p>
<p>但是，仅仅通过给 key 设置过期时间还是有问题的。因为还是可能存在定期删除和惰性删除漏掉了很多过期 key 的情况。这样就导致大量过期 key 堆积在内存里，然后就Out of memory了。</p>
<p>如何解决这个问题呢？答案就是： <strong>Redis 内存淘汰机制。</strong></p>
<h2 id="Redis-的淘汰策略有哪些？"><a href="#Redis-的淘汰策略有哪些？" class="headerlink" title="Redis 的淘汰策略有哪些？"></a>Redis 的淘汰策略有哪些？</h2><h4 id="Redis-有六种淘汰策略"><a href="#Redis-有六种淘汰策略" class="headerlink" title="Redis 有六种淘汰策略"></a>Redis 有六种淘汰策略</h4><table>
<thead>
<tr>
<th>策略</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>volatile-lru</td>
<td>从已设置过期时间的 KV 集中优先对最近最少使用(less recently used)的数据淘汰</td>
</tr>
<tr>
<td>volitile-ttl</td>
<td>从已设置过期时间的 KV 集中优先对剩余时间短(time to live)的数据淘汰</td>
</tr>
<tr>
<td>volitile-random</td>
<td>从已设置过期时间的 KV 集中随机选择数据淘汰</td>
</tr>
<tr>
<td>allkeys-lru</td>
<td>从所有 KV 集中优先对最近最少使用(less recently used)的数据淘汰</td>
</tr>
<tr>
<td>allKeys-random</td>
<td>从所有 KV 集中随机选择数据淘汰</td>
</tr>
<tr>
<td>noeviction</td>
<td>不淘汰策略，若超过最大内存，返回错误信息</td>
</tr>
</tbody></table>
<h4 id="4-0-版本后增加以下两种"><a href="#4-0-版本后增加以下两种" class="headerlink" title="4.0 版本后增加以下两种"></a>4.0 版本后增加以下两种</h4><ul>
<li>volatile-lfu：从已设置过期时间的数据集(server.db[i].expires)中挑选最不经常使用的数据淘汰</li>
<li>allkeys-lfu：当内存不足以容纳新写入数据时，在键空间中，移除最不经常使用的 key</li>
</ul>
]]></content>
      <categories>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx</title>
    <url>/posts/a477be03.html</url>
    <content><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>不做额外配置的话，yml安装方式可以在任何地方执行安装或nginx操作命令，自行安装需要进入对应的目录。例如nginx刷新，操作如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> yum方式，在任意目录下执行如下命令即可</span></span><br><span class="line">nginx -s reload</span><br><span class="line"><span class="meta">#</span><span class="bash"> 自行安装方式，需要两步</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 1. 进入nginx的sbin目录,例如安装在了/usr/<span class="built_in">local</span>/nginx下</span></span><br><span class="line">cd /usr/local/nginx/sbin/</span><br><span class="line"><span class="meta">#</span><span class="bash"> 2. 执行如下命令即可</span></span><br><span class="line">./nginx -s reload</span><br></pre></td></tr></table></figure>

<h2 id="yum方式"><a href="#yum方式" class="headerlink" title="yum方式"></a>yum方式</h2><blockquote>
<p>这个比较简单，一步到位</p>
</blockquote>
<h3 id="先安装依赖"><a href="#先安装依赖" class="headerlink" title="先安装依赖"></a>先安装依赖</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum -y install gcc zlib zlib-devel pcre-devel openssl openssl-devel</span><br></pre></td></tr></table></figure>

<h3 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> yum install nginx <span class="comment"># 安装</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装完毕以后 可以使用如下常用命令</span></span><br><span class="line">nginx -v # 查看版本</span><br><span class="line">nginx -t # 检查语法</span><br><span class="line">nginx -s reload # 重启</span><br><span class="line">nginx -s stop # 暴力关闭</span><br><span class="line">nginx -s quit # 优雅关闭</span><br></pre></td></tr></table></figure>

<h2 id="自行安装方式"><a href="#自行安装方式" class="headerlink" title="自行安装方式"></a>自行安装方式</h2><ol>
<li><p>去官网<a href="http://nginx.org/%E4%B8%8B%E8%BD%BD%E5%AF%B9%E5%BA%94%E7%9A%84nginx%E5%8C%85%EF%BC%8C%E6%8E%A8%E8%8D%90%E4%BD%BF%E7%94%A8%E7%A8%B3%E5%AE%9A%E7%89%88%E6%9C%AC">http://nginx.org/下载对应的nginx包，推荐使用稳定版本</a></p>
</li>
<li><p>上传nginx到linux系统</p>
</li>
<li><p>安装依赖环境</p>
<ul>
<li>安装gcc环境</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install gcc-c++</span><br></pre></td></tr></table></figure>

<ul>
<li>安装PCRE库,用于解析正则表达式</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y pcre pcre-devel</span><br></pre></td></tr></table></figure>

<ul>
<li>zlib压缩和解压缩依赖</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y zlib zlib-devel</span><br></pre></td></tr></table></figure>

<ul>
<li>SSL安全的加密的套接字协议层,用于HTTP安全传输,也就是https</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y openssl openssl-devel</span><br></pre></td></tr></table></figure>
</li>
<li><p>解压，需要注意，解压后得到的是源码，源码需要编译后才能安装</p>
</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -zxvf nginx-1.18.0.tar.gz # 换成自己的版本</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>编译之前，先创建nginx临时目录，如果不创建，在启动nginx的过程中会报错</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir /var/temp/nginx -p </span><br></pre></td></tr></table></figure>

<ol start="6">
<li>在nginx目录，输入如下命令进行配置，目的是为了创建makefile文件</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./configure \n --prefix=/usr/local/nginx \n --pid-path=/var/run/nginx/nginx.pid \n --lock-path=/var/lock/nginx.lock \n --error-log-path=/var/log/nginx/error.log \n --http-log-path=/var/log/nginx/access.log \n --with-http_gzip_static_module \n --http-client-body-temp-path=/var/temp/nginx/client \n --http-proxy-temp-path=/var/temp/nginx/proxy \n --http-fastcgi-temp-path=/var/temp/nginx/fastcgi \n --http-uwsgi-temp-path=/var/temp/nginx/uwsgi \n --http-scgi-temp-path=/var/temp/nginx/scgi</span><br></pre></td></tr></table></figure>

<p><strong>注：</strong>\n 代表在命令行中换行，用于提高可读性</p>
<p><strong>配置命令：</strong></p>
<table>
<thead>
<tr>
<th><strong>命令</strong></th>
<th><strong>解释</strong></th>
</tr>
</thead>
<tbody><tr>
<td>–prefix</td>
<td>指定 nginx 安装目录</td>
</tr>
<tr>
<td>–pid-path</td>
<td>指定 nginx 的 pid</td>
</tr>
<tr>
<td>–lock-path</td>
<td>锁定安装文件，防止被恶意篡改或误操作</td>
</tr>
<tr>
<td>–error-path</td>
<td>错误日志</td>
</tr>
<tr>
<td>–http-log-path</td>
<td>http 日志</td>
</tr>
<tr>
<td>-with-http_gzip_static_module</td>
<td>启用 gzip 模块，在线实时压缩输出数据流</td>
</tr>
<tr>
<td>-http-client-body-temp-path</td>
<td>设定客户端请求的临时目录</td>
</tr>
<tr>
<td>-http-proxy-temp-path</td>
<td>设置 http 代理临时目录</td>
</tr>
<tr>
<td>-http-fastcgi-temp-path</td>
<td>设定 fastcgi 临时目录</td>
</tr>
<tr>
<td>-http-uwsgi-temp-path</td>
<td>设定 uwsgi 临时目录</td>
</tr>
<tr>
<td>-http-scgi-temp-path</td>
<td>设定 scgi 临时目录</td>
</tr>
</tbody></table>
<ol start="7">
<li>make 编译</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">make</span><br></pre></td></tr></table></figure>

<ol start="8">
<li>安装</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">make install</span><br></pre></td></tr></table></figure>

<ol start="9">
<li>进入 sbin 目录启动 Nginx</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./nginx</span><br></pre></td></tr></table></figure>

<p>不管是哪种方式，启动后都可以直接访问(端口默认80)，比如本地就访问127.0.0.1，服务器直接输入ip。<strong>服务器记得开启80端口或防火墙。</strong></p>
<h2 id="遇到的问题问题"><a href="#遇到的问题问题" class="headerlink" title="遇到的问题问题"></a>遇到的问题问题</h2><ul>
<li>如果出现nginx: [error] open() “/var/run/nginx.pid” failed (2: No such file or directory)</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 执行这个命令就行</span></span><br><span class="line">sudo nginx -c /etc/nginx/nginx.conf</span><br><span class="line"><span class="meta">#</span><span class="bash"> 执行完就可以执行启动或者重启了</span></span><br><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure>

<h1 id="nginx-conf核心配置文件详解"><a href="#nginx-conf核心配置文件详解" class="headerlink" title="nginx.conf核心配置文件详解"></a>nginx.conf核心配置文件详解</h1><h2 id="user"><a href="#user" class="headerlink" title="user"></a>user</h2><p>​        设置worker进程的用户，指的linux中的用户，会涉及到nginx操作目录或文件的一些权限，默认为 nobody </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">user root; </span><br></pre></td></tr></table></figure>

<h2 id="worker-processes"><a href="#worker-processes" class="headerlink" title="worker_processes"></a>worker_processes</h2><p>​        worker进程工作数设置，一般来说CPU有几个，就设置几个，或者设置为N-1也行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">worker_processes 1; </span><br></pre></td></tr></table></figure>

<h2 id="日志级别"><a href="#日志级别" class="headerlink" title="日志级别"></a>日志级别</h2><p>​        nginx 日志级别<code>debug | info | notice | warn | error | crit | alert | emerg</code>，错误级别从左到右越来越大</p>
<h2 id="pid"><a href="#pid" class="headerlink" title="pid"></a>pid</h2><p>​        设置nginx进程 pid</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pid logs/nginx.pid; </span><br></pre></td></tr></table></figure>

<h2 id="events"><a href="#events" class="headerlink" title="events"></a>events</h2><p>​        设置工作模式</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">events &#123; </span><br><span class="line">	# 默认使用epoll </span><br><span class="line">	use epoll; </span><br><span class="line">	# 每个worker允许连接的客户端最大连接数 </span><br><span class="line">	worker_connections 10240; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<h2 id="http指令块"><a href="#http指令块" class="headerlink" title="http指令块"></a>http指令块</h2><p>​        http 是指令块，针对http网络传输的一些指令配置</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">http &#123; </span><br><span class="line"></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<h2 id="include"><a href="#include" class="headerlink" title="include"></a>include</h2><p>​        include 引入外部配置，提高可读性，避免单个配置文件过大</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">include mime.types; </span><br></pre></td></tr></table></figure>

<h2 id="log-format"><a href="#log-format" class="headerlink" title="log_format"></a>log_format</h2><p>​        <strong>设定日志格式</strong>， main 为定义的格式名称，如此 access_log 就可以直接使用这个变量了</p>
<p><img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/image-20210128154631809.png" alt="image-20210128154631809"></p>
<table>
<thead>
<tr>
<th><strong>参数</strong></th>
<th><strong>说明</strong></th>
<th><strong>示例</strong></th>
</tr>
</thead>
<tbody><tr>
<td>$remote_addr</td>
<td>客户端地址</td>
<td>219.227.111.255</td>
</tr>
<tr>
<td>$remote_user</td>
<td>客户端用户名称</td>
<td>—</td>
</tr>
<tr>
<td>$time_local</td>
<td>访问时间和时区</td>
<td>18/Jul/2020:17:00:01 +0800</td>
</tr>
<tr>
<td>$request</td>
<td>请求的URI和HTTP协议</td>
<td>“GET /article-10000.html HTTP/1.1”</td>
</tr>
<tr>
<td>$http_host</td>
<td>请求地址，即浏览器中你输入的地址（IP或域名）</td>
<td><a href="http://www.ha97.com/">www.ha97.com</a> 198.98.120.87</td>
</tr>
<tr>
<td>$status</td>
<td>HTTP请求状态</td>
<td>200</td>
</tr>
<tr>
<td>$upstream_status</td>
<td>upstream状态</td>
<td>200</td>
</tr>
<tr>
<td>$body_bytes_sent</td>
<td>发送给客户端文件内容大小</td>
<td>1547</td>
</tr>
<tr>
<td>$http_referer</td>
<td>url跳转来源</td>
<td><a href="http://www.ha97.com/tag/https">https</a>://www.<a href="http://www.ha97.com/category/google">google</a>.com/</td>
</tr>
<tr>
<td>$http_user_agent</td>
<td>用户终端浏览器等信息</td>
<td>“Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1; Trident/4.0; SV1; GTB7.0; .NET4.0C;</td>
</tr>
<tr>
<td>$ssl_protocol</td>
<td>SSL协议版本</td>
<td>TLSv1</td>
</tr>
<tr>
<td>$ssl_cipher</td>
<td>交换数据中的算法</td>
<td>RC4-SHA</td>
</tr>
<tr>
<td>$upstream_addr</td>
<td>后台upstream的地址，即真正提供服务的主机地址</td>
<td>10.36.10.80:80</td>
</tr>
<tr>
<td>$request_time</td>
<td>整个请求的总时间</td>
<td>0.165</td>
</tr>
<tr>
<td>$upstream_response_time</td>
<td>请求过程中，upstream响应时间</td>
<td>0.002</td>
</tr>
</tbody></table>
<h2 id="sendfile和tcp-nopush"><a href="#sendfile和tcp-nopush" class="headerlink" title="sendfile和tcp_nopush"></a>sendfile和tcp_nopush</h2><p>​        <strong>sendfile使用高效文件传输，提升传输性能 。启用后</strong>才能使用 <strong>tcp_nopush</strong> ，是指<strong>当数据表累积一定大小后才发送，提高了效率。</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sendfile on; </span><br><span class="line">tcp_nopush on;</span><br></pre></td></tr></table></figure>

<h2 id="keepalive-timeout"><a href="#keepalive-timeout" class="headerlink" title="keepalive_timeout"></a>keepalive_timeout</h2><p>​        <strong>keepalive_timeout</strong> 设置客户端与服务端请求的超时时间，保证客户端多次请求的时候不会重复建立新的连接，节约资源损耗。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> keepalive_timeout 0; </span></span><br><span class="line">keepalive_timeout 65;</span><br></pre></td></tr></table></figure>

<h2 id="gzip"><a href="#gzip" class="headerlink" title="gzip"></a>gzip</h2><p>​        gzip 启用压缩，<code>html/js/css</code>压缩后传输会 更快</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gzip on;</span><br></pre></td></tr></table></figure>

<h2 id="upstream"><a href="#upstream" class="headerlink" title="upstream"></a>upstream</h2><h3 id="max-conns"><a href="#max-conns" class="headerlink" title="max_conns"></a><strong>max_conns</strong></h3><p><strong>限制每台server的连接数，用于保护避免过载，可起到限流作用。</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"># worker进程设置1个，便于测试观察成功的连接数 </span><br><span class="line">worker_processes 1; </span><br><span class="line">upstream tomcats &#123; </span><br><span class="line">	server 192.168.1.200:8080 max_conns=2; </span><br><span class="line">	server 192.168.1.201:8080 max_conns=2; </span><br><span class="line">	server 192.168.1.202:8080 max_conns=2; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="slow-start-付费功能"><a href="#slow-start-付费功能" class="headerlink" title="slow_start(付费功能)"></a><strong>slow_start(付费功能)</strong></h3><p>让服务缓慢启动增加权重</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">upstream tomcats &#123; </span><br><span class="line">	server 192.168.1.200:8080 weight=6 slow_start=60s; </span><br><span class="line">	server 192.168.1.201:8080 weight=2; </span><br><span class="line">	server 192.168.1.202:8080 weight=2; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>注：</strong></p>
<p>该参数不能使用在 hash 和 random load balancing 中。</p>
<p>如果在 upstream 中只有一台 server，则该参数失效。</p>
<h3 id="down"><a href="#down" class="headerlink" title="down"></a><strong>down</strong></h3><p><strong>down 用于标记服务节点不可用</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">upstream tomcats &#123; </span><br><span class="line">	server 192.168.1.200:8080 down; </span><br><span class="line">	server 192.168.1.201:8080 weight=1; </span><br><span class="line">	server 192.168.1.202:8080 weight=1; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="backup"><a href="#backup" class="headerlink" title="backup"></a><strong>backup</strong></h3><p>backup 表示当前服务器节点是备用机，只有在其他的服务器都宕机以后，自己才会加入到集群中，被用户访问到：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">upstream tomcats &#123; </span><br><span class="line">  server 192.168.1.200:8080 backup; </span><br><span class="line">  server 192.168.1.201:8080 weight=1; </span><br><span class="line">  server 192.168.1.202:8080 weight=1; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p><strong>注：</strong> </p>
<p>backup 参数不能使用在 hash 和 random load balancing 中。</p>
<ul>
<li><strong>max_fails和fail_timeout</strong></li>
</ul>
<p><strong>max_fails：表示失败几次，则标记server已宕机，剔出上游服务。</strong></p>
<p><strong>fail_timeout：表示失败的重试时间。</strong></p>
<p>如进行如下设置：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">max_fails=<span class="number">2</span> fail_timeout=<span class="number">15</span>s</span><br></pre></td></tr></table></figure>

<p>则代表在15秒内请求某一server失败达到2次后，则认为该server已经挂了或者宕机了，随后再过15秒，这15秒内不会有新的请求到达刚刚挂掉的节点上，而是会请求到正常运作的server上，15秒后会再有新请求尝试连接挂掉的server，如果还是失败，重复上一过程，直到恢复。</p>
<h3 id="keepalive"><a href="#keepalive" class="headerlink" title="keepalive"></a>keepalive</h3><p><strong>keepalive ： 设置长连接处理的数量</strong></p>
<p><strong>proxy_http_version ：设置长连接http版本为1.1</strong></p>
<p><strong>proxy_set_header ：清除connection header 信息</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">upstream tomcats &#123; </span><br><span class="line">  server 192.168.1.200:8080;</span><br><span class="line">  keepalive 32; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">  listen 80; </span><br><span class="line">  server_name www.tomcats.com;</span><br><span class="line">  </span><br><span class="line">  location / &#123; </span><br><span class="line">    proxy_pass http://tomcats; </span><br><span class="line">    proxy_http_version 1.1; </span><br><span class="line">    proxy_set_header Connection &quot;&quot;; </span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h3><ul>
<li><strong>weight</strong></li>
</ul>
<p>指定轮询几率，weight和访问比率成正比，用于后端服务器性能不均的情况。</p>
<ul>
<li><strong>ip_hash</strong></li>
</ul>
<p><code>ip_hash</code>可以<strong>保证用户在ip没有更改的情况下访问固定的服务器</strong>：hash(ip) % node_counts(服务器节点数量) = index</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">upstream tomcats &#123;</span><br><span class="line">  ip_hash;</span><br><span class="line">	server 192.168.1.200:8080; </span><br><span class="line">	server 192.168.1.201:8080 down; </span><br><span class="line">	server 192.168.1.202:8080; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>注：</strong> </p>
<ol>
<li>在nginx版本1.3.1之前，不能在ip_hash中使用权重（weight）。</li>
<li>ip_hash不能与backup同时使用。</li>
<li>此策略适合有状态服务，比如session。</li>
<li>当有服务器需要剔除，必须手动down掉。</li>
</ol>
<ul>
<li><strong>url_hash（第三方）</strong></li>
</ul>
<p>​        按访问url的hash结果来分配请求，使每个url定向到同一个后端服务器，要配合缓存命中来使用。同一个资源多次请求，可能会到达不同的服务器上，导致不必要的多次下载，缓存命中率不高，以及一些资源时间的浪费。而使用url_hash，可以使得同一个url（也就是同一个资源请求）会到达同一台服务器，一旦缓存住了资源，再此收到请求，就可以从缓存中读取。</p>
<ul>
<li><strong>least_conn</strong></li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">upstream tomcats &#123; </span><br><span class="line">  # url_hash;</span><br><span class="line">  hash $request_uri;</span><br><span class="line">  # 请求过来之后映射到请求量最少的服务器,此适合请求处理时间长短不一造成服务器过载的情况。</span><br><span class="line">  # least_conn</span><br><span class="line">	server 192.168.1.200:8080; </span><br><span class="line">	server 192.168.1.201:8080; </span><br><span class="line">	server 192.168.1.202:8080; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">  listen 80; </span><br><span class="line">  server_name www.tomcats.com;</span><br><span class="line">  </span><br><span class="line">  location / &#123; </span><br><span class="line">    proxy_pass http://tomcats; </span><br><span class="line">    proxy_http_version 1.1; </span><br><span class="line">    proxy_set_header Connection &quot;&quot;; </span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>todo 一致性hash模块</strong></li>
</ul>
<h2 id="server"><a href="#server" class="headerlink" title="server"></a>server</h2><p><strong>server</strong>可以在其对应的<strong>http</strong>指令块中设置多个虚拟主机</p>
<ul>
<li>listen：监听端口</li>
<li>server_ name：  可以填写localhost、ip、 域名</li>
<li>location： 请求路由映射，匹配拦截</li>
<li>root： 请求位置</li>
<li>index： 首页设置</li>
<li>alias： 路径别名</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">  listen 80;</span><br><span class="line">  server_name localhost;</span><br><span class="line">  location / &#123;</span><br><span class="line">    root html;</span><br><span class="line">    index index.html index.htm;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="root和alias的区别"><a href="#root和alias的区别" class="headerlink" title="root和alias的区别"></a>root和alias的区别</h3><ul>
<li><strong>root的真实的路径是roo值+location值，alias会去掉location的值，直接访问alias的路径对应的文件</strong></li>
<li>alias 只能作用在location中，而root可以存在server、http和location中。</li>
<li><strong>alias 后面必须要用 “/” 结束</strong>，否则会找不到文件，而 root 则对 ”/” 可有可无。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">location &#x2F;static&#x2F; &#123;</span><br><span class="line">  root &#x2F;file&#x2F;img;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>用户请求： <code>http://ip:port/static/test.gif </code>这个地址时，</p>
<p>实际访问：<code> /file/img/static/test.gif</code></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">location /static/ &#123;</span><br><span class="line">  alias /file/img;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>用户请求： <code>http://ip:port/static/test.gif</code></p>
<p>实际访问：<code> /file/img/test.gif</code></p>
<h3 id="location的匹配规则"><a href="#location的匹配规则" class="headerlink" title="location的匹配规则"></a>location的匹配规则</h3><table>
<thead>
<tr>
<th>标识符</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>=</td>
<td><strong>精确匹配：</strong>用于标准uri前，要求请求字符串和uri严格匹配。如果匹配成功就停止匹配，立即执行该location里面的请求。</td>
</tr>
<tr>
<td>~</td>
<td><strong>正则匹配：</strong>用于正则uri前，表示uri里面包含正则，并且区分大小写。</td>
</tr>
<tr>
<td>~*</td>
<td><strong>正则匹配：</strong>用于正则uri前，表示uri里面包含正则，不区分大小写。</td>
</tr>
<tr>
<td>^~</td>
<td><strong>非正则匹配；</strong>用于标准uri前，nginx服务器匹配到前缀最多的uri后就结束，该模式匹配成功后，不会使用正则匹配。</td>
</tr>
<tr>
<td>空格</td>
<td><strong>普通匹配（最长字符匹配）；</strong>与location顺序无关，是按照匹配的长短来取匹配结果。若完全匹配，就停止匹配。</td>
</tr>
</tbody></table>
<ul>
<li>空格 ：默认匹配，普通匹配</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">	root /home;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>= ：精确匹配</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">location = /file/img/face1.png &#123; </span><br><span class="line">	root /home;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>~* ：匹配正则表达式，<strong>不区分大小写</strong></li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">#符合图片的显示 </span><br><span class="line">location ~ \.(GIF|jpg|png|jpeg) &#123; </span><br><span class="line">	root /home; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>~ ：匹配正则表达式，<strong>区分大小写</strong></li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">#GIF必须大写才能匹配到 </span><br><span class="line">location ~ \.(GIF|jpg|png|jpeg) &#123; </span><br><span class="line">	root /home; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>^~ ：以某个字符路径开头</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">location ^~ /static/img &#123; </span><br><span class="line">	root /home; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="跨域配置"><a href="#跨域配置" class="headerlink" title="跨域配置"></a>跨域配置</h1><p>​        可以在server或者location模块加上如下配置（方式不唯一）</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"># 方式一：在server模块添加</span><br><span class="line">server&#123;</span><br><span class="line">  ……</span><br><span class="line">  #允许跨域请求的域，*代表所有 </span><br><span class="line">  add_header &#x27;Access-Control-Allow-Origin&#x27; *; </span><br><span class="line">  #允许带上cookie请求 </span><br><span class="line">  add_header &#x27;Access-Control-Allow-Credentials&#x27; &#x27;true&#x27;; </span><br><span class="line">  #允许请求的方法，比如 GET/POST/PUT/DELETE </span><br><span class="line">  add_header &#x27;Access-Control-Allow-Methods&#x27; *; </span><br><span class="line">  #允许请求的header add_header </span><br><span class="line">  &#x27;Access-Control-Allow-Headers&#x27; *;</span><br><span class="line">  ……</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 方式二：在location模块添加</span><br><span class="line">location /&#123;</span><br><span class="line">  ……</span><br><span class="line">  #允许跨域请求的域，*代表所有 </span><br><span class="line">  add_header &#x27;Access-Control-Allow-Origin&#x27; *; </span><br><span class="line">  #允许带上cookie请求 </span><br><span class="line">  add_header &#x27;Access-Control-Allow-Credentials&#x27; &#x27;true&#x27;; </span><br><span class="line">  #允许请求的方法，比如 GET/POST/PUT/DELETE </span><br><span class="line">  add_header &#x27;Access-Control-Allow-Methods&#x27; *; </span><br><span class="line">  #允许请求的header add_header </span><br><span class="line">  &#x27;Access-Control-Allow-Headers&#x27; *;</span><br><span class="line">  ……</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="防盗链配置"><a href="#防盗链配置" class="headerlink" title="防盗链配置"></a>防盗链配置</h1><ul>
<li>利用Referer头来判断是否是合法请求</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">location ~* \.(gif|jpg|png|swf|flv)$ &#123; </span><br><span class="line">  valid_referers none blocked www.xxx.com xxx.com ; </span><br><span class="line">  if ($invalid_referer) &#123; </span><br><span class="line">    #return 403;  #直接提示拒绝访问</span><br><span class="line">    #return 404;  #直接提示找不到资源</span><br><span class="line">    rewrite ^/ http://www.xxx.com/xxx.jpg;  #返回特定的图片</span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br><span class="line">#none意为不存在的Referer头。</span><br><span class="line">#blocked意为根据防火墙伪装Referer头，如：“Referer: XXXXXXX”。</span><br></pre></td></tr></table></figure>

<ul>
<li>利用ngx_http_accesskey_module模块，有兴趣可以自己去了解一下</li>
</ul>
<h1 id="TODO-OSI网络模型"><a href="#TODO-OSI网络模型" class="headerlink" title="TODO OSI网络模型"></a>TODO OSI网络模型</h1><h1 id="HTTPS证书配置"><a href="#HTTPS证书配置" class="headerlink" title="HTTPS证书配置"></a>HTTPS证书配置</h1><ul>
<li>安装ssl模块**(yum安装的不用另外安装)**</li>
</ul>
<p>如果是手动安装的，可能没有这个模块，参考下面的就行：</p>
<p>先进入安装目录，然后执行下面的语句</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./configure \ </span><br><span class="line">--prefix=/usr/local/nginx \ </span><br><span class="line">--pid-path=/var/run/nginx/nginx.pid \ </span><br><span class="line">--lock-path=/var/lock/nginx.lock \ </span><br><span class="line">--error-log-path=/var/log/nginx/error.log \ </span><br><span class="line">--http-log-path=/var/log/nginx/access.log \ </span><br><span class="line">--with-http_gzip_static_module \ </span><br><span class="line">--http-client-body-temp-path=/var/temp/nginx/client \ </span><br><span class="line">--http-proxy-temp-path=/var/temp/nginx/proxy \ </span><br><span class="line">--http-fastcgi-temp-path=/var/temp/nginx/fastcgi \ </span><br><span class="line">--http-uwsgi-temp-path=/var/temp/nginx/uwsgi \ </span><br><span class="line">--http-scgi-temp-path=/var/temp/nginx/scgi \ </span><br><span class="line">--with-http_ssl_module</span><br></pre></td></tr></table></figure>

<p>编译和安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">make </span><br><span class="line"><span class="meta">#</span><span class="bash"> 然后</span></span><br><span class="line">make install</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>配置HTTPS</strong></li>
</ul>
<p>把ssl证书 *.crt 和 私钥 *.key 拷贝到自己nginx的conf目录中，例如：/usr/local/nginx/conf，然后新增 server 监听 443 端口：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">server &#123; </span><br><span class="line">    listen 443; </span><br><span class="line">    server_name www.imoocdsp.com; </span><br><span class="line">    # 开启ssl </span><br><span class="line">    ssl on; </span><br><span class="line">    # 配置ssl证书 </span><br><span class="line">    ssl_certificate xxxxx.crt; </span><br><span class="line">    # 配置证书秘钥 </span><br><span class="line">    ssl_certificate_key xxxx.key; </span><br><span class="line">    # ssl会话cache </span><br><span class="line">    ssl_session_cache shared:SSL:1m; </span><br><span class="line">    # ssl会话超时时间 </span><br><span class="line">    ssl_session_timeout 5m; </span><br><span class="line">    # 配置加密套件，写法遵循 openssl 标准 </span><br><span class="line">    ssl_protocols TLSv1 TLSv1.1 TLSv1.2; </span><br><span class="line">    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE; </span><br><span class="line">    ssl_prefer_server_ciphers on; </span><br><span class="line">    location / &#123; </span><br><span class="line">    		proxy_pass http://tomcats/;</span><br><span class="line">    		index index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure>

<p><strong>注：</strong>xxxxx.crt和xxxx.key换成自己的</p>
<ul>
<li>安装完以后 重启一下nginx即可</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./nginx -s reload</span><br></pre></td></tr></table></figure>

<h1 id="nginx缓存"><a href="#nginx缓存" class="headerlink" title="nginx缓存"></a>nginx缓存</h1><h2 id="浏览器缓存"><a href="#浏览器缓存" class="headerlink" title="浏览器缓存"></a>浏览器缓存</h2><p>​        nginx缓存的设置可以提高网站性能，对于某些网站的图片，一旦发布，改动的可能是非常小的，为了减小对服务器请求的压力，提高用户浏览速度，我们可以通过设置nginx中的expires，让用户访问一次后，将图片缓存在用户的浏览器中，且时间比较长的缓存。</p>
<p><img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/image-20210205161023363.png" alt="image-20210205161023363"></p>
<p><strong>Cache-control：</strong>用于控制HTTP缓存（在HTTP/1.0中可能部分没实现，仅仅实现了 Pragma: no-cache）<br><strong>Expires：</strong>表示到期时间，允许客户端在这个时间之前不去检查（发请求），等同max-age的效果。但是<strong>如果同时存在，则被Cache-Control的max-age覆盖。</strong></p>
<p>​        nginx可以在location或者if中使用，例如：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"># 语法：expires [time|epoch|max|off]，默认值：off</span><br><span class="line">location /images&#123;</span><br><span class="line">	....</span><br><span class="line">	# expries 10s; 持续10秒</span><br><span class="line">	# expries 10h; 持续10小时</span><br><span class="line">	# expries 10d; 持续10天</span><br><span class="line">  # expries @12h30m;  当前时间超过12:30就在第二天12:30过期，否则就是今天12:30过期</span><br><span class="line">	# expries off; </span><br><span class="line">  # expries -1; 永不过期</span><br><span class="line">  # expries epoch; 过期时间Thu, 01 Jan 1970 00:00:01 GMT</span><br><span class="line">	expries max; # 过期时间是 Thu, 31 Dec 2037 23:55:55 GMT，Cache-Control是十年</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​        当nginx设置了expires后，例如设置为：expires 10h; 那么，所在的location或if的内容，用户在10小时内请求的时候，都只会访问浏览器中的缓存，而不会去请求nginx。</p>
<p><strong>注：这种缓存方式只能在用户不对浏览器强制刷新的情况下生效，如果用户通过url来进行访问，是可以访问到缓存的。</strong></p>
<h2 id="反向代理缓存"><a href="#反向代理缓存" class="headerlink" title="反向代理缓存"></a>反向代理缓存</h2><figure class="highlight"><table><tr><td class="code"><pre><span class="line"># proxy_cache_path 设置缓存目录 </span><br><span class="line"># keys_zone 设置共享内存以及占用空间大小 </span><br><span class="line"># max_size 设置缓存大小 </span><br><span class="line"># inactive 超过此时间则被清理 </span><br><span class="line"># use_temp_path 临时目录，使用后会影响nginx性能 </span><br><span class="line"></span><br><span class="line">proxy_cache_path /usr/local/nginx/upstream_cache keys_zone=mycache:5m max_size=1g inactive=1m use_temp_path= </span><br><span class="line"></span><br><span class="line">location / &#123; </span><br><span class="line">		proxy_pass http://test; </span><br><span class="line">		# 启用缓存，和keys_zone一致 </span><br><span class="line">		proxy_cache mycache; </span><br><span class="line">		# 针对200和304状态码缓存时间为8小时 </span><br><span class="line">		proxy_cache_valid 200 304 8h; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="TODO-keepalived"><a href="#TODO-keepalived" class="headerlink" title="TODO keepalived"></a>TODO keepalived</h1>]]></content>
      <categories>
        <category>nginx</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>JMM&amp;volatile</title>
    <url>/posts/bd9cf9f0.html</url>
    <content><![CDATA[<h1 id="Java内存模型-JMM"><a href="#Java内存模型-JMM" class="headerlink" title="Java内存模型(JMM)"></a>Java内存模型(JMM)</h1><h2 id="什么是JMM"><a href="#什么是JMM" class="headerlink" title="什么是JMM?"></a>什么是JMM?</h2><p>​        JMM即Java内存模型(Java Memory Model)，它是一种抽象的概念，并不真实存在，它描述的是一组规则或规范，通过这组规范定义了程序中各个变量（包括实例字段，静态字段和构成数组对象的元素）的访问方式。</p>
<p>​        JVM运行程序的实体是线程，而每个线程创建时JVM都会为其创建一个工作内存，用于存储线程私有的数据。而<strong>Java内存模型中规定所有变量都存储在主内存，主内存是共享内存区域，所有线程都可以访问，但线程对变量的操作(读取赋值等)必须在工作内存中进行</strong>。所以线程要将变量从主内存拷贝的自己的工作内存空间，然后对变量进行操作，操作完成后再将变量写回主内存，不能直接操作主内存中的变量。工作内存中存储着主内存中的变量副本拷贝。工作内存是每个线程的私有数据区域，因此不同的线程间无法访问对方的工作内存，线程间的通信(传值)必须通过主内存来完成。</p>
<p>​        <strong>JMM是围绕原子性，有序性、可见性展开</strong>。在JMM中主内存属于共享数据区域，从某个程度上讲应该包括了堆和方法区，而工作内存数据线程私有数据区域，从某个程度上讲则应该包括程序计数器、虚拟机栈以及本地方法栈。</p>
<p>线程、工作内存、主内存交互方式如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/image-20211117213435409.png" alt="image-20211117213435409"></p>
<p><strong>主内存</strong></p>
<p>​        主要存储的是Java实例对象，所有线程创建的实例对象都存放在主内存中，不管该**实例对象是成员变量还是方法中的本地变量(也称局部变量)**，当然也包括了共享的类信息、常量、静态变量。由于是共享数据区域，多个线程对同一个变量进行访问可能会发生线程安全问题。</p>
<p><strong>工作内存</strong></p>
<p>​        主要存储当前方法的所有本地变量信息(工作内存中存储着主内存中的变量副本拷贝)，每个线程只能访问自己的工作内存，即线程中的本地变量对其它线程是不可见的，就算是两个线程执行的是同一段代码，它们也会各自在自己的工作内存中创建属于当前线程的本地变量，当然也包括了字节码行号指示器、相关Native方法的信息。<strong>由于工作内存是每个线程的私有数据，线程间无法相互访问工作内存，因此存储在工作内存的数据不存在线程安全问题。</strong></p>
<h2 id="JAVA内存模型八大原子操作"><a href="#JAVA内存模型八大原子操作" class="headerlink" title="JAVA内存模型八大原子操作"></a>JAVA内存模型八大原子操作</h2><ul>
<li><p>**lock(锁定)**：作用于主内存的变量，把一个变量标记为一条线程独占状态</p>
</li>
<li><p>**unlock(解锁)**：作用于主内存的变量，把一个处于锁定状态的变量释放出来，释放后的变量才可以被其他线程锁定</p>
</li>
<li><p>**read(读取)**：作用于主内存的变量，把一个变量值从主内存传输到线程的工作内存中，以便随后的load动作使用</p>
</li>
<li><p>**load(载入)**：作用于工作内存的变量，它把read操作从主内存中得到的变量值放入工作内存的变量副本中</p>
</li>
<li><p>**use(使用)**：作用于工作内存的变量，把工作内存中的一个变量值传递给执行引擎</p>
</li>
<li><p>**assign(赋值)**：作用于工作内存的变量，它把一个从执行引擎接收到的值赋给工作内存的变量</p>
</li>
<li><p>**store(存储)**：作用于工作内存的变量，把工作内存中的一个变量的值传送到主内存中，以便随后的write的操作</p>
</li>
<li><p>**write(写入)**：作用于工作内存的变量，它把store操作从工作内存中的一个变量的值传送到主内存的变量中</p>
</li>
</ul>
<p>​        如果要把一个变量从主内存中复制到工作内存中，就需要按顺序地执行read和load操作，如果把变量从工作内存中同步到主内存中，就需要按顺序地执行store和write操作。但Java内存模型只要求上述操作必须按顺序执行，而没有保证必须是连续执行。</p>
<p><img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/image-20211117214248949.png" alt="image-20211117214248949"></p>
<h3 id="同步规则分析"><a href="#同步规则分析" class="headerlink" title="同步规则分析"></a><strong>同步规则分析</strong></h3><ol>
<li>不允许一个线程无原因地（没有发生过任何assign操作）把数据从工作内存同步回主内存中</li>
<li>一个新的变量只能在主内存中诞生，不允许在工作内存中直接使用一个未被初始化（load或者assign）的变量。即就是对一个变量实施use和store操作之前，必须先自行assign和load操作。</li>
<li>一个变量在同一时刻只允许一条线程对其进行lock操作，但lock操作可以被同一线程重复执行多次，多次执行lock后，只有执行相同次数的unlock操作，变量才会被解锁。lock和unlock必须成对出现。</li>
<li>如果对一个变量执行lock操作，将会清空工作内存中此变量的值，在执行引擎使用这个变量之前需要重新执行load或assign操作初始化变量的值。</li>
<li>如果一个变量事先没有被lock操作锁定，则不允许对它执行unlock操作；也不允许去unlock一个被其他线程锁定的变量。</li>
<li>对一个变量执行unlock操作之前，必须先把此变量同步到主内存中（执行store和write操作）</li>
</ol>
<h2 id="并发编程三大重要特性"><a href="#并发编程三大重要特性" class="headerlink" title="并发编程三大重要特性"></a>并发编程三大重要特性</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><ol>
<li><p><strong>原⼦性</strong> : ⼀个的操作或者多次操作，要么所有的操作全部都得到执⾏并且不会收到任何因素的⼲扰⽽中断，要么所有的操作都执⾏，要么都不执⾏。</p>
</li>
<li><p><strong>可⻅性</strong> ：可见性是指当⼀个变量对共享变量进⾏了修改，那么另外的线程都是⽴即可以看到修改后的最新值。 </p>
<p>在多线程环境中，由于线程对共享变量的操作都是线程拷贝到各自的工作内存进行操作后才写回到主内存中的，这就可能存在一个线程A修改了共享变量x的值，还未写回主内存时，另外一个线程B又对主内存中同一个共享变量x进行操作，但此时A线程工作内存中共享变量x对线程B来说并不可见，这种工作内存与主内存同步延迟现象就造成了可见性问题；另外<strong>指令重排以及编译器优化也可能导致可见性问题</strong>。</p>
</li>
<li><p><strong>有序性</strong> ：有序性是指对于单线程的执行代码，我们总是认为代码的执行是按顺序依次执行的，这样的理解并没有毛病，毕竟对于单线程而言确实如此，但对于多线程环境，则可能出现乱序现象，因为程序编译成机器码指令后可能会出现指令重排现象，重排后的指令与原指令的顺序未必一致，要明白的是，在Java程序中，倘若在本线程内，所有操作都视为有序行为，如果是多线程环境下，一个线程中观察另外一个线程，所有操作都是无序的，前半句指的是单线程内保证串行语义执行的一致性，后半句则指指令重排现象和工作内存与主内存同步延迟现象。 <strong>volatile 关键字可以禁⽌指令进⾏重排序优化</strong>。</p>
</li>
</ol>
<p><strong>拓展：</strong></p>
<p>​        早期32位系统，long类型数据和double类型数据它们的读写并非原子性的(对于基本数据类型，byte、short、int、float、boolean、char读写是原子操作)，也就是说如果存在两条线程同时对long类型或者double类型的数据进行读写是存在相互干扰的，因为对于32位虚拟机来说，每次原子读写是32位的，而long和double则是64位的存储单元，这样会导致一个线程在写时，操作完前32位的原子操作后，轮到B线程读取时，恰好只读取到了后32位的数据，这样可能会读取到一个既非原值又不是线程修改值的变量，它可能是“半个变量”的数值，即64位数据被两个线程分成了两次读取。但是此问题比较少见，而且目前的商用虚拟机几乎都把64位的数据的读写操作作为原子操作来执行，所以了解即可，不用太过担心。</p>
<h3 id="如何解决"><a href="#如何解决" class="headerlink" title="如何解决"></a>如何解决</h3><h4 id="原子性问题"><a href="#原子性问题" class="headerlink" title="原子性问题"></a><strong>原子性问题</strong></h4><p>​        除了JVM自身提供的对基本数据类型读写操作的原子性外，可以通过 synchronized、Lock以及一些JDK自带的原子类来实现原子性。</p>
<h4 id="可见性问题"><a href="#可见性问题" class="headerlink" title="可见性问题"></a><strong>可见性问题</strong></h4><p>​        volatile关键字保证可见性。当一个共享变量被volatile修饰时，它会保证修改的值立即被其他的线程看到，即修改的值立即更新到主存中，当其他线程需要读取时，它会去内存中读取新值。synchronized和Lock也可以保证可见性，因为它们可以保证任一时刻只有一个线程能访问共享资源，并在其释放锁之前将修改的变量刷新到内存中。</p>
<h4 id="有序性问题"><a href="#有序性问题" class="headerlink" title="有序性问题"></a>有序性问题</h4><p>​        在Java里，volatile关键字来保证一定的“有序性”。另外可以通过synchronized和Lock来保证有序性(保证每个时刻是有一个线程执行同步代码，相当于是让线程顺序执行同步代码，自然就保证了有序性)。</p>
<p><strong>Java内存模型</strong>：</p>
<p>​        每个线程都有自己的工作内存（类似于前面的高速缓存）。线程对变量的所有操作都必须在工作内存中进行，而不能直接对主存进行操作。并且每个线程不能访问其他线程的工作内存。Java内存模型具备一些先天的“有序性”，即不需要通过任何手段就能够得到保证的有序性，这个通常也称为happens-before 原则。如果两个操作的执行次序无法从happens-before原则推导出来，那么它们就不能保证它们的有序性，虚拟机可以随意地对它们进行重排序。</p>
<p><strong>指令重排序</strong>：</p>
<p>​        java语言规范规定JVM线程内部维持顺序化语义。即只要程序的最终结果与它顺序化情况的结果相等，那么指令的执行顺序可以与代码顺序不一致，此过程叫指令的重排序。指令重排序的意义在于JVM能根据处理器特性（CPU多级缓存系统、多核处理器等）适当的对机器指令进行重排序，使机器指令能更符合CPU的执行特性，最大限度的发挥机器性能。</p>
<p>从源码到最终执行的指令序列示意图如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/image-20211117220238654.png" alt="image-20211117220238654"></p>
<h2 id="as-if-serial语义"><a href="#as-if-serial语义" class="headerlink" title="as-if-serial语义"></a><strong>as-if-serial语义</strong></h2><p>as-if-serial语义的意思是：不管怎么重排序（编译器和处理器为了提高并行度），（单线程）程序的执行结果不能被改变。编译器、runtime和处理器都必须遵守as-if-serial语义。</p>
<p>为了遵守as-if-serial语义，编译器和处理器不会对存在数据依赖关系的操作做重排序，因为这种重排序会改变执行结果。但是，如果操作之间不存在数据依赖关系，这些操作就可能被编译器和处理器重排序。</p>
<h2 id="happens-before-原则"><a href="#happens-before-原则" class="headerlink" title="happens-before 原则"></a><strong>happens-before 原则</strong></h2><p>只靠sychronized和volatile关键字来保证原子性、可见性以及有序性，那么编写并发程序可能会显得十分麻烦，幸运的是，从JDK 5开始，Java使用新的JSR-133内存模型，提供了happens-before 原则来辅助保证程序执行的原子性、可见性以及有序性的问题，它是判断数据是否存在竞争、线程是否安全的依据，happens-before 原则内容如下</p>
<ol>
<li>程序顺序原则：在一个线程内必须保证语义串行性，也就是说按照代码顺序执行。</li>
<li>锁规则：解锁(unlock)操作必然发生在后续的同一个锁的加锁(lock)之前，也就是说，如果对于一个锁解锁后，再加锁，那么加锁的动作必须在解锁动作之后(同一个锁)。</li>
<li>volatile规则：volatile变量的写，先发生于读，这保证了volatile变量的可见性，简单的理解就是，volatile变量在每次被线程访问时，都强迫从主内存中读该变量的值，而当该变量发生变化时，又会强迫将最新的值刷新到主内存，任何时刻，不同的线程总是能够看到该变量的最新值。</li>
<li>线程启动规则：线程的start()方法先于它的每一个动作，即如果线程A在执行线程B的start方法之前修改了共享变量的值，那么当线程B执行start方法时，线程A对共享变量的修改对线程B可见</li>
<li>传递性：A先于B ，B先于C 那么A必然先于C</li>
<li>线程终止规则：线程的所有操作先于线程的终结，Thread.join()方法的作用是等待当前执行的线程终止。假设在线程B终止之前，修改了共享变量，线程A从线程B的join方法成功返回后，线程B对共享变量的修改将对线程A可见。</li>
<li>线程中断规则：对线程 interrupt()方法的调用先行发生于被中断线程的代码检测到中断事件的发生，可以通过Thread.interrupted()方法检测线程是否中断。</li>
<li>对象终结规则：对象的构造函数执行，结束先于finalize()方法</li>
</ol>
<h1 id="volatile"><a href="#volatile" class="headerlink" title="volatile"></a><strong>volatile</strong></h1><p>​        volatile是Java虚拟机提供的轻量级的同步机制。volatile关键字有如下两个作用：</p>
<ul>
<li>保证被volatile修饰的共享变量对所有线程总数可见的，也就是当一个线程修改了一个被volatile修饰共享变量的值，新值总是可以被其他线程立即得知。</li>
<li>禁止指令重排序优化。</li>
</ul>
<h2 id="volatile保证可见性"><a href="#volatile保证可见性" class="headerlink" title="volatile保证可见性"></a>volatile保证可见性</h2><p>​        被volatile修饰的变量对所有线程总数立即可见的，对volatile变量的所有写操作总是能立刻反应到其他线程中：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VolatileVisibilityTest</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 不加volatile 程序不能监听到initFlag的改变</span></span><br><span class="line">    <span class="comment">// boolean initFlag = false;</span></span><br><span class="line">    <span class="keyword">volatile</span> <span class="keyword">boolean</span> initFlag = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.initFlag = <span class="keyword">true</span>;</span><br><span class="line">        String threadName = Thread.currentThread().getName();</span><br><span class="line">        System.out.println(<span class="string">&quot;线程：&quot;</span> + threadName + <span class="string">&quot;:修改共享变量initFlag&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">load</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String threadName = Thread.currentThread().getName();</span><br><span class="line">        <span class="keyword">while</span> (!initFlag) &#123;</span><br><span class="line">            <span class="comment">//线程在此处空跑，等待initFlag状态改变</span></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;线程：&quot;</span> + threadName + <span class="string">&quot;当前线程检测到initFlag的状态的改变&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        VolatileVisibilityTest sample = <span class="keyword">new</span> VolatileVisibilityTest();</span><br><span class="line">        Thread threadA = <span class="keyword">new</span> Thread(sample::save, <span class="string">&quot;threadA&quot;</span>);</span><br><span class="line">        Thread threadB = <span class="keyword">new</span> Thread(sample::load, <span class="string">&quot;threadB&quot;</span>);</span><br><span class="line">        threadB.start();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        threadA.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="volatile无法保证原子性"><a href="#volatile无法保证原子性" class="headerlink" title="volatile无法保证原子性"></a>volatile无法保证原子性</h2><p>​        虽然被volatile修饰的变量在发生改变以后它的值会立刻被其它线程感知到，但是在并发场景下，多个线程同时调用操作counter++的话，就会出现线程安全问题。毕竟++操作并不具备原子性，该操作是分三步完成，如果第二个线程在第一个线程读取旧值和写回新值期间读取i的域值，那么第二个线程就会与第一个线程一起看到同一个值，并执行相同值的加1操作，这也就造成了线程安全问题，因此对于++方法必须使用synchronized修饰，以便保证线程安全，需要注意的是一旦使用synchronized修饰方法后，由于synchronized本身也具备与volatile相同的特性，即可见性，因此在这样种情况下就完全可以省去volatile修饰变量。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AtomicCounterTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> <span class="keyword">int</span> counter = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            Thread thread = <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">10000</span>; j++) &#123;</span><br><span class="line">                    counter++;<span class="comment">//分三步 - 读，自加，写回</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            thread.start();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(counter);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="volatile禁止重排优化"><a href="#volatile禁止重排优化" class="headerlink" title="volatile禁止重排优化"></a><strong>volatile禁止重排优化</strong></h2><p>​        volatile关键字另一个作用就是禁止指令重排优化，从而避免多线程环境下程序出现乱序执行的现象。下面我们来了解一下volatile是如何实现禁止指令重排优化的。</p>
<h3 id="硬件层的内存屏障"><a href="#硬件层的内存屏障" class="headerlink" title="硬件层的内存屏障"></a><strong>硬件层的内存屏障</strong></h3><p> Intel硬件提供了一系列的内存屏障，主要有： </p>
<ol>
<li><p>lfence，是一种Load Barrier 读屏障 </p>
</li>
<li><p>sfence, 是一种Store Barrier 写屏障 </p>
</li>
<li><p>mfence, 是一种全能型的屏障，具备ifence和sfence的能力 </p>
</li>
<li><p>Lock前缀，Lock不是一种内存屏障，但是它能完成类似内存屏障的功能。Lock会对CPU总线和高速缓存加锁，可以理解为CPU指令级的一种锁。它后面可以跟ADD, ADC, AND, BTC, BTR, BTS, CMPXCHG, CMPXCH8B, DEC, INC, NEG, NOT, OR, SBB, SUB, XOR, XADD, and XCHG等指令。</p>
</li>
</ol>
<p>​        不同硬件实现内存屏障的方式不同，Java内存模型屏蔽了这种底层硬件平台的差异，由JVM来为不同的平台生成相应的机器码。 JVM中提供了四类内存屏障指令：</p>
<table>
<thead>
<tr>
<th>屏障类型</th>
<th>指令示例</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>LoadLoad</td>
<td>Load1; LoadLoad; Load2</td>
<td>保证load1的读取操作在load2及后续读取操作之前执行</td>
</tr>
<tr>
<td>StoreStore</td>
<td>Store1; StoreStore; Store2</td>
<td>在store2及其后的写操作执行前，保证store1的写操作已刷新到主内存</td>
</tr>
<tr>
<td>LoadStore</td>
<td>Load1; LoadStore; Store2</td>
<td>在stroe2及其后的写操作执行前，保证load1的读操作已读取结束</td>
</tr>
<tr>
<td>StoreLoad</td>
<td>Store1; StoreLoad; Load2</td>
<td>保证store1的写操作已刷新到主内存之后，load2及其后的读操作才能执行</td>
</tr>
</tbody></table>
<p>​        内存屏障，又称内存栅栏，是一个CPU指令，它的作用有两个，一是保证特定操作的执行顺序，二是保证某些变量的内存可见性（利用该特性实现volatile的内存可见性）。<strong>由于编译器和处理器都能执行指令重排优化</strong>。如果在指令间插入一条Memory Barrier则会告诉编译器和CPU，不管什么指令都不能和这条Memory Barrier指令重排序，也就是说通过插入内存屏障禁止在内存屏障前后的指令执行重排序优化。Memory Barrier的另外一个作用是强制刷出各种CPU的缓存数据，因此任何CPU上的线程都能读取到这些数据的最新版本。总之，volatile变量正是通过内存屏障实现其在内存中的语义，即可见性和禁止重排优化。下面看一个非常典型的禁止重排优化的例子–双重校验锁实现单例模式，如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DoubleCheckLock</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> DoubleCheckLock instance;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">DoubleCheckLock</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DoubleCheckLock <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//第一次检测</span></span><br><span class="line">        <span class="keyword">if</span> (instance==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="comment">//同步</span></span><br><span class="line">            <span class="keyword">synchronized</span> (DoubleCheckLock.class)&#123;</span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="keyword">null</span>)&#123;</span><br><span class="line">                    <span class="comment">//多线程环境下可能会出现问题的地方</span></span><br><span class="line">                    instance = <span class="keyword">new</span>  DoubleCheckLock();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​        上述代码在单线程环境下并没有什么问题，但如果在多线程环境下就可以出现线程安全问题。原因在于某一个线程执行到第一次检测，读取到的instance不为null时，instance的引用对象可能没有完成初始化。</p>
<p>又因为<code>instance = new DoubleCheckLock();</code>可以分为以下3步完成(伪代码)</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">memory = allocate();<span class="comment">//1.分配对象内存空间</span></span><br><span class="line">instance(memory);<span class="comment">//2.初始化对象</span></span><br><span class="line">instance = memory;<span class="comment">//3.设置instance指向刚分配的内存地址，此时instance！=null</span></span><br></pre></td></tr></table></figure>

<p>由于步骤2和步骤3间可能会重排序，如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">memory=allocate();<span class="comment">//1.分配对象内存空间</span></span><br><span class="line">instance=memory;<span class="comment">//3.设置instance指向刚分配的内存地址，此时instance！=null，但是对象还没有初始化完成！</span></span><br><span class="line">instance(memory);<span class="comment">//2.初始化对象</span></span><br></pre></td></tr></table></figure>

<p>​        由于步骤2和步骤3不存在数据依赖关系，而且无论重排前还是重排后程序的执行结果在单线程中并没有改变，因此这种重排优化是允许的。但是指令重排只会保证串行语义的执行的一致性(单线程)，但并不会关心多线程间的语义一致性。所以当一条线程访问instance不为null时，由于instance实例未必已初始化完成，也就造成了线程安全问题。为了解决这个问题，我们使用volatile禁止instance变量被执行指令重排优化即可。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//禁止指令重排优化</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> DoubleCheckLock instance;</span><br></pre></td></tr></table></figure>

<p><strong>volatile内存语义的实现</strong></p>
<p>​        指令重排序可以分为编译器重排序和处理器重排序。为了实现volatile内存语义，JMM会分别限制这两种类型的重排序类型。</p>
<p>下图是JMM针对编译器制定的volatile重排序规则表。</p>
<table>
<thead>
<tr>
<th>第一个操作</th>
<th>第二个操作：普通读写</th>
<th>第二个操作：volatile读</th>
<th>第二个操作：volatile写</th>
</tr>
</thead>
<tbody><tr>
<td>普通读写</td>
<td>可以重排</td>
<td>可以重排</td>
<td>不可以重排</td>
</tr>
<tr>
<td>volatile读</td>
<td>不可以重排</td>
<td>不可以重排</td>
<td>不可以重排</td>
</tr>
<tr>
<td>volatile写</td>
<td>可以重排</td>
<td>不可以重排</td>
<td>不可以重排</td>
</tr>
</tbody></table>
<p>从上面的表格可以看出：</p>
<ul>
<li><ul>
<li><strong>当第二个操作是volatile写时，不管第一个操作是什么，都不能重排序。</strong>这个规则确保volatile写之前的操作不会被编译器重排序到volatile写之后。</li>
<li><strong>当第一个操作是volatile读时，不管第二个操作是什么，都不能重排序。</strong>这个规则确保volatile读之后的操作不会被编译器重排序到volatile读之前。</li>
<li><strong>当第一个操作是volatile写，第二个操作是volatile读或写时，不能重排序。</strong></li>
</ul>
</li>
</ul>
<p>​        为了实现volatile的内存语义，编译器在生成字节码时，会在指令序列中插入内存屏障来禁止特定类型的处理器重排序。对于编译器来说，发现一个最优布置来最小化插入屏障的总数几乎不可能。为此，JMM采取保守策略。下面是基于保守策略的JMM内存屏障插入策略。</p>
<ul>
<li><ul>
<li>·在每个volatile写操作的前面插入一个StoreStore屏障。</li>
<li>·在每个volatile写操作的后面插入一个StoreLoad屏障。</li>
<li>·在每个volatile读操作的后面插入一个LoadLoad屏障。</li>
<li>·在每个volatile读操作的后面插入一个LoadStore屏障。</li>
</ul>
</li>
</ul>
<p>​        上述内存屏障插入策略非常保守，但它可以保证在任意处理器平台，任意的程序中都能得到正确的volatile内存语义。</p>
<p>// TODO 未完待续</p>
]]></content>
      <categories>
        <category>并发编程</category>
      </categories>
      <tags>
        <tag>并发编程</tag>
      </tags>
  </entry>
  <entry>
    <title>Synchronized详解</title>
    <url>/posts/adfc1815.html</url>
    <content><![CDATA[<p>​        在JMM中，我们了解到JVM除了自身提供的对基本数据类型读写操作的原子性外，还可以通过 synchronized、Lock类来实现原子性。而 synchronized、Lock类采用的方案都是<strong>序列化访问资源</strong>。也就是同一时间只允许一个线程访问临界资源，这种同步也称为<strong>同步互斥访问</strong>。</p>
<p>​        总结来说，<strong>同步器的本质就是加锁</strong>，而加锁目的就是<strong>序列化访问临界资源</strong>，即同一时刻只能有一个线程访问临界资源(<strong>同步互斥访问</strong>)。本篇文章，我们先来了解一下Synchronized关键字。</p>
<p><strong>注：</strong>当多个线程执行一个方法时，方法内部的局部变量并不是临界资源，因为这些局部变量是在每个线程的私有栈中，因此不具有共享性，不会导致线程安全问题。</p>
<h1 id="Synchronized详解"><a href="#Synchronized详解" class="headerlink" title="Synchronized详解"></a>Synchronized详解</h1><blockquote>
<p> Synchronized内置锁是一种对象锁（<strong>锁的是对象而非引用</strong>），作用的粒度是对象，可以用来实现临界资源的同步互斥访问，<strong>是可重入的</strong>。        </p>
</blockquote>
<h2 id="Synchronized锁分类"><a href="#Synchronized锁分类" class="headerlink" title="Synchronized锁分类"></a>Synchronized锁分类</h2><p>一般根据加锁位置，我们可以分为如下几种情况：</p>
<ul>
<li><p><strong>修饰实例(普通)⽅法</strong>：对<strong>当前对象加锁</strong>。</p>
</li>
<li><p><strong>修饰静态⽅法： 锁是当前类</strong>，会作⽤于类的所有对象实例，因为静态成员不属于任何⼀个实例对象，是类成员（ static 表明这是该类的⼀个静态资源，不管new了多少个对象，只有⼀份）。所以如果⼀个线程A调⽤⼀个实例对象的⾮静态 synchronized ⽅法，⽽线程B需要调⽤这个实例对象所属类的静态 synchronized ⽅法，是允许的，不会发⽣互斥现象。因为访问静态<strong>synchronized</strong> ⽅法占⽤的锁是当前类的锁，⽽访问⾮静态 <strong>synchronized</strong> ⽅法占⽤的锁是当前实例对象锁。</p>
</li>
<li><p><strong>修饰代码块</strong>：Synchonized括号里配置的内容是锁的对象。</p>
</li>
</ul>
<h3 id="synchronized是⼀种互斥锁"><a href="#synchronized是⼀种互斥锁" class="headerlink" title="synchronized是⼀种互斥锁"></a><strong>synchronized是⼀种互斥锁</strong></h3><ul>
<li>⼀次只能允许⼀个线程进⼊被锁住的代码块，synchronized是⼀种<strong>内置锁/监视器锁</strong></li>
<li>Java中<strong>每个对象都有⼀个内置锁(监视器,也可以理解成锁标记)**，⽽</strong>synchronized就是使⽤对象的内置锁(监视器)来将代码块(⽅法)锁定的**。 (锁的是对象，但我们同步的是⽅法/代码块)</li>
</ul>
<p><strong>注1：</strong></p>
<ul>
<li>把<strong>整个方法体</strong>作为同步代码块<strong>默认的锁对象</strong>是 <strong>this</strong> 对象</li>
<li>把<strong>整个静态方法</strong>体作为同步代码块，<strong>默认的锁对象</strong>是当前类的运行时<strong>类</strong>。</li>
<li>尽量<strong>不要使⽤synchronized(String a)</strong> 因为JVM中，字符串常量池具有缓存功能</li>
</ul>
<h2 id="Synchronized锁底层原理"><a href="#Synchronized锁底层原理" class="headerlink" title="Synchronized锁底层原理"></a>Synchronized锁底层原理</h2><p>​        <strong>synchronized是基于JVM</strong>内置锁实现，通过内部对象<strong>Monitor</strong>(监视器锁)实现，基于进入与退出<strong>Monitor</strong>对象实现方法与代码块同步，监视器锁的实现依赖底层操作系统的<strong>Mutex lock</strong>（互斥锁）实现，它是一个重量级锁性能较低。</p>
<p>​        当然，<strong>JVM内置锁在1.5之后版本做了重大的优化，</strong>如锁粗化（Lock Coarsening）、锁消除（Lock Elimination）、轻量级锁（Lightweight Locking）、偏向锁（Biased Locking）、适应性自旋（Adaptive Spinning）等技术来减少锁操作的开销，内置锁的并发性能已经基本与Lock持平。</p>
<p>​        首先我们看一个实例及其反编译结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SynchronizedTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>)&#123;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 反编译结果</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>;</span><br><span class="line">    descriptor: ()V</span><br><span class="line">    flags: ACC_PUBLIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=<span class="number">3</span>, locals=<span class="number">3</span>, args_size=<span class="number">1</span></span><br><span class="line">         <span class="number">0</span>: aload_0</span><br><span class="line">         <span class="number">1</span>: dup</span><br><span class="line">         <span class="number">2</span>: astore_1</span><br><span class="line">         <span class="number">3</span>: monitorenter</span><br><span class="line">         <span class="number">4</span>: aload_0</span><br><span class="line">         <span class="number">5</span>: dup</span><br><span class="line">         6: getfield      #2                  // Field i:I</span><br><span class="line">         <span class="number">9</span>: iconst_1</span><br><span class="line">        <span class="number">10</span>: iadd</span><br><span class="line">        11: putfield      #2                  // Field i:I</span><br><span class="line">        <span class="number">14</span>: aload_1</span><br><span class="line">        <span class="number">15</span>: monitorexit</span><br><span class="line">        <span class="number">16</span>: goto          <span class="number">24</span></span><br><span class="line">        <span class="number">19</span>: astore_2</span><br><span class="line">        <span class="number">20</span>: aload_1</span><br><span class="line">        <span class="number">21</span>: monitorexit</span><br><span class="line">        <span class="number">22</span>: aload_2</span><br><span class="line">        <span class="number">23</span>: athrow</span><br><span class="line">        <span class="number">24</span>: <span class="keyword">return</span></span><br></pre></td></tr></table></figure>

<p>​        从上面我们可以看到synchronized关键字被编译成字节码后会被翻译成monitorenter 和 monitorexit 两条指令分别在同步块逻辑代码的起始位置与结束位置。</p>
<p><img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/image-20211120155706477.png" alt="image-20211120155706477"></p>
<p>每个同步对象都有一个自己的Monitor(监视器锁)，加锁过程如下图所示：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/image-20211120155734084.png" alt="image-20211120155734084"></p>
<h3 id="Monitor监视器锁"><a href="#Monitor监视器锁" class="headerlink" title="Monitor监视器锁"></a><strong>Monitor监视器锁</strong></h3><p> <strong>任何一个对象都有一个Monitor与之关联，当且一个Monitor被持有后，它将处于锁定状态</strong>。Synchronized在JVM里的实现都是 <strong>基于进入和退出Monitor对象来实现方法同步和代码块同步</strong>，虽然具体实现细节不一样，但是都可以通过成对的MonitorEnter和MonitorExit指令来实现。</p>
<ul>
<li><p><strong>monitorenter</strong>：每个对象都是一个监视器锁（monitor）。当monitor被占用时就会处于锁定状态，线程执行monitorenter指令时尝试获取monitor的所有权，过程如下：</p>
</li>
<li><ol>
<li><strong>如果monitor的进入数为0</strong>，则该线程进入monitor，然后将进入数设置为1，该线程即为monitor的所有者；</li>
<li><strong>如果线程已经占有该monitor</strong>，只是重新进入，则进入monitor的进入数加1；</li>
<li><strong>如果其他线程已经占用了monitor</strong>，则该线程进入阻塞状态，直到monitor的进入数为0，再重新尝试获取monitor的所有权；</li>
</ol>
</li>
<li><p><strong>monitorexit</strong>：执行monitorexit的线程必须是object引用所对应的monitor的所有者。<strong>指令执行时，monitor的进入数减1，如果减1后进入数为0，那线程退出monitor，不再是这个monitor的所有者</strong>。其他被这个monitor阻塞的线程可以尝试去获取这个 monitor 的所有权。</p>
</li>
</ul>
<h4 id="为什么monitorexit出现两次？"><a href="#为什么monitorexit出现两次？" class="headerlink" title="为什么monitorexit出现两次？"></a>为什么monitorexit出现两次？</h4><p>​        <strong>monitorexit，指令出现了两次，第1次为同步正常退出释放锁；第2次为发生异步退出释放锁</strong>；</p>
<p>​        通过上面的描述，我们应该能很清楚的看出Synchronized的实现原理，<strong>Synchronized的语义底层是通过一个monitor的对象来完成，其实wait/notify等方法也依赖于monitor对象</strong>，这就是为什么只有在同步的块或者方法中才能调用wait/notify等方法，<strong>否则会抛出java.lang.IllegalMonitorStateException的异常的原因</strong>。</p>
<p>再看一个同步方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SynchronizedTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;test...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="comment">// 反编译结果</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>;</span><br><span class="line">    descriptor: ()V</span><br><span class="line">    flags: ACC_PUBLIC, ACC_SYNCHRONIZED</span><br><span class="line">    Code:</span><br><span class="line">      stack=<span class="number">2</span>, locals=<span class="number">1</span>, args_size=<span class="number">1</span></span><br><span class="line">         0: getstatic     #2                  // Field java/lang/System.out:Ljava/io/PrintStream;</span><br><span class="line">         3: ldc           #3                  // String test...</span><br><span class="line">         5: invokevirtual #4                  // Method java/io/PrintStream.println:(Ljava/lang/String;)V</span><br><span class="line">         <span class="number">8</span>: <span class="keyword">return</span></span><br></pre></td></tr></table></figure>

<p>​        从编译的结果来看，方法的同步并没有通过指令 <strong>monitorenter</strong> 和 <strong>monitorexit</strong> 来完成（理论上其实也可以通过这两条指令来实现），不过相对于普通方法，其常量池中多了 <strong>ACC_SYNCHRONIZED</strong> 标示符。<strong>JVM就是根据该标示符来实现方法的同步的</strong>：</p>
<p>​        当方法调用时，<strong>调用指令将会检查方法的 ACC_SYNCHRONIZED 访问标志是否被设置</strong>，如果设置了，<strong>执行线程将先获取monitor</strong>，获取成功之后才能执行方法体，<strong>方法执行完后再释放monitor</strong>。在方法执行期间，其他任何线程都无法再获得同一个monitor对象。</p>
<p>​        两种同步方式本质上没有区别，只是方法的同步是一种隐式的方式来实现，无需通过字节码来完成。<strong>两个指令的执行是JVM通过调用操作系统的互斥原语mutex来实现，被阻塞的线程会被挂起、等待重新调度</strong>，会导致“用户态和内核态”两个态之间来回切换，对性能有较大影响。</p>
<h3 id="什么是monitor？–-gt-拓展"><a href="#什么是monitor？–-gt-拓展" class="headerlink" title="什么是monitor？–&gt; 拓展"></a><strong>什么是monitor？</strong>–&gt; 拓展</h3><p>​        可以把它理解为 <strong>一个同步工具</strong>，也可以描述为 <strong>一种同步机制</strong>，它通常被 <strong>描述为一个对象</strong>。与一切皆对象一样，所有的Java对象是天生的Monitor，每一个Java对象都有成为Monitor的潜质，<strong>因为在Java的设计中 ，每一个Java对象一旦存在就自带了一把看不见的锁，它叫做内部锁或者Monitor锁。也就是通常说Synchronized的对象锁，MarkWord锁标识位为10，其中指针指向的是Monitor对象的起始地址</strong>。在Java虚拟机（HotSpot）中，<strong>Monitor是由ObjectMonitor实现的</strong>，其主要数据结构如下（位于HotSpot虚拟机源码ObjectMonitor.hpp文件，C++实现的）：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">ObjectMonitor() &#123;</span><br><span class="line">    _header       = <span class="literal">NULL</span>;</span><br><span class="line">    _count        = <span class="number">0</span>; <span class="comment">// 记录个数</span></span><br><span class="line">    _waiters      = <span class="number">0</span>,</span><br><span class="line">    _recursions   = <span class="number">0</span>;</span><br><span class="line">    _object       = <span class="literal">NULL</span>;</span><br><span class="line">    _owner        = <span class="literal">NULL</span>;</span><br><span class="line">    _WaitSet      = <span class="literal">NULL</span>; <span class="comment">// 处于wait状态的线程，会被加入到_WaitSet</span></span><br><span class="line">    _WaitSetLock  = <span class="number">0</span> ;</span><br><span class="line">    _Responsible  = <span class="literal">NULL</span> ;</span><br><span class="line">    _succ         = <span class="literal">NULL</span> ;</span><br><span class="line">    _cxq          = <span class="literal">NULL</span> ;</span><br><span class="line">    FreeNext      = <span class="literal">NULL</span> ;</span><br><span class="line">    _EntryList    = <span class="literal">NULL</span> ; <span class="comment">// 处于等待锁block状态的线程，会被加入到该列表</span></span><br><span class="line">    _SpinFreq     = <span class="number">0</span> ;</span><br><span class="line">    _SpinClock    = <span class="number">0</span> ;</span><br><span class="line">    OwnerIsThread = <span class="number">0</span> ;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>​        ObjectMonitor中有两个队列，<strong>_WaitSet 和 _EntryList</strong>，用来保存ObjectWaiter对象列表（ <strong>每个等待锁的线程都会被封装成ObjectWaiter对象</strong> ），<strong>_owner指向持有ObjectMonitor对象的线程</strong>，当多个线程同时访问一段同步代码时：</p>
<ol>
<li>首先会进入 _EntryList 集合，<strong>当线程获取到对象的monitor后，进入 _Owner区域并把monitor中的owner变量设置为当前线程，同时monitor中的计数器count加1</strong>；</li>
<li>若线程调用 wait() 方法，<strong>将释放当前持有的monitor，owner变量恢复为null，count自减1，同时该线程进入 WaitSet集合中等待被唤醒</strong>；</li>
<li>若当前线程执行完毕，**也将释放monitor（锁）并复位count的值，以便其他线程进入获取monitor(锁)**；</li>
</ol>
<p>同时，<strong>Monitor对象存在于每个Java对象的对象头Mark Word中（存储的指针的指向），Synchronized锁便是通过这种方式获取锁的</strong>，也是为什么Java中任意对象可以作为锁的原因，<strong>同时notify/notifyAll/wait等方法会使用到Monitor锁对象，所以必须在同步代码块中使用</strong>。监视器Monitor有两种同步方式：<strong>互斥与协作</strong>。多线程环境下线程之间如果需要共享数据，需要解决互斥访问数据的问题，<strong>监视器可以确保监视器上的数据在同一时刻只会有一个线程在访问</strong>。</p>
<p>那么有个问题来了，我们知道synchronized加锁加在对象上，对象是如何记录锁状态的呢？答案是锁状态是被记录在每个对象的对象头（Mark Word）中，下面我们一起认识一下对象的内存布局</p>
<h3 id="对象的内存布局"><a href="#对象的内存布局" class="headerlink" title="对象的内存布局"></a>对象的内存布局</h3><blockquote>
<p>HotSpot虚拟机中，对象在内存中存储的布局可以分为三块区域：对象头（Header）、实例数据（Instance Data）和对齐填充（Padding）。</p>
</blockquote>
<ul>
<li>对象头：比如 hash码，对象所属的年代，对象锁，锁状态标志，偏向锁（线程）ID，偏向时间，数组长度（数组对象）等。<strong>Java对象头一般占有2个机器码</strong>（在32位虚拟机中，1个机器码等于4字节，也就是32bit，在64位虚拟机中，1个机器码是8个字节，也就是64bit），但是 <strong>如果对象是数组类型，则需要3个机器码，因为JVM虚拟机可以通过Java对象的元数据信息确定Java对象的大小</strong>，但是无法从数组的元数据来确认数组的大小，所以用一块来记录数组长度。</li>
<li>实例数据：存放类的属性数据信息，包括父类的属性信息；</li>
<li>对齐填充：由于虚拟机要求 <strong>对象起始地址必须是8字节的整数倍</strong>。填充数据不是必须存在的，仅仅是为了字节对齐；</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/image-20211120163057958.png" alt="image-20211120163057958"></p>
<h4 id="对象头"><a href="#对象头" class="headerlink" title="对象头"></a>对象头</h4><p>​        HotSpot虚拟机的<strong>对象头</strong>包括两部分信息，第一部分是<strong>“Mark Word</strong>”，用于存储对象自身的运行时数据， 如哈希码（HashCode）、GC分代年龄、锁状态标志、线程持有的锁、偏向线程ID、偏向时间戳等等，<strong>它是实现轻量级锁和偏向锁的关键</strong>。，这部分数据的长度在32位和64位的虚拟机（暂 不考虑开启压缩指针的场景）中分别为32个和64个Bits，官方称它为“Mark Word”。对象需要存储的运行时数据很多，其实已经超出了32、64位Bitmap结构所能记录的限度，但是对象头信息是与对象自身定义的数据无关的额 外存储成本，考虑到虚拟机的空间效率，Mark Word被设计成一个非固定的数据结构以便在极小的空间内存储尽量多的信息，它会根据对象的状态复用自己的存储空间。例如在32位的HotSpot虚拟机 中对象未被锁定的状态下，Mark Word的32个Bits空间中的25Bits用于存储对象哈希码（HashCode），4Bits用于存储对象分代年龄，2Bits用于存储锁标志位，1Bit固定为0，在其他状态（轻量级锁定、重量级锁定、GC标记、可偏向）下对象的存储内容如下表所示。</p>
<p>​        但是如果对象是数组类型，则需要三个机器码，因为JVM虚拟机可以通过Java对象的元数据信息确定Java对象的大小，但是无法从数组的元数据来确认数组的大小，所以用一块来记录数组长度。</p>
<p>​        对象头信息是与对象自身定义的数据无关的额外存储成本，但是考虑到虚拟机的空间效率，Mark Word被设计成一个非固定的数据结构以便在极小的空间内存存储尽量多的数据，它会根据对象的状态复用自己的存储空间，也就是说，Mark Word会随着程序的运行发生变化。</p>
<p>变化状态如下：</p>
<p>32位虚拟机</p>
<p><img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/image-20211120163251699.png" alt="image-20211120163251699"></p>
<p>64位虚拟机</p>
<p><img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/image-20211120163318664.png" alt="image-20211120163318664"></p>
<p>现在我们虚拟机基本是64位的，而64位的对象头有点浪费空间，JVM默认会开启指针压缩，所以基本上也是按32位的形式记录对象头的。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-XX:+UseCompressedOops #开启压缩指针。  </span><br><span class="line">-XX:-UseCompressedOops #关闭压缩指针。 </span><br></pre></td></tr></table></figure>

<h5 id="哪些信息会被压缩？–-gt-拓展"><a href="#哪些信息会被压缩？–-gt-拓展" class="headerlink" title="哪些信息会被压缩？–&gt;拓展"></a>哪些信息会被压缩？–&gt;拓展</h5><p>1.对象的全局静态变量(即类属性)</p>
<p>2.对象头信息：64位平台下，原生对象头大小为16字节，压缩后为12字节</p>
<p>3.对象的引用类型：64位平台下，引用类型本身大小为8字节，压缩后为4字节</p>
<p>4.对象数组类型：64位平台下，数组类型本身大小为24字节，压缩后16字节</p>
<p>​        在Scott oaks写的《java性能权威指南》第八章8.22节提到了当heap size堆内存大于32GB是用不了压缩指针的，对象引用会额外占用20%左右的堆空间，也就意味着要38GB的内存才相当于开启了指针压缩的32GB堆空间。</p>
<p>​        这是为什么呢？看下面的粗体字（来自openjdk wiki：<a href="https://wiki.openjdk.java.net/display/HotSpot/CompressedOops%EF%BC%89%E3%80%8232bit%E6%9C%80%E5%A4%A7%E5%AF%BB%E5%9D%80%E7%A9%BA%E9%97%B4%E6%98%AF4GB%EF%BC%8C%E5%BC%80%E5%90%AF%E4%BA%86%E5%8E%8B%E7%BC%A9%E6%8C%87%E9%92%88%E4%B9%8B%E5%90%8E%E5%91%A2%EF%BC%8C%E4%B8%80%E4%B8%AA%E5%9C%B0%E5%9D%80%E5%AF%BB%E5%9D%80%E4%B8%8D%E5%86%8D%E6%98%AF1byte%EF%BC%8C%E8%80%8C%E6%98%AF8byte%EF%BC%8C%E5%9B%A0%E4%B8%BA**%E4%B8%8D%E7%AE%A1%E6%98%AF32bit%E7%9A%84%E6%9C%BA%E5%99%A8%E8%BF%98%E6%98%AF64bit%E7%9A%84%E6%9C%BA%E5%99%A8%EF%BC%8Cjava%E5%AF%B9%E8%B1%A1%E9%83%BD%E6%98%AF8byte%E5%AF%B9%E9%BD%90%E7%9A%84**%EF%BC%8C%E8%80%8C%E7%B1%BB%E6%98%AFjava%E4%B8%AD%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%8D%95%E4%BD%8D%EF%BC%8C%E5%AF%B9%E5%BA%94%E7%9A%84%E5%A0%86%E5%86%85%E5%AD%98%E4%B8%AD%E9%83%BD%E6%98%AF%E4%B8%80%E4%B8%AA%E4%B8%80%E4%B8%AA%E7%9A%84%E5%AF%B9%E8%B1%A1%E3%80%82">https://wiki.openjdk.java.net/display/HotSpot/CompressedOops）。32bit最大寻址空间是4GB，开启了压缩指针之后呢，一个地址寻址不再是1byte，而是8byte，因为**不管是32bit的机器还是64bit的机器，java对象都是8byte对齐的**，而类是java中的基本单位，对应的堆内存中都是一个一个的对象。</a></p>
<h4 id="对象头分析"><a href="#对象头分析" class="headerlink" title="对象头分析"></a>对象头分析</h4><p>运行时对象头锁状态分析工具JOL，他是OpenJDK开源工具包，引入下方maven依赖</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.openjdk.jol&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;jol-core&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;0.10&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<p>打印markword</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Object object = <span class="keyword">new</span> Object();</span><br><span class="line">System.out.println(ClassLayout.parseInstance(object).toPrintable());</span><br></pre></td></tr></table></figure>

<h4 id="锁的膨胀升级过程"><a href="#锁的膨胀升级过程" class="headerlink" title="锁的膨胀升级过程"></a><strong>锁的膨胀升级过程</strong></h4><p>​        锁的状态总共有四种，<strong>无锁状态、偏向锁、轻量级锁和重量级锁</strong>。随着锁的竞争，锁可以从偏向锁升级到轻量级锁，再升级的重量级锁，但是锁的升级是单向的，也就是说只能从低到高升级，不会出现锁的降级。从<strong>JDK 1.6 中默认是开启偏向锁和轻量级锁的</strong>，可以通过-XX:-UseBiasedLocking来禁用偏向锁。下图为Synchronized锁的升级全过程：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/clipboard.png" alt="clipboard"></p>
<p>JVM锁膨胀升级过程如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/JVM%E9%94%81%E7%9A%84%E8%86%A8%E8%83%80%E5%8D%87%E7%BA%A7.jpg" alt="JVM锁的膨胀升级"></p>
<h5 id="偏向锁"><a href="#偏向锁" class="headerlink" title="偏向锁"></a><strong>偏向锁</strong></h5><p>​        偏向锁是Java 6之后加入的新锁，它是一种针对加锁操作的优化手段，经过研究发现，在大多数情况下，锁不仅不存在多线程竞争，而且总是由同一线程多次获得，因此为了减少同一线程获取锁(会涉及到一些CAS操作,耗时)的代价而引入偏向锁。偏向锁的核心思想是，如果一个线程获得了锁，那么锁就进入偏向模式，此时Mark Word 的结构也变为偏向锁结构，当这个线程再次请求锁时，无需再做任何同步操作，即获取锁的过程，这样就省去了大量有关锁申请的操作，从而也就提供程序的性能。所以，对于没有锁竞争的场合，偏向锁有很好的优化效果，毕竟极有可能连续多次是同一个线程申请相同的锁。但是对于锁竞争比较激烈的场合，偏向锁就失效了，因为这样场合极有可能每次申请锁的线程都是不相同的，因此这种场合下不应该使用偏向锁，否则会得不偿失，需要注意的是，偏向锁失败后，并不会立即膨胀为重量级锁，而是先升级为轻量级锁。下面我们接着了解轻量级锁。</p>
<p>默认开启偏向锁</p>
<blockquote>
<p>开启偏向锁：-XX:+UseBiasedLocking -XX:BiasedLockingStartupDelay=0</p>
<p>关闭偏向锁：-XX:-UseBiasedLocking</p>
</blockquote>
<h5 id="轻量级锁"><a href="#轻量级锁" class="headerlink" title="轻量级锁"></a><strong>轻量级锁</strong></h5><p>​        倘若偏向锁失败，虚拟机并不会立即升级为重量级锁，它还会尝试使用一种称为轻量级锁的优化手段(1.6之后加入的)，此时Mark Word 的结构也变为轻量级锁的结构。轻量级锁能够提升程序性能的依据是“对绝大部分的锁，在整个同步周期内都不存在竞争”，注意这是经验数据。需要了解的是，轻量级锁所适应的场景是线程交替执行同步块的场合，如果存在同一时间访问同一锁的场合，就会导致轻量级锁膨胀为重量级锁。</p>
<h5 id="自旋锁"><a href="#自旋锁" class="headerlink" title="自旋锁"></a><strong>自旋锁</strong></h5><p>​        轻量级锁失败后，虚拟机为了避免线程真实地在操作系统层面挂起，还会进行一项称为自旋锁的优化手段。这是基于在大多数情况下，线程持有锁的时间都不会太长，如果直接挂起操作系统层面的线程可能会得不偿失，毕竟操作系统实现线程之间的切换时需要从用户态转换到核心态，这个状态之间的转换需要相对比较长的时间，时间成本相对较高，因此自旋锁会假设在不久将来，当前的线程可以获得锁，因此虚拟机会让当前想要获取锁的线程做几个空循环(这也是称为自旋的原因)，一般不会太久，可能是50个循环或100循环，在经过若干次循环后，如果得到锁，就顺利进入临界区。如果还不能获得锁，那就会将线程在操作系统层面挂起，这就是自旋锁的优化方式，这种方式确实也是可以提升效率的。最后没办法也就只能升级为重量级锁了。</p>
<h5 id="锁消除"><a href="#锁消除" class="headerlink" title="锁消除"></a><strong>锁消除</strong></h5><p>​        消除锁是虚拟机另外一种锁的优化，这种优化更彻底，Java虚拟机在JIT编译时(可以简单理解为当某段代码即将第一次被执行时进行编译，又称即时编译)，通过对运行上下文的扫描，去除不可能存在共享资源竞争的锁，通过这种方式消除没有必要的锁，可以节省毫无意义的请求锁时间，如StringBuffer的append是一个同步方法，但是在add方法中的StringBuffer属于一个局部变量，并且不会被其他线程所使用，因此StringBuffer不可能存在共享资源竞争的情景，JVM会自动将其锁消除。<strong>锁消除的依据是逃逸分析的数据支持。</strong></p>
<p>锁消除，前提是java必须运行在server模式（server模式会比client模式作更多的优化），同时必须开启逃逸分析</p>
<blockquote>
<p>:-XX:+DoEscapeAnalysis 开启逃逸分析</p>
<p>-XX:+EliminateLocks 表示开启锁消除。</p>
</blockquote>
<h5 id="逃逸分析"><a href="#逃逸分析" class="headerlink" title="逃逸分析"></a><strong>逃逸分析</strong></h5><p>使用逃逸分析，编译器可以对代码做如下优化：</p>
<blockquote>
<p>一、同步省略。如果一个对象被发现只能从一个线程被访问到，那么对于这个对象的操作可以不考虑同步。</p>
<p>二、将堆分配转化为栈分配。如果一个对象在子程序中被分配，要使指向该对象的指针永远不会逃逸，对象可能是栈分配的候选，而不是堆分配。</p>
<p>三、分离对象或标量替换。有的对象可能不需要作为一个连续的内存结构存在也可以被访问到，那么对象的部分（或全部）可以不存储在内存，而是存储在CPU寄存器中。</p>
</blockquote>
<p>是不是所有的对象和数组都会在堆内存分配空间？</p>
<blockquote>
<p><strong>不一定</strong></p>
</blockquote>
<p>在Java代码运行时，通过JVM参数可指定是否开启逃逸分析， 从jdk 1.7开始已经默认开启逃逸分析，如需关闭，需要指定-XX:-DoEscapeAnalysis</p>
<blockquote>
<p>-XX:+DoEscapeAnalysis ： 表示开启逃逸分析</p>
<p>-XX:-DoEscapeAnalysis ： 表示关闭逃逸分析。</p>
</blockquote>
<p>逃逸分析的案例论证之前在JVM中提到了，这里暂不赘述。</p>
]]></content>
      <categories>
        <category>并发编程</category>
      </categories>
      <tags>
        <tag>并发编程</tag>
      </tags>
  </entry>
  <entry>
    <title>一文搞定负载均衡-Ribbon</title>
    <url>/posts/420f5f4e.html</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="密码不正确，请重新输入！" data-whm="文章不能被校验, 不过您还是能看看解密后的内容！">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">该文章还未完全完成, 请输入密码查看。</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="9ee912b6c524b96635c1ff3e96be00c88224ae8868790422887fdf38b0ba13c2"></script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>SpringCloud Alibaba</category>
      </categories>
      <tags>
        <tag>SpringCloud Alibaba</tag>
      </tags>
  </entry>
  <entry>
    <title>并发编程-缓存一致性协议MESI</title>
    <url>/posts/e7dad272.html</url>
    <content><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>在我们使用<code>多线程</code>共同执行<code>写操作</code>更改<code>同一个共享变量</code>时，会导致数据运算的不正确性。比较典型就是i++问题，在多线程共同对一个变量进行++操作时，我们很难得到正确的结果：</p>
<blockquote>
<p>一个自增运算符是一个复合操作，至少包括三个 JVM 指令：”内存取值”、”寄存器增加 1”、”存值到内存”。这三个指令在 JVM 内部是独 立进行的，中间完全可能会出现多个线程并发进行。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestCounter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">1000</span>; j++) &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread() + <span class="string">&quot;====&gt;&quot;</span> + count++);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>为了保证数据的正确性，计算机硬件使用了以下两种方式来处理这个问题：</p>
<ul>
<li>总线锁</li>
<li>缓存一致性协议</li>
</ul>
<h2 id="总线锁"><a href="#总线锁" class="headerlink" title="总线锁"></a>总线锁</h2><p>​        早期计算机技术不是很发达的时候，为了解决多线程操作数据的并发问题，使用的是<code>总线锁</code>。比如查看被<code>volatile</code>修饰的共享变量的<code>汇编指令</code>，会发现有一个lock的关键字。</p>
<p>​        虽然<code>总线锁</code>在一定程度上解决了数据操作的并发问题，但是总线锁在使用时，处理器会提供一个<code>LOCK#</code>信号，当一个处理器在总线上输出此信号会独占共享锁，其他处理器的请求将被阻塞。此时，相对其他cpu而言，整体就是一个<code>单核CPU</code>，这样多核CPU的优势就无法发挥，导致处理效率十分低下。</p>
<h2 id="缓存一致性协议（MESI）"><a href="#缓存一致性协议（MESI）" class="headerlink" title="缓存一致性协议（MESI）"></a>缓存一致性协议（MESI）</h2><p>​        上文中我们了解到总线锁虽然解决了问题，但是仍旧有很大的弊端。为了解决这种<code>互斥问题</code>，后面提出了<code>缓存一致性协议</code>的解决方案。</p>
<p>​        <code>缓存一致性协议</code>多种多样(MESI、MSI等)，其中最常用的就是<code>MESI缓存一致性协议</code>。</p>
<h3 id="多级缓存架构"><a href="#多级缓存架构" class="headerlink" title="多级缓存架构"></a>多级缓存架构</h3><p>​        在了解什么是MESI之前，我们有必要先了解一下当前流行的多级缓存架构：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/webp.jpg" alt="img"></p>
<ul>
<li>L1 Cache，<strong>分为数据缓存和指令缓存</strong>，逻辑核独占</li>
<li>L2 Cache，物理核独占，逻辑核共享</li>
<li>L3 Cache，所有物理核共享</li>
</ul>
<p>级别越小的缓存，越接近CPU， 意味着速度越快且容量越少。</p>
<ul>
<li>存储器存储空间大小：内存&gt;L3&gt;L2&gt;L1&gt;寄存器；</li>
<li>存储器速度快慢排序：寄存器&gt;L1&gt;L2&gt;L3&gt;内存；</li>
</ul>
<blockquote>
<p>L1是最接近CPU的，它容量最小，速度最快，每个核上都有一个L1 Cache(准确地说每个核上有两个L1 Cache， 一个存数据 L1d Cache， 一个存指令 L1i Cache)；</p>
<p>L2 Cache 更大一些，速度要慢一些，一般情况下每个核上都有一个独立的L2 Cache；二级缓存就是一级缓存的缓冲器：一级缓存制造成本很高因此它的容量有限，二级缓存的作用就是存储那些CPU处理时需要用到、一级缓存又无法存储的数据。</p>
<p>L3 Cache是三级缓存中最大的一级，例如12MB，同时也是最慢的一级，在同一个CPU插槽之间的核共享一个L3 Cache。三级缓存和内存可以看作是二级缓存的缓冲器，它们的容量递增，但单位制造成本却递减。</p>
<p>当CPU运作时，它首先去L1寻找它所需要的数据，然后去L2，然后去L3。如果三级缓存都没找到它需要的数据，则从内存里获取数据。寻找的路径越长，耗时越长。所以如果要非常频繁的获取某些数据，保证这些数据在L1缓存里。这样速度将非常快。</p>
</blockquote>
<h3 id="什么是MESI"><a href="#什么是MESI" class="headerlink" title="什么是MESI"></a>什么是MESI</h3><h4 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h4><p>MESI也就是缓存一致性协议，对应如下四种状态：</p>
<table>
<thead>
<tr>
<th>状态</th>
<th>描述</th>
<th>监听任务</th>
</tr>
</thead>
<tbody><tr>
<td>M 修改 (Modified)</td>
<td>该Cache line有效，数据被修改了，和内存中的数据不一致，数据只存在于本Cache中。</td>
<td>缓存行必须时刻监听所有试图读该缓存行相对就主存的操作，这种操作必须在缓存将该缓存行写回主存并将状态变成S（共享）状态之前被延迟执行。</td>
</tr>
<tr>
<td>E 独享、互斥 (Exclusive)</td>
<td>该Cache line有效，数据和内存中的数据一致，数据只存在于本Cache中。</td>
<td>缓存行也必须监听其它缓存读主存中该缓存行的操作，一旦有这种操作，该缓存行需要变成S（共享）状态。</td>
</tr>
<tr>
<td>S 共享 (Shared)</td>
<td>该Cache line有效，数据和内存中的数据一致，数据存在于很多Cache中。</td>
<td>缓存行也必须监听其它缓存使该缓存行无效或者独享该缓存行的请求，并将该缓存行变成无效（Invalid）。</td>
</tr>
<tr>
<td>I 无效 (Invalid)</td>
<td>该Cache line无效。</td>
<td>无</td>
</tr>
</tbody></table>
<p><strong>Cache Line：</strong>缓存存储数据的单元。64字节，每个Cache line有4个状态，可用2个bit表示。</p>
<p><strong>注意：</strong></p>
<p>​        <strong>对于M和E状态而言总是精确的，他们在和该缓存行的真正状态是一致的，而S状态可能是非一致的</strong>。如果一个缓存将处于S状态的缓存行作废了，而另一个缓存实际上可能已经独享了该缓存行，但是该缓存却不会将该缓存行升迁为E状态，这是因为其它缓存不会广播他们作废掉该缓存行的通知，同样由于缓存并没有保存该缓存行的copy的数量，因此（即使有这种通知）也没有办法确定自己是否已经独享了该缓存行。</p>
<p>​        从上面的意义看来E状态是一种投机性的优化：如果一个CPU想修改一个处于S状态的缓存行，总线事务需要将所有该缓存行的copy变成invalid状态，而修改E状态的缓存不需要使用总线事务。</p>
<p><code>MESI</code>四种工作状态转换逻辑图如下所示：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/image-20211115220724301.png" alt="MESI协议状态切换过程分析"></p>
<p>1.触发事件</p>
<table>
<thead>
<tr>
<th>触发事件</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>本地读取（Local read）</td>
<td>本地cache读取本地cache数据</td>
</tr>
<tr>
<td>本地写入（Local write）</td>
<td>本地cache写入本地cache数据</td>
</tr>
<tr>
<td>远端读取（Remote read）</td>
<td>其他cache读取本地cache数据</td>
</tr>
<tr>
<td>远端写入（Remote write）</td>
<td>其他cache写入本地cache数据</td>
</tr>
</tbody></table>
<p>2.cache分类：</p>
<p>前提：所有的cache共同缓存了主内存中的某一条数据。</p>
<p>本地cache：指当前cpu的cache。</p>
<p>触发cache：触发读写事件的cache。</p>
<p>其他cache：指既除了以上两种之外的cache。</p>
<p>注意：本地的事件触发 本地cache和触发cache为相同。</p>
<p>上图的切换解释：</p>
<table>
<thead>
<tr>
<th>状态</th>
<th>触发本地读取</th>
<th>触发本地写入</th>
<th>触发远端读取</th>
<th>触发远端写入</th>
</tr>
</thead>
<tbody><tr>
<td><strong>M状态（修改）</strong></td>
<td>本地cache:M 触发cache:M其他cache:I</td>
<td>本地cache:M 触发cache:M其他cache:I</td>
<td>本地cache:M→E→S触发cache:I→S其他cache:I→S同步主内存后修改为E独享,同步触发、其他cache后本地、触发、其他cache修改为S共享</td>
<td>本地cache:M→E→S→I触发cache:I→S→E→M其他cache:I→S→I同步和读取一样,同步完成后触发cache改为M，本地、其他cache改为I</td>
</tr>
<tr>
<td><strong>E状态（独享）</strong></td>
<td>本地cache:E触发cache:E其他cache:I</td>
<td>本地cache:E→M触发cache:E→M其他cache:I本地cache变更为M,其他cache状态应当是I（无效）</td>
<td>本地cache:E→S触发cache:I→S其他cache:I→S当其他cache要读取该数据时，其他、触发、本地cache都被设置为S(共享)</td>
<td>本地cache:E→S→I触发cache:I→S→E→M其他cache:I→S→I当触发cache修改本地cache独享数据时时，将本地、触发、其他cache修改为S共享.然后触发cache修改为独享，其他、本地cache修改为I（无效），触发cache再修改为M</td>
</tr>
<tr>
<td><strong>S状态(共享)</strong></td>
<td>本地cache:S触发cache:S其他cache:S</td>
<td>本地cache:S→E→M触发cache:S→E→M其他cache:S→I 当本地cache修改时，将本地cache修改为E,其他cache修改为I,然后再将本地cache为M状态</td>
<td>本地cache:S触发cache:S其他cache:S</td>
<td>本地cache:S→I触发cache：S→E→M其他cache:S→I当触发cache要修改本地共享数据时，触发cache修改为E（独享）,本地、其他cache修改为I（无效）,触发cache再次修改为M(修改)</td>
</tr>
<tr>
<td><strong>I状态（无效）</strong></td>
<td>本地cache:I→S或者I→E触发cache:I→S或者I →E其他cache:E、M、I→S、I本地、触发cache将从I无效修改为S共享或者E独享，其他cache将从E、M、I 变为S或者I</td>
<td>本地cache:I→S→E→M触发cache:I→S→E→M其他cache:M、E、S→S→I</td>
<td>既然是本cache是I，其他cache操作与它无关</td>
<td>既然是本cache是I，其他cache操作与它无关</td>
</tr>
</tbody></table>
<p>下表示意了，当一个cache line的调整的状态的时候，另外一个cache line 需要调整的状态。</p>
<table>
<thead>
<tr>
<th></th>
<th>M</th>
<th>E</th>
<th>S</th>
<th><strong>I</strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong>M</strong></td>
<td>×</td>
<td>×</td>
<td>×</td>
<td>√</td>
</tr>
<tr>
<td><strong>E</strong></td>
<td>×</td>
<td>×</td>
<td>×</td>
<td>√</td>
</tr>
<tr>
<td><strong>S</strong></td>
<td>×</td>
<td>×</td>
<td>√</td>
<td>√</td>
</tr>
<tr>
<td><strong>I</strong></td>
<td>√</td>
<td>√</td>
<td>√</td>
<td>√</td>
</tr>
</tbody></table>
<p>举例来说：假设cache 1 中有一个变量x = 0的cache line 处于S状态(共享)。</p>
<p>那么其他拥有x变量的cache 2、cache 3等x的cache line调整为S状态（共享）或者调整为 I 状态（无效）。</p>
<h3 id="多核缓存协同操作"><a href="#多核缓存协同操作" class="headerlink" title="多核缓存协同操作"></a><strong>多核缓存协同操作</strong></h3><p>假设有三个CPU A、B、C，对应三个缓存分别是cache a、b、 c。在主内存中定义了x的引用值为0。</p>
<p><img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/image-20211118212939783.png" alt="image-20211118212939783"></p>
<h4 id="单核读取"><a href="#单核读取" class="headerlink" title="单核读取"></a><strong>单核读取</strong></h4><p>执行流程是：</p>
<p>CPU A发出了一条指令，从主内存中读取x。</p>
<p>从主内存通过bus读取到缓存中（远端读取Remote read）,这是该Cache line修改为E状态（独享）.</p>
<p><img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/image-20211118213021861.png" alt="image-20211118213021861"></p>
<h4 id="双核读取"><a href="#双核读取" class="headerlink" title="双核读取"></a><strong>双核读取</strong></h4><p>执行流程是：</p>
<p>CPU A发出了一条指令，从主内存中读取x。</p>
<p>CPU A从主内存通过bus读取到 cache a中并将该cache line 设置为E状态。</p>
<p>CPU B发出了一条指令，从主内存中读取x。</p>
<p>CPU B试图从主内存中读取x时，CPU A检测到了地址冲突。这时CPU A对相关数据做出响应。此时x 存储于cache a和cache b中，x在chche a和cache b中都被设置为S状态(共享)。</p>
<p><img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/image-20211118213058810.png" alt="image-20211118213058810"></p>
<h4 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a><strong>修改数据</strong></h4><p>执行流程是：</p>
<p>CPU A 计算完成后发指令需要修改x.</p>
<p>CPU A 将x设置为M状态（修改）并通知缓存了x的CPU B, CPU B将本地cache b中的x设置为I状态(无效)</p>
<p>CPU A 对x进行赋值。</p>
<p><img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/image-20211118213134046.png" alt="image-20211118213134046"></p>
<h4 id="同步数据"><a href="#同步数据" class="headerlink" title="同步数据"></a><strong>同步数据</strong></h4><p>执行流程是：</p>
<p>CPU B 发出了要读取x的指令。</p>
<p>CPU B 通知CPU A,CPU A将修改后的数据同步到主内存时cache a 修改为E（独享）</p>
<p>CPU A同步CPU B的x,将cache a和同步后cache b中的x设置为S状态（共享）。</p>
<p><img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/image-20211118213202758.png" alt="image-20211118213202758"></p>
<h3 id="MESI优化和他们引入的问题"><a href="#MESI优化和他们引入的问题" class="headerlink" title="MESI优化和他们引入的问题"></a><strong>MESI优化和他们引入的问题</strong></h3><hr>
<p>​        缓存的一致性消息传递是要时间的，这就使其切换时会产生延迟。当一个缓存被切换状态时其他缓存收到消息完成各自的切换并且发出回应消息这么一长串的时间中CPU都会等待所有缓存响应完成。可能出现的阻塞都会导致各种各样的性能问题和稳定性问题。</p>
<h4 id="CPU切换状态阻塞解决-存储缓存（Store-Bufferes）"><a href="#CPU切换状态阻塞解决-存储缓存（Store-Bufferes）" class="headerlink" title="CPU切换状态阻塞解决-存储缓存（Store Bufferes）"></a><strong>CPU切换状态阻塞解决-存储缓存（Store Bufferes）</strong></h4><p>​        比如你需要修改本地缓存中的一条信息，那么你必须将I（无效）状态通知到其他拥有该缓存数据的CPU缓存中，并且等待确认。等待确认的过程会阻塞处理器，这会降低处理器的性能。应为这个等待远远比一个指令的执行时间长的多。</p>
<h5 id="Store-Bufferes"><a href="#Store-Bufferes" class="headerlink" title="Store Bufferes"></a><strong>Store Bufferes</strong></h5><p>​        为了避免这种CPU运算能力的浪费，Store Bufferes被引入使用。处理器把它想要写入到主存的值写到缓存，然后继续去处理其他事情。当所有失效确认（Invalidate Acknowledge）都接收到时，数据才会最终被提交。</p>
<p>这么做有两个风险</p>
<h5 id="Store-Bufferes的风险"><a href="#Store-Bufferes的风险" class="headerlink" title="Store Bufferes的风险"></a><strong>Store Bufferes的风险</strong></h5><p>第一、就是处理器会尝试从存储缓存（Store buffer）中读取值，但它还没有进行提交。这个的解决方案称为Store Forwarding，它使得加载的时候，如果存储缓存中存在，则进行返回。</p>
<p>第二、保存什么时候会完成，这个并没有任何保证。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">value = <span class="number">3</span>；</span><br><span class="line"><span class="keyword">void</span> exeToCPUA()&#123;</span><br><span class="line">  value = <span class="number">10</span>;</span><br><span class="line">  isFinsh = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">exeToCPUB</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(isFinsh)&#123;</span><br><span class="line">    <span class="comment">//value一定等于10？！</span></span><br><span class="line">    assert value == <span class="number">10</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>试想一下开始执行时，CPU A保存着finished在E(独享)状态，而value并没有保存在它的缓存中。（例如，Invalid）。在这种情况下，value会比finished更迟地抛弃存储缓存。完全有可能CPU B读取finished的值为true，而value的值不等于10。</p>
<p><strong>即isFinsh的赋值在value赋值之前。</strong></p>
<p>这种在可识别的行为中发生的变化称为重排序（reordings）。注意，这不意味着你的指令的位置被恶意（或者好意）地更改。</p>
<p>它只是意味着其他的CPU会读到跟程序中写入的顺序不一样的结果。</p>
<h4 id="硬件内存模型"><a href="#硬件内存模型" class="headerlink" title="硬件内存模型"></a><strong>硬件内存模型</strong></h4><p>执行失效也不是一个简单的操作，它需要处理器去处理。另外，存储缓存（Store Buffers）并不是无穷大的，所以处理器有时需要等待失效确认的返回。这两个操作都会使得性能大幅降低。为了应付这种情况，引入了失效队列。它们的约定如下：</p>
<ul>
<li>对于所有的收到的Invalidate请求，Invalidate Acknowlege消息必须立刻发送</li>
<li>Invalidate并不真正执行，而是被放在一个特殊的队列中，在方便的时候才会去执行。</li>
<li>处理器不会发送任何消息给所处理的缓存条目，直到它处理Invalidate。</li>
</ul>
<p>即便是这样处理器已然不知道什么时候优化是允许的，而什么时候并不允许。</p>
<p>干脆处理器将这个任务丢给了写代码的人。这就是内存屏障（Memory Barriers）。</p>
<p><strong>写屏障 Store Memory Barrier(a.k.a. ST, SMB, smp_wmb)是一条告诉处理器在执行这之后的指令之前，应用所有已经在存储缓存（store buffer）中的保存的指令。</strong></p>
<p><strong>读屏障Load Memory Barrier (a.k.a. LD, RMB, smp_rmb)是一条告诉处理器在执行任何的加载前，先应用所有已经在失效队列中的失效操作的指令。</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">executedOnCpu0</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    value = <span class="number">10</span>;</span><br><span class="line">    <span class="comment">//在更新数据之前必须将所有存储缓存（store buffer）中的指令执行完毕。</span></span><br><span class="line">    storeMemoryBarrier();</span><br><span class="line">    finished = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">executedOnCpu1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(!finished);</span><br><span class="line">    <span class="comment">//在读取之前将所有失效队列中关于该数据的指令执行完毕。</span></span><br><span class="line">    loadMemoryBarrier();</span><br><span class="line">    assert value == <span class="number">10</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>并发编程</category>
      </categories>
      <tags>
        <tag>并发编程</tag>
      </tags>
  </entry>
  <entry>
    <title>多线程01-多线程基础</title>
    <url>/posts/1983de0a.html</url>
    <content><![CDATA[<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><h2 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h2><p>​        进程(Process)是计算机中的程序关于某数据集合上的一次运行活动，是操作系统进行资源分配与调度的基本单位，可以把进程简单的理解为正在操作系统中运行的一个程序。</p>
<h2 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h2><p>​        线程(thread)是进程的一个执行单元。一个线程就是进程中一个单一顺序的控制流, 进程的一个执行分支进程是线程的容器，一个进程至少有一个线程。一个进程中也可以 有多个线程。在操作系统中是以进程为单位分配资源，如虚拟存储空间，文件描述符等。 每个线程都有各自的线程栈，自己的寄存器环境，自己的线程 本地存储。</p>
<h2 id="主线程与子线程"><a href="#主线程与子线程" class="headerlink" title="主线程与子线程"></a>主线程与子线程</h2><p>​        JVM 启动时会创建一个主线程，该主线程负责执行 main 方法 。 主线程就是运行 main 方法的线程Java中的线程不孤立的，线程之间存在一些联系。 如果在 A 线程中创建了B线程, 称B线程为A线程的子线程, 相应的A线程就是B线程的父线程</p>
<h2 id="串行、并发与并行"><a href="#串行、并发与并行" class="headerlink" title="串行、并发与并行"></a>串行、并发与并行</h2><p><img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/image-20200910195621396.png" alt="image-20200910195621396"></p>
<h1 id="并发编程的三个重要特性"><a href="#并发编程的三个重要特性" class="headerlink" title="并发编程的三个重要特性"></a>并发编程的三个重要特性</h1><ol>
<li><strong>原⼦性</strong> : ⼀个的操作或者多次操作，要么所有的操作全部都得到执⾏并且不会收到任何因素的⼲扰⽽中断，要么所有的操作都执⾏，要么都不执⾏。 <strong>synchronized</strong> 可以保证代码⽚段的<strong>原⼦性</strong>。</li>
<li><strong>可⻅性</strong> ：当⼀个变量对共享变量进⾏了修改，那么另外的线程都是⽴即可以看到修改后的最新值。 <strong>volatile</strong> 关键字可以保证<strong>共享变量</strong>的<strong>可⻅性</strong>。</li>
<li><strong>有序性</strong> ：代码在执⾏的过程中的先后顺序，Java 在编译器以及运⾏期间的优化，代码的执⾏顺序未必就是编写代码时候的顺序。 <strong>volatile 关键字可以禁⽌指令进⾏重排序优化</strong>。</li>
</ol>
<p><strong>注意：</strong>Java 有两种方式实现原子性: 一种是使用<strong>锁</strong>; 另一种利用处理器的<strong>CAS(Compare and Swap)指令</strong>. </p>
<p>​        锁具有排它性,保证共享变量在某一时刻只能被一个线程访问. </p>
<p>​        CAS 指令直接在硬件(处理器和内存)层次上实现,看作是硬件锁</p>
<h1 id="什么是上下文切换"><a href="#什么是上下文切换" class="headerlink" title="什么是上下文切换?"></a>什么是上下文切换?</h1><p>​        多线程编程中一般线程的个数都大于 CPU 核心的个数，而一个 CPU 核心在任意时刻只能被一个线程使用，为了让这些线程都能得到有效执行，CPU 采取的策略是为每个线程分配时间片并轮转的形式。当一个线程的时间片用完的时候就会重新处于就绪状态让给其他线程使用，这个过程就属于一次上下文切换。</p>
<p>​        概括来说就是：当前任务在执行完 CPU 时间片切换到另一个任务之前会先保存自己的状态，以便下次再切换回这个任务时，可以再加载这个任务的状态。<strong>任务从保存到再加载的过程就是一次上下文切换</strong>。</p>
<p>​        上下文切换通常是计算密集型的。也就是说，它需要相当可观的处理器时间，在每秒几十上百次的切换中，每次切换都需要纳秒量级的时间。所以，上下文切换对系统来说意味着消耗大量的 CPU 时间，事实上，可能是操作系统中时间消耗最大的操作。</p>
<p>​        Linux 相比与其他操作系统（包括其他类 Unix 系统）有很多的优点，其中有一项就是，其上下文切换和模式切换的时间消耗非常少。</p>
<h1 id="多线程编程的优势与代价"><a href="#多线程编程的优势与代价" class="headerlink" title="多线程编程的优势与代价"></a>多线程编程的优势与代价</h1><blockquote>
<p>并发可以提高事物的处理效率，即一段时间内可以处理或者完成更多的事情。</p>
<p>并行是一种更为严格，理想的并发，从硬件角度来说, 如果单核 CPU，一个处理器一次只能执行一个线程的情况下，处理器可以使用时间片轮转技术，可以让 CPU 快速的在各个线程之间进行切换， 对于用户来说，感觉是多个线程在同时执行。 如果是多核心 CPU，可以为不同的线程分配不同的 CPU 内核。</p>
</blockquote>
<h2 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h2><ol>
<li><strong>提高系统的吞吐率</strong>：多线程编程可以使一个进程有多个并发的操作。</li>
<li><strong>提高响应性</strong>：Web服务器会采用一些专门的线程负责用户的请求处理，缩短了用户的等待时间。</li>
<li><strong>充分利用多核处理器资源</strong>： 通过多线程可以充分的利用 CPU 资源</li>
</ol>
<h2 id="代价"><a href="#代价" class="headerlink" title="代价"></a>代价</h2><ol>
<li><p><strong>线程安全(Thread safe)问题</strong>：多线程共享数据时，如果没有采取正确的并发访问控制措施，就可能会产生数据一致性问题，如读取脏数据(过期的数据)， 如丢失数据更新。</p>
</li>
<li><p><strong>线程活性(thread liveness)问题</strong>：由于程序自身的缺陷或者由资源稀缺性导致线程一直处于非 RUNNABLE 状态，这就是线程活性问题。</p>
<p>常见的活性故障有以下几种:</p>
<p>(1) 死锁(Deadlock) ：类似鹬蚌相争</p>
<p>(2) 锁死(Lockout) ：类似于睡美人故事中王子挂了</p>
<p>(3) 活锁(Livelock) ：类似于小猫咬自己尾巴，一直咬不到(一直在重复<strong>尝试—失败—尝试</strong>)</p>
<p>(4) 饥饿(Starvation) ：类似于健壮的雏鸟总是从母鸟嘴中抢到所有食物</p>
</li>
<li><p><strong>增大上下文切换(Context Switch) 开销</strong>：处理器从执行一个线程切换到执行另外一个线程，使⽤多线程我们的⽬的就是为了提⾼应⽤程序的使⽤率，但是如果多线程的代码没有好好设计的话，那未必会提⾼效率。<strong>反⽽降低了效率，甚⾄会造成死锁！</strong></p>
</li>
<li><p>可靠性：可能会由一个线程导致 JVM 意外终止，其他的线程也无法执行</p>
</li>
</ol>
<h1 id="线程的调度与时间片"><a href="#线程的调度与时间片" class="headerlink" title="线程的调度与时间片"></a>线程的调度与时间片</h1><p>​        由于 CPU 的计算频率非常高，每秒计算数十亿次，于是，可以将 CPU 的时间从毫秒的维度进行分段，每一小段叫做一个 CPU 时间片。不同的操作系统、不同的处理器，线程的 CPU 时间 片长度都不同。假定操作系统的线程一个时间片的时间长度为 20 毫秒，在 一个 2GHz 的 CPU 上，那么一个时间片可以进行计算的次数是：20 亿/（1000/20）= 4 千万次，也就是说，一个时间片内的计算量是非常巨大的。 </p>
<p>​        目前操作系统中主流的线程调度方式大都是：基于 CPU 时间片方式进行线程调度。线程只有得到 CPU 时间片，才能执行指令，处于执行状态；没有得到时间片的线程，处于就绪状态， 等待系统分配下一个 CPU 时间片。由于时间片非常短，在各个线程之间快速地切换，表现出来特征是很多个线程在“同时执行”或者“并发执行”。 </p>
<p>线程的调度模型，目前主要分为两种调度模型：<strong>分时调度模型、抢占式调度模型。</strong> </p>
<p>（1）分时调度模型——系统平均分配 CPU 的时间片，所有线程轮流占用 CPU。分时调度模型在时间片调度的分配上，所有线程人人平等。</p>
<img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/202201251504648.png" alt="image-20220125145849655" style="zoom:50%;" />

<p>（2）抢占式调度模型——系统按照线程优先级分配 CPU 时间片。优先级高的线程，优先分配 CPU 时间片；如果所有的就绪线程的优先级相同，那么会随机选择一个；优先级高的线程获取 的 CPU 时间片相对多一些。 </p>
<p>由于<strong>目前大部分操作系统都是使用抢占式调度模型进行线程调度</strong>，Java 的线程管理和调度是委托给了操作系统完成的，与之相对应，Java 的线程调度也是使用抢占式调度模型。所以，Java的线程都有优先级。线程优先级相关内容可以移步<a href="./bcf988be.html#%E7%BA%BF%E7%A8%8B%E4%BC%98%E5%85%88%E7%BA%A7">线程优先级</a> </p>
<h1 id="线程创建方法"><a href="#线程创建方法" class="headerlink" title="线程创建方法"></a>线程创建方法</h1><h2 id="继承Thread类"><a href="#继承Thread类" class="headerlink" title="继承Thread类"></a>继承Thread类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadCreate01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ThreadDemo threadDemo = <span class="keyword">new</span> ThreadDemo();</span><br><span class="line">        threadDemo.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadDemo</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;线程&quot;</span> + Thread.currentThread().getName() + <span class="string">&quot;被调用了...&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="实现Runnable接口"><a href="#实现Runnable接口" class="headerlink" title="实现Runnable接口"></a>实现Runnable接口</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadCreate02</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Integer MAX_TRUN = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/******** 方式 1 *******/</span></span><br><span class="line">        Thread thread = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</span><br><span class="line">            thread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; MAX_TRUN; j++) &#123;</span><br><span class="line">                        print(j);</span><br><span class="line">                    &#125;</span><br><span class="line">                    System.out.println(<span class="string">&quot;线程&quot;</span> + Thread.currentThread().getName() + <span class="string">&quot;执行结束&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            thread.start();</span><br><span class="line">            Thread.sleep(<span class="number">500</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/******** 方式 2 匿名函数 *******/</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</span><br><span class="line">            thread = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; MAX_TRUN; j++) &#123;</span><br><span class="line">                    print(j);</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(<span class="string">&quot;线程&quot;</span> + Thread.currentThread().getName() + <span class="string">&quot;执行结束&quot;</span>);</span><br><span class="line">            &#125;);</span><br><span class="line">            thread.start();</span><br><span class="line">            Thread.sleep(<span class="number">500</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/***</span></span><br><span class="line"><span class="comment">         * Runnable 接口源码如下：</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@FunctionalInterface</span> </span></span><br><span class="line"><span class="comment">         * public interface Runnable &#123; </span></span><br><span class="line"><span class="comment">         *  void run(); </span></span><br><span class="line"><span class="comment">         * &#125;</span></span><br><span class="line"><span class="comment">         * 从中我们能发现：</span></span><br><span class="line"><span class="comment">         * 在 Runnable 接口上声明了一个<span class="doctag">@FunctionalInterface</span></span></span><br><span class="line"><span class="comment">         * 注解。该注解的作用是： 标记 Runnable 接口是一个“函数式接口”。</span></span><br><span class="line"><span class="comment">         * 在 Java 中，“函数式接口”（Single Abstract Method）是有且仅有一个抽象方法的接口。</span></span><br><span class="line"><span class="comment">         * 反过来说，如果一个接口中包含两个或以上的抽象方法，</span></span><br><span class="line"><span class="comment">         * 那么不能使用<span class="doctag">@FunctionalInterface</span> 注解，否则编译会报错</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * 注：</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@FunctionalInterface</span> 注解不是必须的，只要一个接口符合“函数式接口”定义，</span></span><br><span class="line"><span class="comment">         * 使用时加不加<span class="doctag">@FunctionalInterface</span> 注解都没有影响，都可以当做“函数式接口” 来使用。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;线程&quot;</span> + Thread.currentThread().getName() + <span class="string">&quot;被调用了第&quot;</span> + i + <span class="string">&quot;次&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="使用Callable-和-FutureTask-创建线程"><a href="#使用Callable-和-FutureTask-创建线程" class="headerlink" title="使用Callable 和 FutureTask 创建线程"></a>使用Callable 和 FutureTask 创建线程</h2><blockquote>
<p>解决继承 Thread 类或者实现 Runnable 接口这两种方式来创建线程类共同的缺陷：不能获取异步执行的结果</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadCreate03</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyCallable</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Integer <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000L</span>); <span class="comment">// 模拟程序处理时间</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">123</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        MyCallable myCallable = <span class="keyword">new</span> MyCallable();</span><br><span class="line">        FutureTask&lt;Integer&gt; futureTask = <span class="keyword">new</span> FutureTask&lt;&gt;(myCallable);</span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(futureTask);</span><br><span class="line">        thread.start();</span><br><span class="line">        System.out.println(<span class="string">&quot;执行结果为：&quot;</span> + futureTask.get());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="线程池方式创建"><a href="#线程池方式创建" class="headerlink" title="线程池方式创建"></a>线程池方式创建</h2><blockquote>
<p>解决前几种方法线程不可复用的问题，提升系统的性能。（线程创建销毁成本比较高）</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadCreate04</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注：仅供测试，生产环境不要用这个，需要自己创建线程池</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ExecutorService service = Executors.newFixedThreadPool(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyCallable</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Integer <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000L</span>); <span class="comment">// 模拟程序处理时间</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">123</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; <span class="number">5</span>; j++) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;：&quot;</span> + j);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    TimeUnit.MILLISECONDS.sleep(<span class="number">10</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 方法一：执行一个 Runnable 类型的 target 执行目标实例，无返回 void execute(Runnable command);</span></span><br><span class="line">        <span class="comment">// 方法二：提交一个 Callable 类型的 target 执行目标实例, 返回一个 Future 异步任务实例 &lt;T&gt; Future&lt;T&gt; submit(Callable&lt;T&gt; task);</span></span><br><span class="line">        <span class="comment">// 方法三：提交一个 Runnable 类型的 target 执行目标实例, 返回一个 Future 异步任务实例 Future&lt;?&gt; submit(Runnable task);</span></span><br><span class="line">        System.out.println(<span class="string">&quot;execute执行开始.....&quot;</span>);</span><br><span class="line">        service.execute(<span class="keyword">new</span> MyRunnable());</span><br><span class="line">        System.out.println(<span class="string">&quot;execute执行结束.....&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;submit执行开始.....&quot;</span>);</span><br><span class="line">        Future&lt;Integer&gt; submit = service.submit(<span class="keyword">new</span> MyCallable());</span><br><span class="line">        System.out.println(submit.get());</span><br><span class="line">        System.out.println(<span class="string">&quot;submit执行结束.....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Thread类和Runnable接口的对比"><a href="#Thread类和Runnable接口的对比" class="headerlink" title="Thread类和Runnable接口的对比"></a>Thread类和Runnable接口的对比</h2><p>​        Thread类也是实现的Runnable接口。两种实现方式对比的关键就在于extends和implements的对比，当然是后者好。因为第一，继承只能单继承，实现可以多实现；第二，实现的方式对比继承的方式，也有利于减小程序之间的耦合。因此，多线程的实现几乎都是使用的Runnable接口的方式。</p>
<p>通过实现 Runnable 接口的方法创建线程目标类，有以下劣势：</p>
<ul>
<li>所创建的类并不是线程类，而是线程的 target 执行目标类，需要将其实例作为参数传入线程类的构造器，才能创建真正的线程。</li>
<li>如果访问当前线程的属性（甚至控制当前线程），不能直接访问 Thread 的实例方法， 必须通过 Thread.currentThread() 获取当前线程实例，才能去访问和控制当前线程。</li>
</ul>
<p>通过实现 Runnable 接口的方法创建线程目标类，有以下优势：</p>
<ul>
<li>可以避免由于 Java 单继承带来的局限性。如果异步逻辑所在类，已经继承了一个基类， 就没有办法在继承 Thread 类。比如，当一个 B 类继承了 A 类，再需继承 Thread 类时就不行了。所以在已经存在继承关系情况下，只能使用实现 Runnable 接口的方式。</li>
<li>逻辑和数据的更好分离：通过实现 Runnable 接口的方法创建多线程，更加适合同一个资源被多段业务逻辑并行处理的场景。在同一个资源的情况被多个线程逻辑去异步、并行处理的 场景中，通过实现 Runnable 接口的方式设计多个 target 执行目标类，可以更加方便的、清晰的将 执行逻辑和数据存储分离，更好的体现了面向对象的设计思想。</li>
</ul>
<p>总结：<br>（1）通过继承 Thread 类实现多线程，能更好地做到多个线程并发完成各自的任务，访问各自的数据资源。<br>（2）通过实现 Runnable 接口实现多线程，能更好地做到多个线程并发完成同一个的任务， 访问同一份的数据资源。多个线程的代码逻辑，<br>可以方便地访问和处理同一个共享数据资源，这样就将有效的将线程逻辑和业务数据进行有效的分离， 更好的体现了面向对象的设计思想。<br>（3）通过实现 Runnable 接口实现多线程时，如果数据资源存在多线程共享的情况，则数据共享资源需要使用原子类型（而不是普通数据类型），或者需要进行线程的同步控制，以保证对共享数据操作时不会出现线程安全问题。</p>
<h1 id="线程状态"><a href="#线程状态" class="headerlink" title="线程状态"></a>线程状态</h1><h2 id="线程状态介绍"><a href="#线程状态介绍" class="headerlink" title="线程状态介绍"></a>线程状态介绍</h2><p>虚拟机中的线程状态有六种，定义在Thread.State中：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Thread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ....</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">enum</span> <span class="title">State</span> </span>&#123;</span><br><span class="line">        NEW, <span class="comment">//新建 </span></span><br><span class="line">        RUNNABLE, <span class="comment">//可执行：包含操作系统的就绪、运行两种状态 </span></span><br><span class="line">        BLOCKED, <span class="comment">//阻塞 </span></span><br><span class="line">        WAITING, <span class="comment">//等待 </span></span><br><span class="line">        TIMED_WAITING, <span class="comment">//计时等待 </span></span><br><span class="line">        TERMINATED; <span class="comment">//终止</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="title">State</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ....</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>新建状态NEW</strong></li>
</ul>
<p>创建成功但是没有调用 start() 方法启动的 Thread 线程实例，都处于 NEW 状态。比如”Thread t = new Thread()”，t就是一个处于NEW状态的线程</p>
<ul>
<li><strong>可运行状态RUNNABLE</strong></li>
</ul>
<p>new出来线程，调用start()方法即处于RUNNABLE状态了。处于RUNNABLE状态的线程可能正在Java虚拟机中运行，也可能正在等待处理器的资源，因为一个线程必须获得CPU的资源后，才可以运行其run()方法中的内容，否则排队等待</p>
<ul>
<li><strong>阻塞BLOCKED</strong></li>
</ul>
<p>如果某一线程正在等待监视器锁，以便进入一个同步的块/方法，那么这个线程的状态就是阻塞BLOCKED</p>
<ul>
<li><strong>等待WAITING</strong></li>
</ul>
<p>某一线程因为调用不带超时的Object的wait()方法、不带超时的Thread的join()方法、LockSupport的park()方法，就会处于等待WAITING状态</p>
<ul>
<li><strong>超时等待TIMED_WAITING</strong></li>
</ul>
<p>某一线程因为调用带有指定正等待时间的Object的wait()方法、Thread的join()方法、Thread的sleep()方法、LockSupport的parkNanos()方法、LockSupport的parkUntil()方法，就会处于超时等待TIMED_WAITING状态</p>
<ul>
<li><strong>终止状态TERMINATED</strong></li>
</ul>
<p>线程调用终止或者run()方法执行结束后，线程即处于终止状态。处于终止状态的线程不具备继续运行的能力</p>
<h2 id="状态转换"><a href="#状态转换" class="headerlink" title="状态转换"></a>状态转换</h2><p><strong>在Java中：</strong></p>
<ul>
<li><p>将通⽤线程状态的 <strong>可运⾏状态</strong> 和 <strong>运⾏状态</strong> 合并为 <strong>Runnable</strong> ， </p>
</li>
<li><p>将 <strong>休眠状态</strong> 细分为三种 ( <strong>BLOCKED / WAITING / TIMED_WAITING</strong> ); 反过来理解这句话，就是这三种状态在操作系统的眼中都是休眠状态，同样<strong>不会获得</strong></p>
</li>
</ul>
<p><strong>CPU使⽤权</strong>。</p>
<p><img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/Java+%E7%BA%BF%E7%A8%8B%E7%8A%B6%E6%80%81%E5%8F%98%E8%BF%81.png" alt="Java 线程状态变迁 "></p>
<h1 id="JAVA内存模型"><a href="#JAVA内存模型" class="headerlink" title="JAVA内存模型"></a>JAVA内存模型</h1><p><img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/image-20201207172300825.png" alt="image-20201207172300825"></p>
]]></content>
      <categories>
        <category>多线程</category>
      </categories>
      <tags>
        <tag>多线程</tag>
      </tags>
  </entry>
  <entry>
    <title>多线程02-Thread常见方法</title>
    <url>/posts/bcf988be.html</url>
    <content><![CDATA[<h1 id="Thread中的实例方法"><a href="#Thread中的实例方法" class="headerlink" title="Thread中的实例方法"></a>Thread中的实例方法</h1><blockquote>
<p>调用Thread中的方法的时候，在线程类中，有两种方式，一定要理解这两种方式的区别</p>
<p>（1）this.XXX()</p>
<p>这种调用方式表示的线程是<strong>线程实例本身</strong></p>
<p>（2）Thread.currentThread.XXX()或Thread.XXX()</p>
<p>上面两种写法是一样的意思。这种调用方式表示的线程是<strong>正在执行Thread.currentThread.XXX()所在代码块的线程</strong></p>
</blockquote>
<h2 id="简单方法"><a href="#简单方法" class="headerlink" title="简单方法"></a>简单方法</h2><table>
<thead>
<tr>
<th>方法名</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>start()</td>
<td>就是通知”线程规划器”，此线程可以运行了，正在等待CPU调用线程对象得run()方法，产生一个<strong>异步执行</strong>的效果。</td>
</tr>
<tr>
<td>isAlive()</td>
<td>测试线程是否处于活动状态，只要线程启动且没有终止，方法返回的就是true</td>
</tr>
<tr>
<td>getId()</td>
<td>在一个Java应用中，有一个long型的全局唯一的线程ID生成器threadSeqNumber，每new出来一个线程都会把这个自增一次，并赋予线程的tid属性，这个是Thread自己做的，用户无法执行一个线程的Id。</td>
</tr>
<tr>
<td>getName()</td>
<td>获取线程名，如果指定，那么线程的名字就是我们自己指定的，如果不指定，那么Thread中有一个int型全局唯一的线程初始号生成器threadInitNum，Java先把threadInitNum自增，然后以”Thread-threadInitNum”的方式来命名新生成的线程</td>
</tr>
<tr>
<td><del>stop()</del></td>
<td>终止正在运行的线程，已过时，不建议使用</td>
</tr>
</tbody></table>
<ul>
<li><strong>为什么stop现在不建议被使用了？</strong></li>
</ul>
<p>​        因为使用 stop 方法是很危险的，就象突然关闭计算机电源， 而不是按正常程序关机。在程序中，我们是不能随便 stop 一个线程的，我们无法知道这个线程正运行在什么状态，它可能持有某把锁，强行中断线程可能导致锁不能释放的问题；或者线程可能 在操作数据库，强行中断线程可能导致数据不一致的问题。正由于使用 stop 方法来终止线程可能会产生不可预料的结果，因此并不推荐使用。</p>
<h2 id="稍稍需要注意的方法"><a href="#稍稍需要注意的方法" class="headerlink" title="稍稍需要注意的方法"></a>稍稍需要注意的方法</h2><h3 id="线程优先级"><a href="#线程优先级" class="headerlink" title="线程优先级"></a>线程优先级</h3><blockquote>
<p>getPriority()和setPriority(int newPriority)</p>
</blockquote>
<p>在 Thread 类中有一个实例属性和两个实例方法，专用于进行线程优先级相关的操作，与线程 优先级相关的成员属性为： </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> priority; <span class="comment">//该属性保存一个 Thread 实例的优先级，1-10 之间的值，默认值是5</span></span><br></pre></td></tr></table></figure>

<p>这两个方法用于获取和设置线程的优先级，<strong>优先级高的CPU得到的CPU资源比较多</strong>，设置优先级有助于帮”线程规划器”确定下一次选择哪一个线程优先执行。换句话说，<strong>两个在等待CPU的线程，优先级高的线程越容易被CU选择执行</strong>。—-&gt; <strong>这个不是绝对的，不能太过于依赖这个设置，看下面的例子就能理解了</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PriorityDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SLEEP_GAP = <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">PrioritySetThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">int</span> threadNo = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">PrioritySetThread</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>(<span class="string">&quot;thread-&quot;</span> + threadNo);</span><br><span class="line">            threadNo++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">long</span> opportunities = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; ; i++) &#123;</span><br><span class="line">                opportunities++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        PrioritySetThread[] threads = <span class="keyword">new</span> PrioritySetThread[<span class="number">10</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; threads.length; i++) &#123;</span><br><span class="line">            threads[i] = <span class="keyword">new</span> PrioritySetThread();</span><br><span class="line">            <span class="comment">//优先级的设置，从 1-10</span></span><br><span class="line">            threads[i].setPriority(i + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; threads.length; i++) &#123;</span><br><span class="line">            <span class="comment">//启动线程</span></span><br><span class="line">            threads[i].start();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//等待线程运行 1s</span></span><br><span class="line">        Thread.sleep(SLEEP_GAP);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; threads.length; i++) &#123;</span><br><span class="line">            <span class="comment">//停止线程</span></span><br><span class="line">            threads[i].stop();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; threads.length; i++) &#123;</span><br><span class="line">            System.out.println(threads[i].getName() +</span><br><span class="line">                    <span class="string">&quot;优先级为:&quot;</span> + threads[i].getPriority() +</span><br><span class="line">                    <span class="string">&quot;,机会值为:&quot;</span> + threads[i].opportunities</span><br><span class="line">            );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 运行结果</span></span><br><span class="line">thread-<span class="number">1</span>优先级为:<span class="number">1</span>,机会值为:<span class="number">598373125</span></span><br><span class="line">thread-<span class="number">2</span>优先级为:<span class="number">2</span>,机会值为:<span class="number">633411616</span></span><br><span class="line">thread-<span class="number">3</span>优先级为:<span class="number">3</span>,机会值为:<span class="number">715661603</span></span><br><span class="line">thread-<span class="number">4</span>优先级为:<span class="number">4</span>,机会值为:<span class="number">643894812</span></span><br><span class="line">thread-<span class="number">5</span>优先级为:<span class="number">5</span>,机会值为:<span class="number">771752736</span></span><br><span class="line">thread-<span class="number">6</span>优先级为:<span class="number">6</span>,机会值为:<span class="number">764895904</span></span><br><span class="line">thread-<span class="number">7</span>优先级为:<span class="number">7</span>,机会值为:<span class="number">779410974</span></span><br><span class="line">thread-<span class="number">8</span>优先级为:<span class="number">8</span>,机会值为:<span class="number">780571797</span></span><br><span class="line">thread-<span class="number">9</span>优先级为:<span class="number">9</span>,机会值为:<span class="number">792711249</span></span><br><span class="line">thread-<span class="number">10</span>优先级为:<span class="number">10</span>,机会值为:<span class="number">797973867</span></span><br></pre></td></tr></table></figure>

<p>如果按照理论来预测结果，那么优先级越高的线程，获得的 CPU 时间片就会越多，从而导致opportunities 就会越大。但是示例中10 条线程停下来之后，结果并非如此，分析案例的执行结果，可以看出以下结论： </p>
<ul>
<li><p>整体而言，<strong>高优先级的线程获得的执行机会更多</strong>。在实例中可以看到：优先级高的线程，执行机会就会偏多，整体对比非常明显。 </p>
</li>
<li><p><strong>执行机会的获取具有随机性</strong>，优先级高的不一定获得机会多。比如：例子中的 thread-4 比 thread-3 优先级高，但是 thread-4 所获得的机会反而偏少。 </p>
</li>
</ul>
<h3 id="设置守护进程"><a href="#设置守护进程" class="headerlink" title="设置守护进程"></a>设置守护进程</h3><blockquote>
<p>Java中有两种线程，一种是用户线程，一种是守护线程。守护线程是一种特殊的线程，在 JVM 属于保姆的地位：<strong>只要 JVM 实例中尚存在任何一个用户线程没有结束，守护线程就能执行自己工作；只有当最后一个用户线程结束，守护线程随着 JVM 一同结束工作。</strong> </p>
</blockquote>
<p>用户线程和用户线程在 JVM 虚拟机进程终止的方向不同：</p>
<ul>
<li><p>用户线程和 JVM 进程是主动关系如果全部的用户线程终止，JVM 虚拟机进程也随之终止；</p>
</li>
<li><p>守护线程和 JVM 进程是被动关系如果 JVM 进程终止，所有的守护线程也随之终止。</p>
</li>
</ul>
<h4 id="isDaeMon、setDaemon-boolean-on"><a href="#isDaeMon、setDaemon-boolean-on" class="headerlink" title="isDaeMon、setDaemon(boolean on)"></a>isDaeMon、setDaemon(boolean on)</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DaemonDemo</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                i++;</span><br><span class="line">                System.out.println(<span class="string">&quot;i = &quot;</span> + i);</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            DaemonDemo mt = <span class="keyword">new</span> DaemonDemo();</span><br><span class="line">            <span class="comment">// 调试时可以设置为false，那么这个程序是个死循环，没有退出条件。</span></span><br><span class="line">            <span class="comment">// 设置为true，即可主线程结束，线程也结束。</span></span><br><span class="line">            mt.setDaemon(<span class="keyword">true</span>);</span><br><span class="line">            mt.start();</span><br><span class="line">            Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">            <span class="comment">// 理论上打印了 主线程已结束！ 以后子线程就不继续输出了，</span></span><br><span class="line">            <span class="comment">// 但是子线程并不会被立即停止，可能还会执行一会，就和下面的运行结果一样</span></span><br><span class="line">            System.out.println(<span class="string">&quot;主线程已结束！&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 运行结果</span></span><br><span class="line">i = <span class="number">1</span></span><br><span class="line">i = <span class="number">2</span></span><br><span class="line">i = <span class="number">3</span></span><br><span class="line">i = <span class="number">4</span></span><br><span class="line">i = <span class="number">5</span></span><br><span class="line">主线程已结束！</span><br><span class="line">i = <span class="number">6</span></span><br></pre></td></tr></table></figure>

<p>守护线程有如下特点：</p>
<ul>
<li>守护线程必须在启动前，将其守护状态设置为 true；启动之后，不能再将用户线程设置 为守护线程。否则，JVM 会抛出一个 InterruptedException 异常</li>
<li>守护线程存在被 JVM 强行终止的风险，所以，在守护线程中尽量不去访问系统资源， 如文件句柄、数据库连接等等。守护线程被强行终止时，可能会引发系统资源操作的不负责任的 中断，从而导致资源不可逆的损坏。</li>
<li>默认情况下，守护线程创建的线程，也是守护线程</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DaemonDemo02</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">DaemonThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">500</span>);</span><br><span class="line">                    System.out.println(Thread.currentThread() + <span class="string">&quot;===&gt;守护线程状态为：&quot;</span> + <span class="keyword">this</span>.isDaemon());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line"></span><br><span class="line">        Thread testThread = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">                DaemonThread daemonThread = <span class="keyword">new</span> DaemonThread();</span><br><span class="line">                <span class="comment">// 设置了false，那自然是非守护线程</span></span><br><span class="line">                <span class="comment">// daemonThread.setDaemon(false);</span></span><br><span class="line">                daemonThread.start();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        testThread.setDaemon(<span class="keyword">true</span>);</span><br><span class="line">        testThread.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 给子线程一点时间输出，不然可能看不到结果</span></span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        System.out.println(Thread.currentThread() + <span class="string">&quot;线程结束&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 运行结果</span></span><br><span class="line">Thread[Thread-<span class="number">2</span>,<span class="number">5</span>,main]===&gt;守护线程状态为：<span class="keyword">true</span></span><br><span class="line">Thread[Thread-<span class="number">5</span>,<span class="number">5</span>,main]===&gt;守护线程状态为：<span class="keyword">true</span></span><br><span class="line">Thread[Thread-<span class="number">1</span>,<span class="number">5</span>,main]===&gt;守护线程状态为：<span class="keyword">true</span></span><br><span class="line">Thread[Thread-<span class="number">3</span>,<span class="number">5</span>,main]===&gt;守护线程状态为：<span class="keyword">true</span></span><br><span class="line">Thread[Thread-<span class="number">4</span>,<span class="number">5</span>,main]===&gt;守护线程状态为：<span class="keyword">true</span></span><br><span class="line">Thread[main,<span class="number">5</span>,main]线程结束</span><br></pre></td></tr></table></figure>

<h3 id="线程中断"><a href="#线程中断" class="headerlink" title="线程中断"></a>线程中断</h3><h4 id="interrupt"><a href="#interrupt" class="headerlink" title="interrupt()"></a>interrupt()</h4><p>在JAVA中，我们使用<strong>interrupt()**来进行线程中断，但是，</strong>此方法本质不是用来中断一个线程，而是将线程设置为中断状态。**它有两个作用： </p>
<ul>
<li><p>如果此线程处于阻塞状态(如调用了 Object.wait 方法)，则会立马退出阻塞，并抛出InterruptedException 异常，线程就可以通过捕获 InterruptedException 来做一定的处理，然后让线程退出。更确切的说，如果线程被 Object.wait, Thread.join 和 Thread.sleep 三种方法之一阻塞，此时调用该线程的 interrupt()方法，那么该线程将抛出一个 InterruptedException 中断异常（该线程必须事先预备好处理此异常），从而提早地终结被阻塞状态。 </p>
</li>
<li><p>如果线程正处于运行之中，则线程不受任何影响，继续运行，仅仅是线程的中断标记被设置为 true。所以，程序可以在适当的位置，通过调**isInterrupted()**方法来查看自己是否被中断，并做退出操作。 </p>
</li>
</ul>
<p>如果线程的 interrupt 方法先被调用，然后线程开始调用阻塞方法进入阻塞状态，InterruptedException 异常依旧会抛出。如果线程捕获 InterruptedException 异常后， 继续调用阻塞方法，将不再触发 InterruptedException 异常。 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InterruptDemo</span> </span>&#123;</span><br><span class="line">    <span class="comment">//睡眠时长</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SLEEP_GAP = <span class="number">5000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SleepThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">int</span> threadSeqNumber = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">SleepThread</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>(<span class="string">&quot;sleepThread-&quot;</span> + threadSeqNumber);</span><br><span class="line">            threadSeqNumber++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(getName() + <span class="string">&quot; 进入睡眠.&quot;</span>);</span><br><span class="line">                <span class="comment">// 线程睡眠一会</span></span><br><span class="line">                Thread.sleep(SLEEP_GAP);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">                System.out.println(getName() + <span class="string">&quot; 发生被异常打断.&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(getName() + <span class="string">&quot; 运行结束.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Thread thread1 = <span class="keyword">new</span> SleepThread();</span><br><span class="line">        thread1.start();</span><br><span class="line">        Thread thread2 = <span class="keyword">new</span> SleepThread();</span><br><span class="line">        thread2.start();</span><br><span class="line">        <span class="comment">//主线程等待 2 秒</span></span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">        thread1.interrupt(); <span class="comment">//打断线程 1</span></span><br><span class="line">        thread1.interrupt(); <span class="comment">// 再次打断线程 1 不会抛出异常</span></span><br><span class="line">        <span class="comment">//主线程等待 5 秒</span></span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">5</span>);</span><br><span class="line">        <span class="comment">//打断线程 2，此时线程2已经终止，所以不会抛出异常</span></span><br><span class="line">        thread2.interrupt();</span><br><span class="line">        <span class="comment">//主线程等待 1 秒</span></span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;程序运行结束.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 运行结果</span></span><br><span class="line">sleepThread-<span class="number">1</span> 进入睡眠.</span><br><span class="line">sleepThread-<span class="number">2</span> 进入睡眠.</span><br><span class="line">java.lang.InterruptedException: sleep interrupted</span><br><span class="line">	at java.lang.Thread.sleep(Native Method)</span><br><span class="line">	at com.cheng.base.method.InterruptDemo$SleepThread.run(InterruptDemo.java:<span class="number">31</span>)</span><br><span class="line">sleepThread-<span class="number">1</span> 发生被异常打断.</span><br><span class="line">sleepThread-<span class="number">2</span> 运行结束.</span><br><span class="line">程序运行结束.</span><br></pre></td></tr></table></figure>

<p><strong>从结果可以看到：</strong></p>
<ul>
<li><p>sleepThread-1 线程在大致睡眠了 2 秒后，被主线程打断（或者中断）。被打断的 sleepThread-1 线程停止睡眠，并捕获到 InterruptedException 受检异常。程序在异常处理时，进行了直接返回，其后面的执行逻辑被跳过。 </p>
</li>
<li><p>捕获了 InterruptedException 异常以后，再次调用interrupt()方法，InterruptedException 异常不再被捕获。</p>
</li>
<li><p>sleepThread-2 线程在睡眠了 7 秒后，被主线程中断，但是在 sleepThread-2 线程被中断的时候，已经执行结束，所以 thread2.interrupt() 中断操作没有发生实质性的效果。 </p>
</li>
</ul>
<p><strong>总结：</strong></p>
<p>Thread.interrupt( )方法并不像 Thread.stop( )方法那样中止一个正在运行的线程，其作用是设置线程的中断状态位（为 true），至于线程是死亡、还是等待新的任务或是继续运行至下一步， 就取决于这个程序本身。线程可以不时地检测这个中断标示位，以判断线程是否应该被中断（中断标示值是否为 true）。总之，Thread.interrupt( )方法只是改变中断状态，<strong>不会中断一个正在运行的线程。</strong></p>
<h4 id="interrupt-1"><a href="#interrupt-1" class="headerlink" title="interrupt()"></a>interrupt()</h4><p><strong>在线程受到阻塞时抛出一个中断信号，这样线程就得以退出阻塞状态</strong>。换句话说，没有被阻塞的线程，调用interrupt()方法是不起作用的。</p>
<h4 id="isInterrupted"><a href="#isInterrupted" class="headerlink" title="isInterrupted()"></a>isInterrupted()</h4><blockquote>
<p>查看线程是否已经中断，但<strong>不清除状态标识</strong>。这个和interrupt()方法一样。</p>
</blockquote>
<p>线程是否停止执行，需要用户程序去监视线程的isInterrupted()状态，并做对应的处理。 下边就来看一下如何使用 isInterrupted()实例方法监视线程的中断状态，如果发现线程被中断，如何做出对应的处理:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IsInterruptedDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;线程启动了&quot;</span>);</span><br><span class="line">                <span class="comment">//一直循环</span></span><br><span class="line">                <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                    System.out.println(isInterrupted());</span><br><span class="line">                    sleepMilliSeconds(<span class="number">5000</span>);</span><br><span class="line">                    <span class="comment">//如果线程被中断，退出死循环</span></span><br><span class="line">                    <span class="keyword">if</span> (isInterrupted()) &#123;</span><br><span class="line">                        System.out.println(<span class="string">&quot;线程结束了&quot;</span>);</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        thread.start();</span><br><span class="line">        <span class="comment">//等待 2 秒</span></span><br><span class="line">        sleepMilliSeconds(<span class="number">2000</span>);</span><br><span class="line">        thread.interrupt(); <span class="comment">//中断线程</span></span><br><span class="line">        <span class="comment">//等待 2 秒</span></span><br><span class="line">        sleepMilliSeconds(<span class="number">2000</span>);</span><br><span class="line">        thread.interrupt();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sleepMilliSeconds</span><span class="params">(<span class="keyword">int</span> millisecond)</span> </span>&#123;</span><br><span class="line">        LockSupport.parkNanos(millisecond * <span class="number">1000L</span> * <span class="number">1000L</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 运行结果</span></span><br><span class="line">线程启动了</span><br><span class="line"><span class="keyword">false</span></span><br><span class="line">线程结束了</span><br></pre></td></tr></table></figure>

<h3 id="线程合并"><a href="#线程合并" class="headerlink" title="线程合并"></a>线程合并</h3><h4 id="join"><a href="#join" class="headerlink" title="join()"></a>join()</h4><blockquote>
<p>调用 join()方法的语句可以理解为合并点，合并可以理解为：线程 A 需要在合并点等待，一直等线程 B 执行完成，或者等待超时。</p>
</blockquote>
<p>在看join()方法之前请可以先看看<a href="./9a87f1fd.html">线程间通信</a>一文，即wait()/notify()/notifyAll()机制已熟练掌握，才能更好的理解下文。</p>
<p><strong>join()方法的作用是等待线程销毁</strong>。join()方法反应的是一个很现实的问题，比如main线程的执行时间是1s，子线程的执行时间是10s，但是主线程依赖子线程执行完的结果，此时有两个方案：</p>
<ul>
<li>像生产者/消费者模型一样，搞一个缓冲区，子线程执行完把数据放在缓冲区中，通知main线程去拿，这样就不会浪费main线程的时间了</li>
<li>使用join()方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JoinDemo</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 休眠5s</span></span><br><span class="line">            System.out.println(<span class="string">&quot;子线程休眠开始&quot;</span>);</span><br><span class="line">            Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;子线程休眠完毕&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        JoinDemo t1 = <span class="keyword">new</span> JoinDemo();</span><br><span class="line">        t1.start();</span><br><span class="line">        t1.join();</span><br><span class="line">        System.out.println(<span class="string">&quot;当前线程继续执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 运行结果</span></span><br><span class="line">子线程休眠开始</span><br><span class="line">子线程休眠完毕</span><br><span class="line">当前线程继续执行</span><br></pre></td></tr></table></figure>

<p>从结果看，join()方法会使调用join()方法的线程（t1线程）所在的线程（main线程）无限阻塞，直到调用join()方法的线程销毁为止，此例中main线程就会无限期阻塞直到t1的run()方法执行完毕。</p>
<p> Join()方法有三个重载版本： </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//重载版本 1：此方法会把当前线程变为 TIMED_WAITING，直到被合并线程执行结束。 join()其实和join(long millis)一样，就是调用了join(0)而已</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">join</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException</span>; </span><br><span class="line"></span><br><span class="line"><span class="comment">//重载版本 2：此方法会把当前线程变为 TIMED_WAITING，直到被合并线程结束，或者等待被合并线程执行 millis 时间后开始执行。 </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">join</span><span class="params">(<span class="keyword">long</span> millis)</span> <span class="keyword">throws</span> InterruptedException</span>; </span><br><span class="line"></span><br><span class="line"><span class="comment">//重载版本 2：此方法会把当前线程变为 TIMED_WAITING，直到被合并线程结束，或者等待被合并线程执行 millis+nanos 时间后开始执行。 </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> synchroinzed <span class="keyword">void</span> <span class="title">join</span><span class="params">(<span class="keyword">long</span> millis, <span class="keyword">int</span> nanos)</span> <span class="keyword">throws</span> InterruptedException</span>; </span><br></pre></td></tr></table></figure>

<p>使用 join()方法的要点： </p>
<ul>
<li><p>join()方法是实例方法，需要使用被合并线程的句柄（或者指针、变量）去调用，如 threadb.join() 。 执行threadb.join( ) 这行代码的当前线程为合并线程， 进入 TIMED_WAITING 等待状态，出让 CPU。 </p>
</li>
<li><p>如果设置了被合并线程的执行时间 millis（或者 millis+nanos），并不能保证当前线程 一定会在 millis 时间后变为 RUNNABLE。 </p>
</li>
<li><p>如果主动方合并线程的在等待时被中断，则会抛出 InterruptedException 受检异常。 </p>
</li>
<li><p>join()方法的一个重点是要区分出和sleep()方法的区别。join(2000)也是可以的，表示调用join()方法所在的线程最多等待2000ms，两者的区别在于：</p>
</li>
</ul>
<p><strong>sleep(2000)不释放锁，join(2000)释放锁</strong>，因为join()方法内部使用的是wait()，因此会释放锁。看一下join(long millis)的源码就知道了: </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">join</span><span class="params">(<span class="keyword">long</span> millis)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> base = System.currentTimeMillis();</span><br><span class="line">    <span class="keyword">long</span> now = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (millis &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;timeout value is negative&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (millis == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">while</span> (isAlive()) &#123;</span><br><span class="line">        wait(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (isAlive()) &#123;</span><br><span class="line">        <span class="keyword">long</span> delay = millis - now;</span><br><span class="line">        <span class="keyword">if</span> (delay &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        wait(delay);</span><br><span class="line">        now = System.currentTimeMillis() - base;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Thread中的静态方法"><a href="#Thread中的静态方法" class="headerlink" title="Thread中的静态方法"></a>Thread中的静态方法</h1><p>Thread类中的静态方法表示操作的线程是”<strong>正在执行静态方法所在的代码块的线程</strong>“。为什么Thread类中的静态方法是为了能对CPU<strong>当前正在运行的线程</strong>进行操作。</p>
<h3 id="获取当前线程"><a href="#获取当前线程" class="headerlink" title="获取当前线程"></a>获取当前线程</h3><h4 id="currentThread"><a href="#currentThread" class="headerlink" title="currentThread()"></a>currentThread()</h4><p>currentThread()方法返回的是<strong>对当前正在执行线程对象的引用</strong>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread04</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;静态块的打印：&quot;</span> +</span><br><span class="line">                Thread.currentThread().getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyThread04</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;构造方法的打印：&quot;</span> +</span><br><span class="line">                Thread.currentThread().getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;run()方法的打印：&quot;</span> +</span><br><span class="line">                Thread.currentThread().getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread01</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyThread04 mt = <span class="keyword">new</span> MyThread04();</span><br><span class="line">        mt.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 运行结果</span></span><br><span class="line">静态块的打印：main</span><br><span class="line">构造方法的打印：main</span><br><span class="line">run()方法的打印：Thread-<span class="number">0</span></span><br></pre></td></tr></table></figure>

<p>这个例子说明了，<strong>线程类的构造方法、静态块是被main线程调用的，而线程类的run()方法才是应用线程自己调用的</strong>。在这个例子的基础上，再深入：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread05</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyThread05</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;MyThread5-----&gt;Begin&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Thread.currentThread().getName()-----&gt;&quot;</span> +</span><br><span class="line">                Thread.currentThread().getName());</span><br><span class="line">        System.out.println(<span class="string">&quot;this.getName()-----&gt;&quot;</span> + <span class="keyword">this</span>.getName());</span><br><span class="line">        System.out.println(<span class="string">&quot;MyThread5-----&gt;end&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;run-----&gt;Begin&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Thread.currentThread().getName()-----&gt;&quot;</span> +</span><br><span class="line">                Thread.currentThread().getName());</span><br><span class="line">        System.out.println(<span class="string">&quot;this.getName()-----&gt;&quot;</span> + <span class="keyword">this</span>.getName());</span><br><span class="line">        System.out.println(<span class="string">&quot;run-----&gt;end&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread01</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyThread05 thread05 = <span class="keyword">new</span> MyThread05();</span><br><span class="line">        thread05.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 运行结果</span></span><br><span class="line">MyThread5-----&gt;Begin</span><br><span class="line">Thread.currentThread().getName()-----&gt;main</span><br><span class="line"><span class="keyword">this</span>.getName()-----&gt;Thread-<span class="number">0</span></span><br><span class="line">MyThread5-----&gt;end</span><br><span class="line">run-----&gt;Begin</span><br><span class="line">Thread.currentThread().getName()-----&gt;Thread-<span class="number">0</span></span><br><span class="line"><span class="keyword">this</span>.getName()-----&gt;Thread-<span class="number">0</span></span><br><span class="line">run-----&gt;end</span><br></pre></td></tr></table></figure>

<p>就是”this.XXX()”和”Thread.currentThread().XXX()”的区别，这个就是最好的例子。必须要清楚的一点就是：<strong>当前执行的Thread未必就是Thread本身</strong>。</p>
<h3 id="线程休眠"><a href="#线程休眠" class="headerlink" title="线程休眠"></a>线程休眠</h3><h4 id="sleep-long-millis"><a href="#sleep-long-millis" class="headerlink" title="sleep(long millis)"></a>sleep(long millis)</h4><p>sleep(long millis)方法的作用是在指定的毫秒内让当前”<strong>正在执行的线程</strong>“休眠（暂停执行）。这个”<strong>正在执行的线程</strong>“是关键，指的是Thread.currentThread()返回的线程。根据JDK API的说法，”该线程不丢失任何监视器的所属权”，简单说就是sleep代码上下文如果被加锁了，锁依然在，但是CPU资源会让出给其他线程。看一下例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread06</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;run threadName = &quot;</span> +</span><br><span class="line">                    <span class="keyword">this</span>.getName() + <span class="string">&quot; begin&quot;</span>);</span><br><span class="line">            Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;run threadName = &quot;</span> +</span><br><span class="line">                    <span class="keyword">this</span>.getName() + <span class="string">&quot; end&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread01</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyThread06 mt = <span class="keyword">new</span> MyThread06();</span><br><span class="line">        System.out.println(<span class="string">&quot;begin = &quot;</span> + System.currentTimeMillis());</span><br><span class="line">        mt.start();</span><br><span class="line">        System.out.println(<span class="string">&quot;end = &quot;</span> + System.currentTimeMillis());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 运行结果</span></span><br><span class="line">begin = <span class="number">1604373745809</span></span><br><span class="line">end = <span class="number">1604373745810</span></span><br><span class="line">run threadName = Thread-<span class="number">0</span> begin</span><br><span class="line">run threadName = Thread-<span class="number">0</span> end</span><br></pre></td></tr></table></figure>

<h4 id="yield"><a href="#yield" class="headerlink" title="yield()"></a>yield()</h4><p>暂停当前执行的线程对象，并执行其他线程。<strong>这个暂停是会放弃CPU资源的，并且放弃CPU的时间不确定</strong>，有可能刚放弃，就获得CPU资源了，也有可能放弃好一会儿，才会被CPU执行。看一下例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread07</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> beginTime = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">500000000</span>; i++) &#123;</span><br><span class="line">            Thread.yield();</span><br><span class="line">            count = count + i + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> endTime = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;用时：&quot;</span> + (endTime - beginTime) + <span class="string">&quot;毫秒！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread01</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyThread07 mt = <span class="keyword">new</span> MyThread07();</span><br><span class="line">        mt.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这个可以自己运行看看 每次的结果可能都不一样，证明了yield()方法放弃CPU的时间并不确定</span></span><br></pre></td></tr></table></figure>

<h4 id="interrupted"><a href="#interrupted" class="headerlink" title="interrupted()"></a>interrupted()</h4><p>测试当前线程是否已经中断，执行后具有将状态标识清除为false的功能。换句话说，如果连续两次调用该方法，那么返回的必定是false：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Thread.currentThread().interrupt();</span><br><span class="line">    System.out.println(<span class="string">&quot;是否停止1？&quot;</span> + Thread.interrupted());</span><br><span class="line">    System.out.println(<span class="string">&quot;是否停止2？&quot;</span> + Thread.interrupted());</span><br><span class="line">    System.out.println(<span class="string">&quot;end!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 运行结果</span></span><br><span class="line">是否停止<span class="number">1</span>？<span class="keyword">true</span></span><br><span class="line">是否停止<span class="number">2</span>？<span class="keyword">false</span></span><br><span class="line">end!</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>多线程</category>
      </categories>
      <tags>
        <tag>多线程</tag>
      </tags>
  </entry>
  <entry>
    <title>多线程04-ThreadLocal</title>
    <url>/posts/4f4de2ad.html</url>
    <content><![CDATA[<blockquote>
<p>我们创建的变量是可以被任何⼀个线程访问并修改的。而<strong>ThreadLocal</strong> 类主要解决的就是让每个线程绑定⾃⼰的值，可以将 <strong>ThreadLocal</strong> 类形象的⽐喻成存放数据的盒⼦，盒⼦中可以存储每个线程的私有数据。</p>
<p>ThreadLocal类用来提供线程内部的局部变量，这种变量在多线程环境下访问（通过get和set方法访问）时能保证各个线程的变量相对独立于其他线程内的变量（这个变量不能是共享变量本身）。</p>
</blockquote>
<h1 id="概念引入"><a href="#概念引入" class="headerlink" title="概念引入"></a>概念引入</h1><h2 id="ThreadLocal的常用方法"><a href="#ThreadLocal的常用方法" class="headerlink" title="ThreadLocal的常用方法"></a><strong>ThreadLocal的常用方法</strong></h2><table>
<thead>
<tr>
<th>方法声明</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>ThreadLocal()</td>
<td>创建ThreadLocal对象</td>
</tr>
<tr>
<td>initialValue()</td>
<td>1. 返回当前线程对应的”初始值”,只在<strong>调用get</strong>的时候才触发（<strong>延迟加载</strong>）<br>2. 如果调用get方法前调用了set方法，不会调用此方法 <br>3. 一般情况每个线程最多调用一次本方法，除非他调用了remove()<br>4. 不重写此方法，默认返回null</td>
</tr>
<tr>
<td>public void set( T value)</td>
<td>设置当前线程绑定的局部变量</td>
</tr>
<tr>
<td>public T get()</td>
<td>获取当前线程绑定的局部变量：<br>1. 取出当前线程的ThreadLocalMap，然后调用map.getEnty，获取本ThreadLocal的value<br>2. ThreadLocalMap以及其key/value都是保存在Thread中，而不是ThreadLocal</td>
</tr>
<tr>
<td>public void remove()</td>
<td>移除当前线程绑定的局部变量</td>
</tr>
</tbody></table>
<h2 id="ThreadLocal结构"><a href="#ThreadLocal结构" class="headerlink" title="ThreadLocal结构"></a>ThreadLocal结构</h2><p><img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/image-20211026213644475.png" alt="image-20211026213644475"></p>
<p><strong>注意</strong>：ThreadLocalMap中的key为弱引用，这里先不纠结，后面会介绍</p>
<p>Java的<strong>四种引用类型</strong>：</p>
<ul>
<li><strong>强引用</strong>：我们<strong>常常new出来的对象就是强引用类型</strong>，只要<strong>强引用存在，垃圾回收器将永远不会回收被引用的对象，哪怕内存不足的时候</strong></li>
<li><strong>软引用</strong>：使用<strong>SoftReference修饰的对象被称为软引用</strong>，软引用指向的对象在<strong>内存要溢出的时候被回收</strong></li>
<li><strong>弱引用</strong>：使用<strong>WeakReference修饰的对象被称为弱引用</strong>，只要<strong>发生垃圾回收，若这个对象只被弱引用指向，那么就会被回收</strong></li>
<li><strong>虚引用</strong>：虚引用是最弱的引用，在 Java 中使用 PhantomReference 进行定义。虚引用中唯一的作用就是用队列接收对象即将死亡的通知</li>
</ul>
<h1 id="简单案例"><a href="#简单案例" class="headerlink" title="简单案例"></a>简单案例</h1><h2 id="普通多线程"><a href="#普通多线程" class="headerlink" title="普通多线程"></a>普通多线程</h2><p>首先我们先看一段简单的多线程示例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyDemo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String content;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getContent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> content;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setContent</span><span class="params">(String content)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.content = content;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyDemo demo = <span class="keyword">new</span> MyDemo();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            Thread thread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    demo.setContent(Thread.currentThread().getName() + <span class="string">&quot;的数据&quot;</span>);</span><br><span class="line">                    System.out.println(<span class="string">&quot;-----------------------&quot;</span>);</span><br><span class="line">             		System.out.println(Thread.currentThread().getName() + <span class="string">&quot;---&gt;&quot;</span> + demo.getContent());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            thread.setName(<span class="string">&quot;线程&quot;</span> + i);</span><br><span class="line">            thread.start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 运行结果（不唯一）</span></span><br><span class="line">-----------------------</span><br><span class="line">-----------------------</span><br><span class="line">-----------------------</span><br><span class="line">线程<span class="number">2</span>---&gt;线程<span class="number">4</span>的数据</span><br><span class="line">-----------------------</span><br><span class="line">线程<span class="number">1</span>---&gt;线程<span class="number">4</span>的数据</span><br><span class="line">-----------------------</span><br><span class="line">线程<span class="number">3</span>---&gt;线程<span class="number">3</span>的数据</span><br><span class="line">线程<span class="number">0</span>---&gt;线程<span class="number">3</span>的数据</span><br><span class="line">线程<span class="number">4</span>---&gt;线程<span class="number">4</span>的数据</span><br></pre></td></tr></table></figure>

<p>从结果可以看出多个线程在访问同一个变量的时候出现的异常，线程间的数据没有隔离。</p>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="synchronized解决"><a href="#synchronized解决" class="headerlink" title="synchronized解决"></a><strong>synchronized解决</strong></h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String content;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getContent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> content;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setContent</span><span class="params">(String content)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.content = content;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Demo02 demo02 = <span class="keyword">new</span> Demo02();</span><br><span class="line">		  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">		        Thread t = <span class="keyword">new</span> Thread()&#123;</span><br><span class="line">		            <span class="meta">@Override</span></span><br><span class="line">		            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		                <span class="keyword">synchronized</span> (Demo02.class)&#123;</span><br><span class="line">		                    demo02.setContent(Thread.currentThread().getName() + <span class="string">&quot;的数据&quot;</span>);</span><br><span class="line">		                    System.out.println(<span class="string">&quot;-------------------------------------&quot;</span>);</span><br><span class="line">                        String content = demo02.getContent();</span><br><span class="line">                        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;---&gt;&quot;</span> + content);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">            t.setName(<span class="string">&quot;线程&quot;</span> + i);</span><br><span class="line">            t.start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 运行结果</span></span><br><span class="line">-----------------------</span><br><span class="line">线程<span class="number">0</span>---&gt;线程<span class="number">0</span>的数据</span><br><span class="line">-----------------------</span><br><span class="line">线程<span class="number">3</span>---&gt;线程<span class="number">3</span>的数据</span><br><span class="line">-----------------------</span><br><span class="line">线程<span class="number">2</span>---&gt;线程<span class="number">2</span>的数据</span><br><span class="line">-----------------------</span><br><span class="line">线程<span class="number">1</span>---&gt;线程<span class="number">1</span>的数据</span><br><span class="line">-----------------------</span><br><span class="line">线程<span class="number">4</span>---&gt;线程<span class="number">4</span>的数据</span><br></pre></td></tr></table></figure>

<p> 从结果可以发现, 加锁确实可以解决这个问题，但是在这里我们强调的是线程数据隔离的问题，并不是多线程共享数据的问题, 而且加锁也会导致程序的效率变低，所以在这个案例中使用synchronized关键字是不合适的。</p>
<h3 id="ThreadLocal解决"><a href="#ThreadLocal解决" class="headerlink" title="ThreadLocal解决"></a><strong>ThreadLocal解决</strong></h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyDemo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> ThreadLocal&lt;String&gt; threadLocal = <span class="keyword">new</span> ThreadLocal&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String content;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getContent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> threadLocal.get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setContent</span><span class="params">(String content)</span> </span>&#123;</span><br><span class="line">        threadLocal.set(content);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyDemo demo = <span class="keyword">new</span> MyDemo();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            Thread thread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    demo.setContent(Thread.currentThread().getName() + <span class="string">&quot;的数据&quot;</span>);</span><br><span class="line">                    System.out.println(<span class="string">&quot;-----------------------&quot;</span>);</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;---&gt;&quot;</span> + demo.getContent());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            thread.setName(<span class="string">&quot;线程&quot;</span> + i);</span><br><span class="line">            thread.start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 运行结果</span></span><br><span class="line">-----------------------</span><br><span class="line">线程<span class="number">0</span>---&gt;线程<span class="number">0</span>的数据</span><br><span class="line">-----------------------</span><br><span class="line">线程<span class="number">1</span>---&gt;线程<span class="number">1</span>的数据</span><br><span class="line">-----------------------</span><br><span class="line">线程<span class="number">2</span>---&gt;线程<span class="number">2</span>的数据</span><br><span class="line">-----------------------</span><br><span class="line">线程<span class="number">3</span>---&gt;线程<span class="number">3</span>的数据</span><br><span class="line">-----------------------</span><br><span class="line">线程<span class="number">4</span>---&gt;线程<span class="number">4</span>的数据</span><br></pre></td></tr></table></figure>

<p>从结果来看，这样很好的解决了多线程之间数据隔离的问题，十分方便。</p>
<h2 id="ThreadLocal的优点"><a href="#ThreadLocal的优点" class="headerlink" title="ThreadLocal的优点"></a>ThreadLocal的优点</h2><ul>
<li>每一个Thread内部都有自己的副本，线程之间不共享</li>
<li><strong>无需加锁，提高执行效率</strong></li>
<li>更高效利用内存、节省开销</li>
<li><strong>免去传参烦恼</strong>：在任何方法中都能很方便的获取到该对象，不同多级传递参数，降低了代码耦合度。</li>
</ul>
<h2 id="ThreadLocal-amp-synchronized对比"><a href="#ThreadLocal-amp-synchronized对比" class="headerlink" title="ThreadLocal&amp;synchronized对比"></a>ThreadLocal&amp;synchronized对比</h2><p> 虽然ThreadLocal模式与synchronized关键字都用于处理多线程并发访问变量的问题, 不过两者处理问题的角度和思路不同。</p>
<table>
<thead>
<tr>
<th></th>
<th>synchronized</th>
<th>ThreadLocal</th>
</tr>
</thead>
<tbody><tr>
<td>原理</td>
<td>同步机制采用’以时间换空间’的方式, <strong>只提供了一份变量,让不同的线程排队访问</strong></td>
<td>ThreadLocal采用’以空间换时间’的方式, <strong>为每一个线程都提供了一份变量的副本</strong>,从而实现同时访问而相不干扰</td>
</tr>
<tr>
<td>侧重点</td>
<td>多个线程之间访问资源的同步性</td>
<td>多线程中让每个线程之间的数据相互隔离</td>
</tr>
</tbody></table>
<h1 id="场景实战"><a href="#场景实战" class="headerlink" title="场景实战"></a>场景实战</h1><h2 id="常见用途"><a href="#常见用途" class="headerlink" title="常见用途"></a>常见用途</h2><p>ThreadLocal有两种典型的使用场景，可以概括为：</p>
<h3 id="线程隔离"><a href="#线程隔离" class="headerlink" title="线程隔离"></a>线程隔离</h3><blockquote>
<p>ThreadLocal 中数据只属于当前线程，其本地值对别的线程是不可见的，在多线程环境下，可以防止自己的变量被其他线程篡改。另外，由于各个线程之间的数据相互隔离，避免同步加锁带来的性能损失，大大提升了并发性的性能。</p>
</blockquote>
<p>数据库连接独享、SimpleDateFormat、Random等场景经常需要配合使用。</p>
<h3 id="跨函数传递数据"><a href="#跨函数传递数据" class="headerlink" title="跨函数传递数据"></a>跨函数传递数据</h3><blockquote>
<p>同一个线程内，跨类、跨方法传递数据时，如果不用 ThreadLocal，那么相互之间的数据传递势必要靠返回值和参数，这样无形之中增加了这些类或者方法之间的耦合度。</p>
</blockquote>
<p>一般用来传递需要在函数之间频繁传递的数据、HTTP 的用户请求实例 HttpRequest、请求过程中的用户会话（Session）</p>
<h2 id="场景案例"><a href="#场景案例" class="headerlink" title="场景案例"></a>场景案例</h2><h3 id="场景一：线程隔离，每个线程都需要一个独享的对象"><a href="#场景一：线程隔离，每个线程都需要一个独享的对象" class="headerlink" title="场景一：线程隔离，每个线程都需要一个独享的对象"></a>场景一：线程隔离，每个线程都需要一个独享的对象</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadLocalTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ExecutorService threadPool = Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> finalI = i;</span><br><span class="line">            threadPool.submit(() -&gt; &#123;</span><br><span class="line">                String date = <span class="keyword">new</span> ThreadLocalTest().date(finalI);</span><br><span class="line">                System.out.println(date);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        threadPool.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">date</span><span class="params">(<span class="keyword">int</span> seconds)</span> </span>&#123;</span><br><span class="line">        Date date = <span class="keyword">new</span> Date(<span class="number">1000</span> * seconds);</span><br><span class="line">        SimpleDateFormat dateFormat = ThreadSafeFormatter.dateFormatThreadLocal.get();</span><br><span class="line">        <span class="keyword">return</span> dateFormat.format(date);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreadSafeFormatter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ThreadLocal&lt;SimpleDateFormat&gt; dateFormatThreadLocal = <span class="keyword">new</span> ThreadLocal&lt;SimpleDateFormat&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> SimpleDateFormat <span class="title">initialValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="场景二：跨函数传递数据"><a href="#场景二：跨函数传递数据" class="headerlink" title="场景二：跨函数传递数据"></a>场景二：跨函数传递数据</h3><p>有时候我们会遇到多层级调用，然后同一基本信息需要不断被传递的场景，如果我们只是简单的将参数在各个方法上传递就会显得代码耦合度很高，也难以维护。这个时候，ThreadLocal也能完美的解决这个问题。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadLocalTest2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> UserService().getUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 模拟获取用户基本信息</span></span><br><span class="line">        User user = <span class="keyword">new</span> User(<span class="string">&quot;user1&quot;</span>);</span><br><span class="line">        UserContextHolder.holder.set(user);</span><br><span class="line">        <span class="keyword">new</span> UserInfoService().getUserInfo();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserInfoService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUserInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        User user = UserContextHolder.holder.get();</span><br><span class="line">        System.out.println(<span class="string">&quot;getUserInfo====&gt;&quot;</span> + user.name);</span><br><span class="line">        <span class="comment">//获取用户信息......</span></span><br><span class="line">        <span class="keyword">new</span> UserAddress().getAddress();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserAddress</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getAddress</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        User user = UserContextHolder.holder.get();</span><br><span class="line">        System.out.println(<span class="string">&quot;getAddress====&gt;&quot;</span> + user.name);</span><br><span class="line">        <span class="comment">//获取用户地址信息......</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserContextHolder</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ThreadLocal&lt;User&gt; holder = <span class="keyword">new</span> ThreadLocal&lt;&gt;();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="使用方式推荐"><a href="#使用方式推荐" class="headerlink" title="使用方式推荐"></a>使用方式推荐</h2><p>由于 ThreadLocal 使用不当会导致严重的内存泄漏，所以为了更好的避免内存泄漏的发生，我们使用 ThreadLocal 时遵守以下两个原则： </p>
<p>（1）尽量使用 private static final 修饰 ThreadLocal 实例。使用 private 与 final 修饰符，主要是尽可能不让他人修改、变更 ThreadLocal 变量的引用； 使用 static 修饰符主要为了确保 ThreadLocal 实例的全局唯一。 </p>
<p>（2）ThreadLocal 使用完成之后务必调用 remove 方法。这是简单、有效地避免ThreadLocal引发内存泄漏的方法。 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadLocalDemo01</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置线程池大小</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Integer MAX_THREAD_NUM = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义ThreadLocal变量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> ThreadLocal&lt;Product&gt; threadLocal = ThreadLocal.withInitial(Product::<span class="keyword">new</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line">        AtomicInteger num = <span class="keyword">new</span> AtomicInteger();</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">produce</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            num.incrementAndGet();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">// 方便测试用的线程池，生产环境不要这么写</span></span><br><span class="line">        ExecutorService executorService = Executors.newFixedThreadPool(MAX_THREAD_NUM);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; MAX_THREAD_NUM; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> finalI = i;</span><br><span class="line">            executorService.execute(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; finalI + <span class="number">1</span>; j++) &#123;</span><br><span class="line">                    threadLocal.get().produce();</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(Thread.currentThread() + <span class="string">&quot;:&quot;</span> + threadLocal.get().num.get());</span><br><span class="line">                <span class="comment">// 使用完以后移除，</span></span><br><span class="line">                threadLocal.remove();</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h1><p>JDK8 <code>ThreadLocal</code>的设计是：每个<code>Thread</code>维护一个<code>ThreadLocalMap</code>哈希表，这个哈希表的<code>key</code>是<code>ThreadLocal</code>实例本身，<code>value</code>才是真正要存储的值<code>Object</code>。</p>
<p> （1） 每个Thread线程内部都有一个Map (ThreadLocalMap)<br>​ （2） Map里面存储ThreadLocal对象（key）和线程的变量副本（value）<br>​ （3）Thread内部的Map是由ThreadLocal维护的，由ThreadLocal负责向map获取和设置线程的变量值。<br>​ （4）对于不同的线程，每次获取副本值时，别的线程并不能获取到当前线程的副本值，形成了副本的隔离，互不干扰。</p>
<p><img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0JleW9uZGN6bg==,size_16,color_FFFFFF,t_70.png" alt="在这里插入图片描述"></p>
<h1 id="ThreadLocal核心方法源码"><a href="#ThreadLocal核心方法源码" class="headerlink" title="ThreadLocal核心方法源码"></a>ThreadLocal核心方法源码</h1><p> 基于ThreadLocal的内部结构，我们继续探究一下ThreadLocal的核心方法源码，更深入的了解其操作原理。</p>
<p>除了构造之外， ThreadLocal对外暴露的方法有以下4个：</p>
<table>
<thead>
<tr>
<th>方法声明</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>protected T initialValue()</td>
<td>返回当前线程局部变量的初始值</td>
</tr>
<tr>
<td>public void set( T value)</td>
<td>设置当前线程绑定的局部变量</td>
</tr>
<tr>
<td>public T get()</td>
<td>获取当前线程绑定的局部变量</td>
</tr>
<tr>
<td>public void remove()</td>
<td>移除当前线程绑定的局部变量</td>
</tr>
</tbody></table>
<h2 id="get方法"><a href="#get方法" class="headerlink" title="get方法"></a>get方法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 返回当前线程中保存ThreadLocal的值</span></span><br><span class="line"><span class="comment">    * 如果当前线程没有此ThreadLocal变量，</span></span><br><span class="line"><span class="comment">    * 则它会通过调用&#123;<span class="doctag">@link</span> #initialValue&#125; 方法进行初始化值</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> 返回当前线程对应此ThreadLocal的值</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> T <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="comment">// 获取当前线程对象</span></span><br><span class="line">       Thread t = Thread.currentThread();</span><br><span class="line">       <span class="comment">// 获取此线程对象中维护的ThreadLocalMap对象</span></span><br><span class="line">       ThreadLocalMap map = getMap(t);</span><br><span class="line">       <span class="comment">// 如果此map存在</span></span><br><span class="line">       <span class="keyword">if</span> (map != <span class="keyword">null</span>) &#123;</span><br><span class="line">           <span class="comment">// 以当前的ThreadLocal 为 key，调用getEntry获取对应的存储实体e</span></span><br><span class="line">           ThreadLocalMap.Entry e = map.getEntry(<span class="keyword">this</span>);</span><br><span class="line">           <span class="comment">// 找到对应的存储实体 e </span></span><br><span class="line">           <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123;</span><br><span class="line">               <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">               <span class="comment">// 获取存储实体 e 对应的 value值</span></span><br><span class="line">               <span class="comment">// 即为我们想要的当前线程对应此ThreadLocal的值</span></span><br><span class="line">               T result = (T)e.value;</span><br><span class="line">               <span class="keyword">return</span> result;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">// 如果map不存在，则证明此线程没有维护的ThreadLocalMap对象</span></span><br><span class="line">       <span class="comment">// 调用setInitialValue进行初始化</span></span><br><span class="line">       <span class="keyword">return</span> setInitialValue();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * set的变样实现，用于初始化值initialValue，用于代替防止用户重写set()方法</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> the initial value 初始化后的值</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">private</span> T <span class="title">setInitialValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="comment">// 调用initialValue获取初始化的值</span></span><br><span class="line">       T value = initialValue();</span><br><span class="line">       <span class="comment">// 获取当前线程对象</span></span><br><span class="line">       Thread t = Thread.currentThread();</span><br><span class="line">       <span class="comment">// 获取此线程对象中维护的ThreadLocalMap对象</span></span><br><span class="line">       ThreadLocalMap map = getMap(t);</span><br><span class="line">       <span class="comment">// 如果此map存在</span></span><br><span class="line">       <span class="keyword">if</span> (map != <span class="keyword">null</span>)</span><br><span class="line">           <span class="comment">// 存在则调用map.set设置此实体entry</span></span><br><span class="line">           map.set(<span class="keyword">this</span>, value);</span><br><span class="line">       <span class="keyword">else</span></span><br><span class="line">           <span class="comment">// 1）当前线程Thread 不存在ThreadLocalMap对象</span></span><br><span class="line">           <span class="comment">// 2）则调用createMap进行ThreadLocalMap对象的初始化</span></span><br><span class="line">           <span class="comment">// 3）并将此实体entry作为第一个值存放至ThreadLocalMap中</span></span><br><span class="line">           createMap(t, value);</span><br><span class="line">       <span class="comment">// 返回设置的值value</span></span><br><span class="line">       <span class="keyword">return</span> value;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 获取当前线程Thread对应维护的ThreadLocalMap </span></span><br><span class="line"><span class="comment">    * </span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span>  t the current thread 当前线程</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> the map 对应维护的ThreadLocalMap </span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function">ThreadLocalMap <span class="title">getMap</span><span class="params">(Thread t)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> t.threadLocals;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    *创建当前线程Thread对应维护的ThreadLocalMap </span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> t 当前线程</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> firstValue 存放到map中第一个entry的值</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">createMap</span><span class="params">(Thread t, T firstValue)</span> </span>&#123;</span><br><span class="line">       <span class="comment">//这里的this是调用此方法的threadLocal</span></span><br><span class="line">       t.threadLocals = <span class="keyword">new</span> ThreadLocalMap(<span class="keyword">this</span>, firstValue);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>大致流程如下：</p>
<ul>
<li><p>先尝试获得当前线程，然后获得当前线程的 ThreadLocalMap 成员，暂存于 map 变量。 </p>
</li>
<li><p>如果获得的 map 不为空，以当前 threadlocal 实例为 Key 尝试获得 map 中的 Entry（条目）。</p>
</li>
<li><p>如果 Entry 条目不为空，返回 Entry 中的 Value。 </p>
</li>
<li><p>如果 Entry 为空，则通过调用 initialValue 初始化钩子函数获取“ThreadLocal”初始值， 并设置在 map 中。如果 map 不存在，还会给当前线程创建新 ThreadLocalMap 成员，并绑定第一个“Key-Value 对”。 </p>
</li>
</ul>
<h2 id="set方法"><a href="#set方法" class="headerlink" title="set方法"></a>set方法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置当前线程对应的ThreadLocal的值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 将要保存在当前线程对应的ThreadLocal的值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(T value)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 获取当前线程对象</span></span><br><span class="line">    Thread t = Thread.currentThread();</span><br><span class="line">    <span class="comment">// 获取此线程对象中维护的ThreadLocalMap对象</span></span><br><span class="line">    ThreadLocalMap map = getMap(t);</span><br><span class="line">    <span class="comment">// 如果此map存在</span></span><br><span class="line">    <span class="keyword">if</span> (map != <span class="keyword">null</span>)</span><br><span class="line">      <span class="comment">// 存在则调用map.set设置此实体entry</span></span><br><span class="line">      map.set(<span class="keyword">this</span>, value);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      <span class="comment">// 1）当前线程Thread 不存在ThreadLocalMap对象</span></span><br><span class="line">      <span class="comment">// 2）则调用createMap进行ThreadLocalMap对象的初始化</span></span><br><span class="line">      <span class="comment">// 3）并将此实体entry作为第一个值存放至ThreadLocalMap中</span></span><br><span class="line">      createMap(t, value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>大致流程如下：</p>
<ul>
<li><p>获得当前线程，然后获得当前线程的 ThreadLocalMap 成员，暂存于 map 变量。 </p>
</li>
<li><p>如果 map 不为空，则将 Value 设置到 map 中，当前的 Threadlocal 作为 key。 </p>
</li>
<li><p>如果 map 为空，给该线程创建 map，然后设置第一个“Key-Value 对”，Key 为当前的ThreadLocal 实例，Value 为 set 方法的参数 value 值。 </p>
</li>
</ul>
<h2 id="remove方法"><a href="#remove方法" class="headerlink" title="remove方法"></a>remove方法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 删除当前线程中保存的ThreadLocal对应的实体entry</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 获取当前线程对象中维护的ThreadLocalMap对象</span></span><br><span class="line">  ThreadLocalMap m = getMap(Thread.currentThread());</span><br><span class="line">  <span class="comment">// 如果此map存在</span></span><br><span class="line">  <span class="keyword">if</span> (m != <span class="keyword">null</span>)</span><br><span class="line">    <span class="comment">// 存在则调用map.remove</span></span><br><span class="line">    <span class="comment">// 以当前ThreadLocal为key删除对应的实体entry</span></span><br><span class="line">    m.remove(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="initialValue方法"><a href="#initialValue方法" class="headerlink" title="initialValue方法"></a><strong>initialValue方法</strong></h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 返回当前线程对应的ThreadLocal的初始值</span></span><br><span class="line"><span class="comment">  </span></span><br><span class="line"><span class="comment">  * 此方法的第一次调用发生在，当线程通过&#123;<span class="doctag">@link</span> #get&#125;方法访问此线程的ThreadLocal值时</span></span><br><span class="line"><span class="comment">  * 除非线程先调用了 &#123;<span class="doctag">@link</span> #set&#125;方法，在这种情况下，</span></span><br><span class="line"><span class="comment">  * &#123;<span class="doctag">@code</span> initialValue&#125; 才不会被这个线程调用。</span></span><br><span class="line"><span class="comment">  * 通常情况下，每个线程最多调用一次这个方法。</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * &lt;p&gt;这个方法仅仅简单的返回null &#123;<span class="doctag">@code</span> null&#125;;</span></span><br><span class="line"><span class="comment">  * 如果程序员想ThreadLocal线程局部变量有一个除null以外的初始值，</span></span><br><span class="line"><span class="comment">  * 必须通过子类继承&#123;<span class="doctag">@code</span> ThreadLocal&#125; 的方式去重写此方法</span></span><br><span class="line"><span class="comment">  * 通常, 可以通过匿名内部类的方式实现</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span> 当前ThreadLocal的初始值</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> T <span class="title">initialValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="ThreadLocalMap源码分析"><a href="#ThreadLocalMap源码分析" class="headerlink" title="ThreadLocalMap源码分析"></a>ThreadLocalMap源码分析</h2><p> ThreadLocalMap是ThreadLocal的内部类，没有实现Map接口，用独立的方式实现了Map的功能（Entry [] table），其内部的Entry也是独立实现。</p>
<p><img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0JleW9uZGN6bg==,size_16,color_FFFFFF,t_70-20201103224101278.png"></p>
<p><strong>(1)成员变量</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 初始容量 —— 必须是2的整次幂</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> INITIAL_CAPACITY = <span class="number">16</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 存放数据的table，Entry类的定义在下面分析</span></span><br><span class="line"><span class="comment"> * 同样，数组长度必须是2的整次幂。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> Entry[] table;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 数组里面entrys的个数，可以用于判断table当前使用量是否超过负因子。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> size = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 进行扩容的阈值，表使用量大于它的时候进行扩容。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> threshold; <span class="comment">// Default to 0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 阈值设置为长度的2/3</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setThreshold</span><span class="params">(<span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line">    threshold = len * <span class="number">2</span> / <span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>（2） 存储结构 - Entry</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在ThreadLocalMap中，也是用Entry来保存K-V结构数据的。但是Entry中key只能是ThreadLocal对象，这点被Entry的构造方法已经限定死了</span></span><br><span class="line"><span class="comment">// 另外，Entry继承WeakReference,使用弱引用，可以将ThreadLocal对象的生命周期和线程生命周期解绑，持有对ThreadLocal的弱引用，可以使得ThreadLocal在没有其他强引用的时候被回收掉，这样可以避免因为线程得不到销毁导致ThreadLocal对象无法被回收</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Entry</span> <span class="keyword">extends</span> <span class="title">WeakReference</span>&lt;<span class="title">ThreadLocal</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">/** The value associated with this ThreadLocal. */</span></span><br><span class="line">    Object value;</span><br><span class="line"></span><br><span class="line">    Entry(ThreadLocal k, Object v) &#123;</span><br><span class="line">        <span class="keyword">super</span>(k);</span><br><span class="line">        value = v;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h1><h2 id="ThreadLocal-内存泄露问题"><a href="#ThreadLocal-内存泄露问题" class="headerlink" title="ThreadLocal 内存泄露问题"></a>ThreadLocal 内存泄露问题</h2><blockquote>
<p>不再用到的内存，没有及时释放，就叫做内存泄漏。对于持续运行的服务进程，必须及时释放内存，否则内存占用率越来越高，轻则影响 系统性能，重则导致进程崩溃。 </p>
</blockquote>
<p>由上文我们知道了，ThreadLocalMap 中使⽤的 key 为 ThreadLocal 的弱引⽤，⽽ value 是强引⽤。所以，如果ThreadLocal 没有被外部强引⽤的情况下，在垃圾回收的时候，key 会被清理掉，⽽ value 不会被清理掉。这样⼀来， ThreadLocalMap 中就会出现key为null的Entry。假如我们不做任何措施的话，value 永远⽆法被GC 回收，这个时候就可能会产⽣内存泄露。</p>
<p>ThreadLocalMap实现中已经考虑了这种情况，在调⽤ set() 、remove() 、rehash() ⽅法的时候，会清理掉key为 null 的记录。</p>
<p>但是ThreadLocal不被使用时，这几个方法也不会被调用，这种情况下，线程只要不终止，还是可能出现内存泄露的问题。所以我们使⽤完ThreadLocal ⽅法后，最好⼿动调⽤remove()⽅法，这样就能避免这个问题了。</p>
<h2 id="空指针异常"><a href="#空指针异常" class="headerlink" title="空指针异常"></a>空指针异常</h2><p>有时候，我们在调用get方法之前没有set，也没有重写initialValue，这个时候很可能因为自动拆装箱问题导致空指针异常：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadLocalTest2</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ThreadLocal&lt;Long&gt; threadLocal = <span class="keyword">new</span> ThreadLocal&lt;&gt;();</span><br><span class="line">    <span class="comment">// 返回值类型和ThreadLocal一致就不会异常而不一致就会涉及拆装箱问题</span></span><br><span class="line">    <span class="comment">// 因为没有set,也没有重写initialValue方法，所以threadLocal.get()的值是null,</span></span><br><span class="line">    <span class="comment">// public static Long get()&#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">get</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> threadLocal.get();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        get();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>多线程</category>
      </categories>
      <tags>
        <tag>多线程</tag>
      </tags>
  </entry>
  <entry>
    <title>多线程07-显示锁Lock</title>
    <url>/posts/d233685c.html</url>
    <content><![CDATA[<h1 id="Lock显式锁"><a href="#Lock显式锁" class="headerlink" title="Lock显式锁"></a><strong>Lock</strong>显式锁</h1><h2 id="基本特性"><a href="#基本特性" class="headerlink" title="基本特性"></a>基本特性</h2><ul>
<li>Lock⽅式来获取锁<strong>⽀持中断、超时不获取、是⾮阻塞的</strong></li>
<li><strong>提⾼了语义化</strong>，哪⾥加锁，哪⾥解锁都得写出来</li>
<li><strong>Lock显式锁可以给我们带来很好的灵活性，但同时我们必须⼿动释放锁</strong></li>
<li>⽀持Condition条件对象</li>
<li><strong>允许多个读线程同时访问共享资源</strong></li>
</ul>
<h2 id="ReentrantLock-可重入锁"><a href="#ReentrantLock-可重入锁" class="headerlink" title="ReentrantLock-可重入锁"></a>ReentrantLock-可重入锁</h2><h3 id="ReentrantLock-的基本使用"><a href="#ReentrantLock-的基本使用" class="headerlink" title="ReentrantLock 的基本使用"></a>ReentrantLock 的基本使用</h3><p>​        调用 lock()方法获得锁, 调用unlock()释放锁</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReentrantLockTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义显示锁</span></span><br><span class="line">    <span class="keyword">static</span> Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//先获得锁</span></span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//for 循环就是同步代码块</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot; -- &quot;</span> + i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//释放锁</span></span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Runnable r = () -&gt; test();</span><br><span class="line">        <span class="comment">//启动三个线程</span></span><br><span class="line">        <span class="keyword">new</span> Thread(r).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(r).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(r).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>使用 Lock 锁同步不同方法中的同步代码块</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReentrantLockTest02</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义锁对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获得锁</span></span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;-- test 1 -- &quot;</span> + System.currentTimeMillis());</span><br><span class="line">            Thread.sleep(<span class="keyword">new</span> Random().nextInt(<span class="number">1000</span>));</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;-- test 1 -- &quot;</span> + System.currentTimeMillis());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//释放锁</span></span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获得锁</span></span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;-- test 2 -- &quot;</span> + System.currentTimeMillis());</span><br><span class="line">            Thread.sleep(<span class="keyword">new</span> Random().nextInt(<span class="number">1000</span>));</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;-- test 2 -- &quot;</span> + System.currentTimeMillis());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//释放锁</span></span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Runnable r1 = () -&gt; test1();</span><br><span class="line">        Runnable r2 = () -&gt; test2();</span><br><span class="line">        <span class="keyword">new</span> Thread(r1).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(r1).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(r1).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(r2).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(r2).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(r2).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="lockInterruptibly-方法"><a href="#lockInterruptibly-方法" class="headerlink" title="lockInterruptibly()方法"></a>lockInterruptibly()方法</h3><p>​        lockInterruptibly() 方法的作用：如果当前线程未被中断则获得锁，如果当前线程被中断则出现异常。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LockInterruptiblyTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Service</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//定义锁对象</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">serviceMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 获得锁定,即使调用了线程的interrupt()方法,也没有真正的中断线程</span></span><br><span class="line">                <span class="comment">// lock.lock();</span></span><br><span class="line">                <span class="comment">// 如果线程被中断了,不会获得锁,会产生异常</span></span><br><span class="line">                lock.lockInterruptibly();</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot; ---&gt; begin lock&quot;</span>);</span><br><span class="line">                <span class="comment">// 执行一段耗时的操作</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Integer.MAX_VALUE; i++) &#123;</span><br><span class="line">                    <span class="keyword">new</span> StringBuilder();</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot; ---&gt; end lock&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.unlock();</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot; ---&gt; 释放锁&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Service s = <span class="keyword">new</span> Service();</span><br><span class="line">        Runnable r = () -&gt; s.serviceMethod();</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(r);</span><br><span class="line">        t1.start();</span><br><span class="line">        Thread.sleep(<span class="number">50</span>);</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(r);</span><br><span class="line">        t2.start();</span><br><span class="line">        Thread.sleep(<span class="number">50</span>);</span><br><span class="line">        t2.interrupt(); <span class="comment">//中断 t2 线程</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​        对于synchronized内部锁来说，如果一个线程在等待锁,只有两个结果：要么该线程获得锁继续执行;要么就保持等待。</p>
<p>​        对于 ReentrantLock可重入锁来说，提供另外一种可能，在等待锁的过程中，程序可以根据需要取消对锁的请求。</p>
<p><strong>通过 ReentrantLock 锁的 lockInterruptibly()方法避免死锁的产生</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> D丶Cheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 通过 ReentrantLock 锁的 lockInterruptibly()方法避免死锁的产生</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LockInterruptiblyTest02</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">IntLock</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建两个 ReentrantLock 锁对象</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> ReentrantLock lock1 = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> ReentrantLock lock2 = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">        <span class="keyword">int</span> lockNum;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 定义整数变量,决定使用哪个锁</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">IntLock</span><span class="params">(<span class="keyword">int</span> lockNum)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.lockNum = lockNum;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (lockNum % <span class="number">2</span> == <span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="comment">// 奇数,先锁 1,再锁 2</span></span><br><span class="line">                    lock1.lockInterruptibly();</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;获得锁1,还需 要获得锁 2&quot;</span>);</span><br><span class="line">                    Thread.sleep(<span class="keyword">new</span> Random().nextInt(<span class="number">500</span>));</span><br><span class="line">                    lock2.lockInterruptibly();</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;同时获得了锁1与锁2....&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// 偶数,先锁 2,再锁 1</span></span><br><span class="line">                    lock2.lockInterruptibly();</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;获得锁2,还需要获得锁1&quot;</span>);</span><br><span class="line">                    Thread.sleep(<span class="keyword">new</span> Random().nextInt(<span class="number">500</span>));</span><br><span class="line">                    lock1.lockInterruptibly();</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;同时获得了锁1与锁2....&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot; 中断了线程&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="comment">// 判断当前线程是否持有该锁</span></span><br><span class="line">                <span class="keyword">if</span> (lock1.isHeldByCurrentThread()) &#123;</span><br><span class="line">                    lock1.unlock();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (lock2.isHeldByCurrentThread()) &#123;</span><br><span class="line">                    lock2.unlock();</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;线程退出&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        IntLock intLock1 = <span class="keyword">new</span> IntLock(<span class="number">1</span>);</span><br><span class="line">        IntLock intLock2 = <span class="keyword">new</span> IntLock(<span class="number">2</span>);</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(intLock1);</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(intLock2);</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        <span class="comment">//在 main 线程,等待 3000 秒,如果还有线程没有结束就中断该线程</span></span><br><span class="line">        Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">        <span class="comment">//可以中断任何一个线程来解决死锁, t2 线程会放弃对锁 1 的申请,同时释放锁 2, t1 线程会完成它的任务</span></span><br><span class="line">        <span class="keyword">if</span> (t2.isAlive()) &#123;</span><br><span class="line">            t2.interrupt();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line">Thread-<span class="number">0</span>获得锁<span class="number">1</span>,还需 要获得锁<span class="number">2</span></span><br><span class="line">Thread-<span class="number">1</span>获得锁<span class="number">2</span>,还需要获得锁<span class="number">1</span></span><br><span class="line">java.lang.InterruptedException......</span><br><span class="line">Thread-<span class="number">1</span>中断了线程</span><br><span class="line">Thread-<span class="number">1</span>线程退出</span><br><span class="line">Thread-<span class="number">0</span>同时获得了锁<span class="number">1</span>与锁<span class="number">2.</span>...</span><br><span class="line">Thread-<span class="number">0</span>线程退出</span><br></pre></td></tr></table></figure>

<h3 id="tryLock"><a href="#tryLock" class="headerlink" title="tryLock()"></a>tryLock()</h3><p>​        tryLock(long time, TimeUnit unit) 的作用在<strong>给定等待时长内锁没有被另外的线程持有，并且当前线程也没有被中断，则获得该锁</strong>。通过该方法可以<strong>实现锁对象的限时等待</strong>。</p>
<h4 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TryLockTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">TimeLock</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> ReentrantLock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//定义锁对象</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//获得锁返回 true</span></span><br><span class="line">                <span class="keyword">if</span> (lock.tryLock(<span class="number">3</span>, TimeUnit.SECONDS)) &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;获得锁,执行耗时任务&quot;</span>);</span><br><span class="line">                    <span class="comment">//假设 Thread-0 线程先持有锁,完成任务需要4秒钟,Thread-1线程尝试获得锁,</span></span><br><span class="line">                    <span class="comment">// Thread-1线程在3秒内还没有获得锁的话,Thread-1线程会放弃</span></span><br><span class="line"><span class="comment">//                     Thread.sleep(4000);</span></span><br><span class="line">                    <span class="comment">//假设Thread-0线程先持有锁,完成任务需要2秒钟,Thread-1线程尝试获得锁,</span></span><br><span class="line">                    <span class="comment">// Thread-1线程会一直尝试,在它约定尝试的3秒内可以获得锁对象</span></span><br><span class="line">                    Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">//没有获得锁</span></span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;没有获得锁&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (lock.isHeldByCurrentThread()) &#123;</span><br><span class="line">                    lock.unlock();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        TimeLock timeLock = <span class="keyword">new</span> TimeLock();</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(timeLock);</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(timeLock);</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>​        <strong>tryLock()仅在调用时锁定未被其他线程持有的锁</strong>，如果调用方法时，锁对象对其他线程持有，则放弃。调用方法尝试获得没，如果该锁没有被其他线程占用则返回 true 表示锁定成功；如果锁被其他线程占用则返回false，不等待。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> D丶Cheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: tryLock 测试当锁对象没有被其他线程持有的情况下才会获得该锁定</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TryLockTest02</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Service</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> ReentrantLock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">serviceMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (lock.tryLock()) &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;获得锁定&quot;</span>);</span><br><span class="line">                    <span class="comment">//模拟执行任务的时长</span></span><br><span class="line">                    Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;没有获得锁定 &quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (lock.isHeldByCurrentThread()) &#123;</span><br><span class="line">                    lock.unlock();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Service service = <span class="keyword">new</span> Service();</span><br><span class="line"></span><br><span class="line">        Runnable r = () -&gt; service.serviceMethod();</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(r);</span><br><span class="line">        t1.start();</span><br><span class="line">        <span class="comment">//睡眠 50 毫秒,确保 t1 线程锁定</span></span><br><span class="line">        Thread.sleep(<span class="number">50</span>);</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(r);</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line">Thread-<span class="number">0</span>获得锁定</span><br><span class="line">Thread-<span class="number">1</span>没有获得锁定 </span><br></pre></td></tr></table></figure>

<h4 id="tryLock避免死锁"><a href="#tryLock避免死锁" class="headerlink" title="tryLock避免死锁"></a>tryLock避免死锁</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> D丶Cheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: tryLock 避免死锁</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TryLockTest03</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">IntLock</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> ReentrantLock lock1 = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> ReentrantLock lock2 = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> lockNum;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//用于控制锁的顺序</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">IntLock</span><span class="params">(<span class="keyword">int</span> lockNum)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.lockNum = lockNum;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (lockNum % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">//偶数先锁 1,再锁 2</span></span><br><span class="line">                <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span> (lock1.tryLock()) &#123;</span><br><span class="line">                            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;获得 锁 1, 还想获得锁 2&quot;</span>);</span><br><span class="line">                            Thread.sleep(<span class="keyword">new</span> Random().nextInt(<span class="number">100</span>));</span><br><span class="line">                            <span class="keyword">try</span> &#123;</span><br><span class="line">                                <span class="keyword">if</span> (lock2.tryLock()) &#123;</span><br><span class="line">                                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;同时获得锁 1 与锁 2 ----完成任务了&quot;</span>);</span><br><span class="line">                                    <span class="comment">//结束 run()方法执行,即当前线程 结束</span></span><br><span class="line">                                    <span class="keyword">return</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                                <span class="keyword">if</span> (lock2.isHeldByCurrentThread()) &#123;</span><br><span class="line">                                    lock2.unlock();</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span> (lock1.isHeldByCurrentThread()) &#123;</span><br><span class="line">                            lock1.unlock();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//奇数就先锁 2,再锁 1</span></span><br><span class="line">                <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span> (lock2.tryLock()) &#123;</span><br><span class="line">                            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;获得 锁 2, 还想获得锁 1&quot;</span>);</span><br><span class="line">                            Thread.sleep(<span class="keyword">new</span> Random().nextInt(<span class="number">100</span>));</span><br><span class="line">                            <span class="keyword">try</span> &#123;</span><br><span class="line">                                <span class="keyword">if</span> (lock1.tryLock()) &#123;</span><br><span class="line">                                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;同时获得锁 1 与锁 2 ----完成任务了&quot;</span>);</span><br><span class="line">                                    <span class="comment">//结束 run()方法执行,即当前线程 结束</span></span><br><span class="line">                                    <span class="keyword">return</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                                <span class="keyword">if</span> (lock1.isHeldByCurrentThread()) &#123;</span><br><span class="line">                                    lock1.unlock();</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span> (lock2.isHeldByCurrentThread()) &#123;</span><br><span class="line">                            lock2.unlock();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 运行后，使用tryLock()尝试获得锁，不会一直阻塞等待，</span></span><br><span class="line">        <span class="comment">// 可以通过循环不停的再次尝试，如果等待的时间足够长，线程总是会获得想要的资源</span></span><br><span class="line">        IntLock intLock1 = <span class="keyword">new</span> IntLock(<span class="number">1</span>);</span><br><span class="line">        IntLock intLock2 = <span class="keyword">new</span> IntLock(<span class="number">2</span>);</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(intLock1);</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(intLock2);</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="newCondition"><a href="#newCondition" class="headerlink" title="newCondition()"></a>newCondition()</h3><p>​        关键字 synchronized 与 wait()/notify()这两个方法一起使用可以实现等待/通知模式。Lock 锁newContition()方法返回Condition对象，Condition 类也可以实现等待/通知模式。使用 <strong>notify()通知</strong>时， JVM 会<strong>随机唤醒</strong>某个等待的线程。使用<strong>Condition类</strong>可以进行<strong>选择性通知</strong>。</p>
<p>​        Condition 比较常用的两个方法: </p>
<ul>
<li><p><strong>await()会使当前线程等待，同时会释放锁</strong>，当其他线程调用signal()时,线程会重新获得锁并继续执行. </p>
</li>
<li><p>signal()用于唤醒一个等待的线程 </p>
</li>
</ul>
<p><strong>注意：</strong>在调用Condition的await()/signal()方法前，也需要线程持有相关的Lock锁。调用await()后线程会释放这个锁，在singal()调用后会从当前Condition对象的等待队列中，唤醒 一个线程，唤醒的线程尝试获得锁， 一旦获得锁成功就继续执行。</p>
<p><strong>Condition 等待与通知基本用法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConditionTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">    <span class="keyword">static</span> Condition condition = lock.newCondition();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SubThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;condition await begin&quot;</span>);</span><br><span class="line">                condition.await();</span><br><span class="line">                System.out.println(<span class="string">&quot;condition await end&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.unlock();</span><br><span class="line">                System.out.println(<span class="string">&quot;condition unlock&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        SubThread t1 = <span class="keyword">new</span> SubThread();</span><br><span class="line">        t1.start();</span><br><span class="line">        Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;condition signal begin&quot;</span>);</span><br><span class="line">            condition.signal();</span><br><span class="line">            System.out.println(<span class="string">&quot;condition signal end&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line">condition await begin</span><br><span class="line">condition signal begin</span><br><span class="line">condition signal end</span><br><span class="line">condition await end</span><br><span class="line">condition unlock</span><br></pre></td></tr></table></figure>

<p><strong>多个Condition实现通知部分线程, 使用更灵活</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> D丶Cheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 多个Condition实现通知部分线程, 使用更灵活</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConditionTest02</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">    <span class="keyword">static</span> Condition conditionA = lock.newCondition();</span><br><span class="line">    <span class="keyword">static</span> Condition conditionB = lock.newCondition();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Service</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">awaitA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;conditionA await begin&quot;</span>);</span><br><span class="line">                conditionA.await();</span><br><span class="line">                System.out.println(<span class="string">&quot;conditionA await end&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">awaitB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;conditionB await begin&quot;</span>);</span><br><span class="line">                conditionB.await();</span><br><span class="line">                System.out.println(<span class="string">&quot;conditionB await end&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">signalA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                conditionA.signal();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">signalB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                conditionB.signal();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Service service = <span class="keyword">new</span> Service();</span><br><span class="line">        <span class="comment">// 开启两个线程去执行await方法</span></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; service.awaitA()).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; service.awaitB()).start();</span><br><span class="line">        Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">        <span class="comment">// 只唤醒A上的等待</span></span><br><span class="line">        service.signalA();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line">conditionA await begin</span><br><span class="line">conditionB await begin</span><br><span class="line">conditionA await end</span><br></pre></td></tr></table></figure>

<p><strong>condition实现交替打印</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConditionTest03</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">    <span class="keyword">static</span> Condition condition = lock.newCondition();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Service</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">while</span> (flag) &#123; <span class="comment">//当 flag 为 true 等待</span></span><br><span class="line">                    System.out.println(<span class="string">&quot;method1 await begin&quot;</span>);</span><br><span class="line">                    condition.await();</span><br><span class="line">                    System.out.println(<span class="string">&quot;method1 await begin&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                flag = <span class="keyword">true</span>; <span class="comment">//修改交替打印标志</span></span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;  -------------&quot;</span>);</span><br><span class="line">                condition.signal(); <span class="comment">//通知其他线程打印</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">while</span> (!flag) &#123; <span class="comment">//当 flag 为 false 等待</span></span><br><span class="line">                    System.out.println(<span class="string">&quot;method2 await begin&quot;</span>);</span><br><span class="line">                    condition.await();</span><br><span class="line">                    System.out.println(<span class="string">&quot;method2 await begin&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                flag = <span class="keyword">false</span>; <span class="comment">//修改交替打印标志</span></span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;  **************&quot;</span>);</span><br><span class="line">                condition.signal(); <span class="comment">//通知其他线程打印</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Service service = <span class="keyword">new</span> Service();</span><br><span class="line">        <span class="comment">// 开启两个线程去执行await方法</span></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">                service.print1();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">                service.print2();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="公平锁与非公平锁"><a href="#公平锁与非公平锁" class="headerlink" title="公平锁与非公平锁"></a>公平锁与非公平锁</h3><p>​        大多数情况下，锁的申请都是非公平的。如果线程1与线程2都在请求锁 A， 当锁 A 可用时， 系统只是会从阻塞队列中随机的选择一个线程，不能保证其公平性.。</p>
<p>​        公平的锁会按照时间先后顺序，保证先到先得，公平锁的这一特点不会出现线程饥饿现象。</p>
<p>synchronized 内部锁就是非公平的。 ReentrantLock 重入锁提供了一个构造方法：ReentrantLock(boolean fair) ，当在创建锁对象时实参传递true 可以把该锁设置为公平锁。<strong>公平锁看起来很公平</strong>，但是要实现公平锁必须要求系统维护一个有序队列，公平锁的<strong>实现成本较高，性能也低</strong>。因此默认情况下锁是非公平的， <strong>不是特别的需求，一般不使用公平锁。</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> D丶Cheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 公平锁与非公平锁</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReentrantLockTest03</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> Lock lock = <span class="keyword">new</span> ReentrantLock(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SubThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                lock.lock();</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot; 获得了锁&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    lock.unlock();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> SubThread().start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>在上面的运行结果中可以发现：</strong></p>
<ol>
<li><p>如果是<strong>非公平锁，系统倾向于让一个线程再次获得已经持有的锁</strong>，这种分配策略是高效的，非公平的 。</p>
</li>
<li><p>如果是<strong>公平锁，多个线程不会发生同一个线程连续多次获得锁的可能</strong>，保证了公平性。</p>
</li>
</ol>
<h3 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a>其他方法</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int getHoldCount(): 返回当前线程调用 lock()方法的次数 </span><br><span class="line"></span><br><span class="line">int getQueueLength(): 返回正等待获得锁的线程预估数 </span><br><span class="line"></span><br><span class="line">int getWaitQueueLength(Condition condition): 返回与 Condition 条件相关的等待的线程预估数 </span><br><span class="line"></span><br><span class="line">boolean hasQueuedThread(Thread thread): 查询参数指定的线程是否在等待获得锁 </span><br><span class="line"></span><br><span class="line">boolean hasQueuedThreads(): 查询是否还有线程在等待获得该锁 </span><br><span class="line"></span><br><span class="line">boolean hasWaiters(Condition condition): 查询是否有线程正在等待指定的 Condition 条件 </span><br><span class="line"></span><br><span class="line">boolean isFair(): 判断是否为公平锁 </span><br><span class="line"></span><br><span class="line">boolean isHeldByCurrentThread(): 判断当前线程是否持有该锁 </span><br><span class="line"></span><br><span class="line">boolean isLocked(): 查询当前锁是否被线程持有</span><br></pre></td></tr></table></figure>

<h2 id="ReentrantReadWriteLock-读写锁"><a href="#ReentrantReadWriteLock-读写锁" class="headerlink" title="ReentrantReadWriteLock-读写锁"></a>ReentrantReadWriteLock-读写锁</h2><p>​        <strong>synchronized 内部锁与ReentrantLock 锁都是独占锁(排它锁)**， 同一时间只允许一个线程执行同步代码块，</strong>可以保证线程的安全性，但是执行效率低**。</p>
<p>​        <strong>ReentrantReadWriteLock读写锁是一种改进的排他锁，也可以称作共享/排他锁。允许多个线程同时读取共享数据，但是一次只允许一个线程对共享数据进行更新。</strong></p>
<p>​        读写锁通过读锁与写锁来完成读写操作。<strong>线程在读取共享数据前必须先持有读锁，该读锁可以同时被多个线程持有，即它是共享的。线程在修改共享数据前必须先持有写锁，写锁是排他的， 一个线程持有写锁时其他线程无法获得相应的锁。</strong></p>
<p>​        读锁只是在读线程之间共享，<strong>任何一个线程持有读锁时，其他线程都无法获得写锁</strong>， 保证线程在读取数据期间没有其他线程对数据进行更新，使得读线程能够读到数据的最新值，<strong>保证在读数据期间共享变量不被修改</strong>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义读写锁 </span></span><br><span class="line">ReadWriteLock rwLock = <span class="keyword">new</span> ReentrantReadWriteLock(); </span><br><span class="line"><span class="comment">//获得读锁 </span></span><br><span class="line">Lock readLock = rwLock.readLock(); </span><br><span class="line"><span class="comment">//获得写锁 </span></span><br><span class="line">Lock writeLock = rwLock.writeLock(); </span><br><span class="line"><span class="comment">//读数据 </span></span><br><span class="line">readLock.lock(); <span class="comment">//申请读锁 </span></span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">	读取共享数据 </span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">	readLock.unlock();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//写数据 </span></span><br><span class="line">writeLock.lock(); </span><br><span class="line"><span class="comment">//申请写锁 </span></span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">  更新修改共享数据</span><br><span class="line">&#125;<span class="keyword">finally</span>&#123; </span><br><span class="line">  writeLock.unlock(); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​        读写锁允许读读共享， 读写互斥，写写互斥，在JUC包中定义了ReadWriteLock接口，该接口中定义了 readLock()返回读锁，定义 writeLock()方法返回写锁。该接口的实现类是 ReentrantReadWriteLock。</p>
<p><strong>注：</strong> <strong>readLock()与writeLock()**方法</strong>返回的锁对象<strong>是</strong>同一个锁的两个不同的角色，不是分别获得两个不同的锁。**</p>
<h3 id="读读共享"><a href="#读读共享" class="headerlink" title="读读共享"></a>读读共享</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> D丶Cheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: ReadWriteLock 读写锁可以实现读读共享,允许多个线程同时获得读锁</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReadWriteLockTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> ReadWriteLock readWriteLock = <span class="keyword">new</span> ReentrantReadWriteLock();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Lock lock = readWriteLock.readLock();</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;---&gt;获得读锁，正在读数据&quot;</span>);</span><br><span class="line">            <span class="comment">// 模拟读数据时间</span></span><br><span class="line">            Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;---&gt;读取完毕&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ReadWriteLockTest test = <span class="keyword">new</span> ReadWriteLockTest();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                test.read();</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="读写互斥"><a href="#读写互斥" class="headerlink" title="读写互斥"></a>读写互斥</h3><p>​        读写锁中写锁是排他的，同一时间不允许多个线程持有同一个写锁。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> D丶Cheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: ReadWriteLock 读写锁写锁是互斥的,不允许多个线程同时获得写锁</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReadWriteLockTest02</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> ReadWriteLock readWriteLock = <span class="keyword">new</span> ReentrantReadWriteLock();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Lock lock = readWriteLock.writeLock();</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;---&gt;获得写锁,正在写数据&quot;</span>);</span><br><span class="line">            <span class="comment">// 模拟写数据时间</span></span><br><span class="line">            Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;---&gt;写数据完毕&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ReadWriteLockTest02 test = <span class="keyword">new</span> ReadWriteLockTest02();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                test.write();</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​        从运行结果可以发现，同一时间只有一个线程获得写锁。</p>
<h3 id="写写互斥"><a href="#写写互斥" class="headerlink" title="写写互斥"></a>写写互斥</h3><p>​        <strong>写锁是独占锁，是排他锁，读线程与写线程也是互斥的。</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> D丶Cheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: ReadWriteLock演示读写互斥：</span></span><br><span class="line"><span class="comment"> * 一个线程获得读锁时,写线程等待; 一个线程获得写锁时,其他线程等待</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReadWriteLockTest03</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    ReadWriteLock readWriteLock = <span class="keyword">new</span> ReentrantReadWriteLock();</span><br><span class="line">    Lock readLock = readWriteLock.readLock(); <span class="comment">// 获取读锁</span></span><br><span class="line">    Lock writeLock = readWriteLock.writeLock(); <span class="comment">// 获取写锁</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        readLock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;---&gt;获得读锁,正在读数据&quot;</span>);</span><br><span class="line">            <span class="comment">// 模拟读数据时间</span></span><br><span class="line">            Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;---&gt;读取完毕&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            readLock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        writeLock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;---&gt;获得写锁,正在写数据&quot;</span>);</span><br><span class="line">            <span class="comment">// 模拟写数据时间</span></span><br><span class="line">            Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;---&gt;写数据完毕&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            writeLock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ReadWriteLockTest03 test = <span class="keyword">new</span> ReadWriteLockTest03();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                test.read();</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                test.write();</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出</span></span><br><span class="line">Thread-<span class="number">0</span>---&gt;获得读锁,正在读数据</span><br><span class="line">Thread-<span class="number">2</span>---&gt;获得读锁,正在读数据</span><br><span class="line">Thread-<span class="number">1</span>---&gt;获得读锁,正在读数据</span><br><span class="line">Thread-<span class="number">0</span>---&gt;读取完毕</span><br><span class="line">Thread-<span class="number">1</span>---&gt;读取完毕</span><br><span class="line">Thread-<span class="number">2</span>---&gt;读取完毕</span><br><span class="line">Thread-<span class="number">3</span>---&gt;获得写锁,正在写数据</span><br><span class="line">Thread-<span class="number">3</span>---&gt;写数据完毕</span><br><span class="line">Thread-<span class="number">4</span>---&gt;获得写锁,正在写数据</span><br><span class="line">Thread-<span class="number">4</span>---&gt;写数据完毕</span><br><span class="line">Thread-<span class="number">5</span>---&gt;获得写锁,正在写数据</span><br><span class="line">Thread-<span class="number">5</span>---&gt;写数据完毕</span><br></pre></td></tr></table></figure>

<h2 id="synchronized锁和Lock锁使⽤哪个"><a href="#synchronized锁和Lock锁使⽤哪个" class="headerlink" title="synchronized锁和Lock锁使⽤哪个"></a><strong>synchronized</strong>锁和<strong>Lock</strong>锁使⽤哪个</h2><p>Lock显式锁给我们的程序带来了很多的灵活性，很多特性都是Synchronized锁没有的。Lock锁在刚出来的时候很多性能⽅⾯都⽐Synchronized锁要好，但是从JDK1.6开始Synchronized锁就做了各种的优化。</p>
<ul>
<li>优化操作：适应⾃旋锁，锁消除，锁粗化，轻量级锁，偏向锁。</li>
</ul>
<p>所以，到现在Lock锁和Synchronized锁的性能<strong>其实差别不是很⼤</strong>！⽽Synchronized锁⽤起来⼜特别简单。<strong>Lock锁还得顾忌到它的特性，要⼿动释放锁才⾏(如果忘了释放，这就是⼀个隐患)</strong></p>
<p>所以说，我们<strong>绝⼤部分时候还是会使⽤Synchronized锁</strong>，⽤到了Lock锁提及的特性，带来的灵活性才会考虑使⽤Lock显式锁。</p>
]]></content>
      <categories>
        <category>多线程</category>
      </categories>
      <tags>
        <tag>多线程</tag>
      </tags>
  </entry>
  <entry>
    <title>02.单例模式</title>
    <url>/posts/92e1bf3b.html</url>
    <content><![CDATA[<h1 id="单例模式的应用场景"><a href="#单例模式的应用场景" class="headerlink" title="单例模式的应用场景"></a>单例模式的应用场景</h1><p>​        单例模式(Singleton Pattern)是指确保一个类在任何情况下都绝对只有一个实例，并提供一个全局访问点。单例模式是创建型模式。单例模式在现实生活中应用也非常广泛。 例如，公司 CEO、部门经理在一个公司只能存在一个等。在 J2EE 标准中，ServletContext、 ServletContextConfig 等;在 Spring 框架应用中 ApplicationContext;数据库的连接池也都是单例形式。单例模式可分为以下几种：</p>
<h2 id="饿汉式单例"><a href="#饿汉式单例" class="headerlink" title="饿汉式单例"></a>饿汉式单例</h2><blockquote>
<p> 饿汉式单例是在类加载的时候就立即初始化，并且创建单例对象。绝对线程安全，在线 程还没出现以前就是实例化了，不可能存在访问安全问题。 </p>
</blockquote>
<ul>
<li>优点: 没有加任何的锁、执行效率比较高，在用户体验上来说，比懒汉式更好。 </li>
<li>缺点: 类加载的时候就初始化，不管用与不用都占着空间，浪费了内存。</li>
</ul>
<p>饿汉式写法简单，试用与单例对象少的情况，Spring 中 IOC 容器 ApplicationContext 本身就是典型的饿汉式单例。</p>
<ul>
<li>写法一</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HungrySingleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> HungrySingleton INSTANCE = <span class="keyword">new</span> HungrySingleton();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">HungrySingleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> HungrySingleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>写法二</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HungryStaticSingleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> HungryStaticSingleton INSTANCE;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        INSTANCE = <span class="keyword">new</span> HungryStaticSingleton();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">HungryStaticSingleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> HungryStaticSingleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="懒汉式单例"><a href="#懒汉式单例" class="headerlink" title="懒汉式单例"></a>懒汉式单例</h2><blockquote>
<p>懒汉式单例在被外部类调用的时候内部类才会加载</p>
</blockquote>
<ul>
<li>懒汉式单例简单实现</li>
</ul>
<blockquote>
<p>缺点：不加synchronized可能会出现线程安全问题，但是加上synchronized关键字以后，在线程数量比较多情况下，如果 CPU 分配压力上升，会导致大批量线程出现阻塞，从而导致程序运行性能大幅下降。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleLazySingleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SimpleLazySingleton INSTANCE = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SimpleLazySingleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 线程不安全</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="comment">//    public static SimpleLazySingleton getInstance() &#123;</span></span><br><span class="line"><span class="comment">//        if (INSTANCE == null) &#123;</span></span><br><span class="line"><span class="comment">//            INSTANCE = new SimpleLazySingleton();</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//        return INSTANCE;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 线程安全，虽然jdk对synchronized有优化，但是仍有一定的性能问题</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> SimpleLazySingleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (INSTANCE == <span class="keyword">null</span>) &#123;</span><br><span class="line">            INSTANCE = <span class="keyword">new</span> SimpleLazySingleton();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>双重校验锁实现单例</li>
</ul>
<blockquote>
<p>比上一个方法稍微好点，但是因为加了锁，性能仍有问题。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DoubleCheckLazySingleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 防止指令重排序</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">volatile</span> <span class="keyword">static</span> DoubleCheckLazySingleton INSTANCE = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">DoubleCheckLazySingleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 适中方案，双重校验锁</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DoubleCheckLazySingleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (INSTANCE == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (DoubleCheckLazySingleton.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (INSTANCE == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    INSTANCE = <span class="keyword">new</span> DoubleCheckLazySingleton();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>静态内部类实现单例</li>
</ul>
<blockquote>
<p>这种形式兼顾饿汉式的内存浪费，也兼顾 synchronized 性能问题，</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InnerClassLazySingleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用的时候，会先初始化内部类</span></span><br><span class="line">    <span class="comment">// 不使用不加载内部类</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">InnerClassLazySingleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * LazyHolder里面的方法要等到外部方法调用以后才执行</span></span><br><span class="line"><span class="comment">     * 巧妙利用了内部类的特性</span></span><br><span class="line"><span class="comment">     * JVM底层执行逻辑，完美避开了线程安全问题</span></span><br><span class="line"><span class="comment">     * 每一个关键字都不是多余的</span></span><br><span class="line"><span class="comment">     * static 是为了使单例的空间共享</span></span><br><span class="line"><span class="comment">     * final 保证这个方法不会被重写，重载</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> InnerClassLazySingleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//在返回结果以前，一定会先加载内部类</span></span><br><span class="line">        <span class="keyword">return</span> LazyHolder.INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 默认不加载</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">LazyHolder</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> InnerClassLazySingleton INSTANCE = <span class="keyword">new</span> InnerClassLazySingleton();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这种形式兼顾饿汉式的内存浪费，也兼顾 synchronized 性能问题。内部类一定是要在方 法调用之前初始化，巧妙地避免了线程安全问题。</p>
<h2 id="单例被破坏"><a href="#单例被破坏" class="headerlink" title="单例被破坏"></a>单例被破坏</h2><h3 id="反射破坏单例"><a href="#反射破坏单例" class="headerlink" title="反射破坏单例"></a>反射破坏单例</h3><p>上述所有的单例模式的构造方法除了加上 private 以外，没有做任何处 理。如果我们使用反射来调用其构造方法，然后，再调用 getInstance()方法，应该就会两个不同的实例。</p>
<ul>
<li>测试</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InnerClassSingletonTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 反射会破坏单例</span></span><br><span class="line">            Class&lt;?&gt; clazz = InnerClassLazySingleton.class;</span><br><span class="line">            <span class="comment">// 通过反射拿到私有的构造方法</span></span><br><span class="line">            Constructor&lt;?&gt; constructor = clazz.getDeclaredConstructor(<span class="keyword">null</span>);</span><br><span class="line">            <span class="comment">// 强制访问</span></span><br><span class="line">            constructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            <span class="comment">// 包里初始化</span></span><br><span class="line">            Object o = constructor.newInstance();</span><br><span class="line">            <span class="comment">// 利用单例初始化</span></span><br><span class="line">            InnerClassLazySingleton o2 = InnerClassLazySingleton.getInstance();</span><br><span class="line">            System.out.println(o);</span><br><span class="line">            System.out.println(o2);</span><br><span class="line">            System.out.println(o == o2);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>运行结果</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">com.design.pattern.singleton.lazy.InnerClassLazySingleton@776ec8df</span><br><span class="line">com.design.pattern.singleton.lazy.InnerClassLazySingleton@4eec7777</span><br><span class="line">false</span><br></pre></td></tr></table></figure>

<p>此时你会发现两次对象并不是同一个，也就是单例被破坏了，此时，为了避免这种情况，我们需要在构造方法中做一下限制，仍以静态内部类演示，代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InnerClassLazySingleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用的时候，会先初始化内部类</span></span><br><span class="line">    <span class="comment">// 不使用不加载内部类</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">InnerClassLazySingleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (LazyHolder.INSTANCE != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;不允许重复创建&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * LazyHolder里面的方法要等到外部方法调用以后才执行</span></span><br><span class="line"><span class="comment">     * 巧妙利用了内部类的特性</span></span><br><span class="line"><span class="comment">     * JVM底层执行逻辑，完美避开了线程安全问题</span></span><br><span class="line"><span class="comment">     * 每一个关键字都不是多余的</span></span><br><span class="line"><span class="comment">     * static 是为了使单例的空间共享</span></span><br><span class="line"><span class="comment">     * final 保证这个方法不会被重写，重载</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> InnerClassLazySingleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//在返回结果以前，一定会先加载内部类</span></span><br><span class="line">        <span class="keyword">return</span> LazyHolder.INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 默认不加载</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">LazyHolder</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> InnerClassLazySingleton INSTANCE = <span class="keyword">new</span> InnerClassLazySingleton();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>再次运行测试类，则出现以下异常：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/image-20200917201455658.png" alt="image-20200917201455658"></p>
<h3 id="序列化破坏单例"><a href="#序列化破坏单例" class="headerlink" title="序列化破坏单例"></a>序列化破坏单例</h3><p>当我们将一个单例对象创建好，有时候需要将对象序列化然后写入到磁盘，下次使用时 再从磁盘中读取到对象，反序列化转化为内存对象。反序列化后的对象会重新分配内存， 即重新创建。那如果序列化的目标的对象为单例对象，就违背了单例模式的初衷，相当于破坏了单例。来看一段演示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SerializableSingleton</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="comment">//序列化就是说把内存中的状态通过转换成字节码的形式</span></span><br><span class="line">    <span class="comment">//从而转换一个IO流，写入到其他地方(可以是磁盘、网络IO)</span></span><br><span class="line">    <span class="comment">//内存中状态给永久保存下来了</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//反序列化</span></span><br><span class="line">    <span class="comment">//讲已经持久化的字节码内容，转换为IO流</span></span><br><span class="line">    <span class="comment">//通过IO流的读取，进而将读取的内容转换为Java对象</span></span><br><span class="line">    <span class="comment">//在转换过程中会重新创建对象new</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> SerializableSingleton INSTANCE = <span class="keyword">new</span> SerializableSingleton();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SerializableSingleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SerializableSingleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>测试代码</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SerializableSingletonTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SerializableSingleton s1 = <span class="keyword">null</span>;</span><br><span class="line">        SerializableSingleton s2 = SerializableSingleton.getInstance();</span><br><span class="line">        FileOutputStream fos = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fos = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;SeriableSingleton.txt&quot;</span>);</span><br><span class="line">            ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(fos);</span><br><span class="line">            oos.writeObject(s2);</span><br><span class="line">            oos.flush();</span><br><span class="line">            oos.close();</span><br><span class="line"></span><br><span class="line">            FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;SeriableSingleton.txt&quot;</span>);</span><br><span class="line">            ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(fis);</span><br><span class="line">            s1 = (SerializableSingleton) ois.readObject();</span><br><span class="line">            ois.close();</span><br><span class="line"></span><br><span class="line">            System.out.println(s1);</span><br><span class="line">            System.out.println(s2);</span><br><span class="line">            System.out.println(s1 == s2);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>运行结果</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">com.design.pattern.singleton.seriable.SerializableSingleton@306a30c7</span><br><span class="line">com.design.pattern.singleton.seriable.SerializableSingleton@6d311334</span><br><span class="line">false</span><br></pre></td></tr></table></figure>

<p>运行结果中，可以看出，反序列化后的对象和手动创建的对象是不一致的，实例化了两 次，违背了单例的设计初衷。那么，我们如何保证序列化的情况下也能够实现单例?其实很简单，只需要增加**readResolve()**方法即可。修改后的代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SerializableSingleton</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//序列化就是说把内存中的状态通过转换成字节码的形式</span></span><br><span class="line">    <span class="comment">//从而转换一个IO流，写入到其他地方(可以是磁盘、网络IO)</span></span><br><span class="line">    <span class="comment">//内存中状态给永久保存下来了</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//反序列化</span></span><br><span class="line">    <span class="comment">//讲已经持久化的字节码内容，转换为IO流</span></span><br><span class="line">    <span class="comment">//通过IO流的读取，进而将读取的内容转换为Java对象</span></span><br><span class="line">    <span class="comment">//在转换过程中会重新创建对象new</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> SerializableSingleton INSTANCE = <span class="keyword">new</span> SerializableSingleton();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SerializableSingleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SerializableSingleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加了可以避免反序列化破坏单例</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Object <span class="title">readResolve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>再次运行测试类，得出如下结果：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">com.design.pattern.singleton.seriable.SerializableSingleton@6d311334</span><br><span class="line">com.design.pattern.singleton.seriable.SerializableSingleton@6d311334</span><br><span class="line">true</span><br></pre></td></tr></table></figure>

<p>此时我们发现反序列化后的对象和手动创建的对象是同一个对象(源码分析待补充)。虽然，增加 readResolve()方法返回实例，解决了单 例被破坏的问题。但是，我们通过分析源码以及调试，我们可以看到实际上实例化了两次，只不过新创建的对象没有被返回而已。那如果，创建对象的动作发生频率增大，就意味着内存分配开销也就随之增大，难道真的就没办法从根本上解决问题吗?下面我们来注册式单例也许能帮助到你。</p>
<h2 id="注册式单例"><a href="#注册式单例" class="headerlink" title="注册式单例"></a>注册式单例</h2><blockquote>
<p>注册式单例又称为登记式单例，就是将每一个实例都登记到某一个地方，使用唯一的标 识获取实例。注册式单例有两种写法:一种为容器缓存，一种为枚举登记。</p>
</blockquote>
<ul>
<li>枚举式单例</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">EnumSingleton</span> </span>&#123;</span><br><span class="line">    INSTANCE;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Object data;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setData</span><span class="params">(Object data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> EnumSingleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此时用反序列化方式再进行测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EnumSingletonTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        EnumSingleton s1 = <span class="keyword">null</span>;</span><br><span class="line">        EnumSingleton s2 = EnumSingleton.getInstance();</span><br><span class="line">        s2.setData(<span class="keyword">new</span> Object());</span><br><span class="line">        FileOutputStream fos = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fos = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;EnumSingleton.txt&quot;</span>);</span><br><span class="line">            ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(fos);</span><br><span class="line">            oos.writeObject(s2);</span><br><span class="line">            oos.flush();</span><br><span class="line">            oos.close();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;EnumSingleton.txt&quot;</span>);</span><br><span class="line">            ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(fis);</span><br><span class="line">            s1 = (EnumSingleton) ois.readObject();</span><br><span class="line">            ois.close();</span><br><span class="line"></span><br><span class="line">            System.out.println(s1.getData());</span><br><span class="line">            System.out.println(s2.getData());</span><br><span class="line">            System.out.println(s1.getData() == s2.getData());</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>运行结果</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">java.lang.Object@b81eda8</span><br><span class="line">java.lang.Object@b81eda8</span><br><span class="line">true</span><br></pre></td></tr></table></figure>

<p>通过结果可以发现枚举式单例能完美避开反序列化带来的问题。</p>
<p>我们再用反射来进行测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EnumSingletonTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class clazz = EnumSingleton.class;</span><br><span class="line">            Constructor c = clazz.getDeclaredConstructor();</span><br><span class="line">            c.newInstance();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>则会得到如下异常：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/image-20200917204701199.png" alt="image-20200917204701199"></p>
<p>报的是 java.lang.NoSuchMethodException 异常，意思是没找到无参的构造方法。打开JDK中的Enum类，我们只看到了一个这样的构造方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="title">Enum</span><span class="params">(String name, <span class="keyword">int</span> ordinal)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">this</span>.name = name;</span><br><span class="line">   <span class="keyword">this</span>.ordinal = ordinal;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>那我们再来做一个这样的测试:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    Class clazz = EnumSingleton.class;</span><br><span class="line">    Constructor c = clazz.getDeclaredConstructor(String.class, <span class="keyword">int</span>.class);</span><br><span class="line">    c.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">    EnumSingleton enumSingleton = (EnumSingleton) c.newInstance(<span class="string">&quot;Test&quot;</span>, <span class="number">1234</span>);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">  	e.printStackTrace();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/image-20200918095744482.png" alt="image-20200918095744482"></p>
<p>这时错误已经非常明显了，告诉我们 Cannot reflectively create enum objects，不能 用反射来创建枚举类型。我们进入Constructor中的neInstance()方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@CallerSensitive</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">newInstance</span><span class="params">(Object ... initargs)</span></span></span><br><span class="line"><span class="function">  <span class="keyword">throws</span> InstantiationException, IllegalAccessException,</span></span><br><span class="line"><span class="function">IllegalArgumentException, InvocationTargetException</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!override) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!Reflection.quickCheckMemberAccess(clazz, modifiers)) &#123;</span><br><span class="line">      Class&lt;?&gt; caller = Reflection.getCallerClass();</span><br><span class="line">      checkAccess(caller, clazz, <span class="keyword">null</span>, modifiers);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ((clazz.getModifiers() &amp; Modifier.ENUM) != <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Cannot reflectively create enum objects&quot;</span>);</span><br><span class="line">  ConstructorAccessor ca = constructorAccessor;   <span class="comment">// read volatile</span></span><br><span class="line">  <span class="keyword">if</span> (ca == <span class="keyword">null</span>) &#123;</span><br><span class="line">    ca = acquireConstructorAccessor();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">  T inst = (T) ca.newInstance(initargs);</span><br><span class="line">  <span class="keyword">return</span> inst;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在 newInstance()方法中做了强制性的判断，如果修饰符是 Modifier.ENUM 枚举类型， 直接抛出异常。</p>
<ul>
<li>容器缓存式单例</li>
</ul>
<blockquote>
<p>容器式写法适用于创建实例非常多的情况，便于管理。但是，是非线程安全的</p>
</blockquote>
<ul>
<li>代码</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ContainerSingleton</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">ContainerSingleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, Object&gt; ioc = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getInstance</span><span class="params">(String className)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (ioc) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!ioc.containsKey(className)) &#123;</span><br><span class="line">                Object obj = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    obj = Class.forName(className).newInstance();</span><br><span class="line">                    ioc.put(className, obj);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> obj;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> ioc.get(className);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="ThreadLocal-线程单例"><a href="#ThreadLocal-线程单例" class="headerlink" title="ThreadLocal 线程单例"></a>ThreadLocal 线程单例</h2><blockquote>
<p>ThreadLocal 不能保证其创建的对象是全局唯一，但是能保证在单个线程中是唯一的，天生的线程安全。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> D丶Cheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: ThreadLocal单例</span></span><br><span class="line"><span class="comment"> * 缺点：伪线程安全，线程单例</span></span><br><span class="line"><span class="comment"> * 注：ThreadLocal的get方法中，有一个ThreadLocalMap，它set的时候用线程作为key,object作为值，get的时候其实是在当前线程        getValue。</span></span><br><span class="line"><span class="comment"> * 可以用它来实现多数据源动态切换。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/9/16 4:48 下午</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadLocalSingleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">ThreadLocalSingleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;ThreadLocalSingleton&gt; threadLocalInstance = <span class="keyword">new</span> 			ThreadLocal&lt;ThreadLocalSingleton&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> ThreadLocalSingleton <span class="title">initialValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ThreadLocalSingleton();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ThreadLocalSingleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> threadLocalInstance.get();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>简单测试代码</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadLocalSingletonTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(ThreadLocalSingleton.getInstance());</span><br><span class="line">        System.out.println(ThreadLocalSingleton.getInstance());</span><br><span class="line">        System.out.println(ThreadLocalSingleton.getInstance());</span><br><span class="line">        System.out.println(<span class="string">&quot;end&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;:&quot;</span> + ThreadLocalSingleton.getInstance());</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;:&quot;</span> + ThreadLocalSingleton.getInstance());</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;:&quot;</span> + ThreadLocalSingleton.getInstance());</span><br><span class="line">            System.out.println(<span class="string">&quot;end&quot;</span>);</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;:&quot;</span> + ThreadLocalSingleton.getInstance());</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;:&quot;</span> + ThreadLocalSingleton.getInstance());</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;:&quot;</span> + ThreadLocalSingleton.getInstance());</span><br><span class="line">            System.out.println(<span class="string">&quot;end&quot;</span>);</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>运行结果</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">com.design.pattern.singleton.threadlocal.ThreadLocalSingleton@24d46ca6</span><br><span class="line">com.design.pattern.singleton.threadlocal.ThreadLocalSingleton@24d46ca6</span><br><span class="line">com.design.pattern.singleton.threadlocal.ThreadLocalSingleton@24d46ca6</span><br><span class="line">end</span><br><span class="line">Thread-0:com.design.pattern.singleton.threadlocal.ThreadLocalSingleton@4082029</span><br><span class="line">Thread-0:com.design.pattern.singleton.threadlocal.ThreadLocalSingleton@4082029</span><br><span class="line">Thread-0:com.design.pattern.singleton.threadlocal.ThreadLocalSingleton@4082029</span><br><span class="line">end</span><br><span class="line">Thread-1:com.design.pattern.singleton.threadlocal.ThreadLocalSingleton@1e542a06</span><br><span class="line">Thread-1:com.design.pattern.singleton.threadlocal.ThreadLocalSingleton@1e542a06</span><br><span class="line">Thread-1:com.design.pattern.singleton.threadlocal.ThreadLocalSingleton@1e542a06</span><br><span class="line">end</span><br></pre></td></tr></table></figure>

<p>通过运行结果可以发现，在主线程 main中无论调用多少次，获取到的实例都是同一个，都在两个子线程中也都分别获取到了不同的实例。那么 ThreadLocal 是如果实现这样的效果的呢?我们知道上面的单例模式为了达到线程安全的目的，给方法上锁，以时间换空间。ThreadLocal 将所有的对象全部放在 ThreadLocalMap 中，为每个线程都提供一个对象，实际上是以 空间换时间来实现线程间隔离的。</p>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>创建型模式</title>
    <url>/posts/b152b0c8.html</url>
    <content><![CDATA[<h1 id="创建型设计模式"><a href="#创建型设计模式" class="headerlink" title="创建型设计模式"></a>创建型设计模式</h1><p>​        创建型设计模式提供了一种在<strong>创建对象的同时隐藏创建逻辑的方式</strong>，而不是使用 new 运算符直接实例化对象。这使得程序在判断针对某个给定实例需要创建哪些对象时更加灵活。</p>
<p>​        它分为以下几个设计模式：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/image-20210107111638905.png" alt="image-20210107111638905"></p>
<h2 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h2><p>​        简单工厂模式(Simple Factory Pattern)又称为静态工厂方法(Static Factory Method)模式。在简单工厂模式中，可以<strong>根据参数的不同返回不同类的实例</strong>。简单工厂模式专门定义一个类来负责创建其他类的实例，被创建的实例通常都具有共同的父类。</p>
<p>​        这个比较简单，不废话了，直接上代码吧：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Product <span class="title">create</span><span class="params">(String type)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;A&quot;</span>.equals(type)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ProductA();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;B&quot;</span>.equals(type)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ProductB();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductA</span> <span class="keyword">implements</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductB</span> <span class="keyword">implements</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>方法调用：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 调用</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    ProductFactory factory = <span class="keyword">new</span> ProductFactory();</span><br><span class="line">    Product product = factory.create(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">    product.print();</span><br><span class="line">    product = factory.create(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">    product.print();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​        简单地说，简单工厂模式通常就是这样，一个工厂类 XxxFactory，里面有一个静态方法，根据不同的参数，返回不同的派生自同一个父类（或实现同一接口）的实例对象。</p>
<blockquote>
<p>我们强调<strong>职责单一</strong>原则，一个类只提供一种功能，ProductFactory 的功能就是只要负责生产各种 Product。</p>
</blockquote>
<h2 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h2><p>​        工厂模式又称为工厂方法模式，它的意图就是定义一个创建对象的接口，让其子类自己决定实例化哪一个工厂类，工厂模式使其创建过程延迟到子类进行。</p>
<p>​        <strong>优点：</strong> 一个调用者想创建一个对象，只要知道其名称就可以了。并且它的<strong>扩展性高</strong>，如果想增加一个产品，只要扩展一个工厂类就可以。屏蔽产品的具体实现，调用者只关心产品的接口。</p>
<p>​        <strong>缺点：</strong>每次增加一个产品时，都需要增加一个具体类和对象实现工厂，在一定程度上增加了系统的复杂度，同时也增加了系统具体类的依赖，这并不是什么好事。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Factory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Product <span class="title">createProduct</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FactoryA</span> <span class="keyword">implements</span> <span class="title">Factory</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Product <span class="title">createProduct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ProductA();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FactoryB</span> <span class="keyword">implements</span> <span class="title">Factory</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Product <span class="title">createProduct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ProductB();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductA</span> <span class="keyword">implements</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductB</span> <span class="keyword">implements</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 创建A</span></span><br><span class="line">  	<span class="comment">// 1. 先选择一个具体的工厂</span></span><br><span class="line">    Factory factory = <span class="keyword">new</span> FactoryA();</span><br><span class="line">  	<span class="comment">// 2. 创建一个产品</span></span><br><span class="line">    Product product = factory.createProduct();</span><br><span class="line">    product.print();</span><br><span class="line">    <span class="comment">// 创建B</span></span><br><span class="line">    factory = <span class="keyword">new</span> FactoryB();</span><br><span class="line">    product = factory.createProduct();</span><br><span class="line">    product.print();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>用一张图来表示就是下图的样子</p>
<p><img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/image-20201112150057245.png" alt="image-20201112150057245"></p>
<h2 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h2><p>​        一般在有<strong>产品族</strong>的时候才会使用抽象工厂模式。这是围绕一个超级工厂创建其他工厂的设计模式，该超级工厂又称为其他工厂的工厂。</p>
<p>​        就拿<a href="https://refactoringguru.cn/">refactoringguru.cn</a>上家具模拟器的例子来说，我们买家具，肯定会有茶几和沙发等。如果我们还是使用工厂模式来设计，那就是这样的：将沙发和茶几进行抽象，然后沙发由SofaFactory 生产，茶几由Coffee­TableFactory 生产，且风格有现代(Modern) 、  维多利亚(Victorian)两种，设计如下图：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/image-20210107144743756.png" alt="image-20210107144743756"></p>
<p>​        那么我们调用买家具功能的时候，就是这样的：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 得到现代风的沙发</span></span><br><span class="line">SofaFactory modernSofaFactory = <span class="keyword">new</span> ModernSofaFactory();</span><br><span class="line">Sofa sofa = modernSofaFactory.makeSofa();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 得到维多利亚风的茶几</span></span><br><span class="line">CoffeeTableFactory victorianCoffeeTableFactory = <span class="keyword">new</span> VictorianCoffeeTableFactory();</span><br><span class="line">CoffeeTable coffeetable = victorianCoffeeTableFactory.makeCoffeeTable();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打包发货</span></span><br><span class="line">Pack pack = <span class="keyword">new</span> Pack(sofa, coffeetable);</span><br></pre></td></tr></table></figure>

<p>​        那么当现代风和维多利亚风家具的风格不搭配时，就会有发生下图的情况，这样我想买家肯定会觉得很不合适。这里就牵涉到上文所说的<strong>产品族</strong>的概念了，所谓产品族，也<strong>就是组成某个产品的一系列附件的集合，比如华为系列和小米系列就是两个产品族</strong>。</p>
<img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/abstract-factory-comic-1-zh.png" alt="img" style="zoom:120%;" />

<p>​        当<strong>涉及到这种产品族的问题</strong>的时候，就<strong>需要抽象工厂模式</strong>来支持了。我们不再定义沙发工厂、茶几工厂、桌子工厂等等，而是直接定义家具工厂，每个家具工厂负责生产自己的所有的家具，这样能保证肯定不存在一套家具风格不搭的问题了。</p>
<p><img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/image-20210107151318105.png" alt="image-20210107151318105"></p>
<p>​        这个时候，对于客户端来说，不再需要单独挑选沙发工厂、茶几工厂、桌子工厂等，直接选择一家家具工厂，家具工厂会负责生产所有的家具，而且能保证肯定风格是搭配的。代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 第一步就要选定一个超级工厂（家具工厂）</span></span><br><span class="line">    FurnitureFactory mf = <span class="keyword">new</span> ModernFactory();</span><br><span class="line">    <span class="comment">// 从这个超级工厂造沙发</span></span><br><span class="line">    Sofa sofa = mf.makeSofa();</span><br><span class="line">    <span class="comment">// 从这个超级工厂造茶几</span></span><br><span class="line">    CoffeeTable coffeeTable = mf.makeCoffeeTable();</span><br><span class="line">    <span class="comment">// 将同一个家具工厂出来的沙发、茶几打包发货</span></span><br><span class="line">    Pack pack = <span class="keyword">new</span> Pack(sofa, coffeeTable);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​        当然，抽象工厂的问题也是显而易见的，比如我们要加个桌子，就需要修改所有的工厂，给所有的工厂都加上制造桌子的方法。这有点违反了<strong>对修改关闭，对扩展开放</strong>这个设计原则。</p>
<h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><p>​        单例模式(Singleton Pattern)是指确保一个类在任何情况下都绝对只有一个实例，并提供一个全局访问点。单例模式是创建型模式。单例模式在现实生活中应用也非常广泛。 例如，公司 CEO、部门经理在一个公司只能存在一个等。在 J2EE 标准中，ServletContext、 ServletContextConfig 等;在 Spring 框架应用中 ApplicationContext;数据库的连接池也都是单例形式。单例模式可分为以下几种：</p>
<h3 id="饿汉式单例"><a href="#饿汉式单例" class="headerlink" title="饿汉式单例"></a>饿汉式单例</h3><blockquote>
<p> 饿汉式单例是在类加载的时候就立即初始化，并且创建单例对象。绝对线程安全，在线 程还没出现以前就是实例化了，不可能存在访问安全问题。 </p>
</blockquote>
<ul>
<li>优点: 没有加任何的锁、执行效率比较高，在用户体验上来说，比懒汉式更好。 </li>
<li>缺点: 类加载的时候就初始化，不管用与不用都占着空间，浪费了内存。</li>
</ul>
<p>饿汉式写法简单，试用与单例对象少的情况，Spring 中 IOC 容器 ApplicationContext 本身就是典型的饿汉式单例。</p>
<ul>
<li>写法一</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HungrySingleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> HungrySingleton INSTANCE = <span class="keyword">new</span> HungrySingleton();</span><br><span class="line">		<span class="comment">// 首先，将构造方法堵死，不让重新创建对象</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">HungrySingleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> HungrySingleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>写法二</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HungryStaticSingleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> HungryStaticSingleton INSTANCE;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        INSTANCE = <span class="keyword">new</span> HungryStaticSingleton();</span><br><span class="line">    &#125;</span><br><span class="line">		<span class="comment">// 首先，将构造方法堵死，不让重新创建对象</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">HungryStaticSingleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> HungryStaticSingleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="懒汉式单例"><a href="#懒汉式单例" class="headerlink" title="懒汉式单例"></a>懒汉式单例</h3><blockquote>
<p>懒汉式单例在被外部类调用的时候内部类才会加载</p>
</blockquote>
<ul>
<li>懒汉式单例简单实现</li>
</ul>
<blockquote>
<p>缺点：不加synchronized可能会出现线程安全问题，但是加上synchronized关键字以后，在线程数量比较多情况下，如果 CPU 分配压力上升，会导致大批量线程出现阻塞，从而导致程序运行性能大幅下降。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleLazySingleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SimpleLazySingleton INSTANCE = <span class="keyword">null</span>;</span><br><span class="line">		<span class="comment">// 首先，将构造方法堵死，不让重新创建对象</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SimpleLazySingleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 线程不安全</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="comment">//    public static SimpleLazySingleton getInstance() &#123;</span></span><br><span class="line"><span class="comment">//        if (INSTANCE == null) &#123;</span></span><br><span class="line"><span class="comment">//            INSTANCE = new SimpleLazySingleton();</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//        return INSTANCE;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 线程安全，虽然jdk对synchronized有优化，但是仍有一定的性能问题</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> SimpleLazySingleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (INSTANCE == <span class="keyword">null</span>) &#123;</span><br><span class="line">            INSTANCE = <span class="keyword">new</span> SimpleLazySingleton();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>双重校验锁实现饿汉式单例</li>
</ul>
<blockquote>
<p>比上一个方法稍微好点，但是因为加了锁，性能仍有问题。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DoubleCheckLazySingleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 一定要加volatile，防止指令重排序</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">volatile</span> <span class="keyword">static</span> DoubleCheckLazySingleton INSTANCE = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">// 首先，将构造方法堵死，不让重新创建对象</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">DoubleCheckLazySingleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 适中方案，双重校验锁</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DoubleCheckLazySingleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (INSTANCE == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (DoubleCheckLazySingleton.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (INSTANCE == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    INSTANCE = <span class="keyword">new</span> DoubleCheckLazySingleton();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>静态内部类实现饿汉式单例</li>
</ul>
<blockquote>
<p>这种形式兼顾饿汉式的内存浪费，也兼顾 synchronized 性能问题，</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InnerClassLazySingleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用的时候，会先初始化内部类</span></span><br><span class="line">    <span class="comment">// 不使用不加载内部类</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">InnerClassLazySingleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * LazyHolder里面的方法要等到外部方法调用以后才执行</span></span><br><span class="line"><span class="comment">     * 巧妙利用了内部类的特性</span></span><br><span class="line"><span class="comment">     * JVM底层执行逻辑，完美避开了线程安全问题</span></span><br><span class="line"><span class="comment">     * 每一个关键字都不是多余的</span></span><br><span class="line"><span class="comment">     * static 是为了使单例的空间共享</span></span><br><span class="line"><span class="comment">     * final 保证这个方法不会被重写，重载</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> InnerClassLazySingleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//在返回结果以前，一定会先加载内部类</span></span><br><span class="line">        <span class="keyword">return</span> LazyHolder.INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 默认不加载</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">LazyHolder</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> InnerClassLazySingleton INSTANCE = <span class="keyword">new</span> InnerClassLazySingleton();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​        这种形式兼顾饿汉式的内存浪费，也兼顾 synchronized 性能问题。内部类一定是要在方 法调用之前初始化，巧妙地避免了线程安全问题。</p>
<h3 id="单例被破坏"><a href="#单例被破坏" class="headerlink" title="单例被破坏"></a>单例被破坏</h3><h4 id="反射破坏单例"><a href="#反射破坏单例" class="headerlink" title="反射破坏单例"></a>反射破坏单例</h4><p>​        上述所有的单例模式的构造方法除了加上 private 以外，没有做任何处 理。如果我们使用反射来调用其构造方法，然后，再调用 getInstance()方法，应该就会两个不同的实例。</p>
<ul>
<li>测试</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InnerClassSingletonTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 反射会破坏单例</span></span><br><span class="line">            Class&lt;?&gt; clazz = InnerClassLazySingleton.class;</span><br><span class="line">            <span class="comment">// 通过反射拿到私有的构造方法</span></span><br><span class="line">            Constructor&lt;?&gt; constructor = clazz.getDeclaredConstructor(<span class="keyword">null</span>);</span><br><span class="line">            <span class="comment">// 强制访问</span></span><br><span class="line">            constructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            <span class="comment">// 包里初始化</span></span><br><span class="line">            Object o = constructor.newInstance();</span><br><span class="line">            <span class="comment">// 利用单例初始化</span></span><br><span class="line">            InnerClassLazySingleton o2 = InnerClassLazySingleton.getInstance();</span><br><span class="line">            System.out.println(o);</span><br><span class="line">            System.out.println(o2);</span><br><span class="line">            System.out.println(o == o2);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>运行结果</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">com.design.pattern.singleton.lazy.InnerClassLazySingleton@776ec8df</span><br><span class="line">com.design.pattern.singleton.lazy.InnerClassLazySingleton@4eec7777</span><br><span class="line">false</span><br></pre></td></tr></table></figure>

<p>此时你会发现两次对象并不是同一个，也就是单例被破坏了，此时，为了避免这种情况，我们需要在构造方法中做一下限制，仍以静态内部类演示，代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InnerClassLazySingleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用的时候，会先初始化内部类</span></span><br><span class="line">    <span class="comment">// 不使用不加载内部类</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">InnerClassLazySingleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (LazyHolder.INSTANCE != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;不允许重复创建&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * LazyHolder里面的方法要等到外部方法调用以后才执行</span></span><br><span class="line"><span class="comment">     * 巧妙利用了内部类的特性</span></span><br><span class="line"><span class="comment">     * JVM底层执行逻辑，完美避开了线程安全问题</span></span><br><span class="line"><span class="comment">     * 每一个关键字都不是多余的</span></span><br><span class="line"><span class="comment">     * static 是为了使单例的空间共享</span></span><br><span class="line"><span class="comment">     * final 保证这个方法不会被重写，重载</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> InnerClassLazySingleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//在返回结果以前，一定会先加载内部类</span></span><br><span class="line">        <span class="keyword">return</span> LazyHolder.INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 默认不加载</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">LazyHolder</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> InnerClassLazySingleton INSTANCE = <span class="keyword">new</span> InnerClassLazySingleton();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>再次运行测试类，则出现以下异常：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/image-20200917201455658.png" alt="image-20200917201455658"></p>
<h4 id="序列化破坏单例"><a href="#序列化破坏单例" class="headerlink" title="序列化破坏单例"></a>序列化破坏单例</h4><p>​        当我们将一个单例对象创建好，有时候需要将对象序列化然后写入到磁盘，下次使用时 再从磁盘中读取到对象，反序列化转化为内存对象。反序列化后的对象会重新分配内存， 即重新创建。那如果序列化的目标的对象为单例对象，就违背了单例模式的初衷，相当于破坏了单例。来看一段演示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SerializableSingleton</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="comment">//序列化就是说把内存中的状态通过转换成字节码的形式</span></span><br><span class="line">    <span class="comment">//从而转换一个IO流，写入到其他地方(可以是磁盘、网络IO)</span></span><br><span class="line">    <span class="comment">//内存中状态给永久保存下来了</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//反序列化</span></span><br><span class="line">    <span class="comment">//讲已经持久化的字节码内容，转换为IO流</span></span><br><span class="line">    <span class="comment">//通过IO流的读取，进而将读取的内容转换为Java对象</span></span><br><span class="line">    <span class="comment">//在转换过程中会重新创建对象new</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> SerializableSingleton INSTANCE = <span class="keyword">new</span> SerializableSingleton();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SerializableSingleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SerializableSingleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>测试代码</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SerializableSingletonTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SerializableSingleton s1 = <span class="keyword">null</span>;</span><br><span class="line">        SerializableSingleton s2 = SerializableSingleton.getInstance();</span><br><span class="line">        FileOutputStream fos = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fos = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;SeriableSingleton.txt&quot;</span>);</span><br><span class="line">            ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(fos);</span><br><span class="line">            oos.writeObject(s2);</span><br><span class="line">            oos.flush();</span><br><span class="line">            oos.close();</span><br><span class="line"></span><br><span class="line">            FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;SeriableSingleton.txt&quot;</span>);</span><br><span class="line">            ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(fis);</span><br><span class="line">            s1 = (SerializableSingleton) ois.readObject();</span><br><span class="line">            ois.close();</span><br><span class="line"></span><br><span class="line">            System.out.println(s1);</span><br><span class="line">            System.out.println(s2);</span><br><span class="line">            System.out.println(s1 == s2);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>运行结果</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">com.design.pattern.singleton.seriable.SerializableSingleton@306a30c7</span><br><span class="line">com.design.pattern.singleton.seriable.SerializableSingleton@6d311334</span><br><span class="line">false</span><br></pre></td></tr></table></figure>

<p>​        运行结果中，可以看出，反序列化后的对象和手动创建的对象是不一致的，实例化了两 次，违背了单例的设计初衷。那么，我们如何保证序列化的情况下也能够实现单例？其实很简单，只需要增加**readResolve()**方法即可。修改后的代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SerializableSingleton</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//序列化就是说把内存中的状态通过转换成字节码的形式</span></span><br><span class="line">    <span class="comment">//从而转换一个IO流，写入到其他地方(可以是磁盘、网络IO)</span></span><br><span class="line">    <span class="comment">//内存中状态给永久保存下来了</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//反序列化</span></span><br><span class="line">    <span class="comment">//讲已经持久化的字节码内容，转换为IO流</span></span><br><span class="line">    <span class="comment">//通过IO流的读取，进而将读取的内容转换为Java对象</span></span><br><span class="line">    <span class="comment">//在转换过程中会重新创建对象new</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> SerializableSingleton INSTANCE = <span class="keyword">new</span> SerializableSingleton();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SerializableSingleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SerializableSingleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加了可以避免反序列化破坏单例</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Object <span class="title">readResolve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​        再次运行测试类，得出如下结果：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">com.design.pattern.singleton.seriable.SerializableSingleton@6d311334</span><br><span class="line">com.design.pattern.singleton.seriable.SerializableSingleton@6d311334</span><br><span class="line">true</span><br></pre></td></tr></table></figure>

<p>​        此时我们发现反序列化后的对象和手动创建的对象是同一个对象(源码分析待补充)。虽然，增加readResolve()方法返回实例，解决了单例被破坏的问题。但是，我们通过分析源码以及调试，我们可以看到实际上实例化了两次，只不过新创建的对象没有被返回而已。那如果，创建对象的动作发生频率增大，就意味着内存分配开销也就随之增大，难道真的就没办法从根本上解决问题吗?下面我们来注册式单例也许能帮助到你。</p>
<h3 id="注册式单例"><a href="#注册式单例" class="headerlink" title="注册式单例"></a>注册式单例</h3><blockquote>
<p>注册式单例又称为登记式单例，就是将每一个实例都登记到某一个地方，使用唯一的标 识获取实例。注册式单例有两种写法:一种为容器缓存，一种为枚举登记。</p>
</blockquote>
<ul>
<li>枚举式单例</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">EnumSingleton</span> </span>&#123;</span><br><span class="line">    INSTANCE;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Object data;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setData</span><span class="params">(Object data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> EnumSingleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​        此时用反序列化方式再进行测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EnumSingletonTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        EnumSingleton s1 = <span class="keyword">null</span>;</span><br><span class="line">        EnumSingleton s2 = EnumSingleton.getInstance();</span><br><span class="line">        s2.setData(<span class="keyword">new</span> Object());</span><br><span class="line">        FileOutputStream fos = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fos = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;EnumSingleton.txt&quot;</span>);</span><br><span class="line">            ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(fos);</span><br><span class="line">            oos.writeObject(s2);</span><br><span class="line">            oos.flush();</span><br><span class="line">            oos.close();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;EnumSingleton.txt&quot;</span>);</span><br><span class="line">            ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(fis);</span><br><span class="line">            s1 = (EnumSingleton) ois.readObject();</span><br><span class="line">            ois.close();</span><br><span class="line"></span><br><span class="line">            System.out.println(s1.getData());</span><br><span class="line">            System.out.println(s2.getData());</span><br><span class="line">            System.out.println(s1.getData() == s2.getData());</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>运行结果</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">java.lang.Object@b81eda8</span><br><span class="line">java.lang.Object@b81eda8</span><br><span class="line">true</span><br></pre></td></tr></table></figure>

<p>通过结果可以发现枚举式单例能完美避开反序列化带来的问题。</p>
<p>我们再用反射来进行测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EnumSingletonTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class clazz = EnumSingleton.class;</span><br><span class="line">            Constructor c = clazz.getDeclaredConstructor();</span><br><span class="line">            c.newInstance();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​        则会得到如下异常：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/image-20200917204701199.png" alt="image-20200917204701199"></p>
<p>​        报的是 java.lang.NoSuchMethodException 异常，意思是没找到无参的构造方法。打开JDK中的Enum类，我们只看到了一个这样的构造方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="title">Enum</span><span class="params">(String name, <span class="keyword">int</span> ordinal)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">this</span>.name = name;</span><br><span class="line">   <span class="keyword">this</span>.ordinal = ordinal;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​        那我们再来做一个这样的测试:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    Class clazz = EnumSingleton.class;</span><br><span class="line">    Constructor c = clazz.getDeclaredConstructor(String.class, <span class="keyword">int</span>.class);</span><br><span class="line">    c.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">    EnumSingleton enumSingleton = (EnumSingleton) c.newInstance(<span class="string">&quot;Test&quot;</span>, <span class="number">1234</span>);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">  	e.printStackTrace();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​        运行结果如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/image-20200918095744482.png" alt="image-20200918095744482"></p>
<p>​        这时错误已经非常明显了，告诉我们 Cannot reflectively create enum objects，不能 用反射来创建枚举类型。我们进入Constructor中的neInstance()方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@CallerSensitive</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">newInstance</span><span class="params">(Object ... initargs)</span></span></span><br><span class="line"><span class="function">  <span class="keyword">throws</span> InstantiationException, IllegalAccessException,</span></span><br><span class="line"><span class="function">IllegalArgumentException, InvocationTargetException</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!override) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!Reflection.quickCheckMemberAccess(clazz, modifiers)) &#123;</span><br><span class="line">      Class&lt;?&gt; caller = Reflection.getCallerClass();</span><br><span class="line">      checkAccess(caller, clazz, <span class="keyword">null</span>, modifiers);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ((clazz.getModifiers() &amp; Modifier.ENUM) != <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Cannot reflectively create enum objects&quot;</span>);</span><br><span class="line">  ConstructorAccessor ca = constructorAccessor;   <span class="comment">// read volatile</span></span><br><span class="line">  <span class="keyword">if</span> (ca == <span class="keyword">null</span>) &#123;</span><br><span class="line">    ca = acquireConstructorAccessor();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">  T inst = (T) ca.newInstance(initargs);</span><br><span class="line">  <span class="keyword">return</span> inst;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​        在 newInstance()方法中做了强制性的判断，如果修饰符是 Modifier.ENUM 枚举类型， 直接抛出异常。</p>
<ul>
<li>容器缓存式单例</li>
</ul>
<blockquote>
<p>容器式写法适用于创建实例非常多的情况，便于管理。但是，是非线程安全的</p>
</blockquote>
<ul>
<li>代码</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ContainerSingleton</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">ContainerSingleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, Object&gt; ioc = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getInstance</span><span class="params">(String className)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (ioc) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!ioc.containsKey(className)) &#123;</span><br><span class="line">                Object obj = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    obj = Class.forName(className).newInstance();</span><br><span class="line">                    ioc.put(className, obj);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> obj;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> ioc.get(className);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="ThreadLocal-线程单例"><a href="#ThreadLocal-线程单例" class="headerlink" title="ThreadLocal 线程单例"></a>ThreadLocal 线程单例</h3><blockquote>
<p>ThreadLocal 不能保证其创建的对象是全局唯一，但是能保证在单个线程中是唯一的，天生的线程安全。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> D丶Cheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: ThreadLocal单例</span></span><br><span class="line"><span class="comment"> * 缺点：伪线程安全，线程单例</span></span><br><span class="line"><span class="comment"> * 注：ThreadLocal的get方法中，有一个ThreadLocalMap，它set的时候用线程作为key,object作为值，get的时候其实是在当前线程        getValue。</span></span><br><span class="line"><span class="comment"> * 可以用它来实现多数据源动态切换。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/9/16 4:48 下午</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadLocalSingleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">ThreadLocalSingleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;ThreadLocalSingleton&gt; threadLocalInstance = <span class="keyword">new</span> 			ThreadLocal&lt;ThreadLocalSingleton&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> ThreadLocalSingleton <span class="title">initialValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ThreadLocalSingleton();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ThreadLocalSingleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> threadLocalInstance.get();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>简单测试代码</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadLocalSingletonTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(ThreadLocalSingleton.getInstance());</span><br><span class="line">        System.out.println(ThreadLocalSingleton.getInstance());</span><br><span class="line">        System.out.println(ThreadLocalSingleton.getInstance());</span><br><span class="line">        System.out.println(<span class="string">&quot;end&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;:&quot;</span> + ThreadLocalSingleton.getInstance());</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;:&quot;</span> + ThreadLocalSingleton.getInstance());</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;:&quot;</span> + ThreadLocalSingleton.getInstance());</span><br><span class="line">            System.out.println(<span class="string">&quot;end&quot;</span>);</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;:&quot;</span> + ThreadLocalSingleton.getInstance());</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;:&quot;</span> + ThreadLocalSingleton.getInstance());</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;:&quot;</span> + ThreadLocalSingleton.getInstance());</span><br><span class="line">            System.out.println(<span class="string">&quot;end&quot;</span>);</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>运行结果</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">com.design.pattern.singleton.threadlocal.ThreadLocalSingleton@24d46ca6</span><br><span class="line">com.design.pattern.singleton.threadlocal.ThreadLocalSingleton@24d46ca6</span><br><span class="line">com.design.pattern.singleton.threadlocal.ThreadLocalSingleton@24d46ca6</span><br><span class="line">end</span><br><span class="line">Thread-0:com.design.pattern.singleton.threadlocal.ThreadLocalSingleton@4082029</span><br><span class="line">Thread-0:com.design.pattern.singleton.threadlocal.ThreadLocalSingleton@4082029</span><br><span class="line">Thread-0:com.design.pattern.singleton.threadlocal.ThreadLocalSingleton@4082029</span><br><span class="line">end</span><br><span class="line">Thread-1:com.design.pattern.singleton.threadlocal.ThreadLocalSingleton@1e542a06</span><br><span class="line">Thread-1:com.design.pattern.singleton.threadlocal.ThreadLocalSingleton@1e542a06</span><br><span class="line">Thread-1:com.design.pattern.singleton.threadlocal.ThreadLocalSingleton@1e542a06</span><br><span class="line">end</span><br></pre></td></tr></table></figure>

<p>​        通过运行结果可以发现，在主线程 main中无论调用多少次，获取到的实例都是同一个，都在两个子线程中也都分别获取到了不同的实例。那么 ThreadLocal 是如果实现这样的效果的呢?我们知道上面的单例模式为了达到线程安全的目的，给方法上锁，以时间换空间。ThreadLocal 将所有的对象全部放在 ThreadLocalMap 中，为每个线程都提供一个对象，实际上是以 空间换时间来实现线程间隔离的。</p>
<h2 id="建造者模式"><a href="#建造者模式" class="headerlink" title="建造者模式"></a>建造者模式</h2><p>​        建造者模式（Builder Pattern）<strong>使用多个简单的对象一步一步构建成一个复杂的对象。它的意图就是将一个复杂的构建与其表示相分离，使得同样的构建过程可以创建不同的表示</strong>。生活中这样的例子很多，如游戏中的不同角色，其性别、个性、能力、脸型、体型、服装、发型等特性都有所差异；还有汽车中的方向盘、发动机、车架、轮胎等部件也多种多样。</p>
<p>​        </p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1>]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>Java基础面试题</title>
    <url>/posts/f9f59b6f.html</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="密码不正确，请重新输入！" data-whm="文章不能被校验, 不过您还是能看看解密后的内容！">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">该文章还未完全完成, 请输入密码查看。</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="23ff6e8476bf0ad39db42d3b5d4d4ec6216751f440336ce9bd23c637acac8125">249d63f61f66a83e2cce6900f57704ca39132850813a38dda9bf6efa5b4933593be9d7e6b5010dda3b8dd032171f78fdd0603e4be6c69a2295e7f89fea9756798175772a1d889a6c9ddc592ff3f66b1df89beba4c1567dac837b0e10503869e3f6fdfd445c35db45803fc4a4e89ebdbe9edebcac241fc3a1f9ae1257e5f34497bb134c3b4765bb4fbc1ffab84e9a9c7112b1eef077d137fd6e62edf0e876ee9da4a1cce049235062a6bf50dad52474df465521fe41f7aaec4d1c32f0eb16b3f2e8d501c8902ad95217c4e2bd1b3b5eda759333afdbd05dc0f0220992d0e509479fd7648e88c7df2838e16064010265afc8b899c24d7601b0580646f9b437eda705af4e8e7f7601c27ca90369ab73f8d089c57f3a8845ba38e03c2faec1c9a5d761afd16b24082bd0817f4dab4acf75a9a2e3a3cc3ebc17b24f3e458920b8d183e6ab66afdcafb25bdc1fc1d9b8bff89245f9c0a87dd8d576f19a0919ffb269610b2e4d9e46fed74a5ecc2e39ee7fb2323f893a89f8353dfa4de9e9ae45c91ec9e3193f8c3314b14d41815fbc9ceb9b192068dd952a35e42ee75a6ef27a9e9542b5e7d72d02ce9301379ba104e1b0f54af46cf872a9bf515ca501ebb32096bb264221897d7a7814064f97cf7905966f4dcb5f848065ac7ff5195a7afe3e773d689348ff95a868d32ac06c5c17f4bacada6b147a5b8ecc9602089a35ef69cec51c925f8d8e775cb8d5b7cb7ac3dd342ebeb9c94a6102937a805e0a6ecac886d6855dd99790270b02069c90c5ef22de7b2f47d9b91626fe0e77c4518f31eb2d30e5cd2691e95c5e83c230f5baf09839371dcfef4d3fd60dc5fcd1b84201a2ad539135c5a3905917587102b434455662025617e68cbc099c13ea0b735ab279faee46f68f470328b6e116a68fa1567451fcf518e3ce8df8fc240d9a07c095e38edef3898e73009c66a6721fb0eb060d33f280de8f51fdf001b0b19822fc098c50d758d2adbfee53d2daef0d7f36fb76f01f14f27a4cdfcd3f73471ca8a737e468afb44587463d083eba26d944fec9b1ac146dea1e81782e417a913399f9d7b6223280f8599e1746c4e22f3e99751c09a56f5aa25d203a8cb16ce3f0451f965f34821f99f8f7a0c7d269bdb27a758e3a3bb500bb305efa2c4d5f818f2230cac35ce4b72a378f6997e033aea5bb9dc853ce1894df5a73ceaabcf2f653b47cff07925c1fe497b2c2a3ed53afdad62e7f5883d631e9b61e55bc50b1fa4533461b55d8f39bf1da82cd582fd086abdebd4658b8fe256c1814ce519cdd2c2242eee47c52c471a2e73878763cbc2f6db150aecf23b70148a362d526420a1117cc206fee41afea6bca8f29901ecebe348613e4721bac2552f1dae09aa740c4bf0d70b3252938b45ad27ac42eab7ffb3480ede13518ca4bb4e5964652837d968ccf114e2790066dfb7719bd4adc49d19b62efcbdce9a7eb9b3feec07b6db4c9a5536dc95b40334d71e60898d8aa9c97ba715e5be218c1382b59ddd358ea23a863a91078da078384dd6d0f710e7be7b5627aee498bed1407e9cf61fd1e5cb37395a8432bdfdd8a42d20cce3234fc3ef5d910c8f1cbfb9ef6ffebf62f2107029b5d575e94ec69343b18680f37550279c445506a60bc94ab7039e2a27ddeff7aa719c9c35c9b5f05ea904f5309a32b41644929b149c46ff8167de83579d8a8f0a5d4fd5611a9d67862c0853bf0d57ccacc0aaf87d3e7a4eb8b8aacf10c24c069fbc2fc86f38ccd0910e47e37444234bbbf03e05fd98b9e3e99fa62935e6974a0456a0cb1be2fc32dbe7a736b783f75af60b8535975a3a10f8659bb03600fac5b26e29312398fc5c474e668650ab9a04658e1e03975bce2e1130d877522baff29311d3458d6f4363669e75bd5aaf86d4753c2dfdbb2f5da254bf886ab9794b0fdc4c1697567eda626233a849522d08ede310362df449b94f8eeeb89b7fb48eeaf1ee520450973c84b97895a5940a47df6411f7936638528c73755eecd3e4431a20cc34bfb22f79d3a02c17109b74f86db51f5bdfdf8e5bf3f4d24e2f3ae06086cb1e3ab72db02f7c1b18447a9118fd04791db7b5b12ef28503766895796637b18ff6d1f85cac121c934010c0c1ccfdb9776e75dd162a5ed805e02891838ab68b39c355cc11ca0a2a874974e91ea01e6f22e200f98d8ce7e599da0afe52809d6bf289054e65f2dc556d1cd8f392ae6884ab967b7ae9961951fc14947d27afd157116790c0ec2b0a9c199715cc2d03ca72f43a98e3d99e253104ff721c9b604fb1b9b52037508ad9286469f1ea9598c806b4e81741aa42b20906fd1c468e85174eb8f11ca3db1473d20266531f42d59515d4d05cfc73ee406b6cceea80f7a88e2f35cc0fbf8d5d243210e44c5ecfdcc58a04cd51a2b3a362583dd2d42a6d9c0ee8d76e0ae3f52c8785f7acbc203f80feb5bf7a7c036ccedb21b601a9efc7178b72335b3cbf89a2e9e9eef3bafd48781b0a6c48c34bf521fe1b6d963ce2109593865d49ecb345f8a42c6823a055d64436dcf3eaffd4eed019e6cad76ed4c1ff7c0e5d68e4a0d48db7656286524333355fa55de186a1498bbd369183e45297eeabc20b5d7e402453b665b7ab33ea39e1be7fa6913524d13fd35b80f32f08f372af17ea2efa702c549ff1271f73fed5b2a862e625be9a0bf739f88f03791add5854e79a7381390c0689e132cf26cfe35727ec847b8608951804f9f5ea9f272032f6a51ed10ddcbf86891198f830bfa1879c936b25937bb27b9835727d568354a5a7142f7e02d25bffe4cc6ac087a7e4dc9a66bb229675648d80ac9fad230908e6564fc6db08d885f2ad3dfbefc33505988ceb48b8db9664a424f7fd202a3c85bfb28bcbcb46682b6757b7e6459a8dfbb9c728b03973670ca7cf18df240d8dfce27236093c4fd9e375c35e240cffa93ec08483ff70506a1cedf2f0f38d809553961aae2660e09f61b68f2f554ed5b2c31a218eee40c481477e4a28ae2c22f312d4ebd03e676a97cd781181edc1f3acb196e82443c556a25f94ebbb731e62670ee29f148cdb1d99c7cee1f896ae114779bf5ea2a1b1a63514d7c23772a8b1413b230ec3011c6cb7e8ba94fa1d0325befc1f7823e3d8b15f08dd27a3eb531fd4d27d26ebcab1a3b59a339faca819a4ae34314eacef4d285ba4072a0855631e11e8ee656c5630c7d6a85cadc90f0debe9cb6c4e618bb60ff6db1d741f112320b509a6cd307e28a3d52f723283e2798b778c18e21e27122413de88bab16cf24994cff3ce9f57102197105a560f6423a22a2719278d1c2bb34491139305afe7214758c5a8d22269b1c1640f918ec6235d4b35adcce63508444daa8bc3c6475ff0f300009f3d5d15193bad86f9f85e2d99b5c652b088ce3befd547b26a863e72aaa2a3d60a0efb286a4ae259647571d175f2017bbced329793efaed291510d31eb8adf77a910631389e8cb6b7fcf07f482146c472b021009e5f23fec306167a1579853ae0ea9be00f3ce49ef1c520dd2e953b54e56251481aec79626948e53e3f20d0937762f90b24b21ee7468712f942f71a174ffe22e72f5bbeac67224a957de08007ab01f06663a84961fe0bc6085b1fb1d6cdc3fcdbf2f50535bdfdc5bcc1b7b606b3216e4fc051634d9500d5db70989a486453c98aea63669e94997040ee8893a9c74af89ef19fa3d77e6b51b5a32306d01095f07829613e2eb5da6caeaa3ff565852829afdc75c6729a58d355328043bccba6124a3c7152c08e493f21d3d12a0d40a6f0622a07fd0d9a0327f8bd22350f363768f1fee8b66138b939ed32b56b9f01352f00515a8e012fd3f1e9de628d4b49f9f05f9e419ef82cb7f5119e643525186334ad23e237c6cce214b6a047d382762b4e0daaa63b09d8c138c82efafcc96e695b0384742543b0920a999695bd4f63f1bcc9b0ea282386724445e5df9a294e1d2c55a5e33ad5cbe63bf30ef9c7d97452668e8271d6f9c9cadb9aa3836e7f5d198b91d0e8c411bd62af8fc2b2094f4d80fbb385be4ec647a9527a50867ceb171d6c8edf67f5baceaadc676d6de0873f8e9c5185d312e3ad67c557036215730c2f829e3df455c0a60da2a0378c42b6868d4c644424eed1e5b089c4716e44fef22aad4a14ed8d2ec70923598640da79ca4dcdb7efbe4d4a13b0559960b61ddac93c6c77afe79ea450ce452197f0e4738db3fdcda59afe7738c8754e3bcc12c36a5114cc89039481319897b0544e6f69ddfa869ef34aee885351a41865d31c9a19a7e21f1a3a0e9330c524488bba9a304294393440af45067f268d912f52090c0a79c3ad2295ab27cb3a302ee66d2341c18001dd7741fbe1fcccfb4f576e4804fcff4e430ced7c759023d96952058204eaa188704530b4e44cc3a23175b2ee4408c5603919c927c842f087a6bd7602efdb9ff8b2435271699c60fa662e305745ce2aab70a9a352af0768edd8844aa82ad33759a493f331e974fc974a22718306fbcc85a85de4f210f1a715b78dc311c42493ca68cf83b5db0703d81dc1313531c72c40079a62e30598dafb70445d1a1fd427d2ad8cb3914e3e3583469d7dd639257bb782b2fe831e1768b6d5caae7cb2c8f1d2652c3e3954f9ab02d7a6816524f3708b7cb018efe12fae092b8b9024d6348b23a4ff749cc39945bcb8514f139ec83cc9d5a99e1366cccb24db26b357595bb1994cac3c6af8b88be5dfae1fcae3428fd01f6ea7a24c61bfa14366c428e4bbec2877ea7237f3d1cc9274f9e39cbd25f35342f79e405bde8befd6ed6032419ee8e58f13be5f6084de031ff9cb5b7f1f3071a7ae3456558dbf83017eda9d0a36dc954161a4a70442d5ef578a0861e65e754880d4a58507d57100f1b55a1f027358c392fedd86284656a38520bcec984c87b7188bf63d960bf9f1ec6d9e7fdc93cde6ed3f88db9db54531afa7281dd0cf2d604a8d1a0dc0839475ea552cdfa070ec8d3d85a0b82f3a8366a10c0ef76bdb34a81ad4e88f42f43f811542c4ceacf49903cc9321a62ac3f52462d233868d8d4bbee3370bb35b45811204cc33dc1ac55e77736e981c99f37d4e68be2edeefc4c6dcbc8d6dd0cf5faccbdf48266729e9549de7ab1a2e8283acaad71adb5f04d14b25a6e981f05cc782726c9e9bf9509352a05714566b01041fdf2f75fcaa9e50427daa21abda9f6ee55070fadcc8b1eb64e74eec006056151a5805f2e14c3f1fa6801b5be1de7697556326f1a29b8efb1160487a940047c1ee94259619070838ddd22464c8c77d631e75dc7c1a17df41c9a808bbfd0ba35247ef1ba66cbf2889b30e6c4a3f7c88e383f195e0d169d84513b747bbe72062e9968341dfab7e5170abf1730144bf484805c4fdcbe3185b0bcb628068f21fc9ebb1adc9a5d2ec228daf174c189717dbfeabeab6f6458cbf3b87731d6aaa2c9dc11d6d0bc0bcc994a2000fdd45c686df2c3c68d81e00e5df0010b587d46143e75ed6d59cdd8a60c631a7368b218baf994ffa64b91403781ccd51ff51d56b0478865f4e4cd548b5ae571c03b7902acf8d58a273680f1188566e556c5a564bb34fc0408ab7b79d458da52cbd5486f8db9426333dc85201919080f2cb49e34e41db3c6c8f8a5ae20a2c10647f68ead1802063948211e62c6db81d35f955baba24e8e550365eb10e156001f647f9fceb8fcf971c8b7f0a7c586c0d340396680c065b4ac90a4a381716c1bdc7c83742fc1aef9556b908ce2da28251c9d2c362572f978c13acc520c59f19924ddce438e7c992b289167e8ea7ca2d3afc77b92e911d18b3503dc79fceb353402199a43936cd1c1eb81c7f9ab367cd798c43935b6aadf090cdf62b157e3bf386b84dd2885af1aaea7f92a331e863acdc3790c40f90be9aacfdf47a8783f0c86d4c11c0e9cb470d5399ab751ceebd9ea70561da3337af7561b28113f44bfafcef7b53d13be80a46992636ac95509aa7e62aa516ea1ab451f8a743a10ba002bdd3c5f5675fc6f284c36d2aff526c89965f93528dae2301f66b5567b980564e12e4f5a78ba9fd2d89907769dfd12fad014b769573b22540cd20d5ff0e71b45db5854f3437c128a73464327e0fddf3db8a559d6c225b29554152f87a14d757ef3c02ebd7a6e215e1703a3ace6e589ddbd092ae3244b4d60932c671118b5ea2fd63e2cf1368493e31a13bd686487a8a99c2fb6afc03b0122e9c4702300bca6f513981a5596c3ad2f1dfe67f5be58ba9c1f23cfc7296377ffd089a7e2fe0413878d705425d4d981a2eeeb82e6bf2ef5f8e0710613d517492d531f47556e23df46e967459d40757dd735f2465e532bb955521df28b046737ee7abf04b97efa52512923f704ef27af6898469118dbf07a68dd2b79c0f7df7a8b1a91f12d473320b235896ef9eea75ff87ab5dad2472833f4fc425825660458d25614bafcca9093653cb3e7c9cbad59b96389cd49334c7813500cd56ac2cfca2b1e81ad53d0d3eef3c2463287853a21de7c9f2df57be8e7e18f1f188faf14bdd8bb69b815923875950dc60034633544ae0bad7888ea66ef45a9de12988aa1c145042db3ab6802b44e00f8ea5f7d2a8a94d5c66686c3bdaa4c832a349d8f9035d0d2edd1e9a03558263655b1ccfb18dfb7d7cb09453f9edb974716119e9ad49c1a62019eaacefc4c09e28ea8b660dd9c3d518601b4f2f5bf2a536eea145d9c843a9d86ee7f02125f40ed882e12071c0de57a597c6014334ca7a4be75970c586ba9a6d63708f946b0309a4f2a9cb56c18a7c8a86adeb350c40b7540e2605a97af50d244e8294f9c827c77963ac43ab98f728d43e90dc20c564a18968dccaac0bdb19ce4c32b97635c83205258996cb9011544f5f74837919bf57e2a5fcc3a1b0c6b7dd67dc5ce6ed94f1a59e84c16ffce4dd80e6376db57a9126708da7a55515eee703ae13ea03f363eceb5b49b026b05d3561872e3a13fe3dac5290dc2190e93881bda7c30017a0f7f39fea188416e1d3e5807f8bcd97dddee4e3e7119c3c94f6ea3e90beab5119c7150ca33977cbac9887ed5e6296595d1532b2c762050d49e17d54cd2e362fbe6cf5dc80527101bfb674cf394fa3438e96dc8f3c63e58fbcf111615e8e051d8acf9a62aca1844cbd9f8b55569b193e08b6a1e6c049705d798179e21e66b374ff27d3bc777c365e03660fca17302f93303fce052f9fdc38b75ff3dac96926094f543689af66b991073247cda7a72a66974c9859b2c43b56d498721e3d78a38f36d5c220f74291015581fdb99347291e15027e0e04a13079c1e27f5e48945cd53f166e8e51f9aa3f9b679e8edd588a62224250fffc8c4d5a0e04c3eb92651a0934e1405643c5ce942ea89b035a428bb7c7d7af107743243902ad9eeff4686a8100e8fe6f80f63a6933579668c48c873a940c336c8649f7b4603af1dfb5123395c744c4fea577f914dc0c17f492841a3c073aefbbdeb93863adc01a9c2e49c3c5c6b911a86e2a1c62ad0321b1a3834bca6aa972fa42780733789d21e069cc858c6a3aee0ff27c3620b8ccb7e6a6e556f4c0039ee9b559d3ef4d35d7c3a57389179526c54252bc76fd1bab40ea29dd020b0df910b934cef357656d062e6ff90c67bf5236c5084c68596ef83efa2ddf736fc7fa7381c70c9cccb3fc61262852b2f09540816013f034a70038e6790fbdc2b2eb6b2c8cae3dfadb5f5db0cd3ac41f0ef3fd27b4bdbbb1c459779760b8c22922e497ef8663a504927899a537e11772b208472a31e508eb54ef8fbf26d9b6edeaaf101e61ac858384e6abd7cef12cc40b5776ff98a1b9a2a373270ae1021c25befa48fd7459cfd291181c84334b7c91eb1771370dbfe87b51fa2b4048defdb761be9e212ffccd5203d1dc12134c990585b2694240edae7357b67f178aee57951061794fb41e8c98816a1e4fab400a4b1e712dad0748d4246f28e705fd3ecce51d8544b9cbdb7b8074a9799edce3c07f7368770814afeea03a325aa87a236cb809dd40f526317ea21ea2266578ba7f7d0e0b7f363f3afda00623ed6de4bdebbfee724f7eea1bac56ff3dc487c4eb85b44cecbdec80b42c5525c407b48a0dbc1249adc16e71312a987adec899441957d41e60bb731d218c19981eecea7f121931fde122866df807fc6118f742ecb7131b758f6aa2fca495856f91725bc1136c023cf3e34d99ae959a276532ffa57968d9ae89681333817f3bb3505a0d6eca06f7c8467885ceb1a88b97ee31b6235289a269bf15b6ada2d4a65719104755343c19493550344c4882d9e4795be27b392cb4a14c8217309e4c3997f4dca190789ba83efea9d9010016ed28377a1c9ccbbd7e2dad1217248a8d888c9db88b992a6100526ffc8516b77544e0c25f3724711c23c825c5c0b31d28d712becca6da7e8872310c8effdf7bca42a1ccbcb055714b014e941a6a7ebaff9b60b42743be5170e17b873e4c70d3b05d2ccc377846a917ee1096188be3b2ae166aaabddea1ae834c17906d83a66cdb95561037c2c49b8a99686fb434a89d01e672960a45484349868b9806d48db5431168e2b89b4125bcb4c901ac28124923427e5e6bec25175cb7e3d980d8da208ef9480a45b64ec37998fde0cb49471b7245f2d928b1c223c3da40bf3d000387ce154cc16e8b71a34597c6b1ba4b23c6995c999e309d22645a2d79d0b4051ecb362ac1a99038e73e2dcacda141c5e9798fb56c9ff8e9e917334c8c8665f81e558cfa9eb1802a4ceefb3ab88cb7f2962991cc4eac990893c435392756351ab63956df8482d15191811d81032acf7ee009726ad8acbba2efaf805969c10035b2b08bf03fbc9637608af483ca28714e5a37801847800f74222a19a25810d2f35da3c9adee57dedca7849aefed3af89b2c6b71a655d45493ae17245c106fe56d0358a3576b6f81c42ff3477934248dc81b2a5e42e6ad8c27035d1844c3e5ee4fa9d98e7bc649d265cfd2f7ac95981472d6ad92f94363bc0a5213edc374e491743353094ffd2337d3c240d187e4b87b3d3ad573d7efb0bac593fe67af6e73831305fef2c0a73a1abadfb317ba2a6a66d8508e36a8116d361ca197faa4f22eba5567ebf78f9b08129645a3eb6be3cc9a18ca9998bc6dcd852d5dc3f0c7e05c19c038816e118b9cb46c25bbda0e009f44c52b23ba79d327f651dd4061272eecd3a5ffea16163f30b7f6ca171f1dce70b53a373530e08e7433328d19ec0f7f7e9e5baf6b832fe8746ddc835d5a457f4d7eaa62ac55c5954624b1b90f2750918ea4a068571cbc460942366eff7a42822ee61cbfb19a2cce7b69773c30b44c2d3faae6818e3f01d255ec87a69aa98387a33bc2c2b9dd00b5d31347d9e60d017338c386b060a4c2c29a1a8c13c8f56ac6e4308bd575cadfd745b6101548b78440715afd4cb4ad4d1111c0083ba132f3e5847f580d545857c24a4c26dcd07b810967cb51be0d221680c073915dd9d14c2604fb0347906870f1ed58e0f3af530984a7a5f16af130d51315acba6374de0e7b4eb7dab0939779d04b6979a1ef88aef6d027abaa3844c2044eee7bab263899b4315b9bea16d600dfba334a7fae60aa14b11f49adc24774111d1205991f4023243d33868b4936aa0a94881a97cbb4ff6dcf0333ffd4a6157c10a19320232e0390cdede7c0a9854485f14c8209546f4f9486416d0c64dc567e7379a7327fe023dd032fe15683e19d00703e92bbcab0807a3cd500093620206f02ffe927997f1c4a9b82a015d7da152b7a5e1b28aa3cca567080018846cbabd8dbad22ff10f78bae97abbb94640713fa4d644ea72a83ca8bef2397b5e0b5f6f07480b5c24372787399d59e247a78352ff478c1e68ba2722c6ca6af29d8baf04282393dc255a317466cca93dd817e0fdac3621de2150879191a8740c5d8cd4458536493686f23d6108671d4db200e610fd354c72dc78d07584b200e2866a01554f293790d9dca4957717499c40a7d13b2b918de4cb433fe4ea61dbc690ab6b76779724b52cf322da4208e6d4d6e8de627711c1236d55d39baf48af3c6ab85a06d67b00b9943c22e4d681f8d490d90d179b8df16d2f65c2b2a238d088146bd08ba72729ee772ad8c2693723b2c3d7846efaa31854fc20345dfe498440982be9880d7666fe75dc011a21c95d83ec69d1ac2fee83a8559f68a145d425e7c204f5c591485d80967e07836db8efd3a730ac9e3682d0af5bd95b0f56c6e4d09cbf942395d42e330261f04f9cdfb9ccec318a149773c932c87b5471c460ce91f70be0f880f4f0bd3118d7dd3070b69925ca8ca8116b0b5bbfbdffac0053472e1b5c3d713f88f3aacdadf2422223a69a203fb46f483d78b26b7eb9c88bed6f0e289cf4d16afc3cd3c734bb9aa48d2d8ee8e5353b7dcefe67f0dd1c6096c18ba203976186625bbadab7a620dfc53b6381d187892aa596bd225ff50ade5270fa8fb346f286f8b621075f42df66cc8af946349c45839917822b4cbf2f71fe684c76961b38455dae035d78797c45734baceb96ae854e2526fb42bc26cb37aea3ad1826954aa69eaec682efbbe04b20a4468f648c80c0ced2404e0a0bf6d90ede5c6f38c38dc151ed0b73886c145e44549bef74418bab2f6c9c770d743349228dab97844e24de6fd70dad0a9685e0da6cddb4c83de509f7c519d71fecbe9b974fd6582d0d279f842ddfe78b1f5f30e36a7950ae76c7e9d7a06ae616766b6ce6f7d59e8734e6adc8550272ea168be62969e8dabfd4dfb0e6d48057ffd6e233a2a236beab769179f9cade87efbbb2d56bb1f356b36c22dac9e761f4181060386ef66d45e60049bbf1c340a02e5df6eb71f0e77700e6eef64606a55f8abb3edc5b1acd8c81378b9e55b1a6f415e21ae3bb25592cc16819f6c0e29ca0e1122512d4bed194d4e5880bff6dd08545685c8faa45527b81187ce0f48cb9eb6eaaff9ca9be096b7746f9d08801cec27b6da0664c7af0b00b9b240c66c4103c3a6f104c956a7ab9daf6bf831561cc48d5223f41832e54a906ee6acad36353c7cbffba68e0150106a20e0f8c76ba93ae1bb6a2c71e8e6c797504f7d589eb5f48499cbfe3620f60023b93c5b9d5c1c84568cc85e35beeb1bff20415c5d9596c655af07297384db6a71b607f69d405167400d15096d2888550f0f54ea25a5f80d55a59f37bbef3b479f236c77e0a16aa2fbf5ecbd0ecc3208e787151a084a796cc0462b39110d5195a1b064b44ce34e25fd0a54eb57eb1a7a1706e4bb200175a09e0c37d0311188dc86d00de387dc1fcb8975bbb26021780f795fbf190a09804fb27ac1179c005da78cf06f2ec7a45b6a3d0c1d99355a920729464f8ab2fa022613ab666ab50b0e6e40b091802b39a48260e4c7625db513faf3f263ca58ec65582e72b66ef2d91e61264540c6957a5f5199189974d395758d72ef893556ae05731b97c1dec1a453aac2b8bf08fb738ab98d4357b8e77a1b80c06b92e1ab1fb4fc5fdc121f12c38505d970f5b1dcfbe0985b9e6671e6394c0c330b098d113f01bbfcfb95b291d88927790f71f615e054d634c9d0246791e8bb1e4ddcfc3a5b24bca0f2991ab84c96e35ca2a5484f23289da52a8be9892e30a90dbc82fa1efbdd04e5a5c346238f7dcd53c87c426fc01265f049b730e3272ffc303e5fbc9f18f498a4460bdf33f9ee3212c37e6f9aecbf7906ff72ef9082377e82f29f264c0c749996f54a480b4755c642b2793b74eb115785bf4b05a28426975438ebbca0f6df39b1bdfc3b7139d9711919152347f5a633e70fb82ed4d9e1fbb7a7c0f2b9fe8a2429be40ad735785654cc89ab1d0ca427d143469b56033c33d2a1167a81d7c5eb163225be8330e7c7abc9ca085c2c1272a4ea537652bd7dcdd0df19c06ad73b949a2f2c9a251faf8940aaa1b1bfb24291417e116a1e11918b8d0ba5386affcb76bc29f0fddf53e58a5accdcba1e19e02f9aeb1f2fb44177c6b427f5983aac43a8e816b62071c7993f37d1b7b17362c5ade245055368ce3395d0e092ee7560fd7f9bbef5e92f63832e51c8b16f2ac23440c35982eca62c2ce4d84b43bd671dd0b7f86638c1b391e813080127c33ed8623a15c34608e89fe95953c327fdaa6c255f864c12a57dc08d48ab99cb35f622c04776548f6cf5434a0b78795dacd97547d50926f33d90ff815e13a9ed46f6bab1aa926e316e4acb1c051c7a78530563fdff0dc95f087fc5dea916e9f3f1ae4510a4fde7236ee99c3532faec3a95fb51899a81d4aee9121d568ea151d2872a0ee41895ee292fab93a717856a5f17b37a4fcb07b9ff8432e2394fc7fa53aa74c2d217ef49fbcc73c51eea6dfd25487c3aecfca51dfee91a1c307fbdba8beed00e9824b5aebec70cfd161d144616f4be5b51704ecf6d23430f0aa3785c44207c4c11deabc4a72f57cb6f690c28d07a44b39e1d2a25ede161bf84f10e9d87fab5fb0c38f525177f975da83f6cfc7f60ce15edeb5c8fa4c84d82d174913580896ca0f67b3d05d88cd4ba88bd161ee52175f469c942973fe19730be5aa49ca4e02cc8d8a17656374c3025d28f05eb9a37397d0762b461757f64faa415427afec21440f9b930b3c2e4d379bbf4fd237b5feb8f2d5bca269f50e1a243a8ab6a958f56a58b9c65eaace1b38de039fe71e746f006d2d400353e909c933256a8e11ae700d4a21cf2cad0811c03c443dbbf7fdb7f9754aad8e3d755f8dc67b3293737fca1f8466f9dd4db6501c55743d5fdf3b2335a9f46b6076f2c87cb56cb15cd59c916c06505eb0dc30cbc5954d93720de0ce469d59d2e5c859ea7ac7cc3e010c743629a8c9c51695484e01b990b03263aa1f63297ef1fa1304e88fa6cc5244b943f33215c830ba4391f6934a2a090c1a64add47a096ddc94d5f20bf86305786e8751a1e31c4e687b04d4736915462aeb851419c49bf02571eefa7c051c146218d03dff9ce4ee214065cdb48df0b45fe624501b740d029066cec19c2b133540b06d2ae804bf71cb4d0f8682cfb20a7f925808949a3d3ed00321558bdb7114c12ab71fa4bb49141f6576ef2af2189ab681d5d998254cf9c7cf2682a873926a1cdd836a443615645744d34cb076dccb615ae06d7d93f7f3fe180caa064b28aa93d0dda1ed54ea298202afdc2f70b14188304ef7ca7bb3e5b02e28fef438c2215b1e8736d29dc4d77739000b425e9ae7f0c6fe50b31179ce5329a7e73c924caed7c151393c0faa95f62430bf1915ccab502f03c3f3c6eac70cf5f310383d48af2789190a8952f2867a7651b69a40148f0ac4f6e248dd751a7234adab1d28c3c5ca33f391246acafd5ea20f29165f72b22245d3f548278843714bddc89728c96a012166a06daceb0f61a9a6ff18a1b9d35cb301cdac027992aa9f6df7fdd7959e43f672acc61144f69741e75566a2ea4dfae901741d14e38e66cc5331ab9af5b2ae363cdeaf702159ee8758a8ee29893bbc72b6761e8eaf028e2444db089fff38373879b506f6589b53931f3a765d048d4cbb887828e703cf0a5edbdc3a666fdf5ce4cd2b80b4d1715e2ea06a1ec197c21cc026711776f67e2cb3555894ae90caca0bae2c034e9e8c25a657f59df1d267efbf5d4a7357bf8a61f522396d2cc2b658cae154e3f0370dc83964b9d468eb1793b36611c807ac03448434d3e2a632e22694fddf3103d6bb579628ab6a2c787c57b443d9980a4c6fff40df19a4e72896c6ae8a6aa1831c20d209d01acaa0d9dd6a00017c4295e1c5154b221f4bd03788c6bdaaf0ee20a636e84f28823bbbc85a5958c836317781306ce0d41cc3c0007dd5329f97b99cf9dfbea27fcf77828b98f831a2b1f2dddd8b76bb4c0bdf572c90301bd9911dd9e1e960385ab71d5dd89e50e7dc882dc0fae06f0817a41d0ea6b93b8a3b58874842aed15bb5482460bd3a16793e5c4553b5bc78e053d08d8d73c156e4da7892b378c8f577d23cfe7ae7189d7cce76ec982eafeb9d37ff85065d6744adf984494d04d4be141f37db3f00445b604b88e5bb50d13bf867d04617e0a3223b836a872b2b1c50d8cdbdd1b589abff915aba02f1e7dc52fc19228408a2f39b665fe7923c67adecf7cba11e43cdbb09a5e09e49bef9c2a362b5c9ae98e4a13b3fa269dfaa75ddfd6761eb74c898aa759551bc52dffa86986772b1c59f20ead81810d26edf71e6ecf7fd75dadcd60362a2eb44a0c7850de45b2db30d08674ca6f098f22e6128d103174441119d642a3d62a3b61ad66a6a20c4f6916d469526183763ba01ab2aa56268a6caa7302a5aaa0019af38a125e5ba127115b895c0957cb5a6b46719b6e8022b5b5f875083ae9ad4f84bef6fd6cd825092a0c2c4d281daa8de7d025c58d9eda38229dd0554820624b856188f0e194ea2d0f68808a73cd4022f7e3963372fc835f8d9a78c8eb6826c8934490298cd86839531668fcb4470ccc98034feeeef59bd56eaedccdd118a3410e6f198dadd65a8d710a43eceae97ae7936995fd05f285b1c8574377617df250501706144daa049838c5a1e512cfc3eb386c2070ca2a8f2174286d67773a41dc97ed47dfe31a32b3f7fd9a781a9b9eea64c4a5c039d91ae44fb3fa00736423972d56515471a7e8c6d941af9ac6ff513e4c3d6006ddb204b512084db28932da231e2239d7113d740f149369b1544e9358964187160c853cae18e32547e6a0ae6e8652319a66826cfcba8fa05524b5c8121788c49bb269481d57abc223f8e552160f814badb81bed82e910040b510b24ec4fb23ed7354234b3e4b38039037e8e977c8691cd8743dc039b9895ec88fc84b59ce1d3f7932b302102213990d1139ebe5ea9cfb0d4e14502f7791e1f34e9cc3111e3bbec7297216de36a66a0d41618c7683a8f2d7aa8fe409bf0e8271da48ec10ac99c7425d24b09b9f7de1d9ad5dbd5e1b4b55a29fe2e0f85a0c7f51a0ac6fcb817960ed98b3aec08c98243524a0aa31331acc2e595420ccce1f9869f3de959c86b22d1ccb7ae8aba367504f59cad39cc1796936b75a14d78c881ca9c289b5d0f46e3b9686372ae87b5590aade4ec894299c7f977eabcf86ba78421119085df7052da3b860526096d56139f2d0c1951bfa9f43dfd230be2b1a6e19ebabf15e24ace46a2a1193e44fd709e8af0a5d8d1609907361af39e9e73ce8986ea4d1a3f1ec9bf540c1222283391134197a650668ea901bfac388633e8fbe9223913ac84c7b9ed6cc792972e4f77800ce14ce8203f6c326eef25ebc912ff1b28ac8a449738d66dc70b5cfe33d4701d1f3e37f6a38ff238abfba5e5db54bb4ec4369dfae2815ec0c11f8884b6050b165b92d3a509826a8ff7a9fedc5d5c0c61ea319e41b677d12830443eb3f95f06659504786fd40600187876d22ac769c16885b59ea47ae9fc890e7723377f1b400468ee2b866eaab72f6f9fa02d90f2f869bf154916074216b19130450903aca4176ddccfd3a48593c1f60b22656080160ec9472be516052738d3628d8c18d136d861a0d7a9852d6f248fe17d398a6c8163396b28e5986a6c340256915366800e172ec3df776462d8d0ddec4c1962ef183a0fdf539b9dfe27ac95133282717c0ba8d0a0b6471a1edabdf761f63bf08df1f376068387b7fdbea2b34d2195096caec7b2907adada578ac576a2213d16652103ca4ccb21c59ee238e4cd3a3539a67cb0a26a35b6f4b1259b2020d23026c62f614ae3087a7898bd6992cb7dc397e7b89d4aa2d610f0a19a5d71fff5013baed5c29e821d845dd1d63bb3376b68290d78fbbb6f1b98feddede40d95b2d91f3cdf81b1881cb20fd80d6b2c946e623b6dad3b4638b2763da3e9a4cb5e94e8ac246040150d21b3faf19e95b177d8dae96aa7ee5525e8c1099faf369c3997d260350df8c12c1ac85240a342249723886515dadde3202a9b2e3d337a15249cc7b0fb5a180b1452a92831b952641c7a8492fb1ec4f189282b71a237499b27dacd047f400e26e13ca2cf95904c553345220f0a9c6451322fc5d8d4412de4d34ecd67089e69f8ea25977f9561438cc630fdc9b8a313e77165aef3c8fcc41489f1288cf9249ff05ec22b820293c167bdc9d30b468532e03d08898afb06cbb3d36192383b5f7d743a4044ae5fb6176995cfae505a3f433c65ef543f918b6be353d60913ff730fd01fbba3c84f43643bb5cc06d48dd443e51c78e4e632c816bc059e2914e820f0b46db072fc31f554e0e5ceb1b42cdf49132e0bf8d03deba9e8a7c5ef61e9189e6d77e19659b20b2bfe3c8072649e4e8667672e353eb1e5462ed8cdc2db6c66e07a225af70e25769dfffeb5080661006a79ec23891798cf13d6f5ecb37ab73f9608e77f0c7c5b950c818dc2b1d2c961edede0644363fa7732b4eb023434fad0cc2f328753a72c8789bdba11a6999542aaa33a124256405a1a049ec230a8bbf3281fea5f94f916647e055e5adb8804900af7361278505e225a676aad38dba0a8de7bced7f9537067ac00825b12e2cdfc6ccb24f7ba7de0f5f4874c62c68986fcefed8f201ddeff0f87ae56b8b26a01dab107bfe55f9eff7196c782ed735b7c69de7726da7c41eeb96228798062aeb6a17ae366d6c691909c066ec747f4cdbaebe16a9bd633da26d5e4167cca16d582e4897087f652ffd5b44a1ef0aadef0ddd80c49dc903ea902c2a90759f5c6ab7363a4c7c051ae85b0403d3667db990e64507f3714099e90e1476c1c89ed437238d79afff571184e527069f0e9989c89d945a09e97ef6dacee73f0c227832072ca2c283e436036cd7c063552a450a0638584117511cb00b31bc45bebd911ec32e4c1a3ddaa656c3a2ecac7f53d4c8c7efec8f3cf059751d668d27b6abcf30e40df25010e5bf4d11dca6505edca610ed2c2bfc451c2c7a809c54b18157455b1714b45b8320aefd0bd7caf8fdce011391bb961639e13befb13e03e68bb688a48298b057a1a08679dfd0600d78345cc99c9c04f305a30a5a497a1bc829759da2c055db4fec79c917a990e847911f25100af7a484fc8ac2f281bd479ab514bee527de20d936e3667866eef0a51176d3111efc80b87c6f009d90ac87cf3b7c817f3c613af0ceaf95c35b9d772f7f0c68c990aa9fee9e794c7017fd53cb653bdc2c105eda0662f8c7955c22114d01870040846d072f9f38fb0c5f01478cd0b37c1cb1c14c6a4929211a96f561a2f7d2242adda7056e8d077eec8c7fc9df08de38d5d31765261fc5d686c329326d79d2a37e571434a7eb2c55dd63bd8814a44e261f67816b24025541d1ad6c6d18a7781326ff103a500021fdda253816142832e375535be0bc2b96b1bf52fcd4edc2a6a9fb9f28894254a597138ff5a6474cd55f9450804846ba362c47b9802cf2bf4cf6a90fdbf07d33523c371b55b9145811b42962718103bb07bff7c7ef4d31a77fa361d35ca1341d6448510f97536a3dd9b10d5389d9f899ac3ecb913b06bb0956bb780e9d05a37670128e1fbc2e9d4949c5945ed5e36b2df125d9886c5ad6d04569db16de2fc9cf28c7022514923bd02ab92adaa586cb92a57038e595e98c529c257e339365817a2e64d31fcd056a752a9a607dc27984f4237b8647b7b2b5957c16733ea96fabda5db492b9d24548e5d44d3bc0a8302bd117676d5ef29d55027fee0f81fdcab324e79dae1b086829e06da3e4d874f5727297b3d9615891510f2a6ff425055f377234c005006afd0fff49d2df2c75c100478a9a608e93ee585e077d81a324d6e6b1a7e51bbd2befaad8811a97fb460f7cfb74499530323b553e394e42ad40925c257e349f705996f513c3a5d5197818fbd4fe58315e133bc5204b2b343e6ee4027ccd654324d1123e7f94637f7bc5bbda70e91728f27dd432d85f356b2e82ba066ed35c54dae10eba8b5dd9473cf2b92a18dddebdeeac45e07c4b979fcc2f8e1f036d8569346a172ea541b901cf15b4ebffb4700dfc5ad6fe11097a2b86133d9ebcc4ffc58e95e514fc31bb03c8ed185d2424c24e23f2e1b2b15e95380c6c2d7c29b6ea402075d381fd676a49dc0c9577bd50049104694856a9b311f1df8a5f2b10a813efb12dfd46abce80ff38d210f293786069f9e7b2b513db4414e538ed04f0d49baee6cbf5335c6bebad4f4e26b994de877e1c9216b98c7fe7ca89328d71e61ce185bb3b7d891c6083ba9a8b08c352f6a782422be2de0943603bc05ac7b5693e286b8c762ce2308f828a8ca938c12df66f8ac80830fa99c590c845b983a037132f305a3293ea4b63a936f393398c68c5a6b6de96b33a63c91bfce8a4e154dac3bedf093419bd1cb1fb4de09f79661fa6e498dfd81bcece367d45368c692dbcb5728e47b89f94e38c067cca29da8bd6636e9ab6c5dc2d953b60ea6c0fa347ac94e4ef9ceeb24d4e6da5d6c0160109d85ac74b5ae89242e49a4fb439bc74870dbb81ff856a1f39bed8f3e59363e68c5358513127c84ac7687ed9af812cbbe83a5e34b1d67b2b8e0d3d1b23686ebc140f60b679b203db044481fa7314cc8dc29e7c48395e90dee000d58ad32ef20e17f7719776c70449b3bd6928c858f8ea6c42206cb1f7a8d0f4792a1bf89115608bba1608f638f9b434bc5ec7fafdbeb0107a1ec01998cd3030f72dffa48afc1a575e6cfed861b3208658caa8d594960e95d0fe8009677ded2741fb0db774a21092a9337762b61bb95eed308f24e18c65585976bb5a28b77e410a5f7236d8e085d3c82dbabbdecd72761bfef108ed5e1d44260e62a8b33c4f0871191def8085fcf6b909fa32d5e1dec79a25c3b9f44c9c7e036852ecf07ef436c2618b625a27cf3633cb89d10194895c68a2b04f17b17c73f2d7511726bec1de8470b41c63fff5d5311b44d314ed1411614eadbd37f405460c84c6f3cd8d6b496bf83d0715599533ba90f0711e18c5637755b2fa84702d05e44ce30da710e7508feb31318a79582c7e6dbc8f4a25b136d9f5850d1b44fdfa65cb9a0aecd2a9ce76873e1ced7657f9bf005e25b86522527090294ef4ad8fd85309717a8e2ce686d1318dadd19f2576dc8d68b452db910b613b889c48a2bf82e4975968ea7b7fb8d949bb6e572dd126df94634b93d92e0a2f8ab886bbe9152e96df776df7c8bf8af06a351b38f84e279d33dec04a2300c8bdfb940297b8fdea42d8fa32299d12019e5482f51d5497fc8c18b496ef0f97943eb9892cb13c866d8510e6573a96bc04da078c67f13e2b98cb74e2940311f6a1895404a037f6fc6a061272436dbe39ba6e563bbf3553c2198b5c56d5c6fd5108c1862b14bee4a64c3aa49624b8697c0cad8ecbc2f8590d1e762d49f0be15fb72507ad508489ab5907c7b08b42d81d40a448df8548b31f38dcf4313ebb69b9f1ad28d09986ea6aa2ddf273baded281a49f7bb3e05b2c77dcc5611dfbcb86660a720e738228f19838c45ee8f4f9dcd40c4b5a8592b933bd4801f70ad2bc8d9e3335d8d6fd0ea0eca4d54ebc9f4a0aee4b1a8e92dc8b0d9d7619dbe0e8b5410d0789d1ff1256cc8ca78fcef398809f06a749a948bdc132e28efddf1176689f0e33929ea69794fdcc41ce11e7f2902481b2db92abe7c8e79c6ada50b92f825c6482d5ecac849cf00ee14c3413eaec0a1b1c8c2392ea509e981318b8b340982d63212a0940e319ca2c96afeb916c81611db57fcf981f728fabab4bfc822935e13e651c82345abe43838a2e713fbe441a0ff4f084c941b836216c3aba4380ee12209675e0ca1700921914bf6b57356c2ad6b58cf0770db7cf2bd6bb22acf298fb2cd262a47b3a4222e68eee810e4f4a932f170b2da409391a7ca69996ea3b1129e435e7466c60735faf0a9a7aabf803ff0ad4f7d86f05bd28c1d7cbff41e0bf176a8efa6d40bf46907c2b5cf3671ae3d191939a802204a194c52a181faa4bd3c982eb4751ef5856f5929e09625db23de5310c2bd9e256bcd64457d3d886dee6baeb7677f415c532e22ae2f9b5dd6402a9ac70b0f8b18e12ff07916d3e0b5e1903dd4289d2eb0f2663e3abd8b717514ec4614cd217f20586ce3943465ec2ec61f0ee1ef73cef1a6351264cee7e0598ae5d7c7c6145a39d91301f8fa32d347e1f2f54b267ef0a49831ff4c6728b01593ead31e8c444d47c769b024464bc7e5326fc2a71920aa5dc98db4649c723e83d54ee8ae204e6b7cbc145202ea71287f324ade3620832069d8fee81cfdb88a28adde2a6dd92d77b63561f221a04316d448825e3d357b95e9fca14442da77dbd70a371de4929fb485279ff4610aca890a8fa7faf532ae570efa0fa022b452683ba71b390304b97bee126e5fb93b8ff68ed2ad26c4be59681361918444443c6787b94dd7e27493363b49ed7d152a99a07fe7251d1fae215251d3891b9c775b23c6b162ed34167a8b300d3cb8e6c0dd9423e6b5febbf899da16dbd73cee50b3c2524a94b689a5f35b1d47378dd8a47acb94bd544e8c61a74cba5cc16acf71fd69f079d1000e8228aa090ce5638f2fdc247993056ca0564699fe0d80824cc15251c2c6bf13eabdaa8b8eaf86db677608f46f4e98544d180d18e2279fe841ff6a92f34e5cd7e00f4166de1d481900ca8d4fe841ec482f14704b9d45a13fdd2d33b5a10756488e7fe4334b9e843bac24af1e39ebcd0ccf6beebcaead26152eb9985638b13a789b0ed756f4460d5e31548ec69b1732663d474e06d27b7a8bea1a63571c078fe3fbbc5cce97af9bfb6e752d880b7232d7036ae82a1dea22de42d22bec77e4eb97a624718d7d8f6dd0470e6f62ae1318f2b45c3bd0962c9302a7f8b2e15911ce3803355996af31e08e2b96be80e52823e541d45b3db53f3cf3d461efaeb5764f51de75f4593c220acd8ea56c93b8140300005cf904a13450db081de4569d995e9a9209543c48a5b16c15cfff10d281ba685cbcdbe3028dc1a79151f278e04af34483a01752a8858e6e4be90296089d85664a95aa640876ddef0f9b1ae6c5b300f0395b3cc697e6d4df2faa816ce6480de10972ebe48177a33deb6aace44020bf713b2b0b1008dfdd9187008d62a1482bb2eb4cfa9c6eef2a20d345db9fd91e886aeb03a2e6f8b88bfdf7201e7defd5813060b3deaedff3a538975748e3afb42c3aa9fa9a817ac54f9ef31901485e6b1b3f61608bad9000375bf897038c8a77bb81dcc9e6aa9f12f84c8542830f5a8c620565fb478bfb33a70a308462e06a4255f92029ac61e174a18bf8baa1df1f2349449c0cc53ef58af493db674dcd1dda1d3e37a47923f293a910fe7237fc2e0ea97db4902a1977d1e8726804be218f400d39028fe438230eb3252fc9ebf2a8778f7d2367b727586310cd94d39484618a87c0f6222743c356934bcf14f7aa2001113304af816a6cb6f387d33cb38ac9a84b31d7f2f137e6567fe56a612a76c29a7aa483b1c8b34930a3b57691c57f453599d4f6f0d1ec2854e806167de5112c8ac3dfd5f5ba2b4c101950e838b6932a2943b78a3adbad4c73f3bd2b4ae16db3e3dd979ce8f858c92bdea93bfe91e60bf79f2b691791b2c1076130bf8cdd7e00a1e8c06c8026ffa99c62e053daf25937c543b91d139a515158c0a3386db1a964f6070458a3e22537d359fec971812ce2869f22b5796e34d179a28fb999a85378e5b2b295cc4df1a807b51d80372f89ee10017fdaf74963542d18c726d06866f78520a848baff234924a513257581dd88c74933819ba0109bee0ac1413f026210e53af01e26d8f8df57e54f22aa1464458b626599409c222b1147ec4a20ce3730f711bc71d03dd5b29eb3536ccb01daa62335ffac1da7655ebdf5ddde9d8ccc451de822ab7c5f1073f3a3d121934eb643d3990b703b685ca1d0aa4ac6cbf814536ba918b8334fd6751f124f9dd634640fe93ad8cfd8fc3f1c1b4e533ac74ba2a744581f09297de21250a32946d180357f70ffd29e677cd54acd082b486a27e5054286766eea700cd48d516fd0f7aa6f7c4bc1539d217c058c36bd280a5c0648089f6ebbe73bec78bc6c4896b226eb453501db885d1cf3d3bc5083dbcad9b4efc59fd472b9a060f663191dfe6790210c6cba636ead7fb061f2f4cfbdb61cc58f87b88e1805aa515749fca6f31bd98542f5f54c0554491c46b2d76f2f9859c0a96d70a990d56a9ef8d642b232ec7ff669bee3607d2b95cb7ecacae9c8f7dd74ea82d5f28810272f16c1573f517b766ee7db333e601194150f0bfa2c834001875650ca1b8d5cb382aa21a3ba55578c48b3252a4abee441cc89294aa78caa95e68a85436703ab3169ddf65f37bfddadf0662c64a5c1b646f6b85652bfa5ff42b74bbb7da1042a3347ae028bd0cd2bed8325bd0a65ea4e6214d8dfa1580998ef20a62b7496617f9e3182270ed55684ef387ba83bb07fce318f85ab0ec5180492427b7693c7cd82cc90986a8e8366dd72ced3f4d27e7f0dad72fbcd9959ed1260b344a973fce5d535c8c004c43c2ad579b3e5a7ec58530547543568d145cde866424f876ec793fff17df297163ce730400d9945c77a0f8a39f4f4bdc320d36f7f093f9c9edd307d6968f42b15228687b91bfc292e4f4a15d6e265b2a3c570d82ecf9407be663d18e6f16b3079681d660d0850b578423bd9c8950a77f028916c8c737fa6509cd7b989d1ce881ec70f141ce15fdd935ab23f5687a78359084e99cb9561bbc642bd35704c88e76d7315bc34ba34416a04344084a730c74766b575c4175262828dcd638227c745ba815f90fc3dd785733150c7d387a6b91e74687ff4fba3c6f870227e3f9d9bfd728e85503f4f7a5c1a50c212f86ffdfb85aa0289635891062fa1a20efae135ddb0d4dc9dcd01f990de197dd3fe684a653c4dec70a607a27ba2d84fe2b6c3f79cc20731a581be1bf870964d786567a8738c8fad049fdb4dc542fb3ed7ef2337a0617a4b48dbb21676a1561879b2db22b1132b4dabf8a581f477cbdc3c61ea305f65e821e7d9971beee89d10cc826b14933a764bd8812e256581b531d64fe556041c2fa3d9379b10a11e5e050d711630ddb67abd7308e1c825ee3f5f87492b4256e9fe4de07da1076cdd1d18d2cb97a8bc05f3b288a6a99b95e7d8339539c6cce49f73fb2b2d11a0f957974294c7eae4bd6e3d87c75a01a6bf7654e58599dfa51f4611afa7887da20853b4eb5f238ca7a77c4db2ac7546a8a0735ef3df10dce21a1e37e582ed0647f02866f5a8ea4f3c9a6cc87c9ccc5a3bed21942136ab05e631bc1850fc92d98dd9e9e55dad8c8a5ec65335848678d98587c00892e3be78697fd42200bcd0ac02cdf4bbfff30ada80d40694dc6bc348bf63a133b2a34c9de628974f34007b64d48dfd82aca9fdaacaedeae0a1428d323a1b48ec02954c38c06856cea135ca16468745039b32ad963c3955681882c83e2cb5d496070e4c124afec6db76f5f47db01e10057bb20fad3087a0d6b0641841f30b1c1a5b9e941025618e66c74076af639a739b4c77c95c48b3d6c2619c545e207c84ee8afeff6cec86714e496b47726dcbd46d4a768695df90adcdb4c09c356734e508543418e637a96a6dc1ecc52ab9fc371815501d4c5c90e27bc05cb8bebdeae7c451360415738f62191e7933a081efc5e5adec8d0e9d5386424589a04f8253c6918d544a77fa755c4c68f2ff1ba76949780fae5ec3dbfd75ede55b5b98b513bf2528ccdce477d3374547556bfe0188975ff500f0963839fbb315ca42615a95bbd90a2fcc1e062b03b378e49dd7c453c205b48a1cb6b928121b3bf9e6f3f577c89a9819eed564fd2a5ff6a3226345f15f9ee615aa551effed16da4ba3fc748e536eb9333de0c1a0a7c5b96b5f1696673ac6977707fd7fa6d52bb0e2a06e983fd873fbfc9155c52a635115c9858492e22e42f8922493645324681fad932b1264abb8b162fbe59dc07164cca906a0135743115adc966bb703e4f631c1845d60f722983908bf8c539da7fece4a38579c0d218509356ccc1f11a6b6ebc4a118c21f9ef1a66f5e1a4b5aaef902a608c51d632e2ce9972428af81ee34e777c97fb9ede849be0986d7b6bf54e8273e52f26d0e846b1a1a4a5c4ea4291f76d14b70b58bdea7f7fbe9238d2a8a8ebf99e6c1ae727808a3a274c09ad7ae44001612ccd0636f634532332b5b3c007625652c53a954849c9c3f016ed96a5cf21db6db10fdf3c88d2f0d1c536b35a3b878a7d993a60e1e115b16ac78e170aa2881fe5f777489c048b580ef08f4c993c50ed93fb74ad1ddcfa29eb4002246c2c9abe6d8082577d560e088cf23211e1518d752dc7eab76edecb616a86c239362ee29a9e5ac2228275024088b7f631aebb87f024e7535a826a1ca63cc2357d48d8528575471dab5dc107543a7377a7632014ebc02357901bfaef82acaa41254b8583d8a123e82e7e9d4de25a325aa55ceba9845dcde3f2a192591956b7d6d2cc5f20f9adf64d9bba6c6a584c425a5b6f163692c7120aae89868d499fd76d3d15d69601cda72230b8390534df8202de03b923e317ce840e764b220fb06094930018e6c32a7d76937a92cfb73a557fab0a88e1962fb63fff6961c4a04e0916d8741b6a63d80d5c1e698f371b9c143aa3f3f7271c20f3c18609c56faed7807599f34f1777c20f0446ce1c04ba6454323047c4b8aa0333c0bdd55eed2a272121fb9d2d61859eba5332073ede95ee3bc910296d0bd19dff7b9dde6cbb28ff686bf594cbbbfe6198703675b9cbd83d2f0bc49f606aa5f4244a0d16a0ac040eb327010be715d009dede18d646d63855d61fb5b5fd3c721be16ffa94f1c687d33da34a61012eb8844f26d29f1334fa1b31ced0005bb75ed42f613ffe5e655aae3625bc8f6a2923cffbb4f23aa037b4e5e72b7969474d98dfff51bf5d8f798ffddb79d922c0ece217a847a4c170011ce0044c491efb4ea033f19abd994adff2cfabd903d27b05233083dec3c495dea528bd398d07ac77b1155138e22913227c8432e399471b555e4b4e591a11264cc442dd8331c6ab70e0dc7225d72a1bfa49df4980fdca6b9e38a0fec497b52c9614f04ba80a10a26caa5a0216161de2cbf3123fb6990d00b59d0d7eb164f5067853408642c650d74c9974d70363fde1ce705df39693b281b02935040dc5673367005ba111586b784f105998830a74fb0add41aaeaa36c4678ad53806ec2a2afbbe6566466914a915c12eb921b9debbf6885d7d0668bc7b4b8c80ef29b26328cd855ec0966caf585f155b347baff1435dbe5ab137993a087874a69afaa40dd8f4ac2e9cb042ceea2fe8b699a06881a167f0bf6edf9f679860b5059392073199cfd4a30a81cdde68c068a1c99f3fd395192db5e060b3308600777b66588a182d67dad27a8443d43a4dd134ee774e1328ec6a2ba080478ebea62963e6bff567db572a5ea3552f9e53e24be6152f98b0a8451df05e20cab148682bf0c2daa0897a559cbd00c5e4c330c9d38fbec9cf0077117210bb195d8e712735cba253d4dbf581dd393b400f0e01c56411ae21d314478b1ab29fdb31f5eac13d60b3769407a8fcb5de85a530d44d35aad8878096dcf8bc59c5ed7e22119d19f8e7a647c214590da24edd132408e5b47f7ea961d57ef88a4133a89839c9f13f814b08542d1d5730619d93d055cc7132a671a75f849ce1de264c3a2e51827d426fadd9d04ae57b4f9760f83bbbd0d1bccdad763c00380f3cfcbe68b378f902b53d39c3afd235d0c05b84b956ff9bb496f96ae0e541d53b0560f696c5e983b1d94c679049ff874074d8c107379c32fec1ec43788cbf6b195a2131bc56e77261126e093f282af70f6a4e8d7b61f91a43e08cdc4a38468c9cc4994c4ca73c15af7c4b5dffe45f0f2138e6aba2ebaeb6c9b3b94aadb19b8341c53b8e4ca5dbbec1c6ffce45e89ba15c991e70300b96ef2d8d72bb1845c937223259e96a3f139bcdeae63e0bbc606ce8566748a9080b451aac8eb82978530ce80a591513d046bf1835d1957640b7dc8939c95b79519f5407fbc11c2af0475e48a52cb7fffffdc65c88c153d0b616b1fe75ae3513126f4d7a6d9c6f2addf8bd7bd32e65cb15d2c969c85ff4a4bb1b5c2107bc9bb95d7dfc0e1da4f979bc651c5b010f2f7bf674661815a77ffd24f601394c75918898fadde7b0c4f1cce45e8efdf491a8860aea261e4083224456f8898f1a2c12d54efc6e8ddf014417c4d3ec2011f0bf480cdfed6352e40c9aabbb98cabb6a0495cfca4571f13ca81b40d97ea17be5087df2533cca106d014445d79b4a7835013e37b1e4d5f9e6a4de1362dcfdd6903b7ffc81f574e6831ec0a422c466726f93e68d0707c90e53a33c17d1f31cabbef6b3526dbf75675657d20375bce16a1b896017384b7212b534d508b7a17fc4b3fdfc13711ae958e6149fe1c26f4b760d4d6e539f37578b9daeb56d77d8b52052d6bb4c84bbc0892024913bbdc78329725617fb08cf6699ccc0d13917e95d22ea033a044ab6a58c89cf14c447abbf01a1d5dff54353bd2de1f5e20e990463df90bc74b80f2effd1e7d8e46bc70406f4aadca4424c975761758098bc2f265e9501aca873c9de047244e2b98aeb38341e7ba0cc590f4b819934f7ed65606686ee638bb01cacf33e64d4efb47f9fe89488608dc73bfd2e365356b842da6dc0e7ee279ba2b0e3ba2c491eb0e149dbc37fcd66020a0e0f03b44e7e7b307d37f21b7820735192a91870d507af1fe18524b73512a26ba5bbcf0cae66469efe514fa63f1d31cb42157f7b2d6e9e91f7837f0f6f9bb5195e22395ed52ccc5ec60310940b35bf76e9ae248015e34d0c3d93fea8622e919921f75440f6d2add0baee9df0b04560fae469b5ad474d41d5f39532adf6b964d3881038f5f590991a510478bf3e9817b2c2d13115876ce78ada4d00b3cd2bd544ae144a002396ba2ebf2df5454a6a3c5323738c3ec4d047cc8190c36f48ad956e5e272f46aee73c25f35519f03e62893dd516ff8460980f54d04aeed99cf80d95e12b74d5fc54e2f779f70efa41d0d5a7d4fbd64d2b9d5a19f6aba27090d8ba63874d6a24b552e1eab0c5fef7d04669e491ea4b47f05cf3fa69a29a28fc849aa1b039a28552241028080344cff2627e4f9874d1eaf4fe7015649e5d6880b0569af5f37faabef296ef2685c4724166334337fda104b70d81920681d8660350fcba11592055f2302932d5b030414fdf40631b56e816bfaa2f083b208eca574681bcdfc7741ccc1ef6c5100d192b3afb7e5f137ba006c14893bc63e0c0fa73ec897e93c865e3eefbf91ccf3d4e24e78189abeb2e6b0d68f74318192cd4da0287c54fee9cb5ccbe656963852c9d4d827af48201e019461ccd0ede7cc409eec3549b6cca828b8b04faee71a7324b3846cdd0529b28feb9349af9ddfa730c53ca45d4402e5d93fe346f33d7e91f34ade68fe5313b8aacb63dc25b109eec07dfc06a3685b86fdba379be71fe052be8ac04e3d4243663398bb15c5cf840df8c2f95e5320361e9bc9fdd0255ae3014cbb77e5f7890901d538f666f6e58ffcaba7282ef7e09885b41d0736f245056d82e5fd276fa2b2ef1dc1ae4e0d1b88992427b48f518f3b680cdc2bc2d57f9704fa45645a6cc9513d6ffe2e317730fd608fde432e94b699fe7db9294fd412069baad0cbb1fd6957ef2a7c3c69d36fafbb84cbc5d1dd1f74c53b043907fbe75539c0f5358cc22a8ee5d648281bd2b53938b1f05027252d348024cce11034b83bf0a93fdb675373a2387b45f92a42e5d6a597efa053b2e37b4e5538c007bb4e366c9c1ed69cc35c4de806fa38206b58c955b8de2422602009c5463cd947853bc35bd245e5af16cf5afa6386042dbe0b127b606cdbc2cb1a71015137a713f4f1d14f9e738a35b06613063d16e00129623f46a0bcdc98c1e1dd233f5d1f782e40a6e7fb765acffd20d1a3a3852634079fb1d95df6be867ff0cd3261f22235e9c665abae070db57491cba0f2c175312abbae8b292ed547c7221b6514eee550ff69a995f640770bdf15fad9b45b47770a89123f38d350ee4b7cef571e09e87cbffacb6ebfc842f96e624a02c365c188ceb5f69bff116cde3410dc91aab92f815e0f71c940bcc33e1c4df736992a741ae91070fd8e5a420d137af8147055a91af46ae999ceb43603584e00d32dc3b857d3f9e803b7de1b9d219de310584ca00650eeaafd63baa226bc88521482fb898b69be7fdf93610e58e942262e19b87e5992fe2114be623c35f5a55508d23f65f9e81753bb080ee3441cc5b7510f45c921f6f8c7d6f977ad1f50955669f97160d23bc0a7be8b41daa9bb1a20761c9fb7f9be4ef6e2f9333e1151956ef6ca0993f61b065cadac2482afd6b32ec6ef5fbe9aa9ec32f365ff0cb87083ada57d7716a5bb3c9dc77916603875b93af9957745895ad74ba165e8db9c5b9b92496836455d97abcb26dc5daa8e64ca9453bc0d91c75734312ef029aa1d5f06f2f8e708123a22a2c547b24d31b6a3de94021cfe5eff6efe3ac38faa9a29ca57f257711320b6bf683fdffcb0def8ae92e67010342626af5414bb1e67454f6bc623f085d29045f8f888257f9e26a5595a2fed684e5a4f20224050f92b89e86ddcba6a68f08329afab2fa865f6cdc54900766cf970ba3a05751a36bdad794d85c1c7955691ec668ffc9e4745f825605b0d5f462f06e3dc9125ac2fe7fe4f50b3cec058052ea77a046fcf55c455ed7e05aaf0cfe7ce2c84506f6ee23879736694dc3f3fe126538a5f3559ebb8196d2e7b5d47ec329e03af935fd560be74032582f73b4738ed8edc97c0fc7b08284154d8251962be1df7a22d6ca6461fac974484fc740bddc50ff76c3b9b21a8528c29446023ec08c17f8f189f6cbae74e8c45aea427a44e515c192034b62f15d77ce7015d72c9dba974feb73f8712227581a82e9eba41c83da9f52236989df181efef69bc543b7f61b57f1f56f93381605965d0663755e468af661f3dc187708ad79ad31b86987848ca02c155d51e6e593005fb161e469062d6b7582956a4a135736fe7665c080a998200a1e998365a63ef983a30e9e8f7f4c659dcb032e8165dbee1f2214f5657cb53e8b9d23a5d422ff5f73a7139123c521e630081bdb8e8bb49824da555552d3468bd23008c17d1f926f7709b0ec509b445797cb4c004f09cd04a5d0283261a8b0355bba1add73c4ddb70ae136b2961ecf033d57cc60c1fb9f6f03c751e33e79449c697a8ea295c4b0c226ab779db7b7e2cc7fde8c82a7cdc9851af3ead5787b541a8695788d1d14b58c51e34cd5c989fc9c59edd1934969c6e43f3a25d14a6b6e02f766a651c82e97adf7a864dc5f5f6add4fa1d6a1eccf10a6ca0b2eceb4420e7cf29853c42176c338fce9cfdc53c63c92eb8ec0af2f64f1126167e2d95baa34e751674bed2bd02d0974f90673abf8a192265b9b5b61c8f461e521f455ecaa66f2031169b7f9088018b0bb2b35f7accccc047644a26861c507dfd282ceb96fea79b4b3b16a8ead330d4e26991bbcfe4620b9236acab515e4579e2b7b9d64f22882001933b2b60e3d2769f947acb9d5d97f595ea4904a7bb3b33b91e0acdfcc4bbc90b1bccbeddc0c85d34ef98985abe3f381dcedb4065cb14ee0aa22fe3379afb52e28ebb3c5a319c7e989188405bebf6f47e9efc9152ca428a642fcd90d9c5f39da9136b28fd0cc90053227e1e8ef6c7a7e7207d9666640e84781a8837504609ee29963375c1b27b13fa392b0dd18fe6a6dc274ec1b81378af6ec179301ed1654aef331923bf222434213be65da17d72297e1d9b91764c408e29aa8a39a5ff3764061dab4dfe7b103d92472e4867b2f00484bc164b864f90f2fb27d1291cc9f84d59f0491f07e61e6575f19fe52d5a47a113bcdda6ff16648474d47bfa63ae9c22a6da2ba13b39d77504ab925da70dfb62dcdcb61e7da8fabd9eb3d01c8ec2716f3c3f9276745239ea6eb643a060720ec00efd98880f56c82074a2109941f677b41f6c4f39ab7fa171d82e80d2369987fe713c6566786818f0240feeb181aae812d67b54bf9db301a69003df10faeced4c05168a9c6f86c21a1d42822e22a89a081c591d168975f66cf4f2ad1c63ad4699da8d04623475bfef5c8da1c0509475f83a6234c8d631cf9e12c03203b0d6958a55f22a9c856553ef179c658643a9b3fb61b7e91437bf6acbc794b2e634a5d60b74340298e15a74068a061bbbce3612a8345f45995efdaa660b5c4fd75f9f919705d3ff1ce5de137de0136baa6514ab81faa60ff0aad521d765e3811fd7410eb9651278cb73d1bac885f7b7341fba4843f64531e8dc2a9db86a4c61852d4b3d9b56b7c4987eb49df4ada42fc0539bffb5149bb9d9aa803c54f785193495b12f030208b407e6ac67cff816ff12829010e5a6f1a67893b7a449da94a375d1484a047d01f8d10731718bac5230f39c76fc83cc858ad0ad40fde4c824f551701f63fba4e3f82bcb1712b08c2f7207b862ddc6b5e8a465b47f5df6cc369d8c6f3df2f4589c6af7c1a67ca9b56268094f1bd239997368fd7a235958f12b288687377c9a170fa08ba50d18924212893c06ea465e5fd77196416439689db302fc6b6545b4d8b527c772f17c2c75903eac0ae4ee69f059efa2cb5bf00d98f5f4f2e57e81ffdd29a68a9bda6e1a7bdd31da01d6904b7a335894056d2d5e18512813454f25fc6aec59c36b5a8815ed72d231ed71381cd91beac262916ea3317b6fd6a15b1bb41171ebd4511d1f626af8d2b30c6854e2d83ce86020ab7c844f5cc7971b94a48beaa317546a6f14d1a73bf5b5fc0e87be488974311b60536d08cac3c9e8cccff06d9d89255794456adccb3b57ecf41b55b98fddac67f8ee7b544d306c66b7efa64925f4dc3738f895bcf4372206916667bb552129d24aa6e297b6b58f334a01f3a0b8bfedef4fb0e07c11d22b313362517a8ddcb927710c2a3cb6cc65b2e68a47ba47ff74838da8212358961dcc79945292525d7389eaab5c2af74feb4d7df42858cb978c8d593a29c6039f4573d3b5e5c738f53453d86312aabe153ce2efaaf43d16579fc855133852a987b029af9d339be9ef1786ad92990257ce60cd9a2135be38a567a1dc8a9604e013d6f9fc7eb5c41e343276fef121b701e50fa8b19c782d3b4fae5ae4463c142c8b53c66a6153686cce7455b89e3978d1a7e148f9c15ac3fad95d7f9316ba9e91cbfed3f7460b40ea6caf53018f913f40a184bcfa0ccdbf1a4f5a03a193009ce16f5caec1009ec7a9622986098f74022b1796259aaad540577320aaea6328635f9a4dcf67cde8df3be955ac02309796e66e6ec6e29533de73adec95dd019cddf03f905f8c0360bdc221a55b2bcd0503a3d9ccfaf2bedfdd711bcdab3e0c3d76f29bade3a2a317dd6900867f00f46810fd3630918603075e50d196d12fca54f01f27ec8c27c6c2f98f68ae8418df853041e65bbd6633da106b236dea96712e67dc3e7df4f8aef07083bdb3898004b96c81ce8de170a1de42b27fb5c07c18fc9f91230f4f3bd0ea2cf9a2aaa7444ff3458858fec2384b84202fd84d5c02f8ff328a2c615d3308f5cf6c38fdfac1b4876de3511a2f922d06b4788b39ff41d7f59e97be9aa080f37208cb35e88dbf274e2cd9caf453641b02ce49ccb29bc83d06b15f7775e067218ad6acacf57ca45f46d8f8db845b5cc16a978debc23b179bac30028002070bdab1ad9a0ba65472b7cb6581cecd02e3d67abc40753ad67381dad9026a8672484a12d72d2733d3c72ae1eef8552afac4333f20a130b45931fa262a9003278f381b08ca168fdb47edf01b4807299eb2d261efa6c0bff7e8372c86f17470620e283187709c0d8ed7f50600be4089ac56ae025759a1682339e764865b44a56b9cec32a18b0091d7fd82501d82d4d807b618d9780440d1878da2858d04b78ad3cb989e2416427f30f92c31acdf28020956d8c2befe3fd4e34a211c7bbf5d4c54642408e5f390bc3cd8c55b3f868360a80148fdfe322fb9e0d1d3374755c92ba23d421f184806ee4f5a9418e96918a1fca0177157472fd303e51364a683e4eac48c8e37e4f8208a21f1dcb04bccbfea98842266418cc32eafc886251d5dd16e06baa86b19116f4c222e47f03e29b54adc52fbb55232d79be887eb0e776e22b8af07b5931ba083fadec735e0f14fd2abc2b4e5b3b1e3fdbe76255b7ff44bf1ec0188c396f9fb6c7db4776db2ba5b6daff979f85c8545c8ef1271b69b202f2cc0d9fd72f69bd3ee0a39a9898a2085e5b57e5f225778899d0b304abe7d1c7291c42388e884fd1ba20808a1631b02b7728c00c896ef25c5f6a9bcfb8abbb23e2148330a0f24183222801288ea857b4a3b007fd0c2e4da58b5a759baac96ed32226cd2400e4c868c22fbbf383c7b39b8b61b178d9578af1983ffcdd31a8ba60c3e3ba3e5375e6f2531f5179960a44286bad76a60405ebab9bdc60b6d8fcf634b6ddfd568a0f2e15505c602071a6a4306042c9b47bad546d565e4743776563c0708e663d5e31d590e09b4494454039df7555b270ba8da6a48eb97303ca7b2ed12778f97a1767c20c23631ea0c4db03a6159e807333d3002f4d1c6b2d2ea44eb893e7b90de6ab4a4f99fc5b6eca85d6e1e99846d0149ffc641552b8d571c1dfd287ea5475e8e5f615d7d9b3a7fbedf6a9432ccf4681298a9a29d14f4a51d19cebadb45fe30cef5014b7979eaef000d7bb14479563b66fc0821cb960a21d46f2d66ebf9dc8e9931f80b2f3e749e87f26c1fa19a6361280b5c6fcce4333366ee71f3898bbf19e8742f8968d160ae0c451e695bb55e4736bc9796b2f5bb9df431f1ff47fceca4986c8254293ee77f7eed71f853a52fbd980cd1b51551b7b9de8c4961030721d0fb7a38c8a161396a9567d9996ee038f8e94c903b717b228a1b508c1fbe8fdd9af7e461d6e40b732467206058566730617c807bb242a0b501b818e2265b9bcd54ce712723988fccaa7acf7de09d8db18ab38297c2d95aab69f25a8dc39fb4b878ac2dce116a182a07b0504ff2a6e0de66fcc1bf75bef44b43abb03108f6a02ee2987b4b45545c3fda01899a749ea9c2677f8c78f9ad8d7cf970782fe3a0000c1a6eb511237136286f7f0c705c47f5865eecf311f888aa1d513b1cdeaddd9db24d46a91ddbf308bf0f49089aff20062b403e3867b6f1972a99f29b933446868d5e34ba07cabb5210759c93c811cf0d2647d442f6f8533e6d9c3d1a446bb8ee4a835909b17fb0f68380592b184b930afab4dd39d7bbf777ce8ec82d01504bc81f8d6f2ccb427ed0979edb6fbca5bfc42678d79c7edb44083e64cc7935ef20518909a5a32159b28ff45881cf0cf78e34a1faabe29049d509323912d4fcb6b270c3596c0d3c9588c0e3fdfe36720d3aff5ae7a03cd39961f2a593b276003def3d72da2ed5989af41e351f96cfd66caf0d23f3d9945663275b1d6c39e70f1bba0b4e7abeee6e9eff47c8edb35cd7819191ab2ad51872e4fc3cb895af88722aff85a00a3c3712f69fe6670499e63aadb9a054f6bfe156a7d19bf44e8cd1fc85de72c29d6a539a27573ee9b282f1da57966a795d2aba2ccd0ead4a457c96ac52622552046fb2a8224968a078befe9351e270438dc5df3c4b28d704b8bb3c4ff0d3eade32ffe94633dc0cb03b29223f42ee0d9b5243cd789b339dfe76766cedeb5980f1e9049c64fe08868f68bb7b016d6679433e6124592290283c5ba8a06605979e49efb66cf4985c5a9e30fbadeb6784062237ba557894b0a5ce87a8aae4f61e790a50c466ef266da25a252ce08e905b2532d76f1f5c4b065ec1a51b4ed9f21282f31585a7c93d8e5ce9f96059f72fae0e3466d907bbfce3764051e3bb344cce1e60fd3badc22f423fdd6fcd6b742e3041a676575ceb361dbbee887b6e2d2ddcb9d2ebf1586aa5ad6c1d4be0b5e4dfccfbe315b54a99311f48dc91d9f6941be1e5d1c27d576d41bbbe038daa13ccb5d9217b36207287d0228facdeda105dc74e98f226e6554523c2048149d46a2873b98c09da5353f892222157d59f518a63a7e3a1b4d7287aa0dd8a5191ff0ee9d6d433ff4fd1ada65ecf6970916a6592e0e3f5aadfcfb248b23ca2452294744d91d30a3f1aee4871b9fbc35cc6d99f8fff8670eb72e81294ba63d740cd09e0a17a814fbed2acce2a191c1c715a48d7d600ecf17ce5d76f911e1057cec4b3f2fe933e32083029b5dc1c8f0e3fd4df3ba13ec5a310d299bca4e9e1f5dc89ba022a0130dac977b389540040f7e0b59f47b35cf79326298fd417319c29d15b0ae9fa4acb84d39bb990fdb97430c513ed11a035781b4f463d1790487422c3fba585866c43bc7bbcc3ede21107fbece70525a577a7abb9a0e6c499a215876c8ddbc96d09c038c54d5fcadb4f79397b3bf68f1b8e3c95a9e654d433d837aeba83544ffd76e321b4dd8cdf63b15510f3641962788d1ff4d3f60537ffc6f83573fa88de959f356ed5aa760a807d3552a476fac1e2215fc8f9f52638fa6edf6149def490ab4a080d5564db2eae9fd8af54c1e14ade9eaf1c2e531ec640cbf37c98c0d67ef56fd97c6a7df07be435b749210a2d92264d35bbf60b5dc933276e16b0ed9189581c932ead4e76c5282f8162f3539df02dd3ea93d0f3d67d378d461ab2d7240fb16e94166edabff5ce202e3b62bf69b55d072590fc02e58a741a58220aa74ab05d4b21fefde82c0180363dacccdb6dfac3b31a94fff789e59169602faa38f824eeb3637aa7a6b3bde937e8eb201ae393effecfef4eee6cce3eed991ec5ffe65b76e3f3349d6d5965b654e68921606930f28764dd0359bc46abc9f7d6b9f14af047a743e15fb9a435d480711c123c2d15670b4c6cd50a047cfb14561bfc2bbe12b063dbe8c27e19e1160d7e1f7c27147647d82bf5b9d34699da6be70f621b1d87908175e435c0a0c18cab0d12f92b5fae6f32ca10c73e214ec9ab5ad68dfa7c1e8406a808ab2ad86514fb95066ec2b19ad36fa1fc15a3a6ca0aa7697b45e3fc07908828048ca38fd9903ce2bd51e334216671c54b59f4c2ce7fa17a9904295c61116b34d5d1f88868d140f7fe6741b426b36623d9654c9d0459363c7c77012dc82af6a3aa2899750db2295ca395b12b8fcd8666c30e77997178d92bc0a13aa59673bad080e1f686f73356f30f7c8073e79b81a71be2ef6d10a6b551d5c62c8095428c9322280a4fd8d897369ecdc2408726d9449e5d34e55b7aa38ddf6ec706db44063780b6fc46c3faa7f85c66727f5745409627c904e8d7e189d6092fae32230c46ab7293591b3dc79ccb63ab38f567483eb8ba2c1af52b976bc3a4601cbd6418df7e9cf7efd34c1acc5c26a60576751802cfc7454e1d81d57b9e1b72d6d73098dc8d4866fd082ae271d6cf13feb7986163c9e706b0c0d12738705dd5bf17a2656dd4ee6a20cf3d0c6048570783696128e38e3409ef02074deb2cb0aa0801efda54d80878e427ca5a10f1602b6683ed3c4ad114b934c0ef1b23638fbe50b2e36ef0b6f5321d7ff81f66851a65c09ff1f01aba8e59cca53bd0bfa53ba26bfeffa5727957ec7d8bccba4b8c5eefc4d41b661daa8f5236cac5b1c0ca20e06ff51763d60a4d6a7d5c9dda09dc755ca1a672af3178b2f5ee7801778e9280818dd1a85a682d8c80ada26cb48b63051d6195e56efb71246ce5dca75e052351dd9963ad0b967f58a6e23486c1c8900753a69bba5d9c5e61a6f886380e21d0476330cd5b3f334a0dae302b06e6b09663b35ab636bc7943c121ce60baab399d183eecd265b06f3d7e41a961e34d1a979dd36bae7a1a802a5248e01bc758fe2679c508d00087dc736999e5a4166d1c010012848487f9ca46949933b951cd20112087095509b3da533e7e87815436ca7a1e64a3fc2396a6f03468977d3d57f23fa545cf29399dafaa5e62e2bf2bd5991f8031ceca9fbb2d4f4c8d14ed13d93ba059359363ab7fccbef342e2201d23dae7ad5ca529d5d016d4438e8016158d55977c72fa84dbf4a9f246da457523413c63fb55584157b4001425eaba91a779cac6fd7a4b781d2a50cbf7746dacbf147fd4ac85e2a4faebe615b90244ea2e72bfc23d58f43939c38a187e8b1dde6d736395b04caf63916b3793aa797ba51f5ef7ed94405f57193366e02ac4bfa229eae315eb942bd9e2a2098c53da728e7b9bb95d60cda2088bd67fc1480c870755f9f90dc1c0400b3f4105ede49840f782053c0fbc07d8642e0f5c2b08117f571970676485e80e41f12792b414fefb6cbb48562e2d47b726c5d5af5b1055646516f5db999542a9ea3fa4ca3650ff743ddde8db3d939ae11b1dc4bc9fb1e0a5624a64df31811d0028995b60961b7c1810455feb8b6aaddc502952da3fb012f6e0d6256b208b8e82a282a1951200253d0e3037cf620a47f3d5c4d5efb77fffe0e83625cdc237ac1028ed5c642f200bce534e64de0b6bb0f9017f0c2d4c58dd260220576c6bcaca1ea76567fe6a0eb356953389e7967e4d1efba732adbcb05965bf1ae60ce8139514d9d2bade3c2d8c0bb5d5374ca92271641529563bc27905adf06dfcc7c684ae4b18adf208f5645046c28383a25fb8434758109aed2635f8a1516920c1c9f002086cd1fe06d7e46f5d4424e5063c1e31066a861e721306e62abc2b5423551eb11abb503c1d90c6e31c221a6d0b25e5e68ff28786ab3dcb9b8d30439557a7c04dd95d695bf457c7b38e9b1acb4c35c4cd9a06bc09582f9272db0279b8218a92a8821a71d47405e91b21684b173a8d1e5f8238edb99cdf3f159fc5771a3646192325f598669ecee36073d0b784872291e62a52ebb3ff8e71792d105d54803a33f2b4b201df7bd76450cbb06677f96c56130faab78fd9bb634245f599e43f435e637cb42666c233e06310be6896e791d1df362ebbf1d357883a0bcf2e765bc1b301167e3f6cc7674c890f12c95d81246cd74e1536f71e37d6955de6b8b8fe42aa014dc71c11484216f2f4f360d67844eeea685705f7ca1e9f4d58cac760e43908cf4a9aa501b39de0b66164b63d8e6013c40fb9259f3068b5a9bfc9212df7d7f34799aef8f77251b9d87639b64589dd8f98df627436b5a94de86b16e953abb1be41b4617fa39c9a984dc694e1fec358035e4a6b00e4e1913313c2c72ea9d8f38aeb3bfe8356190bafcf044b8a758a63018e0f22533ff2815139d1d1f6ebd6c69989c227c50c08a6ab9bcb9706edd3c5546be95bb7de93a09c4a1e59d156cd9b83c368a6630cb0571a474db160be28065e9eb10de1bb540e2b3ed37ebf54d876c77e40e30917ae373f0b8d81042e58355ecdbfd66a130dcac6f00725d55a572cbad72dabd4084b12903858a46eadd4318b574e49a4a4a11028144bce91601a8f324ea348787680b03c0f7a0009db1eba1b9830e2d4ebe2cbe7aada36baac3c456b7c2d5e9ae1bfe19f99cf910806ab394c9c848b08aa81194222fdc602bbb1b7d673774067ec6298d37bc713c1db93156a26e65deed6b684e172a519ac41ff40357f0b9fb7357e807306a8a01b6bd04a307be47d98a96e4785a6110e4c61e492c158d5939f48d94cbba83fe5d3f128af73cdc61df3637e59012f437205b315c061d7f6802af0bf4aeef2e4750c0a02cb51fbe5e78cae6c7b246d8fefecca0ed752e2b8e04e69961292a78b26ac3bc3da3b2308a0cd2df53d251e030e756c08f683cfd28a686156e18860900f4599f366fa33c6b685a22de92a87cc8879e5255b258bf6de7211001d76ee4305291d6d04dbb005ac532d6c39577a64a636da46c2da9e0b68e7fe8822966bbf996135a57754606bc55eb71eadafb96ac72e475d4bef8977fc4d9f7ed67eed543861244ff6aa5d3a27337b876e6f910572003ecb6515b87c578a10865e84361d3b34c0e55c32524ee3b8640db460227fa79ba0112fe4439679bb920bebdd60430bd3d3f7263df57e0b59715bee5dd08e316330e3ca8642ca0ccc1f2728d2704368e68ab924b0ed6da3c1b103499e1c7200c63db8638885f428300f9394293708aff28c65b549fe88a7fdd7f36e11c5a2b096d20d44db338b22683aea71d19afe380946049f4b191f14cfc85e9c53170a876aad6ff124150dc2ca22910331d6d6480e9c04db7c42343f1f517680e15995c68b4881424b5b14efda742db746714e61ee88fc6a5f4c9f51e53e8976d5a3c15d4e05785b177631d559a94a4aa6298a3e05b9a28bb97db9a5524197d6f7b08aa3d1bc9f2fb237b4eaabdb3ee436dc752054e598f03b3012e7ddd37b9e753946524e1f1663a4ea594aea8a21d0aee42a7ad6698586052e2652e2dea68e862a4fa71976adf3026dcd683fe600ae524bc1354b3c6e5ac0838cc7b60f738ae8f5e48f35be12c798f799e436ece852e04cb4554a35e2ab2fb3de957f65529fc8476e37c9dd558fd319c4db880b2028b35b6ed6d6fd909011edee30adbfc44c37d225066c457c98c6a0d268538933f4f5f43eca2762fc0128384038dd802a98e710cd63df79447e290f9a01ab83228e7a20fd106e4e8f9315d30d4c80ca4087801662e45e1632a66d40a9a6986b7b4dacb1a7350fd924d595926274a47f942c3327fcad971008cc506ce0b520770911fb5c4d82df48978cdf2929eeda6f432c3c40902ac598e0c4067480e23a9db09d55f912bcd4f9aa6c48b7b499f0e95fa7bae9e867cacd3aa2783a1be165ff1d79c207fbfd9bb50a56e2a1e5460fec2b8c1cdb9fd6928b3d19060ec71cb0cdc5702b99e06df7342deff3c83ccb56ce0c2cac895087ae81809b6cf9ffd87b2b3e3c3eb44b6a7df412ec210fdf1fc1e3098b297ba1444964cdb0e292428887fa4a1c076596607ff65d815d3934ac437dc56c5d369be96e3a23f5d5be8fe9faa80f42172bffa687aa163db53ff462c9cb070d29d25cb79941a37ced6ebf18fce88ecce41db45926bf52f5f48539b65359c517e9dc464b7166d2bee5c8098ea1fb58777e4d4870485b3e1331015632eb74d867a779d52105bd78697d70370f46020122a47cbf2aa975c1fdf05ef0eb62ad79923faebbe169eb8539158bad226578ae4622ab9e0e5cbe5cd7ebd0a92c8d0ae1bf103c82893576ac90f958d36b5d44055f0827fb485898bb54b34ab252d91fc41ca207231875dab002f9502eaa3c424cb67b5c9527f21c83de997cdbc3f5503114e2ceb3c0f360d19e98fcaaad57a04f03b289e79047216d8850d32c5a0bbe6c646b5729235a22c852ba23b5fea0721cb5d7c3605cda72a0277f284f7ba107c64a668cb4ffbf1c14655d0ff8988a2403b819a3810c24e563b4e2bfbf62234e4b06227bb144852795755dba52bab10da5e31e6b9cc0423892418f411e81f05205c6521615c0a11479aa3c922b56dc6bcb1fd05ea90f890d06bea696bb44041a85f20f1bb9940a1cd791919fbf40e70b4948d32622acfa54a05df184331623f3f9a1d3fdf2c6701fb88a994cc9356543a702c26fb2186fe2e314d5ce1110f4070797fac51d6b0db33d12a13e2682d151bcf12f35e501bccc0b90fbcd3b066b655bc458e21975513c6788e2fcfd606178b29110b8e64815ebffe98a05d9c19e67ac944426a3858a64f98f80d66a4b087b75b61418a8771f7c88e2574d58a8709e0761160eafae3d33d1bdb80dd1ea199b191e85146b397b17546404300dbab488af8daa1b06b2c25c4e47298f4e293277c9171a7ac63a80f7951e803f1f68f2d2397342d38d24279f38f598bbf6c402f401f0a7424f78610a5c6d831fa50d84ad7c4f4c02d0da33d990f21c05cd9db9059d2b3e39b340530a3074eeae4a2da4ffea018e9bb3fa516f61b936ff3330ebff97a732b6e875f8af83827514f58a3e8a7c1169f1453080469fe692882e21ca20d3dff06dbed8a6cb910a30329c133b07cb54c93ed3276d7f6f8f8025f0aadeedafd2ac58cf585babe17ab171c9006acbd7aac4635a892be09c534e28e66a3f27230cc6ad6b47ddf8545ad829aa14a0ade0a8675ab3198e9cdde965f265e42b096fe62b1d648e2031711922e6679000fb616d450761dceeb9622c0b129c3c4e4b9ecc2ea1d9783e451ae293c12185e23c9db82c5bf779e3d64d6feb1f9cd5363fcf07e055c0a324ba181a8c0a7854829199b52e1a0487a355628904f39b69810735b0069c8bb92fd75c0bbb3bc7fa9db62564011d519821962115d6090b4cadde6bfba62a00dd290b6773c0a3e9554257214464741cab3f268069f476f477dac7ce17e65d9bc636109a38eb7333a0b0acc27a04ffa1631f02f0268cd4350ffa0a5025bf1705bf11cb32e2bb2de1a05fb5c999a1b38f4eb160fc97a7b11640f9d8d7635214102bb3627a80ed4161f6b6b531f74942c4b16d06084987a2f549acbdbcff34a948577b0825aeedc70aa7cc0c5bd2473e5cdfc35f3bd27950f77f9ec59eea00916badd1c1875f3596ed3363bcc391ecc67679c06293976164565979287e5ecddeb1b44dd016da71118688cbc2735c63a3e10887e034b655ddc4e5293fa422c5e5dd0705e456dac61a9b8c0bbdf56908ebd855fa46180db4262350ce825b8340bb3f0176be16a4dd13b810d9e2d80c1d808811738fe0f93c3c07d203a4162100991bbaa5845ffeee3abaeb37aa9b5216ccefbd1f8b1fee0404fa9567c5a876aba43187183aa0c8613baaf8a3db225fab84570eaab325ef8fd0c71efbed0284196f2756aedab40ecaa87b2fcb271d818966c7b1c9c1071a76ea122bc43359f925fc9145bad24bea08290d068bdc1bebdfa7ee8986d20953e3948da065d5822c5eba8954eeb7cf671f73769e75ccdc5d836940f5b6023fa959ff8b26b45091cf36771f05238f9b81df2e79e4603517f9a101f24a7e12678bfecd65d22b063394ede7e8ccac6872878c7ee63e0fd8a2d60d8e195d64a29a36b641304690c283a9d6c71d3c20658d31005dbf10579e98093ab3e12ddff82191a243117f0e451223eaa69a55424aa54a843aa88b482534b8f08bdaf70ea1c9bbade091ac189052b7b4b99cb37199d990e63d37cd7b13349cda05295066fbf875b230248a6e1024e4de1a926852f755aa135e072d486edfea5e1a6f3d1e480812560276e447a708150875607c66440b4c5089ec65e014d5f275aea598d96141e999d47d19cc1cecd2ae0ca0949a0e6e70c5260552dc9c5298c747723e572dbecbe7315bfacd90230cb90b2898353c8142f1d6f190367baeb140bab854dc585961f135c0cb1e75a6692927ff433a3c48c66c3f55c3f508e2bfe779202454dbefb05ae2e08a53bc69a8ee306deb7472b828ccee8b18e87475f3ae34582492d2ec4db2e84316a82791c8d2f4c30ac7c38d14992b3c1f95309c67520c73cd2db0f8a0c397c19223a6ff9f02a08acd8024b9aa0da55bcc66906c2924007ece2f4a652f643af1737a6e5edb9b05483358c6b9cfbbc45d7afffe1e05388a7a19a32b75f5c0ae7b8de013c09bc5034591a6c199f708ead6d0be8665ed02579ba1294f9de3a94bc4461e5329cb6c023a399b00848011a6f38e6cb4442dc2dbdb72d272961c243fd2c6b9bec4daaf54b412c942060ce852304f7f14c23bd7a25d828001fad625e83ce1276df36b87606d6779ffa1222aba4768a219844c33b02e0dd49aea7272e264cbc9a0e9e8673b0c99796d6679291a16dcb942de5cc61841d0b3754420e98dbf203bb2a1d7bceddb6473618a99512acaaf155c79fc3e6d2006fb1c2dd534ba0855ad706b83f2faf3a0df3f3c895f797e4a4c2ecd97c5ecec12b2fa2769bd889165fe5545e0c4fa208944fe992a08c943d5bf978b19e2bc6e9653d1472f9f6d31b4b66188ff243743ae796511960acf7e59070096144f8fde8841e1b2c6c6174930b138af3a61a18943c690eec0c2ed6fb979386a202bb07390bf47749b44c361aacebc7d3486c14ec6c9da7fdde9a7802644463f49299ba38df868d77f1e1416919ab2a1a7d065f54b11b446bd154299df101d386eb9a25469dcd6387e9748a803d22e0e46faf5328dd3e9c69389c524e14f3fe717268d19547380b3c55798c3b396a8fbf36212ef3c267d80e80451edea46d5b458c818542f0d85c949484f1c7efa89468665a81d8a7e9e7c519dd9280ab7f7d2217e417ef4f1259fbd8075f44b8c5027d20a25d1d13fdd14f4b7cc05aac3ee727c789d1a09c6dc82c2e4a6be94de1b846b13d10989688dac390d481564ca90d75a788875bbc5c529f2c4f1a960dfbffe4ca6a6d7c0fdb23595a20af394efe77a6d059e991981c1839f6f0264fc57545e0a4de28ac2c4347bd6d186da9de322cc2f667964f4222d3610dcb2f3dac0afa5db6ba6a236ed5c1452a6eb175f55468e9b4a0977951a9fa4a2bfa3d87898f3eeb2c74ae4d6ff9a142516ecd54b714197f5454bcb118ede94e882b42110538787b937b8f5eb717d5c5be3ef69d5d82a9b954bde679cc07d5c1c5ce58fbafc52c8776ba93d27020bc437c49bfb6d315718a1b52aefa8c822ff477cdb1a408b36464be086314a40fa47e6664646802387609429729f8b697045f7b476663007f8099462a5e5dc247d52191cfb23cab887949395463172c569d95c4fbe1802862a9fd5f6e2c3715f53e12226fe342a63548606b231dfff15eaf295f97447d543ee6b0a790e025e90fa00b635efe615f7a31490e3679dca313ebc354de622100e5f69d340ca87c1d9a3ab1e3fae8bcc8810b19a317575ca8fff876ee745c0e92f45ffd0c5c4b14c4e64aaaa64c82db131c2faa73891d656f73b2552473e500d9f869ec2fd9f2e61dfd6c7adfce97e5068e47bed1da164424ece21ccc1a1c6d204c482fb3e56236f95bd6cf4359a02f1541757ad8c808651a6c59886940028bb230ec3540d3248c7dadd896e191a7e12a11cd3961016ab3fbc00d0d6ac935c842ec31b66e40c2fafc181cafa78c2f2492ff55996a929e878855ddbcb409f73df93c18a634406c6ff2a8ac87d9cd8df5fb1df3079cece531356f654059e0c4c1662207752555df05ed3cea659f40d5fea61114a13a5038279cf15127533553aebe3d53af87a12b789f50d95b113fa623ed7371f637c2f05534558bc644bbabbfa5f19e3a59c05bcc535e09baa40c837fd3ebf76e2a2c177b38510481a2f7e492d8bcada2831b565d6ce81444a6b030aa97fab1708769014f3ec5ab3cb2415fb2b833d584978507c2d2b05dcc76013822663b5575a7a73ec8c7c2723c14cc2f7862c926a35428e21f3fa7ca903a465b0ec90522b56e9153d7469eff534e829fb3876eb0fc131f1112951d1e43d189f0790fb4b58f5c1f48ea7ee251ba4857bd7e641a0005cd5a6e094300b65d7bd40b28fdcdca5c37a6a42b2c2f139b69e862e83e118cc9b7599ba3b3c9b69b3fdc9c25204f51e19d3082a1284b9e4ec64904263a69d0936240ed04eb8f9ee60abe8bd4f7ee825e5c43c362b874b9bc52f471b7a84d9e7e0e0c0733ce068f6b379761d9c238b978131e1a073af8b256358e7b5b5403e02a5eeb83ba69c3f1fca4a1ea1727c5431be1407ce0dfa4e565ea3a5457348cfd4caa30827e3a58c5e32be86e3f993f2c53d477b5121cfc46aafa7b97170a5331e600a853546bb6152fc4e05806b05e374f08e9bfe49beb1d9e3af33c663212174fa477607e429678549a4ebe82bcdffb9d2c772a746b012665f0692cdedf667b13594e3dc456ec775bc357d20975cba81134b380e6b236d9aa665c5e708da99a9cf89ee43b01f9d0a4921ab890d607774809485e6a5a7ede47b976b0a8621f1aca6e7faaf94174e45e93dc28dc1eeff57eb07d6afecd151a78203d6ff8375080dbe9e93038b5e01329d29ecb53469ca182d01f889cfe39a4a9b08fec361f53cf28a44b3fe1d1b9e42725cdc014e842648ae70661e7b3ae03269a61b25c72ba718a9a76ab64db1494547ab3616991bc58d281389f10b1e60c85a12641537fcbcc0102390658710cf8a440dc6efe9b7d96f5f289513d60b37eade0903613cd6c43a033c4f5ed3ba2d2aa1814c8fa94928c6091bba5e808cf9b737b4f944a2df058c027c47d5143b09b33cf5021703bbe7aa0ad7c1a68cca68e020890d0c37e8cf3e6b4b47a4b732980485e39551021c3c52230be90134557c1990190e0b15825be491ee4d28f095321de99c1f6b05514343f57e21dc03c897308541776aab6688ba1f29d6d78f93bbc51a227509a67bb9d5d54edc0c0df51d01e49db4ccc586c06449d461bb70522d7955114a75f11d54520d552aad91c65fab24f6a8b36e4b36718a32b1721e212894495207db12303a3e4ec66d9e47238378ae4d72e431552b54d0103b2484b3f61c949124cfbc7e538aa6a1abfcc65dcb00cd4bf9afa4e93f5714893769cf8e9acc2a6625b0822a51712461bae3ef0941acafd33973777841df14b35c751bb2347c703c972bccbf6bb638bca7705f1ee086592aa8681a013122792e5bf14afc7d179800c856a593f3546603a27ca8bd43f24e789aeaebf0580f7093dde53bdd172c2ab5da1df30c605aacf12f1af68b289675601cbad385dc3e1a3eae68b39bcbdd028309f9ccdd3c0c19d1846b577d40dcc5417fc7693e94eef618625212df3c23feda38614f29d434d37214f32d3f3102a8cb9b986e399783e455c6b0d649296ccaf887af550d25982625625395f6f01a836f587bd5045845bb25f7a7626cc8672b5a3f5887e68ca6a47108d42ccfbb08f9ca98150226e9596297944c3d613ecade1bc56f8731c9c725e1f2e6150a0f917df0c41d096fa46d534b7fc6e75c57905088b336d504796313303effd07920df24b85bbf216de4a4d7782494bb24f2f665368f8022bf7fd3517a223f64b3f3062ddd77d7fe1e146d202386535f1fc90c731ef569db234675207e0ff0e16cc48e3d432ad7b23f3e7cc79aa2bd785b4a057778e1531901d0bc9876062b7a504f34de943f2cc5e2bc829539aebf3d2c383e0f467d0ef6f29c43397b6b76b452b5840e49676554caaca70322559ff5219f4b11953ad756a6f09d67439931c38d472b94f8495e13608843abe413b7a17f9da31cada68fe765e2fa9209d234682ec4604dab1e5f16722cfc54d6fc5fad665883b2c4bacc547a3a1ab393e69f17f1df43f0abd793eb01cb279946a2b279acd0a14d625bcd04a46540c09c322fdd3f59fa6e555d344da3a4f2175ceb25d8a46fbaa28dbd0a808cee3828109974ba75d95efb53c6541f23672c12f3e372738aae417ac480be17bb4a522f0f4137b261decd3c89f42dcf84b4da35f92730b50cb215640065bfc4caf0d4160911ab2bc75ded14aa8441e7c4a46db9c4e59e8c3abbe83971ed68d92b5a5f9aaf35b2ab529a927de0415944deea2a628fda2c663bbcc104a55991f1be69f5aae356a47ec29d9c7965beb839c2ccf590c7a3b6f4b76733c4b99ae38cf99cd70fcf0fcdc290aacc72717c82b1689c9585f939a18d51dad59985894a0cea51b73a121fbadcb1d3ac00919111506e39a5c5798db9e455ed9dc8d178ae1f98b32ea934ca53c6f8e6e7a39a7d1e103bc0ff7256d0b410e8220a909c4103dff4fc4e95a39c67eaeefc67af46ad4a2d3b1eedae4fdec814c091d2f4d770390002ffa254b7b145f0796e60a056e5d63e68708389faec150a0a9398c4ed1d3fc0f194ef7d54580aff0c210005333a8b8ce446a5b3c20e30c1c55da14c45bddb04febb3ad4e2882fac52335f4f16448b2b53a1de7503bc1b9a64eee461ee1b399176d5fd17ff96e872d37ea8a75f6dbfac387d384c5694dbf133af236de28d54e1bd197ab7967ba19396c63834a371e72760fc8d130c98cc5ff6312e67ca6cb22d615e3f1242b95d6ab32f8cdbb363ba1990076167487784a03a329409249c359235b5fd4965aa234e5d804e75d627c02f35249db0af8274261d4a93103f6c8d986379e512164bec13231b9c9e55d0f7c6374731526af33460189e08c30064badce07dbda5b95f5a6b76b291463e951284e0db56b33c619c200fd2d5f2f9a84b78954ff70d89fea1911290c6c670f335a0e15d13f755a331979e6e2e16893e3bd02dcd4a96d21bc625ff2e6fdc5c277a0c0054fcea0de6faae4e7d1f951b8216d724191005a637a19b668f7095870f5dcfbafb916b63e7c06ee4a5f064718598db192a8c28a389eaa750d96d3f2a4fcb8d0c4f938ad2636585405c9a0bf891f03422ffdfb054cfd57fddc84cb1647060f90de2b23037984cf41cbb3e91c5e86fa3153921c3ed3a1882c9b4239947e56562e8983ea006ee823211441e6a51888f4d4edfb90a9932c087dad135e6fa003f5916ec923800f5848c7d48197c37d0e2c1412f500f665a4f251e36a4effe69ea741c3737f8658a119363d5a7648848ac144c29ed7ed293e16755037c8005ddcd7e6873efbcbdab470f4d378889cafb218a54df6425be489e213878ce8ac4a9e22a8bc7b73eb0634c2a29c89f411710defcb7cf4a511b707abc978c45023856cdb5162d85c7cfda0632e814816ab7145b7d6e7d6609cba2b9ff568fd2670020890e2497f52e46498e8f9b204551a5e3c76aa66f7490c875a5ddb5499f0e25b53958ade1dccd91c6ecf7cddee66e677d40d6ebfae4d304681068f959c84abd3d2a293922886ac0e3befd6011ec42cf18e24b98c09ddc20d20701591b711ce9bf58a551927b80acd132b3c54277e9a1a8c22fc96972b827ef46a3ed37a14cd216b25ec1032d363177b037294cb7f145768fe12cfe6b39038a37991ba6b2db7c0153dbae45740946e238cf64b3544ba7a78fbd49b89f0e79862b35a315c873354756b0227e004099d05dff23a2c3d25e3f5ea71e6fdf214c8fb7b9ab417e26b9e453cf562989149b7debd480a90c44f6a1bc915ccf0605679c891df0de2c90c4d2299f37cc16798e8d54f09995e68a1db3e0777c26a242aa59a7818ba16b13fab97dbf511311377cf6d08e070beb6b42cfa5a2d0e4faa118a422ebd57d1815a536a39cd8a761bdccc94b82c93835ab6a3983c061554f84c71aed1020ae8401b285a02b21c41831315667cb033ce99c08a560543f3e7de4bc9ffaec093c38d8989133ad067c34716a965fd952bb1f79286f99da5f23b700c539f855142dcc5d1ee48c67115f87c91404eb58cd42f05e2bcb223bf27be070259a66f91657f1a266678aedc49e3df8fd7dbd5817f7c39c056d54c45d14cf174e6554f643b722eabe48a71973e52666191516ea16f66747cd5392aabc5c08828cb1f46260829a177e7c1d0254ed5eaac1ba0147da6b30fd34b4a3f2351878e73c1f8ba231bdfee8763ba630e05102bfa9d798a29979d650bfdc5a8d956ad541f351c5f9eaa002baf76fe0108cd967ae6ad1d80258ba6d3948a182a80a8db5d2f4bf573bada97b8e7831db227258164e5e3e8daaed93934b7eb3f74dcdfa4ed4e823157d9b9509d11a163332d185f28bd2f53a6531b23f23aeb9ad25b09adca43fa45f60b65d99d3afa746e4e2ffa6f236e0a8292e9f15cc434adf1aad7bc73e19c44d0c10ef8347b4ec73a6efebc269366e4c9f4f69020e5c97994d328e26ded16bf707f573728c13effa643568bd9c3a13f570fbce327cd3683bdc257f8a0019e1ab178296524fcd81d643f4056554c6df3ba26bb7b3d7117eb0b0b22b012b298fa7590ad9bb57c8f26d13044c998e7023a8de49e6a418169b1239edc50164f0389319581b360eda14110073dca9a9f21e509ea2c9b7c77416b0112258f4df19dd188f21fcfa27d272ec79a563178512b551f7d2d3a57634415350c0efbd07eefae3e2f98faf0e7792b7e2139d49d927165e227d31558230cfa84090bc8e387476285c1d164efc105a7077546c2fb4410b0eb7ef308d611eb95e6b360a8ded10d5428b7082f1389c9aaea7048caaa77b1a7cbd19df8fa3292e5fbd2afc99dcd18316c380336b4e4553a4612e2d50c7591232d889820992178ffc39efe6b783b9c40b9da04860584af8877b47b24131225e93fe5086b40384817e277a34d18ae0d50bb6328f7cfe9867aaa35f06d596b54537a8889ff06e32d037d5264171cd2de7275cbf391ae6c74ae2430742f20dc24e97998003ea85f05fdfc3e9f0de3bce675a1080022212ba0ac7fcd3e0533a0f7c883268c5a45a4264a7f95d76689664b049d9d4bbe24765731c03d21750ae48ae29ddd90a4ca04bfe22f9ac024fa358365b85991c5c3f1b6a217152d3c84f68ad1250bb0ed83bc44f4d404d9b081ad064a9de5ae0057cf195dcab5ff3faf432d36070ee07d81f9603b7d53743afca9e4585394ed1a85822cb222e4580a7bc3a169255f2372898ee044cd8313a0e726362e9514db39ee4bcdc7e73f881aab6b099bbff025f64c74ea226740b676f21cf72eb1be676e8de1f2df65e3acb3433906b264c40a52ddbd75f681fbfe7196de34438ec353747b01331fc7f3a092bfedce8aed6c6c6d1f73e219003ac7305531c1e15fc59876bd57e54a8eda90fa6b3c7a67cda698a3f1322aac01e11a686e4844b658dd594a24c1de32ef45641a296d0025b178f936679c91ac957af5ef226a1abdb3beb65d3ea43e952abb999a0b8f6797670618a47f640fda52de9479cc6a4337bb71a6201b7ab966459532ce977a3d4e76f7d15881ed524e9d6ff29c8cbbf4632f73756e3d477586100eddf345eea3f9477cdbed9c5c3dbf7a7086460e4050f5f11bf42fe320e12efb9d77de983cfc14b6bb00987d41297fa036d030e44e40a781502a24e37da1ec8c1c05634f0925454ef56210c3ef9d094c29bc74c66af74773ddaa74e7c230498a2294bcc75c9f8fe1654f823647069f45b92806af80ad29bd649d87273eaeb6a468a905fe1079f2a04edcbc71a620908e8178a69c5aef6ed40e9c89467287e8e76a93da6a4818f58bd99392f9e4c78db2c129cb286b19f099bf8a94ae2a38dd182caabdb19e0429586d505dea49ea78e807b36ea4ac316c3eb32261477b977849e68bb732d7e0fffb5bcbb9ff6b0b236c4aeb64a6d962bfd1f590e975d586c44e9f793df36f21c5950fc3cda1a8b771994dbb16057fc14b4ca7665d1761b6ca8584be5325f7bb1656b11e2d0e3d476c207a21b848356c63eaf340cc2a8ce71024c0302633b76823e658d1e5c6e8fea9d8a053816730667276e99ca2a1c2319a63df486c8952fc57878cdc096c2244394b79eb9cc8cc05a74a4e6408cce167b764c47efd346d3e25335a5b56546c0482e3e66a348bf83b1fdb9b6d99d957dae677bec6bd81e3841e94fd80b9b68d57d82f775d49c89c60524166e37db0082d3bb2a8095dcc27de0a4a9400e14c9db6d25120d6ec7ab8f81de6bda651f56d1cd2fb05fcf8a6251e4d00c42650326d1a5c93aa7c613d0cb142fe3bdf0f169a2f5dea4f3034acd60c409034dac4272594448fcc1c9e32c3a42203267b80ab4e8b7714dddc57abd6c2162d7d1c21cb1b7e64cb1374842a642a652f440ba68eec9496871a30028312a0a63bf4e79f722f797b676d2aa70bb620023a5d771269656ac25c5b02c4b76bb1628f0d44fea7d40cb293848eb4f6317c7ab1ebf6322ea1bc6cb1438583813ef94bb25feac56e276d5fb0cc93413404ea229d425d43b08a1c5d35af5368c2b281879d515005914d230a5d43dc5dd3e8aae743c0e6a051554cd91f1a914faa3534b48f65a6fb111eab012a42890781fdb1074157950b124ac6021bd3674c6ff9ebc8e0586d9a69973dfa5c4030022bf472f27b13b31a9c05b3da4f3da58ae0ebb28141a6c6768b4594d8bc533e7559463a0cdceddf2d140732af4d2aa6661b2667b7f5dd35e1f85d13808658ae5b92601d29b8fb62841a356d4e8230d733dbd3977c8731edde7e49ea6aa86933215570e4bad923563b1ec5c91511c7ca0e666387588e5a520dfaf98aad4712899398a67f4ecfba65241bd3048e9ce8f0cd0947a27391e1f704f2f25aa6f4f4f51773c3dba61865f6a7fec5ad52602fddd95395b47511adc227467f50283f88cec1b2082fd6189594b7245485bfc59ae8a5aa0381d8106c9d47256c0ba8ab536d206f89eeaf6cea3b5c3b0536bca9bdd06f3e6d6ab2a9c06065b283d3b18bd15fddd3f5406b93252f5c7411c7289b6c47512e4a2e0ca5655144aa738dabe52d76a5b75813c509307063c264b6a3c5a4e7a5f95086485abd8fc218fdff10fa8c5bfb6c75981a930f7ed4fd1e8b131bf69384f0b689340babd5ad7e9e2dac2fc2a7fc93d20eaad401306c8584e47c47a99f0739141b4eb39221e4a5cdfe912a05caad1413a0fd309dbbaaa0fe728e7a22280eb5138e3a0a121aa4cc4f9eb5f1c3529c818515e70ea950ec9e7726627b5b1e545bb2326fc1dbd11bf8ba50b4bbf2cede8e7618ff98d866bd56a9a0d402eff9bf736db1432d1e3b162aaa358e72907d3cc2327bb5c66b27c5ebdc4e570c1f9e15c1994852d2abd8f12ec3c9077f8a71e37c21cb5dcc94a5546ed853e8f8aceb4f36f91dc07cf47401f6763a981fd13e4b0bb147238572122db92f93c8c384aeda66fec9b238af798f3a9a4e758fa19c4858dc23ea9b47ca07795625c26b4a4279d1450b73ce39f6cf605a0f632c4930e4a99d8c8d081c5f77afdd0fdbadce46576be9c1d27ccefc47f34a791e7e58d6ceff1988ca39f51be9fcbed58d11eca06471d8ae24f288da453b179c5890c98cca0583b15254e4a4c93178369e0c9392e0aa7fb523be1d3a27424fc63af5890b9f00207f8c53f99090c4c03d8a189d6edf3c3a248d53800e627f31fb688c14497a33016191c5a7475f719f3f55f433ddd42f4d1e84fad3f27f252f10db72c48438a96cfb907c5fcf7fac6c5e73412e60680cbca0d29c45ab52a9aa0b44eced654452a024edd9a53d5309b184349bff40b4797b53e91ea6e460ac2b5b0c38b3bd15cd437c5a2e11168aed53f7b6995565e050c82c25426c7fe24da31ed8720136eebd4b7c07f0142e4e83b8b9d119e112d99499a38dff4b2fcee1cce8f94bb824184c0e670e9eb393383e787aa61f064409aa48dc75afd00b1f27ec7de11e2e5a0e7957fe31188433baea39255b17565c2803f40ddbb49ae54ab513bc238c9e0a44ea816c8b53660d1cf89c862ba0db8ad855d3a79299d187e4c8c162aaa60baf1be8cf4e57a7f86e1f7b92e2a8abee5487495d7d2971fc7d5db374ecaeddae9b6ac29e7f3ca4e999715d10ff9a1be866f0d784c7a748de1da99f21ef23940df976dddefaa1d1bc69befbff5959c31f7aa46c819d211e690d50289bcaa595b345ab177c47afc0fb817862ad033c94903383c8e04009bbb6cd141589bb6ca2c6bae8ff990b2e054ee6faa8663ddc8b13ef622550792745467546b416a322c17679ea4a7a28c2da2ac6216b2c73815295097d6c7d24f75ff953f1ffebcf2a0cabadcebab98a3bee84302ac64206ad12ba7fede78023622b16ff9a4c6049bf10c86718e5413e64910914762edb399cab2e93aa7b9881f4684b2693dd864cf850815470de2ac70fd5e05fb776623026c6969ff5fb13e6217be248f48637f5a4e4f3f0579fc6b1d048ab41aabc6dd73e210a38805503d62dfce42877d1e8cfe45c2b0f14ae0cc231f5b67817865afba813efe3f5c18a652c142a23e8318ae5c20398fe79522a21a721f4768914a8f6369dfb872cc9316872914d6ab7646f683952276cdf31bdd999b7a0bbf9d98c3c5038f8850feccc8554a2d19bf3543a7b3888b4d52d127e5f417e3acb473e03d3a3524f59fd3fb5b3054f708995ae1e02ecbd624c3f4faf6d3f8a0d37428d4455af837536e5f138b538a90d129951d28734aeec688026afbb8c67957e78fcfd6280799460852adec0ef41ff7761e86354d5186428dda048f27b4ec65063ce11dbe7d1922aef5da4d37cd55b75814de11ddc35fcebebe256d19b4c0aaee0d11b76529b98c6105c17c23f1472ba1af5367b59302a108ba8a151916717a1b3d42db9afacdc817eb795035ed8e3b70d946c0ec2da1a2cfb1008acef2b681e5f6a70d6143b536ff57835a47aa9eba65a5ca37f36e2ebdfd0d04b6ef534166e0c2d1407305fed4f656126df60feb62513023e0936478070faf4b9130030e8ec6ee61c6fef51c42751f699e4e169cfa8488b0e5fb2a75a711ba2bafebbe0f411c3a0ec5c9de83104991c2f7c6007186dd6059ce85cf24c646f03e9037c3eb1943e00dd4f5731a1b570a85a53aaaaa0c4f76e32916cbd4e0b3151ed0a96aa7a8ecc9feb5a65332214ae1b387d8b68e0bdfa19a5a9a75f9fd3e183bf5c66ddbd0f943fbe1a548a151b44e934767c2b9a5eec89792613deabbef58fe74593c107603d1c9bcf62fb3612f5a7854ee7166223a9d04cf29bdc783e7bbc9493d407058d8f0c90256e980fd8d2f4d32843607c95565debd96437e005d2b5665ff58aefe7b09ad208a66788fda383450920d2657e2d2a9331a2dae8acb74cbeb925fe82fd5648b28594c1d99c6ffb2fdbcd46dd433bc4ea96cb4695d65cce932931dae338e17403ec70284b60fd0b021d79b447dec4b155d0a36ff985865f9a7ead3104a86517abbb6aaccbaa372a259a874b0a8cfb36f01491909d4e46965d4a6d7592311e8be3035517264d94fab463738358376fcd94628437ffde389f431098c03f9073057e938b59c915e0a0a2426d8baa17a152771d7044351c58ea7bd69c41bd14de530dc69071685ffe792e096fcbc83ee57dfb6db4271461c57efd9e47f701467ff22624b6210c2466fb1e850416594558a4e18007274322a259af886d6ca10fbc2f85dae3b82c02edded7d450d18148f9483c47d85943e0dcfac2001dfdd850e822c29f695a4fc6321e4fbb90b51eeb082b25d544cf7b7269303dd15b31578c23035bba23955950fb084cf9f81b4320935d6cf53b7e260a692033f3bdafc5128da34a7f7ca1e5f26e81d6264e6b955a87eaf1e907beaaa3bb84e8795a505fdc76e2283da8460d34e2af3d4956625d0260251db48e0ddaa2c1ec86f82f4bf2591121995350f1a1c99c79a1e53316b6d616d221ee34dcf5ad1fd8cb5ad341baea6ab294a3f703dea7949c9f7a694b10b6ab21c2f4de79b7981e866c8574fda787addeb2b55f88a8fab1ab608921975834fbc8664847e4795d39f044270844904c741cbc981fbad9a4e7609b692daa8eb2b14889df7a12fea37f118f04652e29acdfa745652abd2fb20e61dfec9b22bf2a8edc094ce9ea439342f358cc73cdfc235bc891ce8d0d3c0b6b5754f81aab9a1961d01e66df370922c086ed86e882b1c883afd5cf6eff19c0c150586741a56e1966261d7a26e0d871878f73bb1a09b9ca6b43439a456987a46928c3daee768b6fbcc5913d5eb495360222881af7ddb5596fc3a5d352d58f4543f14ae851b916e0a82305e86821e5f711def0debb1bfbdf1ad860f7ab62a92f8be639d6527c20f8c3a27fb4cd1303e1642e817adef3867cf8d0bf54ef2d983e947a4de90da61f49dd68d3700fcde351eb8ba8ef1057ee1adc4faab9d6c9e9cd91e32f950ba83cd9ce6d1ae0b27cd9383b99e700d70c2c54f97fac6686fb15fda62d6c5b993654656ae1447253581b6937f28c43145b0d796eca417981ba1cde2938b202b8354520c9d667fd8d58609547f7e34375a6f8a2e680cc780adab6d08acf373a0621b50535b3245e0475bedb652d3d0f43f9289143a67006099b3e578b63b9de1785e748cff3cff78684f854085ad1d5b4aec456d48627b0dd8eac576d9242d6664c3b79b19ea9b7a330b57befbb4c180c1e43083967af5796f4736e5510e246b173296b7bb6276c0ca633d25e323453877ff2a7c86f7209339a095f19484748fe6d244a6713b551e45d4e00237af18bab991b99dcf9b25c022db1c203e52111d172d49e58e969a7f27f5122350cc4b86a42f5df438b0b0545f0d0237848300683e104b75d08c9da98dc8bf0dbfab0d13541c3a1bb7504c65bbbfeb0aa99f7e4dfd5446673967b93868ab482f84d1ace2999a13307b724d1465775d423a29507c77443f2c257941bff52f9b52d44093289156bc456aff5c010775f224748d0e8063c396238ca3f9186548f274a0520a7bee93772feda2dba393ab31c86a1594c3410271767cb7b36ec06cca6d8077bdcf126040bdc4ebc4ae29ca77e4fa0aab1e280649aadb868e5d50390b34a95348a8d0f4b212ecc940f1a1d1d7c31aa49a4ef8d040ef6f50307c78b35974ae3ee04a6e0ecaf3dc9fe69ce4181ecd64a85c78d875fe312bb9ce20386aaf0bf0451a1c9bbdbc1d0a77a43f6a8fa779317c2c83c63ff9fc6368d9fb9ec1ff111420315a39e4c0c3cb1d27b2a2d1f814ea8255e0298a6db06dd750667140706ff3cbd5a79613393a77f0aa724471951b94c17ea977b4021abe0cb38c119188a115b8d1f8a46047b5f65155df67aaaf5a94a59a2235aaf4db379d214e6c67d4471c9f580503e8cb41a2cabecaf9852807bbe8db1710869f398a3e72a1408932d17aff6215f9f85720df3aa690500a2b077af4f2fd8b6cb073862e8e94c2886798463911b2f0a2fcc80fdd2ade1b1a04757f5ed184a4b60910fc4e7a3488a5967ad310c18eefa51c640a3bc46c4c3989edabb1e64272fff13ffe6a9705398c185720d08a04d2dc381b02d285ed7e91bdadf978d5d907601b5944c11c4c0dcbdab20df30695a2645fb02ced0144bae4a6f562de90f1401397a2abebb18a0d974cf1586d2b06171bfc337cb6adae0d0e0ed9add7037dde9473b9464cbc323fc9e632095df86ff6334257a9bb00ee5b919170d181d01abac003f4878c135cfb74369b715cc7b2c2c29b98d1a8869a8a39f7dffa89bdf99a4a3cc9f24fe1cc26b5a7f4ff36ba7c03826f6b51d9a55d4f59df37067d0a343994f50307fc8a1e57ff7815454d4bee6cfa69d81fba893e1bd29561c6abd26eb2a4247219342f45e2a92ee5cf6cbf1810ec35f0ac65dec05079e6c8a901d7c65018141ba88eaacff60c92657d10b3e84c2ef9c0ab1642286ac9655b1172cbf76c1f0cf1d129e66971db46a4fca36b23df18e0612717515ed34ae33970a38decc8c43d7a9109b32a357767beb088b724a117baa304aefd7f0aa33c5409d982f869de81781198519ae9c72277350601184f9c18cc12671777266e4d5af9cf97abc9a850ff61cf27f1d8ae59aa179764a478f3f1b87c5f98f3616e9dcfaa2cf531927fa4f46b5176e52d6bf912faf901d255ea774e1fa62ccfd8b529403bd5c376c1a3b57987b50b499b51a1513d5af8ca88639748e790ed5953df8b30f51b2fb8d1a2c4e0ab4a414a90bfc9ed6bd5b8c798d693c2c1e3d5537ed9fe6d0c315d78e809d16a9e45ef76c9aa3d579476aae675eb82b7c511bae3e5b24c97d786ce18b2736c1d513e05b0381038f65c03d94e1246ae5deb19b07e5b563905397bdc28cf4e370f55abbc0b7c191b05134699ab7ff07cbb14f8367843b76f2cd4b28e58f81b0fc1a4a14f7b87e868bfb629c9ce997259a5a1d351eedbb5a5c381f43a3dc74e45a91266f362638a7f5bf6baf6a80748759219fdb49e4a90789cf825e257d2e963c5808cba3d65cd07ff1ba5d84a660bf4fa04470ed0345aeec61def48ff2f4906f6399ce989b78094f3d9fa3ac6a1ab78f7c74e80479e999673d670f341d74a5d72564c068c9d4c67b7cd1c6ea2da8a8c94ef914f124eb7f9ac82e9d7aaeed9c64b0adf394b9993c20850b55f62ddabdc451f74ceccb648a0ad402cd7308c0af511ce8c79cd14b53d0965ae62618f773ed91b76b54f2281ca04411def72bb285213b6d443086b5a82e58062dc8b2d8a3d8e44e6b3a91cb40f7522aa650fd32513a56fa2a54d049f80d2a6ce2da6a4f581f6172db1cebb606029e162222536e065ba2c3a64ed7fdf635a6b69cd1269443a3801131cae9153f8c8b10a19392bc9d32c3ee9fe6acc4b85d7e80c9b3035dfd316bcc170b15fcd4c9d51cac43664db38a45300d2d8f3de0e8996244aabd74ebf8e393d45c9fe99cf69f582b44f16ed84f1cc317db66cf3d144cd146f14a83757e6db2781ca1a518873bc5dbd0acdbbdffb5e0b7d41444bd00e6d488ce635cf6ff092ac442a48bde0d9e1ceed1168958994a1fd134cb5b3405340a34a79b718f890dc466101f8e1ab57bf57d7cdd9452812a3aeb6ebb6ddeddb8238200c4388449849a03c7af400099c97c4d037a2c9db77c900c989b0f452c3ded89af7ca9ced5841e63fc552d16c5cbc2ba378c56a80626cd8dfbe04613c96c9bf97556ea5d3fee1b6ba37c704a399210c270fcefcd3e5194cb5c328dbfb9351043e2b2f9e3c158dc0e64964c8da5f0ed9e463c4fe0a3b6334f7c84da2ab05673e972a90881bcad6f9ece3069b56e0802d07d115468b7c3853bb8bfe705f8d809e870d380f19df680d9ced0815ec25c13d24c92e3a6982d489ee3802e299a8f4a8624fded2a4a5b566e6ba81b085262b142c5fc3053e7b91a252a87c21c572f39ddbc22cec6b500218db424289a5eb1c00c2cb06d8a7366cc675521a36795ad299e58d68fac3dd732f20399a986d852fa94ea1955bbd2b368e3245b5dadf2e0df77626bf943439884204ae67d8cd4cdf2a0170ac74ab82e62dde8077d82349659d2ebb52871a23b17c149b620072bf5948ba51be1cc666afccfd5312ee7a8b7033d0582f32594268136d7792e230ee5be359d288131e9a7cb303559f028d7f90dd16c69d2b5d8336564d66cd42a0b033f6fae0e739148bc3d41d07efa9b28c83e78ba91e0e14043b272653b4f1cb7e8610beb30549c2c631ca45b10f4279bb56a84dad6051297883ed9c4c0915741d3cfff4374dff94d893edb01379fb530865472c25c6e68711605f6d4d298f48adde9a71c98641a21733767b6117937cf281eb198d9316511db3902521af7b37d8105b93649b0694d1b544013073a7a477cb10626e62fbe16a2481d7139c3d83acb1844fcbf1b9015bd84ff8a2c9041b071d31e90b6271daef33ba19383b38185282eaddae270d7fb85aee71fce219462f426945265380ca4f0a7f46e9dcf6599230b5bc443e6fbbe27dd7f91865277a90db29ea9b691645fe5d1a24154001995edc80548efac15afbd974a5c7ca7afe1470de8ae1e16d89e203265c80d3529f5cd6add0e263f1c7ce111ef15a63ff2dcf12370de89155ffd5f16e58563da45ef0712f200e1f397141de3729448cf715b357c16b1ff7af3e53e39f404ac16eb77980dbe518f313f040c7c3534b0145d80b74e8118548041c2d62449c411baf9aec9f9dc6bce270f8debaecaea5f2d90b8b5772f0e4a6fd417a75be90d33420561cf32d9e07a0629809a55664f5a4a09a1c442919284a20ea5834c756f6002b70ef68a4aca9b6bdf867384ad9ecee46d6f3445ebeb1640dd812f691c979714f6288f62201f6abfe206fb046cdd30bd731ad158ff81bbf3c6b22fe895c917e80937e1964ec0134e64111576311b17317c577d755facede43f3118cd4c728d6069aeac06aeee9ad47f14ce658ce2952b2926b01c5f228e7bbfb8a1db107eca2d5c50bfb715e8ba278059276bfabd3dbc21128f50884569a4651e9052d572863b5b422dbe343760fc003a1029ef9d76a7c805ef2809be9f5266fecc1df866725fb5e23e81669378f8ac5510b47fd04a13b48b13cd586579aec7aa4636147f39e3d386b12079b9a9e9ca3f181769c5091bcc0059e9c292a06bc1ca10b38429bef25fc8e103e9250a6d8230dff098d0bfd90acd2478fb838078f34edbaae4a24aa97f28def02d54748496fea934bc553c5b2d584c0cf002af5fc014687322613497e55ea050b4f952c1c752d0f4273ef15000746f7cffbc2323667217778881882c31adc98bad849d820e0945baa68d02845ea2fa478af26e73acf6c75e4416c0cc660b18125276bd2cfd647899ae22af24f3fb66a894fd8595915c9b6e3871f6dc7f478176054c02394f73a31b6fc403eeb00754b89d62d751e6498e503864d1be1174ac2b873358fefaf00eed57cbfcf7d8a2ed7b1b36344a38401ae3fda13fe6e7a301b4166ff14ee53f157b1bddad6f94639a7c1ad93e6bfb402c69171d96263715b8cae8b43fbfc75b2e2ef25afa0cdb28bff91c9781db8bc504290f7a56ed300871f89819daca5536f46e007b5c74e84f43ec615f1f1ebb5db2412557fcfeaa8d21b4ae88e79035fb7b34d0c5da712bea4f40f9eecbb7c767763339e9495760dad1cbe8de5a896f64a80f5bce1e95a6bfeaf26d8a83af81543c46596c78737780abc273d2a1ac06686644bb4900f694209ee029192fc69c787d3a609b2ffef3f4150b47117d7c65ec30b1bcc3ae4e67cb8d250c43fe8be621bb4e5533ce0cfff617faf1cd23abc6f9bea862586690fe2592fba56d729bee5927f3b78aa99a4b1f24b71b34344fb5ac5895ea18855dddff5baf624d95cf0a366687aa6c92afbe06b9368b8df39fa029ee2a012c2988eb9f8d4159df461fbbabd2cfa0fc51090fc1e770f77f03b054eb8830d295280bad77a35f852a76f8b430628634762233ee218e5160824b55f8dafae6bee7020b2a7da0f4f3733e9798309c4a64e01544f429e2e34daad86b8b06cf6a43bd755fbcecd30e3fe63bfd430ee79177d89ae8d5ea449d723a9ae2fa47657531b8804e1ce0923ab2aef71bd362ef4c66c7338fa8bb0a3fdf17a23386f26fbcbdad9b3938ce36ae28b7a84f99975e5173642d29e3305d498f512cd7c66ccd9e6173e37557fe5e52ca5e731c393055da330dbd583cef93d797d59972ce75d7b90d765b9dc0d221adedd40cc5d54087ddd27fa154daaf3174b05fabaf9393fda2c4ec4ca5f68cdf172b5efd9042a86eebe24b30558ac02fdfc35a78e06f3011702e2cb6870d29afa9f4a39b07d149bfafea9e8c875e87ee7f0496789fcc69c602f150d43a2a01d0cb905af9656c744970e6e28d0b2a130669bf107ca7b1b84ed389d6c1295644fa6a961dafbdca43be13c17c00429c020cdcb23fc1730a395b4b7f2a05c7a3fb5b583811d95767396d5da42144be6a2b7d1c271fe5b9dd4ce97fcae3fe03eba5a2de049934690419291f17b4cf9456fe78521bcf104dd335583fa86f1d8fa3be8e9f13a4091a1cef1379751b8dee276eca69168bb895eec8936691c5f264a50e24e8937514db5d6d8b5a5462fa49690dbfcf916af6a6612e3eaef6bccfd430faf408f1ceca2432b728c97cbd3aae054bbd2a549fac195e3ed75a9471ee3490ab8ad7189bc56f1c318ea937d18845ff9cfa4282f1343ce4c3e0ca1f42bd08663e8f94a455e0c376c0b06dbb52c55cc68db0b5aabe17ddf7b69f4a4492fde52a4b69134f69a718f3922e507304331218114ae9c9a479471f7c5048b914cb91acba0f840a9494b74806a4bfe51293ef540370c9fe37dc48d0305a441bd07430b98079c81a4db2dce255d334eb1732181faffcbde6b64c71cb60c66d40411c2903664b8db70e79e26d690ce338abd530e8a6b29da76e2512ec2459cbc7b0162906f2a52c4a0723e03cabfb70343d53be52d1ed64d9cef2d87f976e881e38a1ecab6b87df2f15e83050856fd0b5e23b60a093669d0e6d76af2863ca3579b16fe4e56a1d0ccf5eadecf803cb4b41f5e9e027c101557a3a5fc9c3e6b7e3b528e92d5dee06a7dba56c3799f246a97e4da24e6577576b133fdfe9c581b958b798553a048c82965e23ccd8917f12b5b07cba2b8cc749607b1bbd9683a90463efada73460bf2cc71cc657656f2059cce9d5b993d5f6955c1d87b8e93d13136dcaf5027731de6368a3fcc27a0fad7981f235945e76b03aea76fe5b3b180b806abd6e8830df8d6613faa494d93f492f73621fa706349cfc2b23952df1a54d56b0d52c3c146f0f556939aae103d99c2fa4b1d4dd28c22448f6234f284ff1dc7391377d180490d9d844afcfd5007f73874da62ef6a9d01feaa20f41c3c34c4d8295d45a325eceef04cf3c3c880460224e01e3ef79d4457fcc3020ca932d779cca47bb86ce1538c23b3bd379633cae09479e75d23915290ba86547deb0c9cbaeb6ee930d56fa48542c24282413c768a04ca0739976b58557a6f3342bd68962f254502a552048b3c4ee3ac611aebebf6586621c17c428a4c0ddb14ea50bc1b57d9b87d4a654a1a0bffcce687f1b6a5472ab3ec75e14e23b6b7482841de9c1d4cafc5db0da6cfad2e5685d660f95a77411a99a53ab3157a075289d8589dd7cedadab3677bf591f9f72a340691df5c7c2c0cd4e03e2dd337d9a2ad9f97588de59c1ad56335fa5f117b9366453da50f243803d1c88da993bae3865d1a6e21979f589efd46796113917c5144d0635182ede06ab8ac1f403a2f9c8945b8899fea28da9013368231e2911913b6069bf49dab93a217c4832d83c6ff371783a25949b047e066b603a4f066db9d20cec95bd8221b6b27750de4bec3b470dff42b0df05b30617f5398564227fd09e7a3ebea2afea8632b0f73dc59d2b6b4821de4bb229e428c98239c45136207f8883fdcc0cada660c3b2c5ea20b7866d908aa0b32ce5b8dda7565f3aa370b06f8210925cd04e26c19ec3c3d8edd69c2fa3cee36eaf1abf2750bc562e1488e10182245e0a7da2221c5e7488b983b3a7afcc15fdce17158eca3186904f5c9321fecaf06c37e01db967110490bcf83aa9b95a52aa4baad30940512a08cff7965a703505f51358c9414eeb48685553ee871f8c81c450117d5e3dca2ba454a1f799d9908c391527b6019579c75c224bd56b3ff0d32073c5928bb0c6b15e752d93113a596b3d90f34152316e68935088c187f83b8daf130646c28ffa75d7d14420d654f41c715950ad6c847f118ec884a9dd45a4f665805850d9d56185778e0b48bdef2c8e4fa2d4fd24b6595e5d228cf79d62324a025944544c2d5f08ec819742d4dcba638e23403be0b51895858eed524fa0a774e662d81572b244016252f42c888b8b141a24ad39baefe46b6e38a2083f80edd8b7769c7440abcafaf04e7a0beee93e76532d53882ef1a71bd45c0cf3a34268b99c0d8417eb56bbab4043b6e467fece88a2d22227e080a6a7472543f4cb9a1b3d7c75bb93fd228975dc713f33d82a9ae60001c5302d6c75936552b21410fb596b2a1b6e797775c2474f78922ea24edecc21e630a0148779dfdb5887bc9f03947948d731f8fc8b58079878d26001ed6aebdf558d3550cfb00c1979819e44842760aee69ea557677b68141731c9e2d826e4a2e062604e0880a147ac86688bc0b34492cc0f24c4a36bfc9b06f6e50ae6fd5a606714f2f6dc8e5b7383faff3d26545aae2fa8d133fbc50c4a5f0f55fba015af36638871a5f65dc489deedd276c78e563f3b6362a0abf98678a1e4120593ce02922d128ac0409ba9e45c6f127f13fa1aa3dec96be4459e41ee098dd2e68b7314ca4770c742fc9a6009c0ba543a988e62efc4a072b24384bf3cbcf71c1963208055c557f6d955da9cdacd85acd78fd1c88e25f5a7c4c2b32ed96d028eb7d94b4f2e8b42a16daa6205260beb8b87e7047c8c2b94535d9ac385abe24361acb8dd0bbe40dead7cad34c70c2540b4ed86fcf11fdacd3dd330d56a88be596b505062e314b2f4091d3dae620045718561f1910bba1d728f1005fe85f5635fc2d6e6b207eb19c5617c863cf68a97e5205d9331655b7d2fd2569a104db66c1e4ceac28bcf53a11ee178d8091e7b9afc74466296dd7c5101761b5c6c70cdc803acf6284cd6c9dfc1c3b70e390dbcf48558c54089b7cf3903066d2a0f9870a746fac1a84ac8f23411e0710db2357ce71fc3646c597e705bca7dc6fd5ad731c2e67a39fec663cbbff95727b125996418d799371477521d31dc0001507ed0d5d58e2dcfde632ea3958887c0d8c7c467f8e73837e75ed814f82f9383792337449f3ed104cf9d7622b2d2bbbfad659f28d9a90e69ceb49fc92d0139f6865700c0f9f71d420c39792e141dfd4c6dd9a2262d57ef062bfb0ef480d4620e34695f6cf1d31ebb41c10302a2de10ef1cf40a0bbf04bc176a26cedf06cbc220f8cb5c71121b9ec27b71ded7ff26f282d085238b002c454e697cbfa4f16106a4ab176ef5c101c72c62b0b72435905dc7e76464bec5276ad01da00480685dbcaa6c396e3ff08a98fd1aed464abe531a80a560c13d2698427153e3cd3178ba617d4b527a73d558683d3f84393385e5dbbc79c7a05ecd7dafe31453f6528b85ea79c21496ac251f0f7235d14347bc431e87c41bd1ac02a3510ec27f6457718fb45a8f64412b0c91538a0c9c646b335fec94296b9e567d734005e668a8743f9c463d8a088c2f5ffaff19ad87a83bab8e1e2871b466562881bc5e033bbc178d6ea7676ac03f37b86b218d75697b04db2af9d5574c33f038a88f7347b67ea9c15373ac4132850da8dae527ca4406c3244c41fa1b051cfb9923d7d12406f2f3bbfb00a83d9cb751550c9749f62ed1f62c6bc3849359bf0ce525f0a22281de4fbb94bc6a4bd25266a0c7d1327d381961df698be8597ef5ce48b02a94af5990f76eabb59491daa32d88cc4eb1fb45fcba2c467d93b5a269cd6628aecd755bf9bd6b6a386ec13a8628a79442e95f81172c714c4768a35f3eac1ce8dcc5f035f3aeb03b8610b25d70cc9821cd02af3a2c88e9a488bac645ed4ff9b98410b7feb1515e634c2458cd544756e3991b8b9c5f62a92fd0f421e13d75acaa2481b69325567106198cc79967baa45c02fb527a82541505733006f5881f15911d61e0c49615ed268d373391684f1c4d7154ae1218289985e87a513ac3136ef8b0a667686fce5d33049d82fc3ce64ffd44a95c66ab6d5123d8a32f12ee573d2609930a6b2acdb48427fa43d7ac69a4af99f905676e3fc6358bbb15ae4036e594632cbdfe359a18154920599a31bec0a454bb74e43a71ae7b311ade06bf359e95718c23364c15111ca843482bddd15aa3284c8611da4f77e558858711606e0c22c498d5f22055885b807d31054d89001d7c89b0236a17c153ff1827b60d0c3b35350b76166ec039ca5e1d36c409c641d6490354067ff9932ac91069e508d344d6bc63b82dd910940e35ad13cbb3de8359489be72a9acfcf1f86ca4474de8240a01d95e2232b7278792a8f10a5dee80b6b364f392b20b758900e5b8a2290eac25db8f2554a7cd84055ff45adf3e66a6e10c4c12f839e1d4825b921bfe0a479faf7a2a7b2384c1c18796f52cfecfbe0b33b9c42bdec4baf79eab04b9fb4e54008c766c9c1452940d7c6747e3df064fa881f1d0d23b1aa015f3080baaa47f4c4be5be0b45c6a3687bfcc8ed3fe2fbd6a1b0d50d233ee5cca9e2c9d6793436dcf730785595d9f86f648848c390197aab8843ce68387aa6260d2c5f344e308ee4784a7f82f518beb90d9988bb46fbc1d1dfa3436b96b9d572660194f45704a33d96c378eb55fbe579ceae9956b6ac96c16cb68cc6e64356b46547621d404ca9d628c38e72017107383a240d0c36e2901b1edc094394ff97a100cda3b7c00754dacbfd526b830cfbacf9e7d9509db231ca7fb1432a2ec4ce9dd4b13b21262718ff4b0549a3cc37560b9bb41d97c9b0d3d0bbd02f6f6d1c638cf2580c165e952b32c399e87debdf81753b89d51aec7848bd4600a413dec713ba51d98975cb0c5232dcc875abea7b8d31031d1556b23cacba0bb3f147040f8ad5f28dad10a33b6e6ead09ba621afd4701cbb5660d25a81d76739be1ef4e46e9309f373289c530e8f17d46ac8d32f191bba47de545b03a4c6211a6191dbb00ed48503c3c59960f1ced5ebb8daaf152c1e232ff321fcc864ef73f9d08215d7f1c420ae750ade7994ce1ae52d5fd6e9b1068a617251db9d7a128e45099ab21212b38bf3faf1711863711102cfbbec70bc1a1c0797307c4f94b247ccc3e2c12245dec64d31833c3fe0a749fe6f4ea01249366fa4fd086e2c260e0f9b1698c893cc6ae1e6efeb495a10e2bba68942e30b0fe0410ce64905b95f2b6ccdc5677aec94902de9e53d435ba34f0a6e54e01152ad3fd6919e98efeb1abc8464df22a11245c29d576d63864a4341219296d79b3a1f73a75bb6161d78fe44a9c02d191ec1067daa88bb3fb4bc6ed80fde23d5f2ed099138a47acf2fa3431d391e30338c1c26069e8e79ffc2ac9a7bb5b5c4d798f4fe13c340623bd57657c3b0fda177cd46491771b650f586bcfeef1b98266d8904d36294f642785ad13c6b224474dabaaf5412f7f1d6cc91707333d1ca03dd2a6d84c96d68adcae7d91e1379cb21e54bc4c305b5755c28a65def4819bf15df465048ba3e43031cff51a07b4030ccae462739600991287d12a029eaef3ff7b892fbf905d821110db96a023baa7bbc974df607c64fa80f36b6bfb58f9f6a12df5663f470715838e29d7f83558b8087fc159baa2182907d8903cf5e60b5f89747cf0cb5e9036855d88961dca8e62169790730abc3bc8ab41728b49ea56f7076d360c2b4d5ca4e5b9e4fefc765023f0ced0698151f5df198bf83b5a76790a01d45ce3078f282535326b1f0e4efc6fc7a7a02035ec87538437aa97d6621ede113e577bf43e03430509c8c31c459fd553b74fd3683568b79931a31086c5f817071c1c6d930f0e627398f5f9d9e09a9c291bbb9be88b12b8bef1f6c4558fafb94a942b249ee95e1150d7f9bfbd78ef4cd7ad024c78a2d36bd1c90cd5a53135a00a7933160fb1ea1fbff0d6f0ec71af234d3cd7f7f9d893e8dcdd90f06f6ae799717dde5d46281233e31ea60284d10ea8e9919805934f1f6560b5e363bc3e6149e90342c1faeadde4d17b236dbb6613ba6f985853a3a559e55807c7bc6c9e1bd44c05054881ac289d2319b348212dc5b60a14f8d02ac7abf7bfd05578cad3f466e5d144075005a571474daf0b87e444921ab2700c6b53e0af208e9c565b5aaeeb379e5d69cbd1331f5e290441b144283e7c6ee28398c075a5e8191c9bd5419a5d35bb6906ab8ecdf19726ac9dc3a0acce496ac84df66fe93c9f853fdedc39253e0b6e710eb1ea73792f7100bcf6b167cf0f57b4729ab2759fd8cb16a34845b81c2fc2a8f18361de582cf95eb18186cd2fdbb94a8b01dd20314d85707eb0031418b4f227ef7c25cb4bbe383284c9bb8fa36f96ba2b0dd7552163d916ce1f6ac0c3c26510c448bc07455dcc7949b44fdb43142c91d299dd9a5114544b4a0c3ac7b18c1046221b3f2c10d7e2778cf03c82187bf11e8fb2091c703f44448d371b7630e2f8b6d99bd6a696802eb09002a2c7da1b38134827cea564e952d3537f162afeba3789f8f770f233d8fedadb11c9b9a5291c4551c28ef0e046e0339fd62159ba5a2901d0edf83e90e92c9ddada3a907625b92737e40697f248e341e0928b5d4218e2ae377858d71042b7f2006e7f95ccab5acbcf8c3dbd36877cf39d9694d507b1fa16bf5e98b7a82e6308b9d1a8f63e2860ac359a4adcdcaeff42a18c2e0d7b6b9379516371f85b160ffa81f1fdf1892885ac27b939ee5f1829ad8ccce82169850376d58f0eb0c230f9bb1a535d283356200ae8bf3c9d6a2a23481be88a030fc57831481a48a825173ee930635848f5581d288f19ef45046c61cb667b51a6f5860d29529782aab6ae9e869aa686dff43fa7ffeffd89d79b00e21317d2136627c4be03bbf79544960a2940a3ceba01f41cace0ac6a4ff504c4e4ffe49926b4d150043df86d206775076fc038adb02ae5af5513802de72bb6f3281a8b92f751944dc9c7c59f5d99da439748746a4a5b15c628dee49df973314b111f852f64414907223f06713f66aecb04a48b6f88e4c07050de8bb4e5d7cd20962993a10727fbb6cd4343ccc281f85b01a44f27761beabdeb7deca60f3fcb1d5648833fa173658ced5fe7581b32d01c68741394595aa39742c6079f7dcf746d06fa2fff60b0bfd559c0794fe5e370b801c536165dfd86b0d59f4dbbc3fcb01302822a18d874db1ee41b9604486e6f2f14250f35e420e6b008d37f53a5f60ad94b9eafc4a05554ea62f7152bd4c1887fc4e96a70c57d65a18125c84046281694875ac775592989dd287f5e1a96d9d9142ee649b87cd74db18d62161d9bbd102a5ca77d80854197c444f5dab77e28969b3d2593f11d7c36326ce799996b70728a3473991206f65d8bd2d8b6b9ddef0be12ab5324a44b37f94bd06d44ecaa1a20cf07abadc13af81ccd03535a711a8ceec87235bdf269351996cf92dc5684da04bce9504e1ba6b34bc4814f0c72fe83a5e8c2b98ef93c109b90af66fe3587ac3f5580e424cede037f358d0641a5fdffc2e11463468558fae068aad8938f1283189bf8c75591afbbb9c5dad4783262c3bd85e8092464f37dc69b9de8572735124728a2149b5c7e410d87b9a33b09138147f030ac1adfa7ddf2e02630b08a1aff6f74af50d8a2c0878f900cbea1ba2ab1387344f03e4b974c8d71ba02f975340eb92e3ec119dae95ce9156f078856cf717163a1b601fcffa99d4ce363daced6a8efaac2c9d8e51cb0b2b91d4d3758d6af4e5c1fd3017c01db3eda4918561a4dbe4a85de9b50158249bd2d2748670d6e5d4b8639999e3874ef93e02739176d5844ab7f61b507a531c022769df06af9d488d3a828c65f3493375668a12a5508a185da232139f4e8fcc2b844c733ce7b95049647becc0a7be49461e424fa6744ccb35d040938673e20fb894a384e5b8578c52b005e6e898df3d9e7c23186ad005e4a075ef057c94dff3d18751ebe0cb58b41912b025241342c5e91d24672ace937ec9c785d4994c98ed9b8988122e84fa0bfda9452b83c644c336b60426983fa831eec637589d2dec3c69c433abc66b2fd460a77d63a0e1231d0cd4b8b416dfeb442c3555a2498dacf9f5394ab9b10cc48be6c0a41d8dc69f316c4ec56de250ad75db5f948602b69e6bd24fbd5ec96090c2101d4af79c4c0056e44c581a25fd3b0c6eeccee940ea199c4bd767b45d8a969464b2098371b3115a3b0c60a602220d6ac5682cf92120050349a3812942a04428e9e3bc6571ea744d848f1fbaf80df31a0f52efb34b7a181e7008f36dd9d621649f3533c0cb3270fff4738718cb66be3d7699bcc3ec18c3ec19c2008da7e0e1a891a26af345aa1901927f4fc11b1da8ba7ee0e993ee5c27b8e141fdefc5f35cee8fed42d4b56464201f00d4a90d965929bd2b659e8cf949a9f91e5a863c8a454515123affb558b1d5f8d139df59337e260331d0493b3162a1901821d4be8f331ddae5cd5d9168ef3489f5b893b3f0f8c271457a29e6a4b66e240198a643803cddf56f287cec9d9c12a43512242070018335486f12d45ffbebc5bed692d81de74047bf352bbbfeeeea5c73f9684904b737b421a056a7201ba4ef56e88da37badb0335d05d421a5817c53c4361661b6d3b88d0a3c9b9a75130f3cf3b4bbfb2aa557e32bcd66925e42e6fd39527d161d0ed7058061a6e3cbe707cf54550205c08ca9ae36b18bc857149a8cca0a39846668c538bc091a85a7491d832b0f8b8915a1125f2a9588a894076f515a51c3f111722af1dc29caf79c8890008c0fd33ae97aff0960831df81458cd661541a32300c9ece9a014cd080fab22a38dc0e22bb7104b0534839c6cecfbd06cd105783674a8c57a7f8b68d816e2610d28474bf788c23b5c779a997cde48c29e5b62cfb2ce196918979d5fbf39d5898558d4586d69d2e65b99d384d692a7b2a8586e3328f5bbcf353394125339e9d2006131c07f02d0a88249c7c965359002eb6d48336abf4a4c6b2d1d937f6410f8c3dae5423eb17b68c7f37c6fd8d95a7717b5b95b3eaa7b772f880ddb77a88e0984bd415e7903babddd1406b0dec54932ac50138b2ab9800f05b2cb74c7ae147bb659df23f4e6461c18fbd2a934b61df4f04a3d10ce545a8d3a38a249b9a2d02439e1ff3428e7b517730d433130a5948b39a1c1c832a781501bc0740797be645ae945d760d4bd706fe67596fb590b1094915bb026dc84c9b276382460b507c90e604daf228408de9f0f03699fea5781cc327f924d986e60aec994363aa51cb7c689b8111afd6374e6359d97f6feaab6bf8c596a647b244ca0fc17a9498b4f87abd66458581453a46f2f30bc44582cfde7e70114909d719c02a048c74e063c09a0d6e4639e02a1b5c4d6f934dbb3be783db7f3b48eccd9a0546cb685b07208d13f8ab3bd25a84197a68b255445ad8a03bb0ed176a9759f2c69aa479b577f835e68e560d08671d66f54bf411f75252206d5aacfef8f166635f7104df956ff670c182cf515b672e8aba8dc382db92feab11b2f2de1bc3b521af6af0d53dcef5eed81a06c571d8e57ec21fb189af81aa284da9596bf91b9c78573f97cd73339b19c681981c6f2a038caaa2e2c73d6819eebb4c0fc21816ab72c557ac4a027a05c527ee038c7f90d500e38afdd7c8b587e11265c9ae0566b3c3dbd5ae8f075ac6d09b6261b2a3c3ab5cd3d58cca5aad0271ac152562137e606b44926b2b22f235688516306600766357f8bf3f6a0f88ebd94b8f0a23a626c43b609ab99e7f82b5c6fe129ce27143c9d5310e1a1aeb5087d88f4cd24cd53ceada5564a94cfb1b661e756e7b4fef66ebef7487f54cfcbbd1a994f4b61f79c502f448c788b642887a06a7604460e791db863a7bb7a514152935bdef2f1d3bd62d11faa01b0b324e225a7515f8fe237a0cd725c54aef729bf225e801e35fbc490624ca53ad6c1ed0a16697cc4ff7c55364971cae81c57c3a92ddd4932aef55e58d362c60eaade7a321f380fe2386a04d10fdf0a787ecd0aa8901cb6e66f373a5b1993ec47baae74fc155038744da5fcb8415e22d61ca77a834ea841e2e91fd0ae89e153ba0fd347d7e8be9674ec55501d04acb69ce40e2203f465ff447a8a2a7f068f953a953e335cc03d81aee5859e7ffcb64e698d0a60b05e97db7f32bcc4a3485359b8b4462de5d4d200202d4db52b5d84ff0fc86c4ee87b3cb6674dcb6426bba00ad995b4750902327243e8a506b4c53f73fe176d1050f4b420d32c73592786fad5691f427078c4c1dbe03af407527ba56a7324053c4dbc3148543a7eb821e0b3250ab10f223ce9501d0327dba7025d1c1cd638c903aa8546919b8fa0fe3701a05b7251069610b7e67828b9547415afbd25bf950ef85380d410ce6d5fa5d14912ac1be3138c60d02494c5a84031277ca4502fe393f64407afa35c28ffa4d074a842ac71c73702570e1ee82aab23b5b9b68c1e51425a7940afe261b1463b9aa01c6bd336f91e52c24955e43a10716df2154ee9a450b8e765f20930dbddf9d67c6f0ebbf096565b95031ed2ee32c26ad5e28348266049bc74a343acd7b70192aee4f3bcf45b00b2c028a275181223959255759e798763fefdedfae4d6d533c2bef330c02740e71df95bd56750421652a24590238eb271eac7fac98e544c8802f03bec4e89db9838671a6098f5835393ae6af87086d9ac8782aeac5e98e6da74ef139af126ccc8d932db67015dcc0cc7517e70550c7209fd1b80d0fdf1d7be365c91bead771c2c2050b0d789c2dc95daa9a4b3d1dc58e96d345d273067bd606c225db3ff0ae2d34a6536b4a5cf4565ece256b2ddce44421fc367cd8289c53231c71ca4e383142cc6edcc8256004e650795586a9fbaf304bef221a627e1c0073e74c3c4216f9cdb4c95dfcec9201fdf418f775a558920a024885343bc73d7ea233c4cbc52bcc5ddfef1a8f61ce4621c40baa5e9bb0dd663f99f3ae167352356b2edeba0539746ce0fafa8b04200a98735688f535d5a41a9678e83a397734ef4b9ed98105d7af551b1d23c257e9d5996f05d2a5aa7a583a43f8d5eb226b8766887b113fe70d24f6a70199d19f7b987b7082bbaa426e8dbe175f5dc6955077fda70161ab568a8175e9e11e621f849fda8544dad9aa4cfc97f8c599b8e3c3e61b13a2fbbcbad542c84d4297d09192ada0dd74a10b09a6d9920da9fd1162098bb1902bbce59e352e5e2a95a7d910a01dfbc81baed5ae2509cec11184ba4d8a5281e05ce661feeca6a08c42ee2438eeef93f1c71d77143f8dd0ff67cc969c37f302c7e9ca4104ab8c93e1713b859266f8e9ec61e1ce89d98430222ca06e195c3ea3320ae19910a55ccbcbf6dc00ea16d583ab8507700a3b32b2bd0c1b348ffd26cd92f4e77f498bd88a4abb232002e093334d1ef8a6235100603a705ba0b7d178827a3cfe45cd78b716917df25ea3c6ccb48fae89b007c85adfb7b04405f3267d130487239e65406ff17ae8eaa84acb3c1437e2dd082fc6fc9fbdc1908ee540e054cb72a25fe5d87c1ecd2706e5671f0ae074c5295960af63fa55200af29027fb13639ac5a80324e0f7c70ad24d1828ed194cf691b4033a52b014faa0d71492a1eaf69dae0660cf6d5b32e44476ba6b8e73c40eb39fe8e7873ccd50b42a8f709f808e0847f58c2e5cb511df051824649fcc32a948ac4b39bc4673bf02ba85a6a4d188b3e49fe18e6fc78df2a3a7414b897f915d85b76f95318885d47a7b03f67047f5a1af342c658dfa308c790bd5a3566a45f0814c09b681e9c23690e2744f0a7ba20ee109cd6207b343d5e8ca0994b656dfc922b86fdfe56dd8a541f723a4229252088bed4e3266450adbf0b27c26a7aa72f758c8d38035a1e04afa1e370b8590db6555269c672ea1bce9e783449212608ff0bf15f9ce42190964a99454f4b273d660368a67d0f5b0a4bcde78be8594853eea8bb9a7a1ec9f89a6e2759f9174cabdbe9515974600b4dd6b4964a3bc878f92fa6937eb2ae663829fb8a0d9ff00dcb667499133a7bac4e684d3281ac0c4c160c0377a4c3cfc99b054c4f481aaaa072845a4dede5a57c097f6e65ae80f7ae0f557b0ac8b0ae445c36ec829ce90b21cf49405813b47dabb6843d8ede780124153bcad17eb0084a0b3f585b3b6b6f570f2f6a715eaa00e14f73416a341180cf62826c79757b0d66497d6bc507ab0cb8b0f6de1dc83077e9c4fbbee749486e30c294c5e80d07526a916ecec869f34347ccb0416079804bcc834e7b4799c25b25456f785b37410f139c3f121f1a205f1ca26f6e11a547d823aaacb11caf80ea5c669da908257e629f701795eaa5ada591bc6956e22fa41ff54a8d4589514a69ac561a9ad98d50db1540d5161821a09d921fd4be7fd2d03d2b296f0235a21fc3eb29ae55b7702eb67a717e7a84fbb3a2dc6774f68dbc738162ed99993befb8d3fd18e5dd60438f8832955be78537abe2fc8d690d3ee95de30db98af7b6577699bd9ac80e4ba3ea4300af88fd95f3ba4a7d2e46371a0176c4e5e3406be06bcb54247aa07c9bb6051479a0332e37adcf785732deba1ea381ff80a0441f5bd6b461a404e6f79ea74890a441865581d2ff305d538c9d0ad911059096485bad453bd9b33a891ebed339b608d46a3f4c939e9932ba9cb52dcc0de63a96af2f0f79d047c4f37ff6b282b68f2e2a6d105088d65c5869e0053efde6a121c3389b0cbcf382da5e546a082e6aa3c8134b63d9564607f880dc632026124fadfd7616c523869e2d03dcc040908ffc9f1eab3d34c2a1898c8dee99c44589afb86e774042f359d9b27771c6fd2fafa8264ed2a88dfe461cc058743493e9841bac6f787c7b7044835439a55275a35b4ab32a0878c6bca8d61b2f7b29629d6a0c2ae75b2fa0d1b8f6cf0a036475ea6e15a724236d2cdba2e8786d11e1b40e2d4694aa81f59e06174e6a87dea926722481a06b1e3319eaa945131515963eebe80066aed4dac47d97f3ad6f68fd3322ea593c77b97f949459741eb2df531e578969a0710a84f441a52e73e12a227ac69f688ed1b20f167345b197dd5d3c13003f20679c38f6d3ef67b9898394e677d0a4a191a5e0fbac9458a21c33a5b53b74782d1999b383776a7ef5613b366daa86f99226169dedddb28500fd4d2275d9f67d7377f1c657cc99e21b022d5f1cd00e3543a7ecc98e20d6690d3318f17c0b198410bdd4fddb359133bca93eb13fc02d6dab414afe013b8218edb12adfa65f4862ba599be8060ec781a7ac78f5e09c49c89c953608e254e3311c81808e7dac05436b87c55e9ff94e461560d971f2f36026e37fd786d495b1a9228254059f37db73b4c2b0868e2cd36439c5f6d8a31340a88b69066260e8dd349a9fe02ed823165dc3c252c4456c0ae788bda1fa85320dcb6b0ec3813d197cb1bf99c2eaa8511e2b968fabb1f4a3f9dbe2e5c7819752de2161506dba06e19bca427448226d4d4bd98e4b69dc5e94b43e948e1501d1581fc8d887be35d2cdcb8d5595c3153fd5db3a3af43d24ad1fa9fa22384794e1aab7414ae8b58c049e4b051ebf5d40c2683fea2fd9dcb480d5fa3466d7bc042fe6c3fa5c22ee90cbfe7e466b9aa54331d3afff0430a22d9d15afa643c01b06d85585087a3a1c94aff8481be086c159feefd0f6dac234da7bd6b83453a38ba7b08a6eec3a89161b6825bea06c9446efba699e1a936f8680482495715d82ceb09be04f0067512bc4a2800cbedfa6cdf30b3e0139192cce137139b18319a3108ca78ca7c38adb6efd437e3cf5de9a78ae3d9db48c87616b86c659224668ad9a847a6c892ddca479ab88a31480cda39520585b538f5f50af001a2cff58837753f0c12c0b7d6842b8472ca3a436e5226629ca1b883946d751d9f45fe3f6bd8441abd3af673be660aaa715b1dbbfa2ec241c7e8576554b538496408b6f7670aaa923fff1a93b1cdde203d273f521e51babbda2adc087f2f0d0cae6997ec5ce50b7d398f8f6c4bb34a98f9639748d448fb27813b645b76a7d1b0c9c448c8892a8b680a9caf948df8a0a1ba4b01990a97517baa29b77dacb8a2ec885ede7ee0e3abd439182cfa4e2f3ff03fed594c1d8cb6569eb85f144c4a6927a2de00dc0d12411717e8128f69719e9de496ef5e06f59d790682b366de55117e95e5b13ccb7f95e69d0a67c43c709e4290ccd909b3bcdfa8d72ccd69bf03966698d2594cd5151b15e1ff6ab35a168d55d1dcb8b3ff83b96850bd378a88f6b0759d6ea78b71d863624c89f6f0b82edb8f7fd644641340c1114ef0905129fe0495affa11dfb2af31fa1e146d604793c76e50c60d178c9ec7e77f7bbc6f79d27383629a70667f9354b4fa0042dd0cc22e02de01c9daf04a3c7dd89e732216ea09b039f1ec95556cf22f7a7797bc3a439588fb10287a2c06555a7152ebdce09cd7b601797ec5ec7cabab698f6b502ac6244a40f75d37b3e5b9d0d38ccc625db68a631b8498ac6f4972fb8622c0717e68ab850798387212a59a27eebb3a4c0b4a0d8802b52b932bc1a0a7eece63d6348ea1de98900fba090badddd2d37eb5690bbf0170a179620695c0857a8f22aedd34d4ab2d741bf15286763df05df2749dee128b0f80ab14bf1370ac03db9b45afb6d15a2a96e86431c39c9be0f03d0061ca5559a687854fc395e75ff9e835ac249c4a114ec8a866c97b9f4cd68ea3bbdb533843000481fd43c2abc167016fd676780db8d67267ba2cc069c0ff34b3357570cfd69d415e6c8a85f55d18be042cce271beb39e27bdf64b624300d56049f0d819a3cf8ca6efc0e6663a5359200b033518e1beb452096cab5ebfd36250fb1bc9946814194b5af4d538c3d1fbf7a01e7e800b13fa4697b17ef7f65e8a22ddc1ab7187314f2942656a00194857d417815749493b4523471d71fe09fbd307418579e0133f5394a053ff4c5f385d63daf5011d1c91586533902010d59be416dd347114d52e3e93e96213ad927f2ab6746034942ff65693d1ba73470be4e4e8effe5965cc853c7c3e2a38fd071b9b1f9822cef605cf62b9fd38d0bfda208bb826bd158491fc2a1e2981fdf66d71bb08c3bc729d80393fe307ed56f41e6e285c6cda6b6a3a7e473c6a5d6cb244a61b770b3714a69e845a0c545b99a0e28249e8d89a16ad162bdf522f99e2881feaa3674abab03783ed0dba0940368791126f0d4b659e4e5e518547475900ab8f87d80fca918e532cf13da095441a80854554f16254d97c1c1cb833917a8b386ea6230b75e728b88aa6f46c2df6157ead5ba2b0dc40ac9f54ed44710c6b902a2b4235c2bae50316026d40e94342a147ff6129e6b268089b3c8b897b6943750fcab791bf2361a12cac4d5c464fd7d96df0c0dcd824e61f6e1ccad2f9f8cabb3bbff0e04dfcb236d584dee52aab927cfdb138f2a34b70aa37ba400d99b8517277ec80ae4a0113096e3ce82e7b6dbe8a2fe1e407f0f3989be93130873503d1a72a113b9699d8f165a619de505dee2a8ef9b0fdfb00c186db286a68589c89e60f4c9e8e330ce2dc0684115743e44e7bcd5a2f1887746e73c58e84670472cf12af65eb8d4f5498c27727f0c3b92229eed8decda11058db47a32b21ce14c782100f45b4dd91ce94634391f0d5be21da7c5582349be5837b725fdbb3ddb42fae1644346ce3a6b9c14e468ac33cc779adde52f6ea92391c14cb296c65b72b4aba20875444e71002990e749caa53f0f21746463b8be7138b306e9090c0751bf4fd12fba41f12211795025b6f84d13ef529479d9125c1d1a9eb241e6a92ac3deb565d0def9cbc4ed0f401e8ce20248f24659daeb8134c2e519f63747997ae26b190c11feed6978f7b4b86ac938f7dc5ef5383971fa260ec8255f2d137fd730bd70aca63eb95ac9e0b55ac5553fd2ef4f62a74b266b769d378bb0d3d89f7a90f9136c5195bf271214cafeb8621aff3e57ef06f72d6b8d67e68fd27c0424522c293fc13ba4a45433e6dae0a95a1a6d2e79cc80016677a5440c0a33e2e9dda49d8b29d4edbc479c8990919039f2c61268fbb3bcd7a4cca128247f3f1cf8e7b35178137b9e53d5d8b85e20f3492e2a8f7532e926795c0f2a036842d729d096fcd35cdcbcbc7420f53e60cd6760d8a3e7f23b8927757f2d6e8c821a969a64f0f608c75c9d80bcaea3bb97687bcb88c859cb0f03ee41e7fda02209faaa08d86da0657d0012d7299189912af803abc4a1ab28348bb51e92aabfca9bcb9fb7a6e10a1cf845592ed28b4b40935747233841d16d1aba20ad0394186784ddad7decee5e5a45807ab28ac5c6e6c4933603d9a19ee6ae1869a05047a14f74fd62ba2ad312630d894d39337a7e99f62de33c3dc15d9b3360e571a5185e27600a5b7f87eb19fd2077b11bbc00a5c8351285d29fd59965e76e86d38ef37cfe72b01212afb5b2f76d5bfd94d3b8f5a1e0e844ef52224a244621ae8a9a5c6a5d19352a2a849bf7f5beac085b69a9373d5748629c7a84179e60a644f8f8520462dc28f21db32d07de6720322098bd12ce1c0ef793de273933ef78141a6a1dabaf621d62ba1de3d6bc668727a1a37e9e0c7d7d7783da25b4ec39bbb62c7423a147fb0c9052d2ede8456e71e3bff91f820af73ec17ab7fea772f02126e365fd0c06218c54f1f41946e990af5d3554040134aca3aadc31103a420b9e268cb81f104790ab1eab0393ba08873e8c5c68ed7f0d0c9618928d010113ec0d3f3ede58437ec3f3b540593d3f610375e936c07953369f534bd6e8b6d5d4565af1d790f12038e4a63ad871445b27a77626646efb0998ad5011ca8f93f2ce247f39c35f5ec65b26e669d15548875566c4a8c95b42171f7db24a58a76c1bf0819b7be6d187d50b23e21045712f31fb12f642d861fd18fe2082b120213fdce8650fccce17376b48135708b33717088aced115f61e9df82ab3a45765f82fa270593ee246f810e090ec82aff14b40eab09e4b2dbfa283d78161054a0caec0e790d83feaa135f39cd6fc7c53f56271155716d51a113519ffba93383fd25a58d6f5c2b71e6d88447298d25f3a38ea5c1ffbeabd4fab95e7f85641d3fa77791db92bbea7d919b8797925565780b284e5fda824de4fa0d4a99565c41df4ede8ad9319f115afcdbc48279e5604e76855f8bf26a08cb6d7170a050dea3ab1a417ad4e27837a9de0a85e2ee85e0f046f8960b0a65c6e5e7ee8a8674408ae8f824f773b40365ce02e9880ce046d15800ee368ad746b9d7d1bdb21cd1f830a036289b5e55b6fc777f3b8b80843dd31185c5baf13081cd34972c95ede7df15b444b04397f53d5ba6717dbe90739b90a0bb49c9f26938411a3292825cb5349480d857e66bb41c60fe5b7dfaee14e9fcaadfa8469e4eb0fa09be18b8061e3b15d91ef27f212632f606f0d45e8366017e3fe2c841c1607d4e7f1581bd0486fa436c02d8a36c8c9857259682c2995ba02e7d7e52626a58af31ac8f385ed9ed6f5303d877b77267f68d6620d4cc64b53c1169d2190ced9dbfa580367b11bf1d3df91a9134c5aadf6bc05eb5bdff68053d6df33621cf7aa14993b2bf1fc150c90a480a2eddae135f23c8419d7a44db2b1b65e4e90505f583a60205d064efa950c99a15d10222bbc7fa314ed232bef61098a4a139fe2dc540d51acb0d4bc28fc7c3a5b63e25095c86eb0a0da747eb836ceeaa9ab2b6fd9c987430223f25ca4804f5962aa6c7a1681089f32b97585749557a40593ae6428511c57155db77e6f48c60179e5efc1ed20de3203d34536bfdaf0f9baee6fd2de482a995a1d5c6f6c92408cb58ae5ed92632f2f2b5871fb30aca41883f93a7d660707cdc6e606efae8ed634ef8405fa688d28aa23b134180f5e99b6c7aec4b5944285627a61f31a21ed84691c81dce4b96aafcffaf53666c785bc009e08437b6a9521357ea08a05c462e812d7859902ecdf124d92c3ef6fed7bf5a6b328820812d8733a4927e0d7bd561ce2bbe54f7f80d7df1eb06371597a7162c80c6870238adc0fd44ac791e7797b83e0716922ad6174db4d404d37c3a6690b0a969b75ec7c6918cca22822595ba3e725cca3100865dfb9aff79027fb3c1db1f6f4f1296cc09645d729ef76775b591b97cfdd34b2a13a1301da96d88a5dff1b0bf926b310b8a5dec79c0dd48f59d536fc43a5767b500b5cd605e4397e48aa9df4dc76927b01c5608f65ed379b8ff5c3a13d7266a6724b2ceda9b3f1f82366835afdd8320322453655c86e243c07e1f87050d6dccd3a666763a9dc8c4bcfd34fc9179a27e56b9d20e2b0b8ff4e5b945c4a4533978e7e4978f5eb353db800418515a64c51963ee632e3f49b17902a7b4ef3f7e62d7c53a425148c319cb3a1b94a1d30c974408cf3374abda6dc4599f68dea0924c0f3ccd9e92647d7e2b7474b59ab328ac7ce027e7cdaa23ba35160dcfdfa57a8e87bdbd8c374c56f2436311c640d1ed50e1059d1bae9caf49b9483adcff3b6540c5bf5342aeacacfe9b9f8408d995da3e14e4bdcf5e839a69161f3963dfc98b74b80b7c6bfaaaee41ec0743a79de922cc3d71808c23e98ddae888b726079cfd40ee007f125e914bf5e16005a4204531e494c47268726e35848a9bfa0aff88a27faf38243a40dd20b88e30f02f4a936888d8a0fdf927c8bd9216dae410d76ab8b02d18ed693b786208bfb1f558fd56c97802259d463afb282b9a752649e092eaad61b1ddf2fc3aee9436f5fff726cf925b06e0570cd7499b6aaa59254f21cd6686132c0018840bffc50e867296239bdf9140bebac7b37397d26ffbfde6d3bc57dbfb65a043c02424bcd08472451b6cad455496395df168524cd406531ba9be071d3726fbcc92bd99879b74c50f21c5b757d98567b3c8c2ae919262ef806c77c7e828bd9457b9195c6da4807c807153a92793d05d60904036654bdef1c347d63a87f7f5e63c25337d45c58d0911b011ddea56b0708396d4939414ac1ad926afdcb338d83966600c11506b67fa22867eeaf84afeb6936e42c62efa460fb4b4ad518413daf8eb38b23b877dd04e0013784d34e433f0257d47bab21c2fb8be8efcc8ae224283ef3156094de908bfae699e484754853aa5d3a03532ec5dadc9ed280654fa1eb1d52ef8cecf0cd588764b9cdffc2361c246c47c1ceb41f62777cb2954e340f2c77201e75342dd99b378147cea78db0ac4014144be8c2d760d62c8fae9a7e2458a821fbd65fbd9a485fc56163a57961e3b00a4f807afbddc1abefa37dc92a9f6f57cff28647b739f1c72ed79882ebed9d31e7f0582a0ecf89bafca49166acfa00065489de4f9d06238dcb460091d55abadd5fe6980d75880d3e8aef4289276b57a21e3b12f22d02aef0a8e948cbca3acc716a1a61c214a3e015dc22a9bc18887cf19c72e267c0f84e95fba02559301c339eb63227632b94bc12ce74a8b4d697b4f3180805ec1a8809ac4e0fceaa23ca747a2e98bb31c57865adb389f20ebe2505906a2e57b814b0fe284b885d847d182843e8e8e29e23e86d90b51b9e83227159ce49dea9529bacfe46ba75a28d52b5a218d1bc4fe9ee335eda043fa63caa24cd1c9901e591b5f7efa22812ecb685f4184a1581799fecb3dfcb7df2c413e6d6fbfd33ca013d5221bea653e95befadb57458cc86b63692d19daa751b34ff1b7d0d328bced3dc60c83780c65baa18bba1f005002766edd11a34c08056e7e531a3660404746d0c7f361068a74957404f17935dc355a00ef8cb60a5bb5d0c2ccda681c2618891e7cc078645486456774cfd1ca837968640771882f85aa64b983f0ed6c9063d161143f1b707077c007c3d83839ee59c46b441a089a8c0d96a4ebb1284e1ee3bc83f645e6b489089aed088b2a289968832721d165df3a4d225460d57816797952944d79deae75b2493f11e6320691e46cd7844d20331b83e8a3cad82462a31287291e5da60ef993bc9f485b57878ebb077f1c6995fdeefa60da8a385335e76d41bd3bfda2eb367ce270b156f0bc23c9a0f4b58cb80743e219fdd40b5dab6f5173e8b85326efd73d06e08ef304a86128807bcd7c0a47dacb82b14314543913393dfd1cfd56ad38f12d5dc0e5f414e037949a57ffc7ab3d5943b4c9c2bf4176bf3bd80edd11ddcdb06b3969de351f70a89d0525f7e5b3650a43f8e3e4b39e9ce2b8885556cd1de64c586a40d7754d87de57fd2dbf3d217c9156aae67993dbe0d95b09ebdc2757a8c8a7314386cc4656b06d9e1f14641824aa3e737c5df468138478dea81bc2c5be315845ecef63a9994337ba03f96b68f05e7661b42c0c5f93c35781874b46d01c1aa7f5e992ab1173332353c334261302f16f15e4866559a9af3cee4285a0ada83d01afe03304515b46b38efb827eb49916ba70e9d32dc77f69cf25b5a14ccdf7423717fc2d082d77fb7625b1ca1fef2faa170e2f6dd28e8a8f881b86e526532dca44497afe8bf73375498cd35b79f0affc6d5a1947d04d55352d85cc767cfda91a0c032fe11feff33df29c26b4b7676beb1b9e2ee95773af79753c27503d0c7740c0c0247aec4a140c7be920284cee46957a1c2e313bc3ef575c9ed0ceac9edea116ef2e3cb60df30e1826e60a7ab859cdb8097f22fc096ee153babcc18c30b6fceb2238de9e4233a5dd9237fba6b12b48f4a07cf3a40ec8e8833f9ebdcabc0f447357f75d14d28c89c23dcc4916faa4f78fa9cc7525fcfb4c063ac590c19cbd3af0b1dbfe0b8eea41805dccb7f7536382a101d808ae2e6d9c29afc5223435f42b8e495dda5683b6be48ae7c78612f1e0816986b1a2a820b2d6b34e9eb0052740db1763614ebe41e84461794d633bd9dc5808f7bd2ed968bb87dcaf88621eddd30ced2816f971609b8c7ed335ad80555abf811fb6e2f5715a25c273b65e1f1ba82a803ccb95e0a7a81963a47349ccac1567f4fd16264aa00ccece37a48991f5be8550716d281bb163a28e34b9e642e902a7fa2b510f8fe4cee1b3d123200eaaad898e881cd122db68edb91eb2dbe62b220fdb56ccea237effbc6bec5b220c791b73afcdfe7f0ba4bf522d73e6471ad2822feb729d3ce7e18f468bc77e54bde9ba6c419174d1693204d08537e19249bf7324a38fad2ba4f180507dbfd2f80ca01a4f0829d4a05a948590a8289c7e2c775652eb271e98d510e18e4bc66f55d279798371b4e65cebafb954ca982eb0c3ff2d60f40030b84d52878424c57eb5c58629a1ecceb8f0d71ece78baeb4d5b5def7a571a496bf16cfaf840dd62adea2594ab83eaa7e64c1b7ce3237d52e7fc91c193eb72b7d6588630be1ed508fae345f8532f0847354c8629af9f6f648867449356ca46b92700cd85a71f33014cba1390f8e6828573a6b6b547b56737da1301db6a3eb47a77bdda10f8c3435c3bc7944c01f7d17c30d4593abd5be032c6373af5d0c4e8267e93fba2e50b8f5aab30ce43daab0974c7a702117d7059856ea0098da008a1ef9ac18a4cf805914213aa2b7e6acedb9026a2a89b1bc8178539fcd2923879ce706a53f56cde0b301afb900d9f2b5c394b4c0f0af04ec080ac02b3e7fd7d59886de75be4d5c7638e30be79bc94b34de705130bf24d601d7ffbac4190f5a300937f24e684da127170548da19357d05379957d9b3b4eb9d6573bdb3dff9d42621cb7f2457133585ba938ebe70215d0bef0b92ddd5d07eddc80821cfab50deeb377088ff2d6ef27cf8c39af1e229bb48de515dca509bedc3c691ccca2e79fd2fee358cc193e09cf27d423ccb9e46e627dc7751f06618bec7e3ddbe2b4fac1104e9df5cfdda29c68436a799dc0b438036868ad80940b6802f064b5d67e93f0b2bc6f615e8b2829416f16302743a0cdb8a29adfcb308a46c324cd2b3012dba85ac039a81ea690c1e98e1a18cdb1b20ad174259eb0cf9aa5cfae4ebdc1e726e2f494bf7bd4401e201313f3fa1e4e9a3944122e20e96faa626a8dd940ccac40ed0356dc2bc8d50c275e5a8d44f22e0db7f8a5484d2d0df066118d448e58ba7183f9a5dd7c706c5a6b621419c47e6e4b3bdd78f85b2db0428b74dbde9afc086dede8179b944a6c6ca7a7c55159ebdd19f2aefb8b251d741a597de21c4b1c8825dea8ae69673b867133e3cd1318beef4018873fcf57d124e56b0ce4dad81426be81ba48eceb3587c5e9e3d54cdd213798629136dd6ca12344808094c518a6de988d45c1ae6f7700d5992a5f75482fd594b5b3ab5fc92d32aeb2bccef20aa214c887fa31e945b06bc0c085cf789ad3007f4da5989e3ca2c20171d1c8c909126d09fb22115dc4736d944ea456f8dfaafd60fce190ccac627134d9db5d0227bdf2ae40db9b2e6283d5d7c41e68451c9902fe356b9aca6e13b1a703fd5a37bb5d5a77d47395471d5b318b3da38d8478ece98a9775a2a30d1eaba0f081ea16fae4794116d9ef8c1d6e123f956db07d32bbc6f80fff0af5dbbb77af7cd0b5819774a3c0acf7f1b749e61b07454e4e3a179cc9316a14933d67bde98e84f09f0c848e9df52164671106f8aecd9934881103594b3b765bb26f41e35c01b8e3f65513bb211d5c4fa629ff62af8e2fc922ed7aa3955e67ff8135a1ed83cfa40d5087a23182a8e4bc0b26e45bde1af3d076dbae0b32080ddd5d55c7ac0fa1df10914a6548456f485e0fc52a1d9312808887cb7f135eae70657c97441cc8f9050a1c39a268164f4cd38bfc283d114f187b1a5f88b66f841cb6cf342877ea8cc2f33f7de035589e1761c2a265007959dd2656e8739ebe9ad0db1a0901a004840b59dd923380f83e5bd87a66179df6db958a7da6292f4deb60cfde85eb54e408468d103c3925c413cd89b2709d139e424b4547e2a0642e7c830d97a023210c9da3c28a9c1bf41877f83a3f0e50aabde4cedd625d6378c50bc14f261ea19674644517a9f81c22c445f56cc97c3a3a9febac7a4fd7682deb3c32c66a25b5519c32f354a4ce0c3ca928719170e400e44fcee7a75321e08edd8a263905ae26e1d1567f5a2613f00f4b73aaf1c48d9074ed03e8ad4d75d0df33b3306c17c461879d5bcbc55ebaba5b640ce5c8714457056f858bfd9e66476c57f87120b8288c5fdef8e02cec0ff538b1bbb65d37c9a065e8f60dd6500a5ad0e8be62dd283608955974dbd35114796520108c7e9ff3d252187284c25224763533097830ef5c13129e0da7c4621c00ca7fdba883ef079e11b45ca7d8d4c761d5f191c478b9e3a198b3a991fe04a6130bc2857e0a856f9166337b1d48cf9713757dfa3710c443d3ea57c75e7dc64eb44ebbdf1de4095e2d553c2b3f4b996be16bde1d18a3125b4189e69c97f3fad109180c50ba0edc5bb340a989c1f272a1c53236126966eab099033cd500b71da97ea1bf8582302e65475ef22b9f722fd2b142c3cded20cbaf69a46692d51fd6187b5fc06765a87b19cbb448a7c17b3e8bee2977e0f15a0930489f82db3b4522cb92d568a87ab355d66280207e3ee05c55f07f830eb1720a66e524740eea3c20d9f0ce057109b64cba14488957ccdbc9762edbb055dfdc1438f027a180ace51e83a20d0a95a74456cbd218f58813793962adfe48bf17334d4e5ab42439ff4fe19ecb4de19c788c5388c1a8a255b5d4f25d5265a8b6ba4575dfcdc4c71bbc473eaa312add32c1b3fcb582c78f89527f4c3ac0d3bd1e61f98cf71af30afb9372a1f88cb1f284c6d0ff7be5b15179a71b94b8e1aa671d4a08de3782be02343ba82ea7cce835de53b24b2c3f72f12b86b241a9b527baef8c7fb05aac577bccc296a63047b7704d42ff324eb5f7265583cd8f7b7a5a7efdca1613c0f23d587b1bbb40441b097e51a7e1df5f21b90ce0640004257d8143e23eef173a6da8b914f46670ea89c9f1d42606b9723c403d1667a33462398b2a0b58944239420d3e373a0163b3b7ca88352456482bab722d8a4c5337aa46a51b114b1d24e57c93bc4f9f0d0cba5a9588a70988a3ade02d080d628d4cc90410cd78338719a4a7dc9ad12f2501fb7330106e4ae6757f3d25edbcb66fade056979f3c983d42abd198cdd8f094be0518d35b278263a27b4e4c5304887d0eceef57fc60c5ca57fb2d8aae55acdaae6bcced14fb4d1c9a86a89c3b7109d8c31613fcd4dece6614a24bfaa1414726d16a07fa6f720cfc6dac933efa77b2447162eb636fd6f1c071aa43f09a3b1a3bd2241f2e5b99c086507127de7b9f11b98718a753f48a2dba249e74f58325f4d11f2d7cf324184440be5a5c699f2c10e3f04ae42af1f4bd5c5e94961910b051c2b4d3f59d1066ec004f20a6487304f7b4113203dd29082cd7d3dcc5505fcbc06fb4d234813c0db4586eead21ae801ab3a4a31cc067fb74abb5de8966a7dd4e1c1cb19e7140cec015c147c1fe1f3f339de2d33cd968d1261947b59845de52b79b848d5b7b8e8ba19175b29104264b3a4343b6b608cc1265b8bce73600776b58a13c3ce535cb716d61406287c31ef40fadadd666afadb40af0f8f5f4ec83898ba54b9a6f9541b62decf35c891f77405e5b6a86e60b55bd32dd42a96a2a22afcc8d1ca940ebd368cb73797647630b7768cce6101b37096dbd7228e7e66e6cd17faedb23c8dfd72a3bcff3419c8148e12ff8460e775aa25e57c44c235ffdb516e6b031a20f929123b6e0e9a368b64081180ed2357535d938b5c0189648926c85663104be2d836bc54e4c4ce6938e145a95111db47ede13c7572878f7fb176d710bf4108d6cb1ff25895b9df619e25655dfdeac383c5c1c648ef27e46ab0b8e9469c503a7baa16716b07d87aa4f260cc534d6199c9fe60e95b206a56ee79c6dc303659aee306da769796f01f54461cee7ce5b1049d77f49a57939a175eee537b4f09d897038611915d2da74b100053a38cfe86d3b5409a0783a76fda8b740a17de16fd9e194907a4d7aba0c831464da480b9ec4dd813b3dd66cad311e226c3c25a44b52eafcac6733b66a8afda6480eb828198102d053797ff241ece9c83e49257a0c58746fed12f79a354e1a1030185b28c92d834ee2e2875dde0130c532fd81ecb7eae3c5260a71fb76fbee64a6f927e37e3154093bfd5f53cd06a0660d5fb11c9c2d87191b70993a981bf5fa082e9af09da0ed69b6e221352f6ce148505769c6e8035ea776a42809117a44549950ab0f65cf2f6807e521dfb346c805a7fdc71ee946acbbe1097e8c752ba06ec0c243ae81e6a61e6edd9798e37b89fbee31cda1975598a2fe3922c6e87889a0415600a68e8c6ebbda4bd1a1e58111f3584f8ea27a2d50d5b93af7740b862442ce6c6e25e04059e3abcd98ff974c19298c20f20cf411423c6b721e752f0b682322abde6375d89f25a9a5aa34a3c063927973577c8b27b1f9097f07729d4d1c28fe70a80b1b9d82a552d3cbfe2210b78fa6ac0c24f81c49a98b12e292330455c83ae6c52e6a8612a8a81dc5045689f59dd4c28ee4e632f45a43d2444ab39571ce314c35cad9867b018bfb5bbbad6b5c26fcf03d4695076fb1b6f9cfa9a2341a396bf3a4cd3610592e7ade529a462de7287b642dfe87214b0c37205154e9d0e203094a3cc738fdc5711c6e5d3b9df58449a173c7529076f82ae80d25ddc9c24f05118ba352de509205e842fb1a9a4db1552173507f224b1c0e2e369006173af7f21104adb60656401022a3b02b2bf03669c04856aefb08b238e22ab0e2ab57929bccd38aac1adb3bcf3095622abc1b653e1290dc09f26643b46f6e7ce8024e45a196a5eb0d7b544799dbab60036f54727c566dde69a0162b8a91aaf7d755fa9a0efb52f9c4a80327375dfafc20696052aa3e64a1f7008f00611edd0e4928a86e0a6c77f7a7ac353b7663513c561c2fcb150e355fb8dc5aac88419cdaa7ec7f13dffa6d9b0e145e2eae3e28b02ad2d0d1f4f4ed8116d2052500bd1c97edd6a40fa1cd06b6c09a6411f8bcd0934b510762d60e5c5820e0323b66237b601066b098424fa72ece2794f77eea21e6aa38606a91cda617e0471a1553a2be56d56c6ffbd5c810fb8d831cdf68b59959f577498ff00bdda468993ab7dff2a6f6e8c9f5d0cb2647e6396c0f44123a7f87b2dc3a54c690117a021d7dcddaaab8e1b8358686cbf4bec1476aedc923cde4fa3f60af2483e9d4208275131e270adf1727105428d7efc5491d2efcdafba555e017c8cdc20b2978cec22a4b8746ea0e59eed9a77fc75421ec67389527faa2ab6d64a1b9fe12c17efcd41a1d63ff9bd074254d5609a62cda63e891832c3c83af68fde12b381f7640fa023ed31d2da65671ac18ef167650e9e069bf4730bdc10b77584baba6a3bc078d6a19215eabf228e70af9ab0ae23c267df8d990241a3a556908eddad264475a448f4b39ae475cf131fabde75c120b0b983757597f586da2eeca180ba35c90d0df7cfcd4ee1292715689fba0a0f82ea64495be374f377e61f6b46f8409c9e35e7badc1206b220b378f7ddc3c6ac5a44af4c190b68046cacd81d52ba6527a62726d25f411b45b060e85ccb53662b6dfe8a9b145549113fb646e385f7174bc6311e20eeb7ef4b59752555ae330213086c1c502beaa074c101dba050f8c0346e2615a5cbbf082aadef6fbc688a06ac039b8352381c5f96f42407bea98005ab601f6b159a427075d8f062d6576c6ab5e07202c7d19ed81fec83ca1b7eecb02f26a2d4fe92caa40d79022663e583bc5e2ff7e7e160e2a976b668d8f6826e7d2d5dfd343048cc1bec92ee1a7e42ee750b01b640ea57772f36c2a86673f02b43a1f391fa521a9926eb648c1fe7369f6934e1fb1ad1776ebc5fc379441e19bede14c4896190dbdb8dac571c3116d472a68cc9a72de791c41a234414b0e44f77887863af6b45fb3a70a45f2d9d47af34f2ce950ea99333f1f038dfb9f2b2a1f90887c4c7edb08eb0624b868202583ec868287e189f17353fdaa2ddf685b8455ae8b3bf5e79400262e8ae5607406c67b205afad0b097bc0a6b4f7d96505ea1d2da0bc25afba911b41a3b83f6bc4c4a25d3c903716024293464d4fe8458ef490880cd54ff9246aea28f904dd2a08fea9a29b0b2a70b2963c4fd9d4521402dc3ca673be8b2072fe2a27eb26929de555b3de4dcc0da031e9b5393faed8a6f9689d33a963a97708c75011a563fc056878ebdc8d61cf83b098c10f57de7419833a251f5f8763d187f99de2ad11fb0dc741f073a88ec3d7695db08da987499e48213ca37698cc981fac878ae2589a5e497ec574f2630b0c648725e7baf87837af822e42a661223ca5c18a815c728b515827b0dc32d68ea74885e931f82a5bb371920167d6ad0dc13f0bc8f1a49ec12e57a76aea432bb18b8d9f1fb3b6458208e03a5a53ccef692263e5212cb6ac83bfd23aaa2b83d22a872239ae970b811adb4bc001fb8deb015199b3e63b052f06fcfade6e96dbfa4ceb3fb42354d7135411cbb9c49d86214b4f0ea4c8d4330b17f7dce82b8638ec2b59012cd14d104450a6bfdf692b2038d5df3f2f6d52412e6fddda201d819366db2829f3c9e1d7c4b1a35a4c7194593e46016e43a7cbff18ef8aa78af4982c1fedeb6af566170824b9e6bad9bb10093b92bd2ac1c507923768c0c5f075c518f7aed51b511b2fa9e37b368400a5677102878a967ee30320871d7e96d07bb2d529da7f35bcbed70d7a2b51fdefdb71f2e7a748592a4aad845996673b0314f7ea61ddff74bff4b1a8a7eba7e4bf41c7698e31ff86d9c806beb66509315c94bdb017c07b18e24a800a0d2d288e979bddf71807be15306195ea8badfbc4c370e132b9e3a57a5b18484892a65838cb8fda46d9e0a6353b03cddfef1eabb8bf21b136300cca5d719ec9e4c34a753913fa74b28e857a237b4d223729e9aea4e26cd2f6b41f53f5159ba18ce4dda17ccb49ab051ce8963d04b4e9b6b32592bd217fe5f8690317a3ac51e381489e756a8dd97d1917ea3d4a25b5e361422e00a5399c2fbafac0f0d0afdb07ca557f666edce9e4867fd5674505660ddb354a5eae2ba5471c73dc97aab15e2b30a8bd07b457549cc19d0077430e8462771a8646d6b11add351eb093ef446306ddffcccf78d228c0ac16f169f411ef414e2a4d4c7b829758f6464fbe0b0e2d2e407bd9d4bac23548c99b291ea4e80685dca6c21bbfa31c75ca6afd8a7b768b24f83954a1a46ef284f6101b994e5497723e04b3a870ef1726fef4f713f4974b83ca5a9f562fa4801753e1cea50847e2f631530ad37f05f14a59d75453121f64c8580b407a21ae43546f17379928db8bb4a6f5428ef28811f29df46efe04696dea4489cf8d5541759ce7f43b19e37ff3eb2f04c34028f50f862397efd4e1ce587f3b1d4375e4bdfa18f79304188e88f7244a75b5d25acd79d1a1ad21acfae35567bd83692e8d20ac9f9f6951e3a7aaf8db81d595bc0932fc91bd316ee8b138b16e904bc243a635fbe9c9f877d0977b3ad1eaec9623f655f5e8f9499ab02a418cf87f1907e8cc631160aa5d36a7d79c325df98f1ffa0eb369f80a8ab327e3a6510e7de572fd496ca64e916918e804fb819c246904fa4ff247e8f6b693c35447c53c03537dfd5a6acd7e120ffd7e51ab66fa9642c754f7aa4fb44898ad12cdbfc42e4ff90a643bb1d137f0b20e55944487de10379f15d04089335b0d0e2b4a9bee5a97ddc3082237f8d6b3594ceacbde7c0990ef7b61c06f1ce431d5bf99dc05775b8e7a724ea10c4bce7724df80ec721a42098fe4c1388115a342e2c7cf0d08df3331b6046fdc2a4ebdd0fcdf0f3f4cd00f9cbad93b83a9beafb34f83c5651f37b8346a65b40b9f657dfe6d8281697fbbae87e40fbf969a0acb2c648476bde46d56d98ab446ab9da0352306d310c23c82a75a15369003bc12b5040bbdb26394448e11bf60e6d0249c841893c5b49066ca523c48b6606a81d34e2f3ac39d94baa7f120287b2c21028da8cfd7b32cac59d27defee456829e442d4220ee482e4e227ff434cc319ba4700cede1aede8ee8aeb3e4019b92b1e3af2c6856ee3be5454d7b7311e9fdc3d976077a77a32486cba7e93556199803bff075c6c829fb0a5de8177c12a323b0612abfa423b0db47b8e9e50bffad7adc9f905bc12cfe7b959d22caf6e99e724e9dc618ce54d85223ff8b41617a6e4e1f3dcbeef9c43622c101e24ca207a650452b9ab8bad487fa33e8dbfc38c0329a60d57d4f60b8d6b1d80c97f8b230a6b6e69015ec5b2d0d4e6a3bc5108429d355177a1670058a1f1c700cc9030ac6c80eb7ef1ea816039d71a744fcc8f7dc85476fe531d49c14977ba0d0ca0d0d0e7f05a3613814200db0b8f68558075e195a85aba9feb7dc878c6f0bc0a0846f31927bc91016c786e6d2e83214ba6262358038df48510f66b09566a1698f50ca84e84673212dc3ac64835309dbe21f3727776cc9a4c3e8b6aea5d61cd345b368017ddcb5d03727ea8de04c2b408e4575d2a75f5cb4e78454401645815bc7691b9dc4f9323a600f6fb7bf03065e82c226debe0e82f0133f7c1d3dd34878cc219d7ba8e2ed8ae0c119f69140c771d689e9289e4703141cb3f3e82a8ba11d5bcbf1396dcd866a171a8a0046e135c0cf6a716af86d85af270df61a931ce9767df1af1ba19333846bd9da279e383fe120bd8ce2d7b576766bd313f4992ec4b04a6d688be9dcc321911cb9ebc29aab9e3f8156eea927ae1daab592ba7c4dddc19f43080e5f788e33095efa3e346f3be6b043b6bd9882d2811e80788c89d9c91e22592c05fb35d41180818fc8b888cdc79f94091a5fcef39504a6642a3e06be37e30b710484d9c5d34ea2d7228b6ac9c4522d034a2c721785d11ae58aa933c708e4a8591c2bc2341776f12c0f3e9aeade2d8f2efd0c5b1537e48fe5779b0dc02e6f5a43ef754ab52278c312ce5ac8514d8cebc86f1aa00d4f7972e39814f4df19246ca3f210344e7d6de1ee58f4c18efcd4e2333555ad575ce7f204c291d1efc8c7257733fe26393edcc1838f7daffcc6c68b634870fa92085d133a8a5d40cb3a0caf9d20d1569788d1f3c43958f6021e27e22bf02423afbc699c061def95d37166096d5f985da09caf1b71227d1b7ba65d34db5ca7eb7c329964b2693bd1cb468cf81f6544347b5b969ba5cc98d902a8372e6b1c53bf3cf9bd4c1d21c1df9052d40df56aeded7e3eca7e9012f0c348389f60e1f290bdedcab9976b5465f20967341beb4957fe413d1e0705ef350a03145a695b9043094005a0097aac904e49acfbf1fe4ce3ad0a48a28c719045eebdfec23c9cf3e19f770c0c6ec6c4b160484ff75767fd5a7953163b4ac6a3b6a7d52dba8be4342b789c130ec33b84ec6d94dedbfab41247007f1154d64f12090f5d5239d74736b38c562b8c14f261b148ccc4a1528774635791510522b5a625ed618695a56a5d64d05ed40203954b7449bff46933cbb820f6c31395a3030c79317189e5c65d7b7a6edebef57d4d9dfc4c20f6c45b0d7e92e9ab932f7f7d3380a73bc0d2b0f4ace84c6ae38541db2c889a2b214fa4ad8c7d625c3253cec1519a930d97dc64c32d330f04163e5463f207bc8ae72086c0614d29e10fbb0b3233c8fe8dbe3cf7def2667ec8aef9da3c043a7e88f4bb69ee220f4386e13916ea86fa7ecd8c456a34fab441f19fb45c764ee60946589492757472371ad46ce18f35c964b97e8bbe4bdcd8850314e4100108d56a174400c688dbf3f93c5f19c135edae441db2353a9524526f235ae482e7a6eabdcbed8389178c8b2737e98f681095e7b74fbc81f80c58def72e3544d00d7409ab427c1db44dcb8194c56f577cad4194be904cf9662fbd23032fa00cfa63c38fe7f9d53469dcf0ae5fee8b3844cbd57cfef4fc1043856dc732e2afe94fdc442ac30dcff21c5a690c93d94f6478265c4aafab911a13f22974ca31d2bbffeb209c3d4bbe40b12162a87d1df6e340727450e8628bdd4db3f2ca575419dc0bb47e840dc433021f75621bd8b0f416bcc3a13a01c5ff4960af15093fc8776692697f534c79d7402cfdec2702d465016612c393110e74e7368a85fec133da142854027f0cb838281488b9d6d40ca6461a89706924a4a65892755560bcfffeadb28d6f6a8ab0882bcd7c03db05b0946d4f492cd17b52498319c200b755d5cac0021cf83d1543dc82bbdfd28e91922bd8706fc460a4a588d0666dbddd6e044cfc3e0b5cdf348b6a444a94647df8b84dcba22de59583e0f7eeb3a216924eaec927b0c07f8c3be03a155451dd29c06d6cfd54781e70e21b40d23e725c4f6b6a9d43e9db6699c5c5fad57aa741a94f7c7f71617d0e2c38494d69aac42ee489420b16f65ceced46d77806217aa170cf3dca2edd437c4cbb9f81d1e747b4e3fbfcacc38f0dc988f7c329c46463ccfb6bb0d2a7195478fd0eecdc1c367ed363c21980dfb527cbc47a45150f95f1bf7ec5920d31c5439ab0af6de1895075d8d2b651953c273eb04d10be1fd0ff771db9e9e9b791664b4eec2247342d67d19dd260d3a92bb409f7f660d0d2a7e3f4377632bc87f41fcc58938f41db44399aad7f5b77624f0ed5232d0cdb8c0b1bdd7f4f7ca1abd7a1ab6732eee76249331509b91b0d5a0e61d4308489b4ca952ffdd06b3d57da9c604b6b4b11721debc56b77a2672471e4e53f0c8dc496104fb4c83d6f6a67e35f06e0bc74138f18a3514b69312e8119a474e1a78a51aa57d410fb1cbc18e670a2b20f286882c471aad2da22c57c283eedbd1072daa0d23a6a53e26662f94642463fe7078d1471f884c03d55802610239f3663732330fc603b642dadeeb7397df1c710d8ab2d4cb9404d4ba7a4bd8913830575e2e92f512b9f7258a1fecd9ae9576e9f0732bc8b515fd3ad15d35c7ca355c421ad388de704b1d9b3e36581853a488dfe0358378a10cd565ee23efbf13348a0cea6fab87c6b35566663ed9099a8cf39c23ee1dc76e3a640caa91126ef70822c93eb85b128ee808652207a62203b3dfbba7e1b0dce0341e39d222661e60939fefb8ba6ddd4b03963c861266698296987b6097a0f865d559f9a503895049c3be029401db6e3171672d46f0033bc8a6aa75d0d2705bd7903f491c3ea796d5565c571643bed1bfbe53e41949f587415ea9a0b12288f267c9b476e35494d20b3cee12923acc71f639b1ef715294899677252cebd4584ae1f562309804829c22d1ed3b74cb2422553408781475c3773aa83b39681b632330b5c5675bf1f4b0f16288f278e999c49703de8c6c4b366ba8e73e15a940826ddf97f30ec799e050fe05cd37205e2e0244c59d567bbcac30e0c3f2ba8afb047460548326d85c0a1d970a0609c601ab69662b19df8e5f22a781853d263351e775a6be47cb4b8160c80ea3a0f8e6aedb524eb768f665f1db5ffac8f8a51d93659c2350128a41f98b400b7d9aaebf536756f22b9f4851e28f65e8330770b4981a8426e46854b1ae734d2766b357ba2c939c1aa59084b9f2819ce7676596a408da240a0969e4adf9fa226454fe960ad0ba3615c25add69f5299d0d0aa2ac19b157998de10990c4962aaecec86030863e043e0fca38c6322d86b501c630bea0a9d498fd001e4c932abaf8af37dd4abd45d95446ca75139c5607c16996f059b62d75aec91d3cb6bcf04659448e7d9f88a97d26416f403772d1fbbda9fb42740006d6af69b5c6133a15616b82cc70ba3121da1eb20a93adec9af2c0506d43048ec2a44b17095a01bef3a35d44bd198cdaf5333b86184905ce64a45cc844957749aa72c43290414449bba2a855d46988edfdc25ceecb09064766b00ecac1425ddee594437f0261918cfa2e866065f6565f74bff068bbfcdf843c5b786dbc92edc8aa1f7f28994fbaa51c36753e40a2198c70e98f0834955dc05582d9bbe9199995ffe06f2083c6ee670e9d67ead9db2020338167c5ad7a0b48e34f3efc54073ed0ae99c0754d9cc7e9a01a5b66ce8d1aa74558e84614333a4727b952f62aa029d2ca880aa67c9b5f47ae5c13a0d93f40a28500cbcffe8d531663f93ea80ffb2425a81cd1a9986d7c0f9aba79a6afd075b212337f48a0cb4c5153500295178df0bfcf15cc478c855fbfca236a487211c9519667e512f877da8bcea87774d1795b2d3f22e4ec8a0de1e226bcfa6b483a9a71b1404e7bfce23a3e0fd8c72182670616efb476b5089e5cd936e489047ce1b5267f74d0a7a0f3670b9e811c03363780bef8111d02367b820213bbb2ecd4952f096390b0b1970555afd19faee19daaac4707d60c6a6425c06846c6f56b31fd1bcf53c0d0f6936082375ad795a25281b8ff97c473fcb8db8abc81c6a4bc9e619c83674f11f89e6786e1a90c78570b9b9c6b6c2704a37221281e1f504b3cd65f0b5a6e931c1d98cf1f1ce61b8baecf82d4d6084702a2abb44652d9300137bd2d36fa3327d19504ef8a78bb61000abb1f6c38446ba56e15b1dc172082590c681cf965507130ba64140348a61dc67103bef06b783d0395a5c3ec3ecac5430f24f2699b68bb6cbc610add73d579c2b07eabdf7514fddf1a3980d7487680dae4e496f3ede4b270b9529a5e98b932428cd2219be37d571023826b9394a07cd6d65736bed8f3e6177722d2c29458f0fb710a89b2ec16af8f879ccf69139628c03d2043ccd7e9d45984a1ce07cb10c5c731900d8aa8053cd3469561b6d2296a7d8713c976d7f799e644b0a8deea229c8f81049ebf867ec4d3fbfe24ad4a5dd40ddf1b71902d67c2ff758fbbc1c07ebc55f9d4e14e0d9bea6ffc19efe5dd607430541a58a18d3734b56c3d9cafdc11388a9dc39d87c5d8428ef81dc4ed7e0b8d7222abd5de2a371f0f7bca68ab7f80f5c899c24cc4afa61b26f52d666802ef0e2335100240164b87c443cf6492dd47b61253ee1dc010e501ebdca971e02c4f417b5ecf26d1e485043c1b770d32fec91fbcf573cf68c2616a2a2d93bf4823199738c8a61233046e15da10d193a84109c35736b439748a513954a64d5ecb8be0faaef2c4d6d8562b3b616f64f7f3e16efa8edfbe24968e55a8b14011e4412535158ed37f61bdbed7a3591515f0b60ae184969bcd8ac5b65f2cba2e4bfac6473e9bfda02e8d96ee134a3c3335e7e3333924bdbc9b5bdc35bc636b41945491397525547676317118099524bccb83f59439c5f7bef09cf00d6c035214b88e91515d4155e27dafb78a91965e74831ed3524aff9ea49323efa72d04c6d891223c498dc7990087ad8542e52c01329c181eb160744f74c6fc2d8d04cc3f67e301055d0b30bb64894367f5b96d55b057eac8d666e3b6793fbc1bad9966fa59f3a7917f908cf6e5b0b3ea451f14cbfacae76f3ca6df678ba57add3d204cef4e839b637bc5d69ddc747c9f70dd5559980138192b33211558296831396c18ee41e360bd3c01325496be41ef42ca9fce2b1a135139adbb5bf6a783dca2ae8b9ac097410fda8184913a9b0640bbdd394a8620959e777112d5e1af8b890906071ef5db99390efdc20443df7c95c21cdac1a21f39feb0c2c06e4171e60a264540742073590314930f45289343c46cf552a75262cad7a604d20149673a53851759ffe416d53bffbd224d53b7f174fad04d25a3fd3b0c1425f5dbbb28a0c65b85532e215590145c9d0b33f077b42d2046a97cda98081183a8ee0c37af588cac97f359a8097aa54af2aced774e2741dff80a28d1a90a0a2e2d03a35be8593f30060523eb6c7b8788789a4dcd38ad79e8cde516946ec6e3f9a4a82d8425af1e3504be5daae0bf364231a520ad815e034985c5946836956f16f9e8ae526b61a2316209c28f00704952113969dd8def56cec337adc5ba34653f370a34955b989c300d1b9bc7f82906fbb6ebdcc67cc2f86d0c04eedbadc3526e211685b877054b750db1a122b23620ca9259bea4579d307a7a3b74778b1d05e1486dea76843159800e151f977761bf8300c0fad0c92c428e19b9b2f4e02b08dba06cf89417d88b86014a9ba59e2e20e5a54561ec80e75659ec4afe91d418b554fdd2973f3e8da00f84aac309be331bfa6cb598f4429e7d245457a3c0e21091bf86fab417aa2b7a2411dd5c9db69463f71b5debcf943686420413167b1274e36a6194d8f519b9050234c8e250de8e3dfac220f600eb428360e0ec0d75e3c3cb6bb08cad21ea66868126c90d05157f5edc8c096d15ffbc19b928aba8cb151a77a6d2ba4f2f66b5a7e3897fbc3ab6ef717199dc884517ed6eaffff621a1acfd406baace96a9fe265b3fa9dc447e04d7794cde3363a9923c3055dc670857e8458db22fdcb369f4d1a1a2baef7cf3747d3e7ff658ee23080f9d6456b0ebc491851c3f8ca8fcd66a86723ac26055c41fb0ebff416e100eb6b9b3fac50aa9f4a5aa83932e2c77db6cd015b0990cf4f3bfba7d1a6e2e9ff0a02d1604cd54397082ca8f39db8cad53f6f57c28a759f0b14fa8e3c5a4064d6b92e6c7e145135171a892b66fda669e5d75ba243ef66af93e1b9b12126826f815af5fdc3b5307d21b40ce88b23d79688c576928ba22b0f4e7b6998db402524406f39d4cb09b59287d5ce9e90f5637f953eb5a3c80f9bc3f5f39f71e5698c9df34ea53b857238c7d8fc60d7835d3f99c266df65740a19332ba6572eebbd4dfcdf1a5039e93108670676b78f040a81447cd8e99985214b05ff9798dd974f34bc872ae940b43c78926b463669c479f696cc14e28908251c62d7239dc2392eb08d77a16dfb9180da7198f73d42f62c96b6684e7e75709281965ce17714a5d97dde3a563205674e8f9d3bba8918719d4ac60e019dbb7531920f41cece85ddaf6f55fae209d8673b8bc75ed9f5e2b4a73180805eff83587901f6f52ed19f32d6ba9ef1eb6e2db63270c0561aaf1889fa8dcaa597f4d30a737102e7ec82a79923aceaf11acce738b003dab3fce663f007439c50866b6a0ad64d2f864af7bd3c26478b997addd1adb5f59d69637bea6efbd06089d97fcc937c2bce376208de81b6e42ec7c32e2df7baa4d93776f98612bd0372b0b6db648b9ab0cece5ab9a5cb6c5cd445a6c67c0543e6cabf4220b73c900a584ee190084f803f3f493e7f5b289929ca38c83df7312380790b98b9c417872b3f7ad63d8ee1b2da6d0e3f2462d09da335e7b74b53f27b0b7a9f11b0e8239f8e304f88c18702026b6e53fdc9fc848c46fa33de786b64f2dc0f03e4991e118edb35c90254f454c28a0ad368aa3b6eb7443a81939dcab5cdc3bfabe2885823abbc47a0caf3b639b1e6dc49b925467efcacbb19396c0d98c92f32c024990ff6a941cb4862f30b46ca866724669d3dbb5f6ad3b7d7c7148647ad7071c8fe52b3753990d620c2d0f728639c2d7e565faf2402751c7f971f47a849483dd1eb0ed6045d08bf9f26fb677d331ca58c532683e961b54a967821190ab56b31f6c3f0355a385f092b9f657e8c57429f7563b24fcd21fc8c3221d116a07035a22a24b9820f2495efbb0d8ccffb341df3ca79d6842157fa430ae819f2220e1a56cc4927ffb1411d1652202356166a6e3f48eb7ec48ba8e0742dea3b0de0bd5822cd2e77b154f62c6cd19c4e621ef13247930e0823dc44369a848a0cc2744d120885ad518ab93f7cb7c347ea22833ead5b077133c5f1cf09144b85398e7aa8544459b4dccb36bd32a2b63b8bfbf15e1703c13af657519d5f16d940aa8f27d25ee68ceb3815c6dab8290a2fcf85a30dcfb3530a5709c6a04c71c55422fb6d2eb927cbfa55ccdc32113548322f38cc03c3a8c5d947812d81cbf2e91f2691617cde6d62ddc6a632ef4ef9d0bbc79a003ee9f3572db8a14657ca5feb6c7d62849e5b1ad8f8f2737a8c75e6d70a572983387eec2892cc5e8d7e6a7d77ecb7d9f4a1a930b147b1caa57c99d07f6b526e949b1cdb19a98731a85d9e5aa795055d369c62292a6317b95bf7a862c21f039d302e876b74ec9d9ceed42d3426e85eff78abae03a190376f6308b35e737828a0c10484628bd6f69c682d393c5ee0a43e35a7fd769df6783ba4c3eaf415374b32991d9824a471c70822f669a9b3179a54299b7e5458dc34ed16dda78c9b9628419ecf2708020bfdd74f9a30b0586f56656988d87a71c3f8cd8e67f632eb749a28a40fce5564388db27fc33a71a8a939204b87b05deeb72c72bde6b0c4403db49a2a0593adba74074c4bba5bf61cd8ec51029a35f3b46d4c484961f57aeb6f0e8b4c4d0b4a8f1dd44218aff12efb4152490920daddc2c53f2910c16a707cd711c4085ee25011a2705659887857e6e84012007204ca31a6551066c6572aa43f11b7e76f5c081e5cb9bd5b873dbe5eb6c7f0f28acbf0989a70c73a374e86ec0dabf737948b55ed34fcdd4791ce08e760a0f46ccccf168bbcd11644e811cb3ad3c24a4e570ab45f1d1f9923a2ba29737775d25373db32d445515b6f48c0b26111aa6d1c454f0280625f90220e791ebf2186303d77ad731b97fca4ef20f7d71d8310910f4fd780f708f581f22c31e5d5e86f42d8fee97f4f1f95a391e09eb976cd2beb2cbfdc7e268f89bda7d24fbc242c55761bdad431fcda36c7f29412e032622995cbedcf0568caa845dd57f6fc7dc39825403ec46af738549b869a4be70110f46b9b46c38764891b94a7665562e17a0c25bd1b34819e2ca5e27130d52434292d937e05f129246539c16ca2ef3ba3c6d3e17ba34e7693b8b4053f2b7c9e31fc89fb71de0cee96eac77042c7374c3a2139a08ca0a2533d5f85421ab7bd9ff8eab3bb78615f80612994eca7de5745012f4b8312dc58cf1fc68253031c3a5528c21aa10965c01287d6de6c079e596d97160b6265a5e4541de365749249ba60d8218e0bc36d41e341d1aa9cbcc3d1cf31cb669f7265c669ba5932f9b3a28b5fff723f2042e3038f483bfbd6c9c299d1d7980d2c7eceb42984fe603fbbdb4c98e4dfd37b3e0732ba45ef971350e18ffffe725e7391d142f609a7e27e0084415a97ace832067912e49c8aadc19edde032ecf17bf6042d23e8f1ba45a30cfd8043863bb513f9165ce4004829b82eba4c1261da254601a297838aa555273cbe1bbceb1cd1eb0c65ad3f64cb0977537b12df471c65c6d54dccfdf54281390921ad0bf3645b19d985dca7c66eedf59e6cdf86ebd310957de254d7f9e261b5311a956f7b9165eac4c1458f2b2b00d728ccab503b9a5fd340f910fd637dfc9aa95905ea0d659383ce67a2f881c0fe3d2c4e9b8f0b255957e3f5e04956f51c3adce8bedae8cb13b462df7f93bfd9a046d5b36caaffd1dd5e31f94c5ce0027ca47fed3113b0fbca7827f62b3e4f230b99a2fb5c73842bdb7efc5df98ea0bae1af416418d42978bfe2f161b0277a93b8b578cb414e15595344197e3273d109b7bb43238e09b2414789b19a8217d03035a258e57f0535137775b9b9c6540f4bd5bde3a363bd10edbce939e61f853874ca30c0b99cd076317909ca0bd075fcc5a39024fea17c795eb045455b05c90815ec423bdf5117c8d3eaa8c61db48f1370bbc657d4f6d706d7745e6fe338fe5d851ab584babcde197c9ded701f4ebf763cccc774ad1ad0a77003a51302f16a5a5b2337d928eea873cbf49dcc38e5028ace07249bafea7a2b92b020aa3de8e1343c055ab7dfe3f64fc9de4f9b30a66809a4ee76efd368887fa50b7424bb0af4cf55a71d14ae74452e8230935a6c0ed0f3d3775ac38bc6effba5eb0007e13edbd56b60b26595b015aac204848ffe95fe35408d98db6b11f7495667ba2c4ee05d2b150ad77230e1065f52f74f7ca08fed6de575660eb3e718af934d96a06dc4c99079430e91a7d4420547020c1e7c4821875a305d85c303517e25b038d2fcbbddd5e66b9b60866d5937d96abc9a81c0f4f399016424338836a8936fa82b6fd10b3d55db00ff88cf4a79ad9ffbd6d71c9548a4ff5a4eaaa270c188c11328142d3d5bbb4bd34b6a3f36ba2104c5139165b5295952849d94ee133adfb38cedab80f0d293c26c2120a70efa0e14fa54aa594f630aabe2d01ebeb9f0d41e1d598d894c186fa348af53acd6fde607ca4856d10ec54e0547b439c6b515ed34cd98bdea1ad45e7b8255f57d2c1512ff0f6a8dad8139a6e74cc7a4d84ab9316f2e5d037441e3e3b3e58351090aa86b92c7f14ece1f9537e6cbe0426eadd600a4c7cfe34f3ac9710703649cc4584d7aab2d6456a572d73ef6e7011c88d5dd1f4de83264522b59de72c830297e28c955bc439bbafdc0478fd988bcfc6646e970b0ade796040eb85859925602c429bbd26445a34587b661f05559c20163b63fd529df39b1797fbd7a7140d48699a4ab4938a15ce3df07bfc35f1cd7505d8d57121c8ef895880605c884e6956bf02232c6ae820ed1a8f87248c733c067afa0612b471d9ef07ee2abcd08ede5dfeee3eee162de3f9eaa3f42f5cb537c1fad9a2d18851344235e68c789390bbeafc689c8c01e0a4c7f230f0aba6f9b9d4699337604460d28bf508755c1c2e422e71e1df3f5e7598411d83f58807155b89789579f461305ee5d91cb13fca567af877ec1baf4ee87c4d021c4ad87061ef0e21026f79eea8275175c84d91f3b26dc2edc912652eac691b966cf6771ffd817c3fc80967fc9fbad4d80f7b7da3caf9173113a706ca94d32bbab21fb25f6890f86a4c246c0b1b79079f44feb9bc2458c29d152348fa3cb6f75a7ec063a3dcbacdd1e54043e18431d425348525ad1d4eb84a5db2ae3de0ddb710e4b9fb769e89ff66a03bce036ac72499a7f0ddf93ba169946c8403bb172a2d4810f04da80e5815b241d604262e3372363f45bb2ed1968afaf485433a931646661e86526e88d88ff35ed0543445a7a053cb1c9f8deffc8fe8d08b613494c296a958ad3129398ce3abccc7419867d02c5fe446b8b0f555acb95183491b59201f1a46e0b2a48392ee347b44a944485677272712ba4d4b98edd8baa6d61b45960c9b8d5ccc279efa1ae0e21ae02dc76aa189754cdccdb7b6da4410230fe59bb7dc1e6965bf2c19e0d403fd8abefc7235d3325e4f8067cb8cd661fca49647d86963db838a7c7b8c8197517d21b168c696777909dcd96e06ccaf50cf231544e9ecb6cd5963b1cac474585342bcb17626c18d02afb58cf8d41d2e7c883c17504fc993f1f333adc45974dad383449ebccf1b740ed00c533ad8cebb0318c13c64b60d8cd382120002eef124d7ef60121225186fc50baf665480e75a24ee777a9c68778df7321c480433a8c428643daa6efff52afef375a0830b05b56f3d140150e14d83299a0f0f3e37ba514dba51d6b8c6d4f7c32c67496eea7b20f732e25dbdcb6d785108b1d66b438e99e09a654112f04906536beedd8811f9106401e65be19f19aa74eb2fed3c871bad8a4a8796d30785dcdad037457404e8ad6f0e3c061aca4f72cdec986894b0819ba0d183d1663fedfe21e752d3afbb4c80f80de3170c2dc67abe2982ca0e7414d8b385831f9f36718b9d5d080d3b854af2ca0333d8df1bb15fddd871cd504f975479b84b8725c2af35f7e440e2377eefe9fe2a89e453c45a32842d3141cb79d0903ae03f04c0323b19697da908c09515296adfaddd15ce050d2d7ee5ec06ef7b6c7a8f90cf7964703d033cc3d2144dc7460f2e868d8884dc5320f87ba86077ac0499cd3ca632c5eb46b1629064cb903d946bacd9f0410cf8a79da577af858f8cd480c0a4c29bb4ca122cb0eda0fce8ab24be63319d2df4f2fdaac0c5f40698278c5b0e1eed2db245dbd9e89360709f5ff4df55b582368a23dafc1ffbe1f9bfb32ddb3914d30393f27fa04ef4ccbb86d990d62136f92ed9ef3a351a1d9c43384c17e3a0362089a5f59537aa2ac2b52f3c05484042fb534d443e8eb36da023cc417813922dff17b8e023af3cef688da09d97a12a1eca6ad66c5495c8a6adcfe0ea898e2e74574f30e2d3495b1f9427c2e65778a66d607a90ccabcce68b00ff590c39850fa06592006397f1e220e3222b9d9d4f60e3ddad6ff1ec64ffe5d90711b8920f82e013b50496f1af525d6f219d509ffc71ded7b5832245653042767c6917567df1f015c7cc15302e5cf2e3260fd172eddae76cd66e30585986b0941098ec7ae8a62550b8e10b15011237867c3d08dea3daceea36c232a47523f6afbad3d5d9f97a84a02e88195c52200e485b090cd930973156611ec74dbe8b13170067e5cbea3de83ad40afb1b3abe14729ee13faf0d7449d88e3f7265b8d3c324ab32b90aa56a5659a73200cbdbeeabbf78358ec2af4df8ad729523cd7e49d7a85543b783430b3d78b0c31f8694aadd722c52012c7396c8bfa228be06e262c6e7f5844e2d26141b6411699cea99226ac550d288ed4a5b4cdf4470c4c46f0779dfeb9701d857953d911acec712ef436a7e6487f8f3e787d1418da75246d4c9a7b68da5435340563f124939cbd440719344b8f2867c66474b6caa2363c6f7ccb3802782941511e6dc234a1966c55536857b3167d26ca52c8c3ad7263b917e0593669533093bf4e2dcb01bf5209c5758bec8386e3eceb0597bcf162ff164099df698bfb9b0dba119da785d06303e517fd2a8d08052f0f81b6be4b9d957d2a88bd4c432ff5042392b2421ba6da6b19966807cdc6dd0ddd932ac1a3d0b4e70412d8424684d22c60e5ee32c209b909e5b648588caa7779a7e45958361d49714ce0b62d7d485e3ba0f721068e0ba915862cd9069bab20cb53758c0a39a62763cd70c0d5587ad2ba2f260bf3ce3890a31d49111c94e9fb0d6605cbabeebb7841df3318ed8d932c20f35f0be03c73f7d7187fbf81ea1e17971197ad7610d804747efa8127c44cbae8e7da5f3e7796b9635c17d169823b411d19805b2a5392d1f693ee29b95da462ad4af5198cbd6f0692b3fab7e61f16a0f089693188c7b1e52f93417125e9bc2c97935f1d02a3d2e25a76c28f06dc8677604d833c34614b2ba2aa7767e8307dcaddb2c0434ab41ec7b9db0f451aab7f79d8b94ab707fe74e6a98584bb99f58935d7003749244c5d205a30db7f4ed7d4038d97238ecac0a5df2f757d51d71ec8786896bcd183ec07539c74096ef043fb6cf1616158a242a7eeb9636a9a8b8af696b1284956504fa21e22f21bf9fd7195383deaf14ee7c55d68ac09acc56fdc2715aff94158eef74949da4beff77f47b2d5465dacb3a7e5a68cf196fd21d80d0f61bf9b9803e571a4a62ebcdbf685a17eacbb48f754ce037b4a19d1cfaaeb701b12bca1056de92ce4e2437038890763cffd52ad0622134cdf428f62784cd2b1a11ad8b3b98ebf5964ecb736f485f53d33b0b81e29729f0cda387b72eb96e43ce7a11e64a0d6b43184389c8b43ab82a8c77751b5a4c5bc004fe266afb29721f7dc192b662ae51ae550f5f5ffabab7a51a032e29e92ae07a8959d466266399841f51342c933273d81cb3abb2e11fc2349387a4fcf20edd2ac2737316570da285821a3a0da177cd6174d371f724c3da71dd7a3071a77fde5575bf6d5fb94f9a78533c57b0fc1e4e23b32410292496b538cfce265e05476d6c4ac6602ed43aa53ea93a61fbae18f7118bde20a993ee1f7761fd629231ece4d27b937c5c6c1ca565a7c4124070e6519e3b550562dbb4d6128463a2ba3a240738044ee8add3dac4dcf9e37530f7db528a7a946595a03b51e32a9ac2f006c9fea82a463c29af32efe2d02a673d65d280cabc76ee80c8cac3bb30145ba275a8a7365faea67c429effeb200d0f50016bd65553f404999a3c6de942abce814ce1651ea79e5be1c7413c71cf02125d8e8b5512e516c13273c558272a25a7e5241842096cbda3da2667445e76d9c9efd3bf4d5222b20ffbe95631b023253d2618b05b6bdc46bceac2fe803aa1c1cac65b670db8a58b32f789860d3708a6bff9869c768f4f18adf45c55af21dd0c87737a6119159411944aa683ef514cc6c83a388323a961e9a25b219ad4c5274af750126b5a72dc86af0a506f470656fd55886cd06e0db6953396f0a08eddaac8f5063766a44fe3e3e55e750e773e35621cbdb21429fef0cd98479a337577c33fa60ecf1d49f6fc25adb5fb9a5c3e379e2f38e1e5415221b62e1335f725303ca56ce5a902b121809a2c4126668053c298bead160c5f2133260dfd36be4ccd95a8b4efda670cb88bed4a33b689c820c3f7dc864dce8a7bd1bf5e7e2aa131600c2aaf1e61699312ae7616ca977391d6558373e3ac160f757e55b2bfe11a76c3b9b5ef2b280f708dd67d37536db51bd31ddcdb2f46ef8b1ab0ecb367829663f7c74aec4838567d1ea453c3d402b51ef5209297184e1affa20ad784407049dd86610d9a372f71bcef678f0f0e95c4ef65042644280a7d85355032af17a37d9dc86c6f4f87ea3d5978bc3cad75cb313fc57bd73fddb0df5f9d2c41cc4b681dab85d75a686d21f2839b83156fbeb7fd56672defc54abf41c81408befef8993cdf602ac5d610acc62a3d91bc8495ed9c48dc58438556e7736195be9f00db1388fa22d90a641e2e6bf29886334ac4e3fbec5ead4652268509a558c0fdac330ce80710524fa62260a423870603303c1b118f9a94dd3c47d817c56ea9de94a4936e446c0397e442220c574898b6792b36b27e3467dfa4acb9a0c8f1b9caaa686350162b8180c2a185b7bdc4b93479b5ab699cfe833b913223a9566607897404d66ea46ea10b4e6f5513fae2c4be2a3eff7fc8d9810f3fbc05ea3767a5b7ab54c1dd577bf0271d717c20db232e094f17f92c8b4cdfbd9cfef1ae9b99ab6a08f85061dbc123e89142c584c6794a931108e0d89403da3e31196d5371c8be4529b221b4c67d70e33f7ff435de54501c84c9c7cf139bb7e1e151bca259c68f816cf737052b46b47ef4ff3424bad6906e19e88a25e5124bc09d967ab06a298baaafd563e147cb1792a30fbae2def2b16ecd086f357e74d3bfc4383aba02782260516994aba65e55909654aa1fea56b7a295e637ab64875979428ccb89e6a64a8de83ca8d657f09302aa0582c1477969b315d324d5cba39adad7aba0b3d846b4ed524abfe363d0acad75389ec511b46379a1c93066945e224cebb8d1c600ec902b0c1bc491bbcbd9b5d57a07131c7fc97b950afe17fa7b3fd9cadca75dde111d6470050b3735b1cb1e043c8b58d5887c4cbf49d779ebbd153b8e445f9d0b7da90530839305a8b1294c35e9f4c92afd3b4dd8b577f7b4398d740d5b0211724a5d5d8ade256b5277992760f48fb161dff96f1ef13159b3a24d94ffc3927dbd97438fdbfaf80a2b09f5753c17e8e51c2787a0c1aca15c35aa393fd5c3686f9b3b68ca6a486d213abbc40b1e90b5470bc91194019974eec6c760eb93c879abb4f3bf8885d31fd7ed9b7e7ea8286e3b89848b3e6944feec9e288380fa495202674a63f164b231ffea906a4ce72b3de03a19551da8b5b27dd873cd1202f3a4d855bf3bb9778815efc2121b5c77f37ba354ea3c4ea95f226743c04e605c9dea82603c204add236d671baca032c68acaaa71e9868a46c4dec9d2ccdbade8c8ac3c28eecf99d61fdd095f5c2378ebc50194b9c7718a53edd049411c19b3de1073f24f48ea06631d4293c459f1705428197976bcd29bf7c8b07017eef73059c9cd8f6cbd52d4bf405b8a25f744e86d26b4b7e78da1b3af2b5292636ae7aa6267f11256161d952e1a5e806a6f1d7dfedb92e90fd5904bcb13392ea04d49f77a36f6633991d7bd555cc9c37f5ddb3f3fa48278e611e29161528f000354e793f8338b659ab74b3f7310054c996cccc13a357593e398ec42a22347c7eccbbda23c339ffd3465becd194e81dfdce5af52f2565a590425c6a33fd19a31d84627203099b33f83c5262ede1118988b71c16b88420a8d4e7d6885f649a13600b5f95a7cf39f9f15921fbdbf334625f474b393b9e403b9ef034fdb7cb0b6d5fb247ff3274733e87ca86a0fb968adaa89646dd6b72fdad74d4073ed5638fe30698fbd72dd6e803620b9a7bf555cb5245fe7b1d5be1d4e720b02f6e8ae037c03de9f422af54693f9c04158a6ba17b6e215bf8014406caf4e28d86ca2188b1c0d2d00ac595d2753380b50b3b5b493d4a787fcac7c707c181da483ec90a83fafb6992a8303a3f857d5419a9c97c50583fb33c024d084012f85141a88ee898d59126b673f958b2d65445a01acad6e546f5b8de881797310d3d1d08c67011f1cbfdedcb96d965fafe42f88006f9b7186db1fdce60f87f43e16c109b46dfe643a0123f12e93f7e36558fa3834b1cbafc49533bb68e341c6357e1366396e9990f2c2b46997da27b3b22b94d08fb13a8388c9e0e5e68e8eab20a71f95c86334a8e5a27074342457889d4e08f7a7ee6d67b9300d525f87358f710aa682eda969570a54af818f10a74d3b77685c1c37530eb544a1342df002c1f09b2eeabff5782f1d05a39702d6564170d4dc7395434be215ba1d2c5f8296315cb768664e2b40cccdbb778ba55d56e87bcd5315f23a1ea579663d6a4aa7368cee0b617be4cb9cc40cb19c2eb2648ce38ed8509b6eeef731a0e8741970f0955ad6fedb795178f6a127c5e69a42a5b80ea68b8d8bdcac1da3e1a159d5bc626218d3544230dc6601b78510bb870c58ed7332b257500393f60c72ccbb6fd21a240dfe604e058ca83145ee6823e80974e957788de52c0de87971d5acb56fe706cdeac013f4813a844dfc9e1437333a08fd0493389ab3eb5f52f36d36c7bd4b3743ce728deb07b1ddd72ffd928458bbf5d902ec335e69bd1fcb3eb1dcde367b43e5e56fa2a7bc38427ea0d58c0873594cd4e8d6b16afb794fee166f929e121576759b86f7b40ee8828c703b1f930c311cc6d12341d3a596bac2182d54d09de682ff11f36ffc94c767f8fbdde3938fd51604d26f0a2b7639c00805f27c0272bc3f24c7d623a07b44f09601c33088d75c0faaae5fb5847a3e3efd55549bba217c521386d50a929b03c1be82cefc25be3996f13592edc791e03051ed4ac38612819bd00d86e8b98f6de084b73b26337c228454e398a3ff9c3e9eae272315d201670fc4298ac123a1d63ca3dedc24c629af45f7646827f34f4bd6e0859fe3994d0d05f2cc2e7dc987f973953553d9bf80dddc0cea1ad333f2dc7f3a9c7d6e21e4e852d66375116655aedde839c556ec3c061b95db8858221b5777ac74503ac4d0237857dfee0fbe0994836c2c393474aee53c7b11a188d4059f57d03b8bb96ae54303f45aa78fcb9adba324cf01cf62f23844cf1bb0a88e1a547d6f9d1abb6026d13d36ca30c5f6ff2f1e647ee16772dfa37430acf484f8fb9002dec3ccbdc9cfd92a1972cf5db07768c500e6a8c6d85ebd74e682b5931da42630208effbe9233b9b55df6e5c6fadef14698756c2db315ecd1c4dfb7d9151e1d194c37c6db391ac0043a0ed55c94710f8f2f6315b550e1d818a5417a0daa5ef53847ace11abcaecaabf83e632160d92c9fa68d968c49ecc9ab323bbb91ac93fd318c31ad14fddfb9211c096a51f23d131cacfb0be4134a8b2c28fb68854a53bed45eb9d0e8ef4719235abdeb2f5dac514c79b38f34eae328bcc82267f4c67235536004df7b747e39e1b9c7742dd6bc7219dc2dd35abcf67c8eb5c1a339483a25ee1d05fdae714481fe20ed0aa26d5196d9dbcacb2dcc0baa37ff2d1bbd5ab48275a702f070c4692ec0a84c4ae7aa9e7bab1d0eb5eb4a64d0c908ecfd3ac75e461d8dd28985e8205eede71a723738fdfa60198beab5551eeb66a82f2ccff1d3122a7e132548b48f30569ed50b6ae578210040d34043cd259ea0b3596699147b981b3a8b27073858ae8c292e993adec7856aa4d714b5c42356bb26b979d1b70ef7ffae7b35ce3c6997fa7d38a83bfcd74d6d44e455544da5aac576fd6ef1e044ce3f0e8092e2cf9dc1adc6bc3b51c1ac71aff36e36d68c4b9911e348009736f1cc2d51665641a8221d67cd7de825ff42e5e80bf25083ae83324080d556fc44af3c15381bb4bbe3ebd4188473f67f5481da7b48b4aed867e7a82c661393c9dfb6551f79029c67099820693e7c35bc8eb4adc8e1019083a365fe6a3a54670d82d4aea5960b72161ba492591598232894d4234e96f27187c719941f1010212c1882b54126181d67a3598978b10e415b08b5d23a1e6cede91b76ba5ec857eac9f9733a3a99f267fd414249585c61b8f9583065223dfe1e5fbda34aafd71e7356c0f06cc37ced1e2af7391285d2c40be2b1f8985dc3a648c8ddc5f5d797498ff7c159c3f149d5da8b3a6cff7a9926e3bd0a1b221903ab6b9e22d350f40096966c9065e2ad5c404ade2696e809c5aaf41e98cdadfc8ebc8c4218a18e6b2c51ca9ee61daa18e311f190c0521331e6f415b5e6ada67334df92f9512c26741ea1febfe3bde3eca252bf36013f0d704175b46c8ae00382e11e546725102b827653cb2c3c5056d0ce4532c560423dd3b77b307203a39b1ae3c1a837483bbbf0c63116740fa22cc177857e6283e6fcb35ea9e39790e4badd91557f4c15e4ad1147c3ebcf2ee673cd5e4bd2981f84cc42c4061d0348ef120bb0ad81585814c2bf0e8d76fed3746182a3533f451261a874cd9852842704fc6b5124ba3aa57ce04d44ace048b56ec09a4432fb3110974d411665d9faae06c899cce9dc74162eb5d7714915a82322bfb6980efea1480337c78bb9086053658aaee87841dd7ddd3c6d45971d48082205c4bb82cec0053059ea85d81c8b9a3d48a7ed46626f5bfeb20954860a0cd22609f18183e0bd8029ebbd138afa3b30febda6302dbe9a96515bd32ae059a98133baa86013ec56e82e475a0fc10d363f274910dd636220dc0c722aa18656d01dbeb22e777edc2d245f7a41405cbfa50454701fe93e7e4b2786b5eecbd36991d8b0496a610f4aadfc68430312e35f258c0d24a4c3d1d1e163e29660108909a60efeeef50f61110a8b36eefc7a035ffea429d7e1149f0a830fcd0df6762446d40afccd8a6fc4d87f81c8617ad11a36faf4559f5eed5b5ab01ccf063fea02b384ab818a8f3ab2cbf8487367af87327da401b89bceaa341a9ad86fa20de956d594382bb87fccf205a323c1be251572b4b5263486756aef66be0e11014536ddfe3f543d1b46d3e65c91174d84a39052a359238fc3dd97f810e61c0b58854f7c86a0c99e7d7c88b6f4278ab442b853e4763e98ac7e817c29152ce1bb0c416c48634b848b3edc8c6dbcc96805a413e1c57b50924efbfff94d10a474ea48d0f1db1a287c1d432cc3608a22fa7191814f3f28a2afbc60132aef0560c5b0a40e1b21158de6d6638a52e0a5b4a462b90c5f9d5614add6c4655244a18acdd903e634853067d77ed05ab447bb906e84dd02c3ca8f91752188617ea0a7a64e0f7bc8d92c5dde4a48f102e2e342ca73c1ec4b6942106437a4db2301e339532ae33753997dd68d17dd4305ebddf369c9abc41b394fcd96f43c1349f254d30d04c6f7ca1667472d9699157f2560788d263e4364dedf0894b84404b53f69965b1c9f154dd2c244732efd021351adb0330080cd6bdf7bef340bcb162215c757e292b68aa3d35e0223be64507a7c078847a624c05d1dd6b349c83b940e41d1c2fe3e65e0b793ee451959cbbd9406518f674dd55a9acf3b7e43005d62dc017fd93971957364dfcb2916b72bf4d46736c9c0e10cfff4d6904d1256f2d389a2961e15771c78c99bbf324c1bf998bae6aed2c56aed791718f77f74412e4303a71d3fce23f44289254891e56dcf68db5e388ded2cf1c638d0aaee520ceafc65949a8b2b51b68e68fe87b99a46fd2299ac1d9ffad1e5e5a6eda9576f2d6d5adddc70ddb2785f77282b56c3a1ba96c5841eff6322834f8ad906ec9ad86861a5fa7c49cb012533a88b23a349cc142bda6562e400e71a8858a56a39ea2515c2f2456e74a185eba43f14322f3bd2d0cbdb8bf62a49581aea538969cb6864eb53bb311b2383b2b424e2e889e752bb8680be0f6b0962559da4e1860926e2ab47d30371876a3f69d4539ac4f543dbf7c3c40b02271a336a30c7bc8908735e47d67c5523f63775a1247a2bf555ac4b753418e7bf6785529a2605cab8f4224b0196517a986e0cc2e46d9f9ff2605e4a577521ac1dae234efd22ed076f2304b64f9afcd03a9894cb59e6afa57d43a27bf35d9c803b8033b6b2eadfeb571f0314f0946df8fb3027a6aa856af67ddad0083ad070cb902320205b807d627ea32b4f5058d8ab9ffaf7b055a0040896ba87bdb2bd1eeae1c348bb3cb0543a66b2fa9985b2077901a0167b61d90cba049c67e1775105852f907db5aa7b303d1cad5f5a4325dc2c6f8efe738df9e9493e7f98b9a03f24ca1c2cfd21af9c4cec52e2b52120e1e87d3c92105782d4f68d86bf66cbd08dc2356b6eaadd26f9f30ef5ca191bddcbde8ad7dd211651d83675c2b1ded1e9c0356e9c551ffd20d4ca421369ebd2ba62b32ee77594aa37d7151534c74989625c0a9c19094764b174ad48d79fba17eea3d04890bd1a2c3c5fbd801bdb14d9149fadf0fae1bbf830466e30b544a1d8adf7d9b538f73439b96b17e5a215b34b968978fc3ed4dd2253561c6c317770aef7c844c30ea856119d49b0c26e8701c1b3a2bf9830628ac8c514c3a12942deb319ba95cd68f97dbd7cd05cf20b33842ef21e04276667dd617037ca80a32021fbaeebda136f6816f103bc2c55f711fc5d15be625707d867b825ab909aebdb5134a46e75a6d22c4831deb88a76671e633c09</script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>面试</category>
      </categories>
      <tags>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis面试题</title>
    <url>/posts/adbd2430.html</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="密码不正确，请重新输入！" data-whm="文章不能被校验, 不过您还是能看看解密后的内容！">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">该文章还未完全完成, 请输入密码查看。</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="5e19376fe88bd3b252d57cbc32098ebb60935efd90246d05c85874de3a1a1bdc">249d63f61f66a83e2cce6900f57704ca0dfceed793e38fd205dc88f783a92fd26aa881b86b800c728729df0622944204cda0d78e294420fce105a3967cf7b1ae35f0498e04e9f889a89225c1bebc54c70f13ec90207310530af848114f219a8bdb3c0fd2c39ad514ba2cd6630d32adce94a01b3e37e8c204374a9782d5a778ddabbc6bfc8020b01d329fe5795fd88ed897838d738dd1d73adff3ed06589104ae5e8730c13bd623b7e946423dc40809a16ca28128cb0ea93dce082efb53d69047a888f6fc88b41f0ea66db8b0c55374d515407b177709d296a81a597b613e3d18173b8745467a4cd0d5fe479a1ce7f3c838b75d7b4af8c96487d9f0d38d9041345f68b02e17fc77f3e24e578fec8702d27aa61e58d2df8a07ff9e152f120bbcfbdae4cb5254673ca8dd1eb43cd6a6c971fb8874ecc3b7bf842230e8686f29901df2dd39b264ce41ea6b7b71be4035210fa2122acf9eeaf2db60e8463592c51ed2e129850bfb4e99cd4a672333a76ce899a20b111eb45e9dbd7179583eca8c88c1bd6e1501d0410c281d799905502c88e29ae34882f4d7d5442fca54e88d2391fbbb75cfddadf1fcbf8d154e6d7d6372e579b124c36f1d600146a209d2a9ee20a6d19ad7c1b9f74eb995dcd239f49d3cc095c610728fba7009be06d0a372245a849f54c7e4a6bd15c043592c9d982ff78315551d49bca4315c02de841388bdb654de161faea286a316acd9bd942380d4db4b69166fd841328a09c0d8c1066311b7db58fcda7259a1a2db58d082cbe3d3941a0f07d57bba13fefa36d2ac565c7341c84e61c62179b3a2401f5edb6e625aed770d1657d5a10ced1d1afdc8ff5bd8a150c88aa2b863c8e8138fd3635c242ac52ef7edd260b8552b3b72faf56992511dd3e58e804f09b439ed4b11d86c5c59e054e5ad41079a707fa2eedb13685daf3048bb134a898446decb755c3f569ef8aea4d14420a4ef534a0736e477e96ad703626534d7472628ae6b4b318b0dfb7ec91f5ab0923a8b2399017737fd9531715cfec040e36a3448d859d4febba15da718b30bfd29bc5972f5e356e6e6921aff8428ab4fcaf528e23602240a1e9f4bc98b8911bc0ee4188d33451d94266569aa5ee4eaf0f62756bdf34c90e296fad6c8fcc171b126c16cb6674ea56ab33f3957af37349197293fd5cc8de5e09018781d3e237b8f210c90cb9a741700995d04c32de865916f561734f7594e052d5bdfb5699845fd70767236bec07d08c7e644ce870f4b2ff05de21e746b06177c17d80abbe8f0289ad158a5642e2744bb689df0631337091284505ec22696ccfbee5d9d72ec5963315c50dd9a309c4d3985ee8ed02af24fb2d4b3f8981a1b36abfd2dd7d9793408d59034f94d8caa9e599e1a0d2939b1e8bd4c6f518fc0c5ee35d57f252c3cad04148724990b181f5b5f065118a4ed20acd41d33bb75f9cc749521918893ce26f6842289a1b0e5006724500d215a2adddc3fdb0f2d2be31da15497284719680257b9a0e6f9c7b8139a56e79b4550e03e98509c552cb377c39ba60b09e6c0ff29945e7bd27aea44ba382f9ad7800f0bebcf31d6c4a48440edf61f7e056cc64e7b8b18ca74e8b77bbcd8a7cca763ce516f8a7967eba87a72c0896e34f352cc16afd319f2a2c1e2431dacfda2431e45012a6e01c78fab10d0723c7a11ebd423bf04366c0d8e43c41db0c135c76e7fe9c4028d9787994844e40de791a9100e6d99c48b53f4fcbd07f4d5d40da35d7a0a139a80f0a8e43ed9b8b707d95d79a4dd0f0534a731170ad659e47a887d39f0ae696db418919a405c9a158eeb298d4547bb968bcfb5fc74c7026f1731f1feaa7d420da8a89661dfb1b71fd5abb694c4707bc8899fd3cb0ec0cd561eb686a9db7e67ce4a98c65f08845abc5b7bc7740ba98be6e6371fc0a7f9958aed88ec135b17bffc87b3faed040cd5716e0f101739cd5d28c0ff3593e73356e47cb156ff452d7d96038e86eb0b6a9a152df7ab4d8f52d941dd78a98a797b2b94a5fbf900868f0ee25b43029845610e5e1df1ec02b208559d42b3841ba6cb9461fb0e64c0be7ed8af5bbfc5b01405233e92699ae910c379ce4c9debf554ae095701289cbb5dfb35f91942acfed6c17149222929cd67f7b84f94a5f1c059b4e6256cfc84617a9dd7d19d175694694538d97a223b10c6557f1ff58cf2e964f0e879d80a7e8004d65e7686df4d40a7a5581b66b263c23d3765b2755590c86ccb38b6694c984adf8c19ef47deffc1adcabc4cd5dbc22ef175717b99d7d25cd70f3dee4e15c8db5f0f44a3e1ef1069df64c3886371cef0f8082cf42309d780f0c30693e2442fbdd1b8113c45cd1f81966c58c9d2df1ca7f8c0d7016dde84580bff8adcca2fd3acf4a8f85e72df7808b68a4a195ccb697894044494d267721ad9bdfc26cb4482243bd265c7382638cae399967ca139abe8280ba1c0d0b0cc1bd6b8a8b98ab041529b65bd9b8694d9a32c0135ad4078a5e1445ee26147a4f5f1e82624a89006ae2d50ff7862a47903af75898dec043286e47ef555494f21be6f04ba493724aa64ec83ab95ecead32f2ec22f2830146d83613e23572c4b071b85c452b2410ad0831e7ea8f47db29a927d9244d011a888c8744585218c28cd2c5b2b1c3f071d7ccd7c7b145c17905ef0aa6c351afe53371c7421e62671831fea67faf9b8b0ffc4ecfc68789c814cd488cba22bcb3fd8e42a5337895a3c310c412bda72ba2afc3c1dab74d8019c0df87a99c6aea5b068dd257db085aae09d29aaf2f17a17685ef7346c1ca27adfd9b00cee88a63d774e394ef2581386fd60b661f77ee076dd2131f8add9d66c2f9d06190a0f698e227ac89257ff592dacd84b6fe8f420719ac1127059ce58220aea022e00509120a6b35d9e538e3c92c1e2dfcb79edddcd7afa245ec9f5591c25c7320df83f8a000d23c92aa9322c56480f09b36a638316a61f56b85578acac61f3b9aa525023af67fb199c49754e1bce7e84394bb608403235be71e13324b03563d80a42b923f3f5c3fdbdf4d2a3dce0c7eddc83343772e021e577aa7670823708bd0fb063c81c00523023f4e4c914d52b13089c849346a59cf2596c46f36d8eabcc0870c266c5623b6b4139ec18b6ef78b8cc777e8fe61d74900f59094bce02e5d97d80cd2f9d7835652568b02c43d493040f5d1d367ef24d6c43aa5b7445fe441f0d111bbb995246510e6665fc6cdac4568422fe5aaabf99830e6478ac19a47c4fcf7ca83496cb09900e08aad84829d24d6dd0379c6b3085bd04d59aa7ef4e5cd84e7dc9e068bf066ee6e8cd1d89cc4433fd0ebb6e62cba0aeda3d564a9c3463550549f6f59c94201773eb778263de3e0ff8044e5b80076566306d402714c8678ef096452e50c3d19e1b75deb688d9af78fe4d2893264ba981778f7bb581c4a56943e3cfa28554ec7540d80e67973d63bfc86e428c5765f65663083bde911c5ff7bc57fa8f8e891363c01a969e5165839dcb7cd7cf9177fa8fe344eb59c06444f7a1dba4d24e03bb5c8a680ce849daf3b0b652391a242a0684addce21ce5e6950f01c9fb09a93ed488fd844b7a2dce1bb9ee4ec3d193b532a8418568679e6f910e0da43be8b535f1938f9c87fd18815128f5dda0878229a7e3e74186fa5d81477c54e571bca579836d8aca0fdadff7fc69cbfe16b64fcba8649be059d3d3db6a10ad5b7a16f4643bfdfe6cf0c446be11e5caf3d861ab2b62caf7f72ad271df96872f0f5bc0459631d980b87892cbb961cc79fbefb83bbfcb73ffc14a440ccd5399aa121696decb8160eb6c5aa649ad0ad18c360a1117dac7272c964647e4a162a412864641fc2f5ac8c12d4dcec48c1360d973c493f564d48a5227db15f2ccf33a5b8779d2c34edfb95532270987835639531903af1ddafdf4684d83fa9d8af72cef2521f6c9f7d87eed9a1e60d88b67add200273f8c7b0e620ca2d820391722f9b71084f5486bfc756463b8e0a4f4827d1525f3c78e2493b635f73c2cf2df77adf42f52943a8445fe8a40c39a22cdc5294e64bf5a537edbd6ae9275c772630f0cbfcf9ae38bffe90309b95a75fee5cde91f0877123e42d3eb5fc847a906a34a88160b473762ea6969add33629cce3904459c78f3f57d9dc5791cea804b4a941168ad40b027b46521f45e0d89d0f902a349fbc3af127a652d56f0cfc902eb22986ac7ab088c98c38f955726321093fb84aab5595b96dfef22ff8b73f9ef2d761a34f3751deaac6ee6fac50a6c53b39fa2fb7f51fc37262e86d73ce1db885d6e9e1e17c9b2150d2b09ef47334e05c764b546a71699f7937a00652b09112e4c654c733c7022b386dd0e5112f7215ae81f587b441a703c2f6492b4bcc71f065fc59c434da89aed9cd4288a5bd400cebe4151d3eb654a2489f5d6ea632c9f237f2e238af2764f2ad007e22a3e1565c791406c87c554b91187008558df43c78d57d4900ed02023d0ad7844519e65c7cd4f82061f35dbe6fd296e591d7a2b3a62fc98be038393d28ea6d3bf732ff4f705e075a6f777a4978260419a330c89e1cabcc9a2617bfd935912c0c747de56e4dc30b1cac2254782af7b90ca2ca0ca98b231e59f402763bf49d56b192e1dbfb3de5909096986467b53bbe68e4ced5d21c2a356f2c5f89c8e59283fb77dfd10852c613a91ff0081c46ead21e62cfade1f0a69ce0555fea610a7e8c687e28f8d5877c79f500d78b93ed1136f7ce67dacd0fef4782136ea2cf73c3afff3361db764b8cc4e857db2eda2f3d643c2899d95cd1288e29008789c272db48e2289f38b3d7aad40070dd0d2bc6f5fb61061fc23e4b4ffbbcf5d1f293dc7acb83fadd6649be6b8f7423cf24d76e49d94a9b7462b4dc1300ef31f8506fc48819a0433a5f57543871ec824eae6b36f4cb9acde9dbec0e9cd03b586678f56967fb3794c576d7686d39487c1461cf8239585e84cd26e779947703a50c12877af786a3fe860409b138f6a999a6349731175fd6dd59a23cffc7b56fc716fc07632784587a44d661a7bf89c915397b0bdea44a744ff74a17545ff9c42a225721eb6f17cd056f417e16656430d09f6d2212bf96123e9494587b8e93e6198f02622dfb978c785adba1f77505f7515f1a00edb7d0ff041d95db9cee09c1130ffb35f8c87df332714fcdbdeb985b46b22a0bd429461d7223c42233b77811eddc4951f28ce18be8715a962b30a8a7384836d0d399c5f6047139fbacaa1c379467e6cafcb676e60908af596d896941069319d0fea3d6906e0cf822423b0d6e71f21e6a726f59ce6f892c6ae3621d0e35e725854091eac9ab76173805c599bf044877334c5b60aebeef1ed0275aa5c82f50269787528c5bad28fe11e161e859fe5650ada015782ff95852ba7af0316fd1b8333602c381490404bbc569d9ebc30ac55df1ecbf2e1aeafc85529a6004e5dc6cda0ac98e16299cd444b29926201a535a65fd59b94affe6825160fff336380009736272db88a200ed133952bfebe54604f2fce2d74b136293435bda08a328ca065aea3b39ea6696c5e885ff89d0d83a429ec129895543d2629dafe4ddc4052de59e1b55d2289f25bd57fea0809745ea56de34e34607b171d6a1d5a8c6c95b437e8403c2cdf307f12cef2450822b5fa10da411fcca421a6289aaa1aed97a3144315638ddd864d4564e32b9d46269baff693ddd29f37e4715de3bc55c1fbc12113611e38ee09da7f2943f6e6f9aa00d7a9ccf3c61834711c70e3dfa6badf29383b7b6a99dc60e08eab37fce95abe590664a7f6546ad5df1ae31ef7f8459af673a71e2b9faa885640d4b2520d4f85c3d359f1e1f7f5619336017d65273b3759e37154f8016605a3c21e66ceb76205b92257b59db6421f8d15a5cd282702f0407f476e261fbe9f45f9b66e5fd5342326404ff635ec61c6624b44994fcec49d8c46aaef6da0cb31613c60d15f8f6c34a9a2f5bf1a4110c1968db4a62455b7c4ed6d97d010d5b51388ab25d23dc9ba11e767d2cc8a35476931c7e235e500993c6ac7137c1061f63e2ba6bad3f156990237c68ff28701b1d5e79b3bf549d602d8429b7315a6cc3ed2463c29600cba4fab3e349fed605735629553cdfab8825592a469455d16bad206560792e1d6d8ce339561dab80d3014ff99e46ba8505f2d3984ffd4666591d1a7828472e037d079946fb1563e9a02fed562d98b46877f1437ffe52435b977ab1bab143563c409e2370c1d095f258d9d7e1897d7756884b2a416fa4fea4e964f113bb6f106348fe77c5f6dc6f1a89dc0cdbe568174222ef0cb3a584c955434e21ee4134f08ac8951162c9ee365193582e5241bf63d0826f4086ca13650aeb0224516977006cbbc6f9f7b64459a4c93a2bd887e4b17049c5f408652f69674e170e497d85fe84e659edd40ae96afdd45133b6eadc3c266803f44a2a2b10e6c43f92040eb51d36eb09a2d7f455e6e0312ea953c5707752b4f6a8e377251ae59e1181b19ceba7da002a4f8a1c44e7df26137c1f92bf74aa5e39e6dbdcfa45f5b5e6377886cd58332ab302bd0b51980da5f293befc68d4a80b5e61eefa2f48617d68e48d8b994601f55732ad282673bd9978ff203e4d9b4188116e5fe97aba3334f5402afc23c1a32276f964408c8c1f4859af0c7d25e2bcff55a9a3ec8cc327467ea680f635156f9eab0ca1a9006dcca84e0d685ca6792024c8a4ab208adfce3fff01163bb3bd52e8c68364e96abd27c30c31381651f4f13e6cce1b984492942395d19a5364b8bd66d36c51266b9048a3fd8c8a53aabcf8a4b080ab5004921d6597f8eaaf01ebf36fd5f31c6b7aa21fa686265538381f49ccdf47dd129ab3de8f478244a12e578c5c07808f2d58e18dcfb7b01b573c81fba44a8471861fcc1b70e99736a1615bc2f31efa12ef7a8f7e7f76787183421b9c9a5aaf21b384f9f3552ee791b842c794017d864167a6cd5ca56acd373faf50695a517153eeab1c1d27d9f5761d1b61b693060beaf940b587027af5e6c7a653ba290d31b8a4d4b78cff562a9c9e297788f0aa8eed0753fe5769000a5077be593fdd91411856ccd419c9e10a7f27af89f15bfc92fcb9ff0984e1e8cba0b447d1815b58d03712a7198f6c01225deafe7beca596623ed010a06f2230d0e979b19dfe92ad4d13b800e11b2f5a4221744fe5947c8da328475a8b689aa60855adeb7131db73aa155fe625fcab728ddc27756f95073565d071f2ee5dd5995e0227080ef7c08101d54fc8a0439b9219130a35122b297799ff320cae886734dda4a381378c2f8fa9a93d2b7f8d1bb1b98d7ead4f43e9045c8c9ed887b42e91413bbdd9ed090f80f5600bdb3d86c52828ffd755cb2ffc43bc7140617c85c14f89c63f37d986df12a2738007f3a975001a296a8ab7261ed12d739e299c2f34e4cb7f5f8384825097b84cd80992c1e67d863528b5a3f0b796a042c1a025613feb333803c974a6c9e0931ebad1b4dfad19a4ea4ad759c78e1f19b285adc823889efdedf4c7064b6ec038290c938d62d3b4a91d283ae5fc2c1015c6ef5aa2c7b1e7f76a60126d7259f86b6ca982733cf5f15abb22362df2e2f596e2920ac743db81874ac396fe104758964b7fe570e1188e76bea0889341da3c1da282933ce18000f1a36e9ce988985d8e04055c401d759b7b205845b2afcb5e9d8a2879a8b8d8cae88418da47d0b6a2d484f7ffd9bb97f3489f548ac670f201dfae25d1fdbf0018bca40bf7ef0935da3087eddc4b76986b35b410cfab5ee92e09470b0aa3c021ab095e4ab9d0d46a9acd93eb09fbfc1b4a1fbac6f6e0f67f3a469cdbc9a665a83ea3aa3671458fa1f06f1c12a48f3583ee47a38fc85ebee2d1022496c5113cf52ebc6d8f6d8a299ee330450b95c83d320bb1a9e25244d47dc8ae16078966f360ededab3e42d5d436a48e4716e9fbf541824e0cee78b8c7be9d0902094254a11d0f94525bde9a903f8a7b6d4019c75509282a30bf299ab932b55a725c5c03d8b7b7bd40b8acb2671d3524a12cec8e4d3c92ea645b75490647e756206539b9f0c91ff8995de530a94e38e2fb9efded6a18ff08cdb20ccd2743a556eb29c74077581cf6fa81ba3a37cb670ff1a4d58fcd6975976e769f67e08b46269af0981f9a539499f9a050512eb34577e7768fa919e27a8570eb31559f0f0ad7851ab847a509947a0ab51d50594bea30e6addda2421fcfc73c9782d6401e54ab74408e97c2e0a986779d4af87b43e5bfc13e9a183002caf5c8ab875b8bd1e912845611923b3879713a86ace03ed0442011ef427ea5553785762276c954d93671a649e33a263cef8fd862a30cce016bba04c1958523d36cd5e6ead7334c7c66aac517b3d309b88f0ab3abaea3e55d0386f363869a8fde04d93c205ebdbea705feb8794eacab5e5ad533f85dc1353786c905222d2c6ec8f88860c7df3416ec40df584393385acbf00fa232b2d1b14ff31d424b1c924cd0bd5aba0277fa5a887c830147593ad445d79c3db9fd84ac7929c391960b1468a402ca67f3b494fab13c4e4b364896f576b2e7f589606b46cd3637fde6a001c70d6f5f54eb86f51ccc573b4345c209fc9d6954bdea27bb2a2d4ed506720823e3a0f643296d19a71c6f85254ab17156a7a8f8d6a5f3bb4e63dab78ac5c4cf3bf6c4e866a6ab83e7b7f9fcd6b4ff0f901166416344d30eeb9dadeea47c121ffea56c4e6406a94c64868bf941ccd0bd9a102f8a195dd12245edc68a780a9921e44458d813ad5d448ae73cd3bfcaee9d03ac50851edaf26337b27640fab70efd366826eca0649aaf724e406c4b26ac11897c32507bf18d8f25cb0e7bfcb20019205c956f5f64fcb440e00237b8ba17b1e8c0acf255797bd7353aea99e8a5da371d4f974a486f25056015b5029cf1a9319da855a16cec7020d0c5988c95a456d5d3302f90c5b14d817286ae90675ccaad6665cdea9e4779249e78fa80fb57af99f8bcd6fa78b8e4bae38d7aeb57c18942058a9b329ede8d0950185922a29c77468352182e0ed907dbca662bcacb2018836edacd2fdd6f5a21aa4b66567134c6448be8cd7258e4d768e376e60962d6a5af5867f52d6428bbce43687620e3e28bc6e7bd9827c6754bc4c8fa888137b53bf787608a5e0c757f950cf2de33d5003ea99fdc4615d786b9ddfa08f5170332a37e5ad123f7ddd6ce3793ca0cd2d2278346f1508fa404cd49fa56f775bca97103ff7485d561c659f7da3e502c5490080b039b1e06dd5be9190b30522cdd30e0e6fee0111dfeec538f7cf4dbfd88e16ac5993df1a39649d44a238d36b0fa2943a7772aa08e33edfeb0e17acdb0434cc8b7d5ef7f8f7848f199254f0159a273d47f3fc2ffa35a53cce18b643ecc77272ab8cf1044e4131554b0d404668985d7ecbd808ee939a5851aa9df07331a23bf6979dc4bb68e7d6d02cbecc72ff6de9fa13bd63345f7417da1ca29a0294930b0d32ea5b0d1aff8929aa9b308d658fb1cc342b0cdaddbb3caabc68991bc64de358998d0085cce59211f609ca804326fd3c7192ffb180c0d63fbf4d8221c9f29bbba7b106551efc5d6efa42540f65596177c429b0caa298c424319d5b1ba56715a33fabbc285d874acd64c1cc7d5ff9a2a198533853d9bb455f7c6510237b1d83cb77c5c76b654f3a60c2b6ebd924c0db92e4621e70f5aa2fec6de445c5b34022a89a00c2dd3e0ed3543955b6367245528af724168fd9eee903a041c214e12e986389f24a1e4a538e4c1fa16fc39e49d8d988cc556a12328a9b6f32364d666de59bb1a202df5667ec444d1c26d38dd6a55d526f5e1335797b40582efc445fb52539ede7a4640e4a64454f5120f1198281a3b41adc6eeb712f94f30a6c162663a5fbe0d6bb2ac73617e6e31ac9b5ab7e63c47d13418312ab03cf8a640380169bdb2767f7b5c71c868ed3da071aff298a8750739781c0e43dc5c1a11b0563d249bf2ae22c59f6433794440c03989874f3186095dea89dad737f20db852939efe4ed3e83c1eeef799f107f9c0a2fb04800bbd959ad67f84f5f922cad5d320ed83882b4c22806aa030486d72188673aa7a83cfb0498a3bd919ad7a510216766b4617d94ffb56e21491e245911bf8f14bc2937742257b99ac822c71eb96e9d3e2514c472be773c1021bee0e4a5bdcf960141d924fe68da94ae02ff5b5b6fed7e27099d87bbea5206e0f89d77fba7ea679c5037270079f999948c0acb409b744d11e45b57b361ff7bebd563988d4f72f70a06fd5b543e1dcb214ccc2b2c2bd2c18d093489fc9da35955ba85d8b2449f3969dc5a4b60f229cc10e4f5e53b094264bab8e3c9c629b2ba84859e3860d36d24191f839668119ec6a9143cb42648ce3ba755b793cb7b65593ed1d6a192b34fb3bf46885b47cea3f9bddef23f069edaba7303a30be22e4203894f8044af5c945f9cc9deaedd0b980ffeaea3c171dccef56c5f5aabff65b5c88cdc7b6e131fb2a151431f062997e22a9ca85de7c88cfd1b6fc0e613817d1315ccb00c83766fd9e63684cd4504892dd5b5704a1d0edc3f9e853a559f152856e5e52d5198fa7cac6061784a7f6997daad67bdced20398953820ba669c7a40b1ffcd6d92cc134b69ec9c87e5eeae80bcf84f27c674b221616259646e750074c0eea5e19fe97ec407b8fce05c00572bb4af2e3c4162e885924f409e2ee540d26f20d773b82edf284031739552ad3a8bd9cfbf12b97a7998341b4023fe870742240af00df2f0f8d66c8266d0bd6cad3f3ac3935dbca1f8f378f00cc6c2a9d7aa5fec1e2df084b62b0b33d2420e66e90cc8801856796b705a764d0d23b26c991f463c34b0731a36608456ba5ec9d3a3cef50ef2f88be0229e7b88bad3a768dd7dcbbadd7c79d33453e46664e3723516482384b82ac8f8f287a4655ce0be9855f85e0934560fb725e03f86008b5f4d85d7e47c1adf0be06434e07f6133f47e582efc707ec69bc6ec138c817463dc4a3c3e83850c95315a5f708ea5570afe956cba523f87e7ee645d340b26e2834469142ed6fa334a6e0d9f269de523df556db35784a33cca93863642c96243fb57adb07286b6a1f0c5344ca4078ccf305de7c1e8c07c95c768d2d9f52f7eb71b2a92574b2c5219e949175d77ee56206eea546283127035df3b04075d87bf50aecff0fb774d0fda340bb8ffac7d93dccaf4ee50f80d951246363e73991277a72edcd0a2b3af7880a999f8713cfd9393192106d0de1da02ec440bd68587932a1174ed7d956ee636be5a858d485f0790ef485b323b2f85ec325fa55c0bd8015dadaf782a358fc111d7ba99b2e86fa2f4a41b2f9fe0974baf674b4b47ab1e7e08a4413fb43512d99a572d94edc9e0a33e48b4eb46d3e7f1d5372bf8332c4f5347ddb3e7afe34d819d4f40d6ae33f0cda06ced5843fc4562912c1aece059d5e90807281f51ef9b55f19c21a8851e3a3c3f1bf52b78952e4e9ad4f8ac593b4c744383355b322e0f67aa9e76b96942bb29db7022c03491ddfe8a2d83bfc925fef5ef840937c6a3c61c84b3eccdc3677aef8cae449030c621bc53a407f5d582594d399d9c85792b0417ae57c1aea15d24a9d484331de518e5397d2de1451684e0de81fa955271c78f4232bb305550e2bfc429bcbbca5495e4494a455db3373d6ebd5e3ea424a0d98366dc94703029ce8f7c7b588e7e01c3c7dc8d2be4692051ccedcf4d1a7ab00a1390755b94ca2da59d64ff7fc1093767705c163bcc6fe5acf51d6f699c50a13cc3faae163dd49df8da6ca3efa233d4fdd3ebe28d63d66f0bdeb5dea2f74a52b5a685a0bcb1d1c22c39eba9e3ac7be384c595fbcb0f63263c27ade4d5b2fb2b96e92026e9dc79ead72060551fad5dd7f9c8ba79d52ec1f41f44d7475dd0e9ca84f085957a6b359c6cba017388d764eb01ca44fd9cb9d839994c915fc987079e6e1d4cd1c157deaa09c84376b90ac43686ef3685d7176929dd397cc81682324d2cd3cc602d08fc18c4dc64e61a94d96b1e740e9b168ef3e5ee134c7c37f34a3f5307fe95c074283f61c079acd01a509795f20135c0f706da8b412809e47c75926711c22c99732ca89a680c95c145530d13f029e9348e7d9b868090d1a69e069fce433779dd0918e0b98560ad14a839bb5eca3203d7f7b252add58a777f9d47f1bb7468fb5e68cf1538c9457ff079d8d5c9c1f9d55049954b7805d182177665ea4fe256f1eb701d8995f355a2e641a968d5cbeebf5fc8709dc36e59aeb9a14dbe80229efd985ee401214fe6ba61e74807944e0e4902062b9484e97e51db6d365296a373f5d899eea2e57bed3e6442646453da6b2bc46ae60a3ee97d7245e49de9e1a7f95c320b6cfa334215247ecc7b3b5a9439fa67d6c6073dff2407a731f925636017c18143f9f6b3d139dcb6f1b5c22d0b0c2bf5ed4d8812eea530b4681fbcad0567432a694e14d50e362d3fda02de76f0695b0bd457d591945272eb1f98b6b82d031a4403aa71b8521839530b12d503e732bb8653ff59329584ada894b72325ec9a50db82391df9ba16921ac9dc682e4fa4e5deeff8ec13590be9900d4b8956321823651928edb2c32655fa89b805f9ee8f9745aa65dbe9ff116e7fc5c82d129d93c3217c91132d45eb083f1edbf42ce4ccf051d607c0d42c2c79085697d25a91fee29b95b5d431e0a70ca23e26bed4fcf93f7a44a6559e29aa58b13471455e0e9fbee8de50a4fa4152be092bdb1b74c206821399afe0c7b248d9543d75cba85d24ed53e49b6dcbbe3aaa827f869d4942b0661058d6781142bead2feb9d237f555e9061c7befc9572f978dc669865e736ae81fc065041d1bcb49cc282b63b908911bfd75e1e8fe28f946143b9b613da9b82ac14d6439e8267be2c28d02130a18205950f3bebad26a3eba09981880b9843b069851a22f99c6b2fb6628656bdae5656793953292f2273409713caf4ea5d638d37fc664ecdc4bbbf7d249b57657cf5e47923a5cbbb3297098dc77f8f373e63cbb2879bf015e7641776d4f309a82a4f7cc061f4e25ad8fe8f1993e017867282b08512a9bf486d819f6079b0023771a52353c117421bcaf8354986c13331ae7f71a1ff136982140dc18f4973cf84a9c3b3e22ca98c19c166fcb06b70b08293222ebe8a971ae7bde6dbacd1b00cda6f8cbdf10c874440a0ac796dcf233239b3a1d8cd0569d2a5cc2e14e0b1a6588148377e084d6978b3b8a4087c5c3f53ee57f8dd901668af3a2bfe211de05f50c2335d93a829b376bc7046d1d886d0a1c21bced17099d5a0332a4c319ee1127ee0b34a3b91d04019081c9730a129b56a1dad1189636b916abbd4c7dc682b10983b5f76af7829327052e05c823f6e0d5a572b62585ddd1045c0955fa81eca46acaffe797eec58ea4a2ba59189a8457119caf1c2d58d4ae389cff076666d20639a1d010a4a283f22b38061300af809df409bbd441894497973b6e1c8e7c66ff80803cc8417d423f2290a69dccf961e52f9278efe62783129038d8921c8cbc979ec29b00628782581cd474c284a2d65d16a94ad988e6d1e9ec484a6e167cddb3e88522533dfa8399101ea438c325d9b0e468096896449f1c34f10151cf850306fc2ada9cf0a3691e3a60f40ad26baec2f57894bb0d60e6e086133c72f7ad52c1d2c55c683b5fbb4ee2ad85299671d4b1793e4334aa7ecfec663283108634c77a7a1126f09083c9a8fe0b69efb3f29cf441dcb97d8be98f6041668a52dbccde86d42967a8b5d61d82e9e820501583edf59f2045d80d117db4a0814d7387f57b6eecd321d4c8b7d015b60563bb09adeadcd17c795c97a4ee5e36d2e810e1f5da749de825993f822f3553ff887bef57356c987cfd80d6dacf0af2d3e126890445c20b08d4635bc4341af6833939ddb113bb29ff994c4e24f76babb09d57834669c47a943b59945cc193553163cae560b2030042acf7924f93faa2493723bd5ab0414de7e96859f40547676beef86f765f68070bc2d562afe2fba100f87089f4fcabfce51353b2d210a132e7e638df7b81d2c374c6511994f18d8deeb6dca91f69196b22a5ae59cf5bc5906856aaec9a0f75c251ae295c7770d9e50749b9b469c6dc098b606207af5738d0d3bbb00dba0b5a9c6a63b9399a5f8436247e2adcc684def13f5b3d5b677bd12a59ec91742f99c398be6cf8038fee49b121bad9c83f40f505648038e521a356a69bd933d72a07d2c7736f444d6c0b961fe97904963744f857e6f10f337e020ec6b2c5bf72c10874325f6971f0469e845ee995f303b4cc27f1a210fc4b63ed644a3285f717b247bbacb4d8ec85862c74f05aa1b914116e92b15e00801298ed698cd33077f55daa18a48e4b4d6a1a224b1cb263c3f05a87b769fa77335492d45d781ab3d39199207a5b2e772edb0f97e5fe399b543baaa0a1dc703c4c92ee7c4e126218292787473677f15da5c8690722c8a9b6b8d78a9d921602eb42f125394b71c8ce388f43ad78524cf66420550ef515acd80b9a64981577c73a0339e32a9c1016a30f3289f9d54f966b6773253718fc7c165d9290277bf2ddb13901eaa497631ea5adea9be94a048a8a1b35878fe0da32343f3bc050f3f2af58586faed85ebe5cb3a3d19b59ba544dcad2c86c6875d86d102f6d58cec4d2bc24b882cd161039a228ac1fc7a12cebc7f7f3736cbb5a5116c71f63b93912a54dbdbfaff2c0cad3e68e336f6da7e1d05af92460d48f9cedd9a5d18d6b120a840a0560beb12ff12fe02c1d5533badb53f63f465a373b990533ac00347086dd70f62933f0add52b66ead53048402d8a3c73ef3cb79f05550c5fd8d01b1fc257c782135c6a56065fe243f118a2053ca87b590e336f0c47215fa153a26f168eb84d5e1f28075daaa0c52765abd7286cbbf5258bb040a7ae73e8948f7bc53190be3bac761a02c9904d856209319b4b32d412e217510c739d6510cf127ddd6ab4a397884a41b067da3b68a80dfe29f6d44074089a59289620f5163beb8e5a1b80aad6fa7f26efa99af069db0af6aa35b9b24aea74e1d8d50d7504b36a162aba86754e758c7e21ae4710192045c472be09aec050c95b3c80dcfc21a18bc5e06931d9441460799f66b3cf5d3cf2b7adbf5a9348094b39d1a7856c893d0ba2fc92af22e81f21f7aa164ccbd2bf3aeda825cda4071c2945a56e154263f21847d36e625ea5ba8d2a41867eb68c9339e86af54f38bdc4849f4aec5928839c83f285366ba24b695e01ec877bd5c0e9cea89e0e2a4c061e25073ee5d6565665ef392ef3c308293dd4702ef049071619965bf75dbe93836763d721f740db88b374236b5b88120ecf0977f41dae58a96967b4e3af2ddd2954c262e8d093b267f84944a5bf20056b61ccb00e143cd4fed60d164815342aad97b03f6c7dcc702745be02a8293ad63bd6cf2987062f3bb486e08da3dca70da5c190d0d31373aff18c22bc32ae2421e3e82d2898a4ef6466dcfcc45fb7ec2235406909bad4a747256642631de884e1b35ca5d091a37f4084a7d71a8a7ab341b0fa3883084a64a95f7dddd1e2d9f9a6573e99337daf67e4021b8447d05181fb57ecb22968fd44c64aed60516c34c4f12072fe7a1125f46599d1bc5de89df71fb081c642af98bf4d12c138b5f905f1692da831ece8a10587c2f29823e9b803f03e68fe602b13e5372ccc07bd3b22aba5fbe09cc59723e08f7d592dc6860bf2e61e8488792384b24c88f00d25a22c44dbd8d0350532f86b6ed2f187d522bf82b8b683fbc52e549406c2b4ceca22159592d726906efd673ebd682b22d64e8a7ec206926f1bacb129948e81de1fec4a82a5034dfa185573409b9e93990cdad62c26f6e52c0c407ef484649befde21e795346068d29f4b2687bfa4cf7df44108804b06d444dd305e9ed39558882484882755c693bb1fffbe8ad6cd0f1ca6af0230dfadf7a3c85428aecf89e86f09d99d9a2cd4e635e9b3a25e116585ec082e6d7dc01bbd3d3b3b2407156e105b04d1fc9a7f42ef80ddc97b6f21feeeac8ddd802f3912c5f1793b1011149ec8a5dedb7280761935f5182dafb4815d2fc359d454bbb30bb0d5996c1cb8d5cac54cce1c5970aa0220dc0460ccae87569ee63b0ffb692922960607d65b402f9449c2ce53c67c69e860d62bec6f60f3c0882bea6cefef029f22efb3a49e3f33575d96a98b490a6c4e0c7b95a2f4599712c944c4a13e19701f3f659c913915a3438215df63ba1dc1bce29aece4cf4651ec866bb04ac537e38ef4f0a5c1104575e1f6c0e3bdf19048a6ace8b2f6cb89fa5ca8d8b016d09f79399072630d73bca4b965728f08284c2d8b27c6426f5acc51f50d8039fb04a57a7332f27c8b5af29d86ed81c60f8b4d8b31b1ed14e3e2fe2a32e151ad5d65a0dc4bc45c55da736f06be84323819589560a7bdcf0c0830ccd6b1b087e157d8683f3aefecae5a2f8311dca932c3ff139bcde3ab9433080274d927c511ad49fceccaa34da8c40a4596c50de91a2b694e34e7b0f39ee40209aecdb1cda7aa0aadb10d41061f12312b06217669b182cf102d78d45b9bfe9fc71609d3f5c06de93462f49f305428756ead8d7bdb666ba22ac56ef42522e2ab7b3b28d5d72db6be6267f4659f0dd61b5ea5950a48a71c85fb8e4af4d76afe1027e9f49e4bff3969b971c3ce43bc0a740c7c1f04a46de01a7e637d6e5fd0cea11105653b973ed18b9cdeef857c9d3134cc31a4e85b06d57fb5e2892e69e2ef3d250496920d590cb67187d02e693eb740f867d67a9ced35f89d09bb32210ebfd92ee8f80213051aee2912d199c28a434de11729e107424eabcb31c8b9da7ff586867de2355f0c74cd9af0b60ee651f814d3a2b69153f25f3656e4c57e73054219f08445b5b995c9e68d4ed2016f9a3fc6b481aef8b92936124a5f76b71030eff76a040f146acb96b2463aa46f425495ba8b4a21eb6bf763e3c26595937b8df667f03a6e091b82da0a210ccbf9b683724ad1ede0e3c3cddc27f9452bb8931fb9cae54baa082b1a0ba975cee556d81dcf22edaab4d9d4fc6c8419f14614fbbc313a9f362064adfe3f0a257a3baade8e3e2da64c84970ecc6408c84825bc796fee068bc74a8fbfc22832082fd004f76fb1c841f33cfbd7ac545ebacd9e8ec66ef49fa43816c50fcb3074b261afd93b02effd162974ef2bb09a0d46f3d960266df3a03f2e23b139713a5b03541aa11f3a779ae6e9ce6574557d229658acb879341ceb80d635a61ea815466913da32ef9e4a213e22ede15b49ea16b81eebf8daae6e28f26233ee1ba799eb7d74a2d47a5f756b6c4770b64835dc61f338efa868a6a26241431d4639941cde456e8518e282ae05e0d929ebf847d6fd336c2235c5dfc07f00ad58b14e19c747c47809c63dff0a77b01bfe6b8f535d22790210f70833afa89e64f4ec33cb3ed93ec9b6c766a7f5b38c2a9df034b7c7eb587618c55eb4eab3f8655e947b0205225724ce33cd0f72d2e8e93a1bf8a681f96b050cf8bdedf380d0338aac9762b9b2f079cc29385ca47dd7ad6c796f03452268f8d6a28baa5ecadcbf45761449fe4d25ffaee4b8573991e6df74a80d79630ca95e17d1e7eb030ccc959d520db94ea09ae7ce7cb8cb06553f5d3add6de8d6a41f0de553b4d7b6a731952490c6a55c359ea0ee65cfa2f0636ef4232291aefa7c70d4d22ce91d2b1e2d0ea0cafc2cf1f0a1a9180c0a795521f0649eea8589f38eacf4bc1785b62773e998a75ed96168973119759f64df33a067f2798672ff1c4a4380bf17329fd9da03b50361e86e471417c0bf0ee3e052ac0dbd328e0c77c0c090fe50cb5834c68358954e3a7f2bf99551f4bf2a9dc225837976ee97ace49fb91b59fc34c52df52680d2247dc790e64dca4aae60aae88e51f77ce6362db178a6d311bc09b097b3ed414d803e830a9a85905ee526c2d6c63d4879561227d53b9801bebe8c6f96552fccdf43e469195d398bfa42382606a3c4f1a87fc8b69a30b38028e186fa89ba6c785c1027401ce371ff9a80812509280faa863bada1ee6e8d0097f62ec6eb50043b8f2b89c3363e1ca0ccc6f589ab92f24dd2015cc009f052cf5d1bfdb665c49c517e25bd06d17abf33adee6633e656cd3050eee6c52292ffa037f21d1fae967f4063220232c229285ac89bf370498e767765629dd8bfb9f70d4cd19915597a7f61b6c1f04b314924d54de9bfb81d99ac5a95599fb27fc997bc9e0cc225f6c74be265d272dd7706f62a283d9e9d2d3ab0f4139b5585f138fbf3369fb8a710010b7a407e5251c2ebdae94f01b5fd32a8e5918926e768674cdd8d75986ce0b2310eb9ba61b94e31c93dc282c6b28a7f9936884568506b2662734d90364243e680968e070dfbb652bc3194a75abde9f156e8206b0f2068e368c72dfd268a4090e53461c9120090fb699cf6ff7cdb819ed8dab05db73086f932de27de6c69783f2b8266c767f306577642802c9de4433fed8d908456f8abe6d9ce8152ebf8d7c4df6707a18d82de6fd567dbb545f5928921c67c7604f5690d37efab908bda27a4a449acf1c1ee4ee2f4573add461e6866c33f781383be7dee3a06d5335dbac53b25e039fdeb070cc32d786ef6e16cd36b9fa009a69e1253ede2b664543f3bda25ce65a685f8a2edc0e65899e0918fa6781514464a77020ca87d70bd468079a0ffda43e6590426fe35a4b904ebd783ca1377a7d3881ffe1290b7d6dc562dafa2127cc8323fcd53064ed7e58b879759b0f43b1551802db63cb17beb5346c5d8706b62d423719e1eeee0a160fd5451e1c2827b569c7e5452c0d1bc6244242d866eeb526f7ed11354708f9a616642d0b08ced7293c49654cb31ed48e1e623ff4cf42a0939973fc9da015d2a23f0d9384bc58a56a3acaa1f774f073d63e5bdbda530d536ecb1c6b664e74773de579787be0d6ea17b2d5deca5f9e894092a5dd1ed28c982ec0ad67f1d71fa977d51ee9ef8dd0824f57aaddeafcebc9f57cbe37d36bdd25a668293cd7505f9baa87e9af7f0bec91db751ad4a1912f24d239d711ca23e2a3cc437042d377c99d7cac328cca6f4a8aafd9fa085d0f7d3d4b9cd3ea1303d7ae9554b91f173ae2606257eba4da59f9272dcfc58262a135028005d1b6f41f8d454dc7e5c247538504c97d801e70efab83537019f2b05a4576191c5c6c6c854100279db5e35306f91b99f043b70af9117063a315fb5755c7b6ab4a1754b6eeb074a7bf9ae218161b72e05d033c025cd64228fe0c0f37978de91ebdb6ea917d11bc8f0121489d49e3d73f4faeacbb689ce4e02039df402ca584796f616246ccbf7358a5b08ffcee2d343500684564dc7b7379267b3926a505fe1e03d4c9b4628122f128af2e710eeda70c28aecbcdf5c3713fdfff8ee84009301c357cb026a25ede3d83e412ae7a61475cb6dcb76b413494d8e51b24bb96dc7366bb152c4a4086571f4dcc573b081c0ca26c22e8d1f6a09b2ea7c5ab5fd72a263d853041dbd9db6cc28227b1fe61b825964d6da571eb1f2061354c2d128744ad7c8acdf40a268c39022c21e510ebd84435def6026ed36893956224c7daacdb223036e2403d6e44122ee8db19c23ef43c378a89e306fac7c6cf457ff5d7e936c355ee74cb6555ad39515c4f2f3e892b72a6b04fb2f1287e5ab89763811aae42c2b2117c495f1800c857a845303b6b50266a0d98865a1b57f01042937f3cd6e488e8e7ec5b1d766a5d13e64cdabce563f5f7bdb379ff39a416511f6ec1fd944c4b86399d46669da6f0faff8c5b889286c5c8aff2a6fe19706cb0803c9fb0a7da5dc57edb6ef808352afd4d673455aec656dda8d70376ca5ee1bf2b4ed22518ec5f0ebc1c0ca11338beae5fba5a86357e567995b1f99165fb555127e1204fb72f6a9d888585d39c3f2f328a836ea3c57dabc17ef3804c6099cfed5a9049f7b616e836d924359998d69f101a303ea129d9514e187b4283658ca7bb554e5208623c95b2a2a934335279f49880593bce25aecf1b69f159c49154ebb4011fe7368966e4fdfc02275c9778140b33e94a5aa894b5d91ee6ab10a4fc8ab4052545e418a554bf47a58e0f7394a28bccb60688005c7056d752296c7b17acfe5ad878498958f1addca1c62777f3b6f5f37bdb21754b293b6eefb9ae9fc7b4e886b79b420316c039293c690ba1c28d9d99bae5029db63c55dfd554a61f0382b8bde2ddf4417eddf0d53d7696c131f61681d48fe7b8413f912b45c7cd9cd62c59fce287783c0fc3027ba7e0c6107531e3c5967cdb7a7bb54cff07b633d279dca57437b90e550e451b10668dd1e59e5c550dede879dfb20c447541eae0c39b01c79011b6cc62c0909fecfe1be659e7eb80d8fa5de23823bc0513466ff6349c15bed46317b84953119fcad06f9517aa9f895a716fc3de7d4e752c39addb60b6db33a6465cc2798b57422f0925ce6cb7e03d099dbcea6af944a99df62aa0a39657b180e0838ca15204875aed7f941ccfb444201de27f92e0d2169ebf1c09b433e5e9093a3cb3357f7950a661329d36e8f6af8e309b72a0529610f0bf7d30ae9fc1ada0c6b55057966b8f7e9337af73fc5bf6853e76b116e70336bdf93f37c2b2383de6c21227cba7fd392dd3d32e4dab079c7a0b7958b8ce80ae7ee906afa666488bf25e909e637c7a20645c65159b896f034f4e68d966c0044ffece33219683b6e2cf011eaf367ea589fea8194d17b6ebbabd277309795b1d6732c5374be56a7f80f8a55c61502513ee021dc9cb4e96ef866a74aefba08e47b73cf4b6233e49dedf72a549f041651a261f6e18e34eb845166ebea190b157d365f072f67e3d201ec9c7f6c9c49bad2dbf5eb45ac15a6c319cf716a6bb092823c0f7ffae2da675830a17cc69fb135ed0d70c6f62732fd52d2aef37afb920447accb97b5faa3716d6d4515980c2f1fe87696b0fdd9dd215b9f3e52a6e8d2d84508ec5b02091af04840b000b2cc28a9a0450cc04beada73595807a4ab98e953288e674ba86e15607d38382b8959b73f5ac0ebc6dabffb92af501b126b7425de32ca993fd4a6d1ca83d28eb9a5798bc6a285ec52419c99aa03afb6ddef5e12b03c3204bcf1cd9cd2d867a26d68265a8c558d0646fc52530e5e3bc818c0585c4b8a3bfb83e6d2a62819fbfa1d65aa64554184bd2e5d28ccb16d1b9b46f1d1f1eaae42e0488c44a5cf31c771ab4efeb7c52a7d57724873dcbc6af3eb40ff6b4311a2c377827769a42722654578a3d0c18380f99c2396b612cc138801e972dc15745a3ecdff7d0db6b3479ad2c5a25458a16ff366594f147ff5d345a51f81c7b1278b6d3f6c29bae78ef1ba9ccc2371c2b37f4cefaed7b0b6298da71d8fdb4ee33f40e386e86502437698c40b23265389bfba429fb32a4f9faaf0ac9e7ebf3cc749be52198a94d864bb9ed077f55e0ba717655401a75aa9219a4e35a52a138a74fda59f95b60896c449021ab04a55d99060896c29ed31e2349b8423ce1cc458ddf1d4058822958b42dbc4556f70780cb9c5170d05490ba85f95290c3c7526c548b2426de282ad162b976ed53d97a9eb65db15b5612aac24687955df5c3feb4d775d2a5b4533e1ec3aa94cf0a4cd06fd4bab2744b1e99618b5ceacd6aabf70bb9b3667d27d4f3badcb46051848631f821693fb790d9a40f12952d2d4fe951be3d4be35a92d4b668dd79dc3e94edb1f0ccbc495e9c571cd0c1c83839c28d8759e0972a687b863e4b39805a3363ec54e2eab230b69e7cad0b4ea9ac275a81181b36a6ab47abf052514384619b9049987c0815f00c45d7205b2de06edaf279795620ac49cf278bacc0d67ea2d61765a57d8bc9e02f4551f5c6a8710c6878e80ee1924a6e3d8180911f8967da31ab4564d392409a83cd1bd152f8da567801ee14db8865dfeda15571652fa9f00dc34defcbbbc006bdad0a0f645aaa7ae17d71e67ee1787361bf6710314ea080f9bfd21448862f83e307122651dda50309a44622edfb0c99479445515ada0b2a01cb1a80e2598cea708d0d7cb8be4bfe3a4c33b44910a22f7e5e6d3e608538d1a4ad9ab759d10aa8f6b80f7c8580ea0d80db99744e403abf728f4eba6b032f596618423b358c30b78b3a5f850e01b8980c96ef0dd4d1fc962b76dce87b8b7a8e0e2259eaedf2a43c97bb9025fcc404573c13d6169be71ed924b6ca138455ee0d3e75119db61f4f147b93d049cbc4e29c4d8e6446268e83276514977afb0fd3b037e3206de36d5f9769609626b9982b5746eda73245487844312d068361788e2556838d755937dd928fc3cd34e47cdcfd5c0621687dd179ac63858237c19e58dc9e6bd173b63bfa58fc5d6d3e763d5bc8c8f04c474e8d294a80a2737c22df24e4391eb7051032234c24f141435a40d163299dc76c63aa199edc0f81b2534940377426d95de38fe9e83b19769b662315a9b4fdd52491f8394320a7605d2d512c51f4cf058e88c2374297dba87af5a1cfcfb5717d744ecafcddf0456dcebc8a1e47be11bf6e4558c38b4da51cf5846e6f291e4b00a236a4526ff26fec5f11417bfac0f8ee60633e994210728f00f93e342a30d2afaa9e6820916ed7c3cd07b86a02f7e7d55e6b3c7202334f2f7c6f7f327c8e339c7e6e6e06d777b0b3e5ca7b25de13fef3e420032fbb9b19f191786d97213864e6fff6453720cb2d5bf2fddff6ba8f3e5076ff0423db7c894f55b021f6c58c5f55a965961ef7b9660cec8edd0aceb21893a90d43c2d167732670e382727e796fd7ebc87f38a41729eb96382933e5da353f13edd7a8c7177c2b49d4a43c124f2748a1b702d5480a3780568cca1eb8e4eca8b8b7f22f927d6c54fcee0f3a72ba9aa20026e283fb582ea9e7ebaa0d6eb287108895e32d561b7d63d07f7944dde23099758c34f2fc1a4d872f9981863d2c8e6c2f000c702e908804b231744f46b0bc61c0e9bfe3fc0f89155a8c68f0b0984b654fc899a4b93338f29ae4e022a5f524c27cdd4f5a7f95aa86baa341ae68452d159220026949ceae6781745aa3be92cbef26bf9960fe88abfa58a7cb42d496e81d17ac95cc0ba23a971aa70f18aac82c396b4bc5497f75e31b06884a6966d58bd6522c58c20626ba36dd05495f702cd6edc7f046a618b89f39582f898de098c0c6da92b4f3332d3a12b95fa8e60011a429037f0fcf09c49dae48679c1622f04b14fbed2d817b70fb75fa78f0525eb25201467c647b24c894025d05221b141ecf65e3e9a50db71145d4601c7da9e7391bb54a1c12ebfc49d724f79ec2e1a943f5bb4ad6ac064b1275c7dc2bb4df976fa16e48299529eec3f36c009686aadbabfb928bc9cd5de60f894f09056e1a72f237a6698c8e2c18edb858a3eb33787614feb85dcf2d991d0c903489aa61cf86711ee0221d7cff8dd8d34b6a961ed8ec75b05d25e6e33d1c83791287d29de0531db5642ccc065d966d171e65646ed9ccce5c7301e3187a5314f24b65cf855fbfdac620945a47cf57b44cb52bfeba5aff1f0d22c84f4a047e8961c452203e8ca519e15a16232a85de806eeb1d4ef8a8e8e6f4c54cbf4ee9fe801aeb6a1be04ab173d09c54cb946b179e9b3cb1d05f90b4ae34347d40d2fa53065ee2e23fc50f184a31fd892cb8c7d4b9d0d6ad6aa7a7a037fd506d02d157242d10d79184e0c74c93b37e31f26031fc06afbfc6157b562d6babeb6647cb44aa008afc71cdbe4cc8eed1c6c6dbf45c667d48efe297585c44f2cb3cc69fb1906af0777d33fb7538d8afb27ce653e03d7542f2f52a3735ab9f41812dddaf55e1f5a0b5f14f1d314aa25a9a527818819a46851d06020d0638cd1dbf98fb1a1bc8750c657cf2b18c23c1c0b06d0a805851e8f92801663df5e831137956a56154d99081a6953a1e86dfec2b039efde8055f088616cdb4a6a0bb8652317407e0f7bd0a60da7f8b3c8eee873f33b6ff34b86c87889e9d2fc01ee54ddf87a1b83b621e362410126bdf89184ac96a48c1c70eecd167301ab79eb62527e2376fcb20ee305d5d7c6e6d2df547f63515ae5e9d5af3436b49e6a9cfb1fcaa72adb913651f93b67c15bbff1bfa9200c4ba4c8bcc375251ed75d43fcf26d8ade5fc69659a2463194b6a9597c9a8a93ff5d0910b7ec57d5f5660493e5441dbd37a566df63268c58cb05b514cb2ce6e629f8b4cd6ecea9f525a2183780f7f8d5c48f22a9b4f78ddcf17c6e5d7552c1d9ab003b583507e6554a9312d46bc2936b34e14db6f3ca5fbbf426c67ad9ab0f8becc539274c9f34710ae7b285a8e1e0e3e698f13ce78a3cc0361617fe993d0991359f1523c55ca9681ce8c1fa1916a61964cd8e46c74f3538760a110f0ce33901ba07bc5931b5027f31eb36147b2a62f7102f21433f0661dbe105a7906443658388a322160902ef1e88167bd6ecdbe4cecd6b0e08beda998a42241175e7202591f96c5af19fe029f85fd62e9f52e630ba028a4757a5fb9a25c7b9cbda5e4f958ecef31ae10c23d4dc7662bcbd298d9c59811a852c3b345d2bb7f71e2c6ab54c357714f47a025394ab90d3573ab6252b05e0f75a133446a353601372c3f3cc838830a3334817eed04b750e3dc316ade5618132034489c6e2b109e838b0018ea45f4ae917a7eb5269f29c692beef7299e66b6cb07c546ff5a495c6263b1f278c5a592735b4d0c8e1558c60c776220597078c30642fc29a0a6b038e64937932a7768136dba028bf39e21721f1400f8fc6387228f020b1345f93fa9f496b0b3488388d4b09fb9bea74b5bdb0ffff566265c29c44dd9513aa3ae92066c2e0ea11b29651e70ecb179ba74d3c406420a91bb6538259b953f3a403124c27bd98d7ac3505fb13ff68a2820e05fff1827994bea06a787cd59db689f0f06cea663448deecdd4d13a65a7fda4e78838775ffd2d15ff0741fbaadcb5622a3443f1225b95a53166133a0438053b53446439c3094627e584b8527c6198b1d42fa073215848e6040fe6731fd2d7f7b9faf798f6067b5c57fddb513b8e2af4fb25e0d41ada707b302071c48f6f9d99344f76a4ee91fd9153237d11c29b355cd8a634634256742167af2d93dd1830c8527e7157761f1ac519909ca4bf9c40e087069b1b2adfb1961faac5cec6ae923fe5e81f5964094287de65facdfc42bf099aeda977c922a7c990684a61ad6df8256400c1497ae93c5b1f0680bf537d0d2089502dd1fdadd9358155cba4c4e675176b841461466924396cbd6c3b74d033911d118641281cd7a46c227caac54e8b0b55c143e867bfe636b966c5e1260ee33f4709e6704552feee475c797edf5a25b3bfe31743040850598f0654de7eb9183b424b34b6c191074b429eac28c1dff82ca3f43da9566856c62fa77b8e92f71ea3f8f71e190352cb0f3dbd4172354138de3ca450a7c695ebacb3dc4a6dbf5c31f95e514e043696c03e5d7aefb7e189d9fc0abe53426c9b432e309350607716d8b6261e86318835699e0c3a743892e92711ce20dc5dcacbe90305d04caeb1de766a243f28a85762a27c55a8752207b2f83b0430fc6f158951328bf0ae7e8f70f9c9ca60b4970085ff6362ea0c68af3a884c2b080e864d6d09b6a1319b5cb68f53af6df0132d2330e2143843d4bfea7a51160bdc5a3403eb6f7c9fc3359760353cc1c06d30ed0504be8c794bbcfefbb54cd4184d026575f849a71c9a19ec5142cbb25dd70220bb7c97e5b301a39a01dad8cd277ca235cc24d39906d832f8d54177da4667bcd057a7151538592102142b9ee64e568a941ad9db5fb8d4911c850d45ae409e5f7f0bcbeb0756570af3aa16261d48f3276e996201b7be20070eb5f51fb7d3de3803330fca2bba3966f7508a4dff871de1a76c2e082f5db6df3d4870621a0bb0702da4af7340e2b89e2cd5ff5d0b4a7865114cc7f141265c2f2d2127e815ff3b78d3944f7d352d214c9d18b6ccfd6b549bf3a571ab7ab135dcfb290ac2f469b80a17b547994201cc51dc65d08ec093f07d0174f50965d8604c6ef38b83126ad09557238dd61045deffada657638279a59d9568eb9310656e4dbb16385222fae1f54c9b666a7d0134ecef0c03f7619ad0920703fa10583d86e2db743ddd7ef4f2a3073c0907b1e5d0422e19d796d027641aaa122a32e0456e81c8ab31a249caa1d13a91ce1bca039698e42661212e1d258cf2adefac839f6b1034b3e8802ad657d4c525ef7bb2683c1b14e181637f9b4661e2a82648b1c1c076f7d5bab8ef1c2860d105b2575e6a4cb36e96e98968a779174e559fb3fcb95f618ec4808e50cc764c5bbac3fbfe447f261659c7767c6e48f17fc3e45683e84220fad9cf21c1a467094c6a1b6db61d8f7727a3c1f402abe5700a31d1e77779a253da08b5547915a172b96d10ba0720f79e1b73b220e53a089a7deddb57e27a9fce6c2ab805d1849d721c6b47ffd408d2a8ac3cb6a8e6cf827694a31a10aad7248b24499ff15f024e3c9f81bb15547951c564b64ef2989bc757db15beeca53ff87be8b57a924119d1c4f25efd319d7d19b2f2ec8fce61aa56a8e16dd0cbdc0c3d574cd31e01a2ba5d99c01fdb15b8d33c58021c0b90b9eb201fb627ef4c6d11590fd449d1596c700f948ed776f9f84d62e7b453fd03f7acac9849ae3845adf593e97d4f70e687c57fa4098ee7fcf6d694aee2671f3e35a4005128623c7302eb2d239db49ffd34fd131c9cd8fe27f9e198e8ea083afafcc508f26529c84391510c0ab9630720d6cd2047ffc606fec113c782f8901e3bc8a7b85300f319cfddb658965382d316b9dc6962306f8d98c038eab8c6114d75a8e0d6ebd6af5876ab2f2fc83d9101eced551971bc39fb5181259b67615f31dc1b603b803ee5a43efc65ea7e129e7c2411ac25bea6a03abe105c74e14ab1766d867ee05a61147483283177664b0c11523c0f42a009f2c2ff5d247811cd186db49606c3b3e0bbb7603f893ad70da68fea2b5c716a277e4991c3cab01e4873c48ece18be319fa68ef989b26988cbcf36b194ebf550403623def7b0c800545080d2bd003637cd6e065832397fd9c036d460d2def9f258469a0e112f438fb2a038de31efb3a37ab1e88eaa6ffd910987e85b5d2d0c22707a3c625a641203493fa109a576699f2d3c0a945260a25000cd88a74adef6140e318d616241f1bf0c12b4ef6210f847334e38c62f8313f7b4c0a0bc9a969cb1cc917b4e51f8d97e5a1040c65ba6171a0952e47550e737c321ad7fd70826288d7c886cda40026adcdd1bffa9d88d8ec3b3929b246165ec304d306ee88187ea6a520238d2525382ac324c0021ef73bd743bb6954a24b1fbd76006f43cae7d7363498fde9f24bf288d9daf752ff2513774c04b229cbab38e462329c04edbe10fc79a33d933f09e58d0d8bb62eb6c6c83bf5f7570e0202c9f6425f9a022518f310b0b56e860946a247e1d2b70baea9e8f30f0c6926883b5d70f35ab04d77ac319a866c4110df8a0a7e3b6f492825a2ca312716ed0e0d05f108c501d6918d9a4f824dea4ff84fb979d4d4c79d0bbfc1c33421374e21addf278288dc3cade59b1ea6773db273e592a7deb5178f47bebcb13c937200e7f42e70782891931f542724ad8cf681791822ff733d68f7cab4a61f96f3435cb64e0f41f26e6daf5db02abb07f1ab0f1f70deb9f29dade356e8c4377d1bd41975cdd97f039a7895450c4ddc3419e61f2e1c7f3918f1442133a9623b9e0c741f8a8fc29d408d8b9c344b483acc3e4d0cefd0cf6c2eabc1b6cebd623aa102d83e33bc3c98e73c196150d0851c7b06fd3369cf1a691f88c235f41c602be8a88258594199784070d2f5461ce08d3c1ff6d8f40ceaae03e9b67199cfaedf3bed16aea0157ab1a509d29f262a2cfd0e61553a3e7734466ede636826444a5f4a92971379a480986f1c152ed41cc5651e321d89a05355379a0a31aee83fe85fd5ee6bfba70092413b923d21881615508dc57dcf85f7cd7ee8b0f1ec16f7d79525401a758c45ffcf4fc7abd088538b905bb422f68b54bd2290a59620d8a3b18184046f62efb5d88f5f7575445982ab86864e3c12837a049806226508b5254c8f37bf05ef54674dc179ec3e083fa1995092f892f5b94ba02f5c58652be419dc59c0327b8ab498eddda8ab1bbee4663724e5ab2485ca15acdc264d6653c0202ec839a5980cfd5d9279e69abbe47530f830460bc1fe8bde19961be10ad4cc12695bdb3fc7439d316c24d0470634e9aed0a1ab3ff85b44ff625cb1b411e931540625fdd014d68ce86aa2689990e567886cd6046e8b2eaae9b1ce67e5af59c99e3c20e65c66ea044fb0a4c833f12a2c4bf103ac7fffe4dca0c5853de2c59340823515d534c5763bba146c2a4fe250d350150c00101e8c7377244376dbc0ac1ce0701c448ceb2911d1fa67917984b9f4e61fe3be1863aa7f49f2a7817b19fe5e0ed8f138e4404b65c66f6680490c658be16ffbc38a252af77254c94a9bcc84674701861756dbf6eea9765294c9e19831c367d39195e2f59e3e00e6c8da96e9bc538b3f79a302a82b64b597b1e89cb0f85241ff010177268a5444057a5ab3f1548c2f0b077f25ba2887221bd67dcacb55fdd965c2379276105e7dd12c15b1e927240c881e33a15b169b0899ed66f41ec3315acad84a425f30aaf4fc976e45fed69dca42391a2a69a2c04f71b892b2105c90fc0da28e40b1a483b56b895e9ba2591f9e56324758ed7c4d4b35eeb57f41067d8f3d36d4c0072e77a8bb4a86ff335726b8218e749f89bd8fefcd0241aea2d3b08b3051ae5dd77fb42aaba75aba9406d620018f76915c0e3aa4f02baf43756638400df9730f8d41482b676c22b26d7c6fd627a79ea1f782f17910f8665a0fd56180f85f4f95d2df5dd2f36d18c146b6c68cb346c2bbc4dec34320541d904b6a8eedacbd5da5197c014742ce70fe11ee50eddc08181e83c0f5d870513a07b413724dc1415a5df9e1a0178e6fafe6fe83dce5691a1a1b13fa54f568c967f202376369d93cab50e408ce89efa7ad3f71f97a39c6a0b6b86045683c24b81c8dbad1b81a00d1a04ca4aeea35899b22255d4d16ca8b5a6a1b0c641c963c589d93bad39e65d22510294acdee878598269d959030cd77a3f5f91083b58033559b46217c7268e43d2e83ba72df746de77afe76f44cfffa3a7012e3e86f010198b395817f2f4bd2ba50ff217f7481ceb4d46e43e17c6a803d954fd3944e4a6148ca8d7bb8ef7949d81e767df085c65a093b77d77e662b0b3c36f6228a248b158e97c5def23ab358ba75d9a024af67e0740cbdad520b5981eb00a5345ee557be847157264ff23336327a17c28193012f38224f9c48a65a0e9cbf3ee4aa157c196fec4a15b753abeb28a2278abc4bef8053e61a59bc8cbde3c72bae310f6d0e338b4a1eb626a7c14fec059e950cef54d75ab1206d2b13bb63f172aba071ae880dfcfd5c83b5a3dd349fb32d0a206016ffce2f9d070ee7f1cf62ebebdf09db691c4aa54e22df4002a2805a3e9591d8cea04c483fb356f8044b5c5c902d852bd27950858df91e003f499f014dfea7bfe05d02a40e447fcda7c1d4d56bd9e8b0fd7574a4cbc00ad71405038e153d9aa2db63cf777e00fd3f2961c56c6bba12f4a73579f1781c767a5cbb87638318c627ced01936648bb48476aa860a1a09e2ddd0d4ce5648dff56fb354d8d94c95eda1fbaca8f2cf2045dec77ad6122f625bc1061fbae24b7f3cbdbac238cdf1efac98e6869cbf3e4da3a794f6524c942d17bc81c0d46df730120af1b0046c8ec655a63cde7e085d22688e94323e250f5224c1addc7f652b43ae87ac731c83da05738d00a2635ea95080db7d86b14659bb065ce3f0fddc3d5cc8edda4dba953a666a5905b20533ecbb83f6cace3001015966c046edda5e51a4a339071d9daecba074454ab20aa0237a754d4f054142c0317768b5a79aa7ca9897a192dad758f84dc7457bc0a9041eaa495e56e6b3f3a9506014693a26c866daf14aadc2a48cbaeaf87794020b0f4a78f9b4fe8e6edd730fae8f37f01d4bdc3c24416bd2a60dcc2772dc15a30077c3fa1dda749a87df2d1605d14096cc206f5cc57addd8cc7cb19b0b5a3b1b2906643b01ce5ebdf5684d069076d431dd9934920762ea143aed440e60561f26d69aefe333c39ca0eff308c91e1ea1007ed5146297fdbf1466b6a03c150a86e2e9658b458dea2bac998a9dd00103b7c0a0ca23da74d82dd752cbb45eb1d5f1ec5e925a62e6fdd5a15a3c9f069c7f664535a43b9d8b964fb430c7b5cc858bdbcf323b4dbfba2918c976ec45d746dbe5315ef1adf235487080cf818ed465287d9c72acb2d44d4be3cd04e1f6165b1a44481aa040659f15e37e93a53f6faec860b9963a4ba049f9d9d403d458d713b99721d1aa3880c065a902daf5a56dd2d8397f0c553e8468c911d55d1ab3c6710a7f1aa7ed1c38fe056acc1d1d59fb4021bbf673960cab918bdd531492dd83a052d5d49279303f363b8bc3630b01fbda53fc9acaa32a5368d83c960caa0c927ea0d8ef7a3cc32c821306915f7db8213ea20b2ccee459e9ad6f5375a8b8b42e2857958810bda5e743e13a73968e68d088d0d4aac62cd92cd633d7244be0aff9a9a792a4045c0a834f8278d1c9b12cc6073ca10910764f2fd7f930b6cac18b275083abb8e86fa12f3a7fe32e141a8d6cfe580cde4f1a92e758af21e2168dc5bae0fdd19658d7d22f970bb52c66e3318952ac1096512fffc64e96346959edb187c54524d5779a7c9eedc003b0aca428fd83ee50fec48b3c67b2d3a9bfff3177f935e33960225270b1d759947ba14d0ebd97feb24c689c4ae4ee18154bff5dc3e10e2f9ce93ed8c5148f29628f6178e655a350f8fd59ed0cc4bb9034e677d2c202dcb23d860ba05e64940a60a10446efdd6f664b474a8dfc41dae8e9835771fda69f7fd754594f8d80966dc62181b69bd10674aff7b8718916b75fdb05b69f9e9bd107e2f73f4c2f33fee1b7d3f74ea0c0e45575c65363db92132b669998b32b8d29638df204045042c16e0e481cdc4c31951529851a262939207120efeee34d4423c0a2bff3e6ea43b3ad3904bba0f3e0aa2ff349e282cda5b91afddf1f6e8d4c347bea852e54c0400a1b8d0358d85eede8bdee64cc380b6d62ad748a3a9b5e9916ed14751a283dfee18e589ebab62d8b6add2ea5f6ca01be9154a2175377b3eee09e959fcce5e0dffcd34568fa804b87cc0c021f2e8fe65edc1702aad4c38da014724b593ce11a0368dd76a822f6aa6a5d0f43649bcca889754e261e1bea88a6552959a2faeaa2c0500943430874f2700967c8891e11f820ac9d7a958774dca152ebbb4dc30c13de77482f782c3171786c96a4d0d3b373532208397032708652a1a4221bd78fcb0fd54f6ce3360c1a09004fe053be3e4422313e0ab176e9b8136a535c395773f11f0f73be96f034aafc0eb5450c5465e61e19436c49a2a46ba92b28568c3469373c94755031aa516f2e12b3a18746e43d8189a30fc1ab21f565788f5d9f84671cd5f72456122ec3765daee352aa940d0fa111a6a379665c7cacf00486ea57e9453dfbfe5b563d74753268fe24cd27803617db9bfc779e71de17a563660398709791268285794539e5f7470764514b19379bd795964ba581e6867c6271623b1121f97460a203cae601ce7f95bab5dd36bdee538e764237fcdb056d7530b849d8f3708b81758430ae6dd8aa90002744ec32d3732ff6053b2743844e049763ae17748a1c9827ff44b6e9f6bea58e858f6019237a22fa2286bd1d7c5b7bb942ada8090e30a4c2d7f3dce9a9b1356843e1ad495606a32498f7f45f69f60f41f3163b2c2ae95ed9f4794ee8edd32cebd81440cbf9a6194d75be54caa78eb7b0eb6fa77bf2bdc8ee8ecfbdd18721c9cd5a561b5a8d6bfa2d0ca849abcf4793a9f3adb32b79eafb84e8124ea0cd1a839f004e9e72476726ed1734ff420398b607fa943df3ba62e9501d5cf04abdeb88ec125e0b86c8e33e9d46423e33294cb8c44e7d197b7385983dfe5c24a46acbe072c3d83b0e68e288cd801cab01069da48b2e8559a03a2ee1056da190aaa8db0e0d5fb3e3925876a1474711f019ad8d7aed0fac033227924ff805bfa2ae60ae6dc603c7f46fee90db9ab9fcd50451db122ff0b8c2321689dee2be89e95d9557ca70ee7e30f53422b877d38fafecc392b555b7e1960f68770c5c6771723fc70173e06b00eb9c528f9d15ae081e3bd937cfc4f8ac5e23f5cb89864f92cc3b276f2fb46605cf46af07148dcd26ae2cd3e30e335a4f00511c6c8e23dbad201d44f759d7245935d55e07626835ff49adc422539899fd1d3867604e558a45f1c04309dd8af39a4384eff41253247b681cd779cb72b3e7baf34ffe8817b42f089881b12e4be6b971bef858c0829d7134269c00ac1f6823f3908c6b10efd9920051d9d886b0171ad1e75b2bc8a96618508997e8c0be68967876a81a4486adcb7ad857c065d3a68df30c8a17f8a8454236cc9743b8b1e8a98ad1bc927b17384d5a93de650a4ec9565e1a07ca2080059c9bfa5d2f9c4df99421c89d5c681ad8f3cae082f8cf7f8e7d67545ef2e3603161aa2dba62ff4f110fad7f85f9dddb1008dd7bfc08ab53c47178e700da32ae12a016928c41af690dd88638d4af1273ede71f1d83961ddb9679aea61b858d83d91a73bedf06c323648c55fc8ae1ee918a5f07850ef044b2f60a65958cae303ba2be053bb44544d89f3747bc382cfd7c9e0161c6bbccd1d3de4e1c90e1c720919f34dfa26f9ae00653dbb83f5bccaffc990fcaa4b2a3d6f762c1abb9acd42710392b54af98b1037102c4a749b498adf84faf14a608fd1ea6c54fa3794a057d363db6a48b7c4d508798c6792ef2cee4eb5932acc684847438f164c4302f6fc49f895442277e99b26244c9ff3cd70c872eddab8e91dda541fc320d9a229faf8ff0d257c6e5a6d0eb49254554741d0e9feecc4ef9ececf580e3cbdb719c35e5dd96993255e506ac9f7ff2fda03f9b1b06d94d367c3e542f5ef40529f3e9eb96a7b47453586f6413dbb36a0a642ffa49205f8de63236f6388da0c90cf11b9ca1af5bda0d0dbce461e39d8994069e2ffb66757fc0936f013630133c52e32739f1e5b923996230c3ace1c824e48c181b946a7ae8a854cadceeeb3791fd854cdacd4c56f5f89e9d814e7e384d2577dc54aec00d400143fd666a14c98754ae3fd1311c543655fe37d744ae40d89d3b64bca1fd242d668ccae746bb2ff973e3fa53d461f7d66b80b3ceb220c119caba304fcddbcdb5d51200efae67a1a57afda0c59f37a8e5d6e18b6c485556beae66240ec673979dde9f69e37654e5775d76e5e0c9fb85505cea523ce69088e11af3885247e204c366179ead41790a7789bb7d1a3638df2348becfd30dd15d3987634db47a06df37b5c1c89aa260fe71b5e268398d8e93408a3715c80006eb235c82cafceecfb8772c4f8e7fdc622e76e4fb729458c856aea4291b9853ccb19dad8a0f1e6580676cc4320bf45e1a8a3dc7004eba459aa22d649eb710eed2e138c76d92ed351f91b883249f6a5d40f7b5ba2fcf29f53307770bc5b9c9aca68996ead8f4aa1db9a6d11b68ff1bc42ad7eddae33236f445879160604cac59bb040b865abcae4a61a0eb04823c2a14c6f5b5582266d2abc4b6cd58941234de3b912ae590bfc086a156dee518558cb2cee643d835296385d8a0a2e5f69ab997ff3b56c004a0810d5e77d42873955de2ca385352e3a41940b203474fe6f71588312c9cea5fddcadc5c90048ceb27a7af558a17e95654d55d08fc8bb5206dc3e0cdc636e339b46e83cb4eaaba602e4a26c49c3439fbb85b2cea52e2ec8273c6a7b9e9324096f0f8d7f862a0b03435090d3a7670949cb5e48a9cbe6d2f33779e8592acc149a0f778dffd89955f68d755ff531ced20b9caa916e3f4891ac4e21c4303fc12cc922b76995b7922e6e56c4bf06debd0a1fe936cc31670d8fc061503d5ae0aafc16cdb7442fb9fc2d23e619b20d063c1f34abe7e598e6db9727ee13f801a67ce69af8063824142b3d8ce59e223028924141121b52d2322904fb607505379846da2876358671a39402dce8218f1c41958cba46656303ecfaf894d7723fa9a784cf82907d476285a118c500887556637e9ac1ea42c070118da4c3f882653a27ea9f1d28d7f900ee708ccd6d7d30ff1706e3b8eb6325b1f690833bd9ec2422e0812faa479679b0eb3f599a73ef4d68d30c9412ca9c363b1cacc06900ec7f4d69626ff8c9cac6b2ccba89388edaa35e58e48ccbec2a52a20f3346cbd941662220c4407cb93f9300592ea4aaae642ea2c07310f995d399fd53225d3eb2d55c29b618ff56a2203d4ca50c2baa070a2a6cb4ce582d01de64c072bcd6b87c27ea1ea26f5bf05ca6efd39c7b66c2e770d1b8f0682222b8a4d1ef876e0f53ba6d070d0d449f1ccf29283c4d91a599e0a99ec9233b5133f262ff06e1f05db1531d55c84a6f15b7dc613d2a1e907e06a19a96d0584367c29db5e6db25d6f00485da1a108e143593559b52feb898b3df88c3ba6396ec5f1482dc66c113d142c9d4bfe56669fb9eb136bc4b25ce1e136a4b4f416b5e1a0ba04bcc482a9a9c29c8ebce7dfcd7d478253b767f9a0cdc1c806072859aff917795ee5f1703254146a4b8c419e15e3d7a6318d488b072b94b26fbfd07902721dbef506aeed4e2035c75e059fea3dc3ed46e4edf0056ffd273710e54e69bffe15c9e8c81cab2add3c99415e09df06ccc94288caf31ef6d2bb802b1e3475ec232e4e80ceeb26aaa6a3d9892ee1fa89fd1892fb34d367727dc021ef19956996f829fa3c7e732a010d97ccb24b9a39583876ad258660d9aa9ebfe4bfb8dbbc4691e0c614d6c43ebe6da67ef407a071f9c15679e4c3f9729f44929560e47253bc4db817356c381cd87e085ec1f944eccc20b47a00e80d9bda6ad64a97a636e43787cddb2f39292336210ef2a4c576acfb8c2c42cc35d44838922f1698adac914a67f2d0058c524130334e631c4c0d9ebcf9b31bf21ee2e448c664f98ee5557cb7dffe0e37610e76f1504af578e2048d91969481742a66b9fc3ec075bf649bd3030c4b75f84562d6782fd93955ee150a4890507ab02b0148f9afca5d5cdbda78075fbf2352055779abbbd4a1db43a0683670e182502c9cbc3903d61fa1ca4a3934640ac35f62dc5ef5430b01454e6e6a3c1993a048c5d329ee24e7a20e283a047a4494a2f36e71b62e90a7a1c6fd938c9136a4f6daadac5533bce37d3c68044cd6ba7a5ec099a1ad2908f411ccb4d29ef2ea6a206539af9481d3da39acde97df18ccdd87e9b77b737576296bdb3fb248bb3bedc3f3f92ae3a915d9dbcf2b868e43fdcda4bb86d9a19b0ea1eb6567041577495f6195e06643e859267f7489d9b31f1343ea083b1f8bf952e0acb8f9bbefe8bce8fe835f15226a8d23399b8d6380c4ad5b07ba8d2bf9b0d894e98c680683e46aae0a7e44803be1c0a3bdd3493db3cf2a2dff02acc9e235260a11d97608bb4a9957c11d463e11a52d596a39f88308e53d72ee5ed0a0b2ff075ca89fa200f4107946fc2c783fd4f7f155de499c305252f4b806b63fd84d460c98bef728d42e01bc5691d4d2f955a2ce77f20162b2d9cfbc45ced38ede8cf88d8a700c21724b5fd4e685a6ad7c6179464e0ebdf49b7fcd9e33226bfe151084e0db7c79db40218c658e7db4eb98b74f2d822850e0dfcc4d6ae448a0d23113f54b21e9aa19753dfd802a5954cba63b5be0a46522492b0db25e90530712a3147edb7f4b83e216fd2d65170a1d020bb62eca349e918970afa19bc7c47fd366900176c47a4bbdfeaefa2bf7d6aaa311cd2fab5ba193adcaa0f6ea0ce75d53157d297e30f9134c3c090aca24d281b95ccad303f8da14e84fb7c41a2ca0149049c276a6bd9dfbdf9377f21344170d55baae026823e4d8c4ad37811b1952ec38190d1383b0878d4814d1af46d8ca2a51c2dcfd1e76844ca63746bef95ecb3a8df62dad40b8f072448143cb43e567599e2ba0a59ef2878f5fece3704c5b4269f245940405f1e28fd6c2b075a1ba6f393634a700dafc317342cd1721c183f1ab094f6fdd2a2a23dc24d25788f9b04c4653f279bfdb86b3485b6423d28d2bfca477e1b9054065659dca1e6a2c48fc8811b3108c93d300232a085546ab46455e11f9c0c3d3c2bcc6d3a5a0a271d9f184eaf76ff938e5c14bc0273a375f4e79870976037593afceadf602aab91150bffc827d60cb6efc291eda8a1ec455542ac73600bfa38f2e9ead4d6f231df49f405fc0230b3cb9e319b3b8565b4346ed27f17a4e56608660fe38820df4411d694e184479f1286bc2d476be0a4c095bbd246a48dfadeb55acc94b7c8ded7f8cfa586475dadf98a4d0763bffd7e91249906e82f5803262eaf32d9d972705f2aa4b2f4c7d3008cd4084e63512ba2fc461c0ee61826960693a2aa1879fd65126c67674c52aa3ff2ab402478eaf856efee69fe5c031cb405b9eb4ae1a2441c18e398dfaf8a0531dbecd7f6bd79afcda91b232ef3b1a880212ec8c34e6b296c988fc2abb68794ce7112886cf840d405a8887757186b43a1db19582f47de53988e4e0003c22cf6c17d680a754ebee5a7c2d9c90f9ff218b0b32d8536bd3b1f8800629abe1cc74fa0f62fec7c68f5624dd95b734d1c0fe7934ff6787a6f40a786efbcfd584a9f18fa6a10b98926aaf8655678c7fa57ae33ba44a1890c2bf570c1fca22f3907aa2e7430eca39cd47ec88f085ad9656e4d6284d65bfb0c50c85f9700a66522239e9771dc04590a052a774a8784c1c8fcf2b65721e99eb33d3af1f098cb012a583ea05909185b20054ddf45ea6efb3637bcb24979aad75ea371b70aa5a2ce55467ee8ccaca9ba74c2546d21d8654dfd1405cb44e754fb0e913df7daf27c9e01daadfb9d13b9ab3af8f024ab54d4e2672e151567a8f18999e7061456f25f36e1146b4fe674b45fd6272e6d7283dca2bc26cf6d35afb74e31208d5a6cab1682ab8c81ab63a96afb6969bce2dd08207fabbcd838f100ca41df71afdce49e2311da347298ab0b7035e616c87480f0083f1c52ab2d4eb642bf48d651bc6daba553f4662387d9e01bbf374dbe82f43842c0cd7cb4ff0730b4273e68a3689269af7779ddd1724e0de92cd229da900a70c06329c953b16089c9fb0392cde2314fad152eebbd64b91bd384d259dda6da7c4eed4f951be8cc1ad28d8a627555d23e1ef812cfe45216c58a027c6aff92639f42e59c1b9c2b46dd2e5089a9a6da7be75e2f2c8756b8277b3e6ceb3d3b64c2c96e191891fb68662afeeafb302783682f22addd07aeadb50e771e0b305a45a1ae7fd9d28633bd556d4bcf8d21bb83ff418835cfe7e2b3cbcfb0688ee5733f9102e4d9d4d6604215193edcac0d0936846f5c59af9086d9f41b53e2451e3f30a9d505215726fb1bf2e641cfbad4dd6b466fe4a3873e98dc2a652038dc6e72e61f8975f17366ce70ebb2f6813d421c787f641b0fce38ba9b9a849728055801df594f2f860ae4db41880b4a718bcc7f343a28280ebc1e92522b772215acc14ca04059b82517076980e280ad3bec64e1c63d8a4def98436b5f28efdc67c9ab465171cfcbe4acfb96ce4ab9dd79a14a6af75a0be4233e5ef0741cfd299c605a3dc1d8bad374a76bd7ed888654d28353d616769a294735169ce0c545f9631e5d4a6ccd91e88e407f2f80c4e2f68e8316e662667006c7dcc7926ebafd8e952b4286fd87244e45efecef7c78f92153c29008b8c4c8d33e3a90b448894f7cbe3b19445e80260518fbd03633b084d70ff19b3d64e40ee0b6029507e6c99368b034b552a90b0c3638a2f9b9a3a3adec86b32625cfeb5c68c08d56ffa0721ef2d820873130456a9d85bfc5c077f2b76bce15f0fe05a6be1d3a6e42668129c68148644ce11b2d88c13dd</script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>面试</category>
      </categories>
      <tags>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>多线程面试题</title>
    <url>/posts/531c5825.html</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="密码不正确，请重新输入！" data-whm="文章不能被校验, 不过您还是能看看解密后的内容！">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">该文章还未完全完成, 请输入密码查看。</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="006dbd132016b13394d220edaa8a6bf61d0d3b142fb3777f04fd36f59f464a22"></script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>面试</category>
      </categories>
      <tags>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring面试题</title>
    <url>/posts/489ef953.html</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="密码不正确，请重新输入！" data-whm="文章不能被校验, 不过您还是能看看解密后的内容！">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">该文章还未完全完成, 请输入密码查看。</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="d0deb69af5333e93e49844f6390548f9f6df26221438deaa92dcaad1151d1066"></script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>面试</category>
      </categories>
      <tags>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>JVM-内存区域及类加载机制</title>
    <url>/posts/bdfd756f.html</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="密码不正确，请重新输入！" data-whm="文章不能被校验, 不过您还是能看看解密后的内容！">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">该文章未完成或暂不公开, 请输入密码查看。</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="0f035ca20ddf47147e49a6d5a1af536a3eef323f8b60ea19e7d832e836add004"></script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>JVM</category>
      </categories>
      <tags>
        <tag>JVM</tag>
      </tags>
  </entry>
  <entry>
    <title>一文搞定限流容错-Sentinel</title>
    <url>/posts/74013a27.html</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="密码不正确，请重新输入！" data-whm="文章不能被校验, 不过您还是能看看解密后的内容！">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">该文章还未完全完成, 请输入密码查看。</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="d3b583b243125451614e34c5b61d0fb17033e91e908989c8a4a1646c7ed4b3b2"></script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>SpringCloud Alibaba</category>
      </categories>
      <tags>
        <tag>SpringCloud Alibaba</tag>
      </tags>
  </entry>
  <entry>
    <title>多线程09-线程池</title>
    <url>/posts/8c39d7e.html</url>
    <content><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><blockquote>
<p>Java 线程的创建非常昂贵，需要 JVM 和 OS（操作系统）配合完成大量的工作： </p>
<p>（1）必须为线程堆栈分配和初始化大量内存块，其中包含至少 1M 的栈内存。 </p>
<p>（2）需要进行系统调用，以便在 OS（操作系统）中创建和注册本地线程。</p>
</blockquote>
<p>​        在真实的生产环境中，我们需要很多线程来支撑整个应用，但是当线程数量非常多时 ，反而会耗尽 CPU 资源。 所以多线程虽然能提升系统效率，但是如果不对线程进行控制与管理，反而会影响程序的性能。<strong>线程开销主要包括：创建与启动线程的开销; 线程销毁开销; 线程调度的开销</strong>; 而这些都是非常低效的。</p>
<p>​        线程数量受限 CPU 处理器数量， 线程池就是有效使用线程的一种常用方式。 线程池内部可以预先创建一定数量的工作线程，客户端代码直接将任务作为一个对象提交给线程池，线程池将这些任务缓存在工作队列中，线程池中的工作线程不断地从队列中取出任务并执行。</p>
<p><strong>线程池有如下的优点：</strong></p>
<ul>
<li><strong>降低资源消耗：</strong>线程池通常会维护一些线程（数量为 corePoolSize），这些线程被重复使用来执行不同的任务，任务完成后不会销毁。在待处理任务量很大的时候，通过对线程资源的复用，避免了线程的频繁创建与销毁，从而降低了系统资源消耗。</li>
<li><strong>提高响应速度：</strong>由于线程池维护了一批 alive 状态的线程，当任务到达时，不需要再创建线程，而是直接由这些线程去执行任务，从而减少了任务的等待时间。</li>
<li><strong>提高线程的可管理性：</strong>使用线程池可以对线程进行统一的分配，调优和监控。</li>
</ul>
<h1 id="JDK对线程池的支持"><a href="#JDK对线程池的支持" class="headerlink" title="JDK对线程池的支持"></a>JDK对线程池的支持</h1><p>​        JDK 提供了一套Executor框架，可以帮助开发人员有效的使用线程池。</p>
<img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/image-20201209164759514.png" alt="image-20201209164759514" style="zoom:50%;" />

<h1 id="线程池提交任务的方法"><a href="#线程池提交任务的方法" class="headerlink" title="线程池提交任务的方法"></a>线程池提交任务的方法</h1><p>向线程池提交任务的两种方式，大致如下： </p>
<p>方式一：使用 execute 方法 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Executor 接口中的方法 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">execute</span><span class="params">(Runnable command)</span></span>; </span><br></pre></td></tr></table></figure>

<p>方式二：使用 submit 方法 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//ExecutorService 接口中的方法 </span></span><br><span class="line">&lt;T&gt; <span class="function">Future&lt;T&gt; <span class="title">submit</span><span class="params">(Callable&lt;T&gt; task)</span></span>; </span><br><span class="line">&lt;T&gt; <span class="function">Future&lt;T&gt; <span class="title">submit</span><span class="params">(Runnable task, T result)</span></span>; </span><br><span class="line">Future&lt;?&gt; submit(Runnable task); </span><br></pre></td></tr></table></figure>

<p>两者的区别大致有三点： </p>
<ul>
<li>二者所<strong>接受的参数不一样</strong> </li>
</ul>
<p>​        execute 方法只能接收 Runnable 类型的参数，而 submit 方法可以接收 Callable、Runnable 两种类型的参数。Callable 类型的任务是可以返回执行结果的，而 Runnable 类型的任务是不可以返回执行结果的。 </p>
<p>​        Callable 是 JDK1.5 加入的执行目标接口，作为 Runnable 的一种补充，允许有返回值，允许抛出异常。Runnable 和 Callable 的主要区别如下：Callable 允许有返回值，Runnable 不允许有返回值；Runnable 不允许抛出异常，Callable 允许抛出异常。 </p>
<ul>
<li><strong>submit 提交任务后会有返回值，而 execute 没有</strong> </li>
</ul>
<p>​        execute 方法主要用于启动任务的执行，而任务的执行结果和可能的异常，调用者并不关心。 而 submit 方法也用于启动任务的执行，但是启动之后会返回 Future 对象，代表一个异步执行实例，可以通过该异步执行实例去结果的获取。</p>
<ul>
<li><strong>submit 方便 Exception 处理</strong> </li>
</ul>
<p>​        execute 方法在启动任务的执行后，任务执行过程中可能发生的异常，调用者并不关心。而通过 submit 方法所返回 Future 对象（异步执行实例），可以进行异步执行过程中的异常捕获</p>
<h1 id="线程池基本使用"><a href="#线程池基本使用" class="headerlink" title="线程池基本使用"></a>线程池基本使用</h1><h2 id="Executors介绍"><a href="#Executors介绍" class="headerlink" title="Executors介绍"></a>Executors介绍</h2><p>​        除了上图中的几个类，Java中还有Executors 这个静态工厂类 ， 它通过静态工厂方法返 回 ExecutorService 、 ScheduledExecutorService 等线程池示例对象，这些静态工厂方法可以理解为一些快捷的创建线程池的方法。 它提供了如下四种快捷创建线程池的方法：</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>功能简介</th>
</tr>
</thead>
<tbody><tr>
<td>newSingleThreadExecutor()</td>
<td>创建只有一个线程的线程池</td>
</tr>
<tr>
<td>newFixedThreadPool(intnThreads)</td>
<td>创建固定大小的线程池</td>
</tr>
<tr>
<td>newCachedThreadPool()</td>
<td>创建一个不限制线程数量的线程池，任何提交的任务都将立即执行，但是空闲线程会得到及时回收</td>
</tr>
<tr>
<td>newScheduledThreadPool()</td>
<td>创建一个可定期或者延时执行任务的线程池</td>
</tr>
</tbody></table>
<p><strong>注：业内一般不推荐使用上面的几个方法创建线程池，这里只做介绍，了解即可。</strong></p>
<h3 id="newSingleThreadExecutor-单线程化线程池"><a href="#newSingleThreadExecutor-单线程化线程池" class="headerlink" title="newSingleThreadExecutor - 单线程化线程池"></a><strong>newSingleThreadExecutor - 单线程化线程池</strong></h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleThreadExecutorDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SLEEP_GAP = <span class="number">500</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">TargetTask</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">        <span class="keyword">static</span> AtomicInteger taskNo = <span class="keyword">new</span> AtomicInteger(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">private</span> String taskName;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">TargetTask</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            taskName = <span class="string">&quot;task-&quot;</span> + taskNo.get();</span><br><span class="line">            taskNo.incrementAndGet();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(taskName + <span class="string">&quot; 开始&quot;</span>); <span class="comment">// 线程睡眠一会</span></span><br><span class="line">            SleepUtils.sleepMilliSeconds(SLEEP_GAP);</span><br><span class="line">            System.out.println(taskName + <span class="string">&quot; 运行结束.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ExecutorService pool = Executors.newSingleThreadExecutor();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            pool.execute(<span class="keyword">new</span> TargetTask());</span><br><span class="line">            pool.submit(<span class="keyword">new</span> TargetTask());</span><br><span class="line">        &#125;</span><br><span class="line">        SleepUtils.sleepMilliSeconds(<span class="number">2</span> * SLEEP_GAP);</span><br><span class="line">        <span class="comment">//关闭线程池</span></span><br><span class="line">        pool.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line">task-<span class="number">1</span> 开始</span><br><span class="line">task-<span class="number">1</span> 运行结束.</span><br><span class="line">task-<span class="number">2</span> 开始</span><br><span class="line">task-<span class="number">2</span> 运行结束.</span><br><span class="line">......</span><br><span class="line">task-<span class="number">10</span> 开始</span><br><span class="line">task-<span class="number">10</span> 运行结束.</span><br></pre></td></tr></table></figure>

<p><strong>特点：</strong> </p>
<p>（1）单线程化的线程池中的任务，是按照提交的次序，顺序执行的。 </p>
<p>（2）池中的唯一线程的存活时间是无限的。 </p>
<p>（3）当池中的唯一线程正繁忙时，新提交的任务实例会进入内部的阻塞队列中，并且其阻塞队列是无界的。 </p>
<p><strong>适用的场景：</strong></p>
<p>​        <strong>任务按照提交次序，一个任务一个任务逐个执行的场景。</strong> 以上用例在最后使用 shutdown()方法用来关闭线程池。<strong>执行 shutdown() 方法后，线程池状态变为 SHUTDOWN 状态，此时，线程池将拒绝新任务，不能再往线程池中添加新任务，否则会抛出 RejectedExecutionException 异常。此时，线程池不会立刻退出，直到添加到线程池中的任务都已经处理完成才会退。</strong> 还有一个 shutdownNow()  方法，执行后，线程池状态会立刻变成 STOP 状态，并试图停止所有正在执行的线程，并且不再处理还在阻塞队列中等待的任务，会返回那些未执行的任务。</p>
<h3 id="newFixedThreadPool-固定数量的线程池"><a href="#newFixedThreadPool-固定数量的线程池" class="headerlink" title="newFixedThreadPool - 固定数量的线程池"></a>newFixedThreadPool - 固定数量的线程池</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FixedThreadExecutorDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SLEEP_GAP = <span class="number">500</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">TargetTask</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">        <span class="keyword">static</span> AtomicInteger taskNo = <span class="keyword">new</span> AtomicInteger(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">private</span> String taskName;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">TargetTask</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            taskName = <span class="string">&quot;task-&quot;</span> + taskNo.get();</span><br><span class="line">            taskNo.incrementAndGet();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(taskName + <span class="string">&quot; 开始&quot;</span>); <span class="comment">// 线程睡眠一会</span></span><br><span class="line">            SleepUtils.sleepMilliSeconds(SLEEP_GAP);</span><br><span class="line">            System.out.println(taskName + <span class="string">&quot; 运行结束.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ExecutorService pool = Executors.newFixedThreadPool(<span class="number">3</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            pool.execute(<span class="keyword">new</span> TargetTask());</span><br><span class="line">            pool.submit(<span class="keyword">new</span> TargetTask());</span><br><span class="line">        &#125;</span><br><span class="line">        SleepUtils.sleepMilliSeconds(<span class="number">2</span> * SLEEP_GAP);</span><br><span class="line">        <span class="comment">//关闭线程池</span></span><br><span class="line">        pool.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line">task-<span class="number">1</span> 开始</span><br><span class="line">task-<span class="number">2</span> 开始</span><br><span class="line">task-<span class="number">3</span> 开始</span><br><span class="line">task-<span class="number">3</span> 运行结束.</span><br><span class="line">task-<span class="number">1</span> 运行结束.</span><br><span class="line">task-<span class="number">2</span> 运行结束.</span><br><span class="line">task-<span class="number">4</span> 开始</span><br><span class="line">task-<span class="number">6</span> 开始</span><br><span class="line">task-<span class="number">5</span> 开始</span><br><span class="line">task-<span class="number">5</span> 运行结束.</span><br><span class="line">task-<span class="number">6</span> 运行结束.</span><br><span class="line">task-<span class="number">4</span> 运行结束.</span><br><span class="line">task-<span class="number">8</span> 开始</span><br><span class="line">task-<span class="number">7</span> 开始</span><br><span class="line">task-<span class="number">9</span> 开始</span><br><span class="line">task-<span class="number">9</span> 运行结束.</span><br><span class="line">task-<span class="number">8</span> 运行结束.</span><br><span class="line">task-<span class="number">7</span> 运行结束.</span><br><span class="line">task-<span class="number">10</span> 开始</span><br><span class="line">task-<span class="number">10</span> 运行结束.</span><br></pre></td></tr></table></figure>

<p><strong>特点：</strong> </p>
<p>（1）如果线程数没有达到<strong>固定数量</strong>，则每次提交一个任务池内就创建一个新线程，直到线程达到线程池的固定的数量。 </p>
<p>（2）线程池的大小一旦达到<strong>固定数量</strong>就会保持不变，如果某个线程因为执行异常而结 束，那么线程池会补充一个新线程。 </p>
<p>（3）在接收异步任务的执行目标实例时，如果池中的所有线程均在繁忙状态，对于新任务会进入阻塞队列中(无界的阻塞队列)。 </p>
<p><strong>适用场景：</strong></p>
<p>​        需要任务长期执行的场景。<strong>固定数量的线程池</strong>的线程数能够比较稳定保证一个数，能够避免频繁回收线程和创建线程，故适用于处理 CPU 密集型的 任务，在CPU被工作线程长时间使用的情况下，能确保尽可能少的分配线程。 </p>
<h3 id="newCachedThreadPool-可缓存线程池"><a href="#newCachedThreadPool-可缓存线程池" class="headerlink" title="newCachedThreadPool - 可缓存线程池"></a>newCachedThreadPool - 可缓存线程池</h3><blockquote>
<p>该方法用于创建一个 <strong>可缓存线程池</strong>，如果线程池内的某些线程无事可干成为空闲线程，  <strong>可缓存线程池</strong>可灵活回收这些空闲线程。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CachedThreadExecutorDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SLEEP_GAP = <span class="number">500</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">TargetTask</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">        <span class="keyword">static</span> AtomicInteger taskNo = <span class="keyword">new</span> AtomicInteger(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">private</span> String taskName;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">TargetTask</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            taskName = <span class="string">&quot;task-&quot;</span> + taskNo.get();</span><br><span class="line">            taskNo.incrementAndGet();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(taskName + <span class="string">&quot; 开始&quot;</span>); <span class="comment">// 线程睡眠一会</span></span><br><span class="line">            SleepUtils.sleepMilliSeconds(SLEEP_GAP);</span><br><span class="line">            System.out.println(taskName + <span class="string">&quot; 运行结束.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ExecutorService pool = Executors.newCachedThreadPool();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            pool.execute(<span class="keyword">new</span> TargetTask());</span><br><span class="line">            pool.submit(<span class="keyword">new</span> TargetTask());</span><br><span class="line">        &#125;</span><br><span class="line">        SleepUtils.sleepMilliSeconds(<span class="number">2</span> * SLEEP_GAP);</span><br><span class="line">        <span class="comment">//关闭线程池</span></span><br><span class="line">        pool.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 运行结果</span></span><br><span class="line">task-<span class="number">1</span> 开始</span><br><span class="line">....</span><br><span class="line">task-<span class="number">10</span> 开始</span><br><span class="line">task-<span class="number">3</span> 运行结束.</span><br><span class="line">task-<span class="number">7</span> 运行结束.</span><br><span class="line">task-<span class="number">2</span> 运行结束.</span><br><span class="line">task-<span class="number">1</span> 运行结束.</span><br><span class="line">task-<span class="number">8</span> 运行结束.</span><br><span class="line">task-<span class="number">6</span> 运行结束.</span><br><span class="line">task-<span class="number">5</span> 运行结束.</span><br><span class="line">task-<span class="number">10</span> 运行结束.</span><br><span class="line">task-<span class="number">4</span> 运行结束.</span><br><span class="line">task-<span class="number">9</span> 运行结束.</span><br></pre></td></tr></table></figure>

<p>**特点： **</p>
<p>（1）在接收新的异步任务 target 执行目标实例时，如果池内所有线程繁忙，此线程池会添加 新线程来处理任务。 </p>
<p>（2）此线程池不会对线程池大小做限制，线程池大小完全依赖于操作系统（或者说 JVM） 能够创建的最大线程大小。 </p>
<p>（3）如果部分线程空闲，也就是存量线程的数量超过了处理任务数量，那么就会回收空闲 （60 秒不执行任务）线程。 </p>
<p><strong>适用场景：</strong></p>
<p>​        需要快速处理突发性强、耗时较短的任务场景，如 Netty 的 NIO 处理场景、REST API 接口的瞬时削峰场景。<strong>可缓存线程池</strong>的线程数量不固定，只要有空闲线程就会被回收；接收到的新异步任务执行目标，查看是否有线程处于空闲状态，如果没有就直接创建新的线程。</p>
<h3 id="newScheduledThreadPool-可调度线程池"><a href="#newScheduledThreadPool-可调度线程池" class="headerlink" title="newScheduledThreadPool  - 可调度线程池"></a>newScheduledThreadPool  - 可调度线程池</h3><p>Executors 提供了多个创建“可调度线程池”工厂方法， 例如： </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//方法一：创建一个可调度线程池，池内仅含有一条线程 </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ScheduledExecutorService <span class="title">newSingleThreadScheduledExecutor</span><span class="params">()</span></span>; </span><br><span class="line"></span><br><span class="line"><span class="comment">//方法二：创建一个可调度线程池，池内含有 N 条线程，N 的值为输入参数 corePoolSize </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ScheduledExecutorService <span class="title">newScheduledThreadPool</span><span class="params">(<span class="keyword">int</span> corePoolSize)</span> </span>;</span><br></pre></td></tr></table></figure>

<p>newScheduledThreadPool创建的线程池为ScheduleExecutorService类型的实例。ScheduleExecutorService接口中有多个重要的接收被调目标任务方法，其中scheduleAtFixedRate和scheduleWithFixedDelay使用比较多。 </p>
<p><strong>scheduleAtFixedRate 方法的定义如下：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> ScheduledFuture&lt;?&gt; scheduleAtFixedRate(</span><br><span class="line">        Runnable command, <span class="comment">//异步任务 target 执行目标实例； </span></span><br><span class="line">        <span class="keyword">long</span> initialDelay, <span class="comment">//首次执行延时； </span></span><br><span class="line">        <span class="keyword">long</span> period, <span class="comment">//两次开始执行最小间隔时间； </span></span><br><span class="line">        TimeUnit unit <span class="comment">//所设置的时间的计时单位，如 TimeUnit.SECONDS 常量； </span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p><strong>scheduleWithFixedDelay方法的定义如下：</strong> </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> ScheduledFuture&lt;?&gt; scheduleWithFixedDelay(</span><br><span class="line">    Runnable command,<span class="comment">//异步任务 target 执行目标实例； </span></span><br><span class="line">    <span class="keyword">long</span> initialDelay, <span class="comment">//首次执行延时； </span></span><br><span class="line">    <span class="keyword">long</span> delay, <span class="comment">//前一次执行结束到下一次执行开始的间隔时间（间隔执行延迟时间）； </span></span><br><span class="line">    TimeUnit unit <span class="comment">//所设置的时间的计时单位，如 TimeUnit.SECONDS 常量； </span></span><br><span class="line">); </span><br></pre></td></tr></table></figure>

<p>使用方法如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScheduledExecutorTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建一个有调度功能的线程池</span></span><br><span class="line">        ScheduledExecutorService scheduledExecutorService = Executors.newScheduledThreadPool(<span class="number">10</span>);</span><br><span class="line">        System.out.println(<span class="keyword">new</span> Date());</span><br><span class="line">        <span class="comment">// 在延迟2秒后执行任务, schedule(  Runnable任务, 延迟时长, 时间单位)</span></span><br><span class="line">        scheduledExecutorService.schedule(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getId() + <span class="string">&quot; -- &quot;</span> + <span class="keyword">new</span> Date());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="number">2</span>, TimeUnit.SECONDS);</span><br><span class="line">        <span class="comment">//以固定的频率执行任务,开启任务的时间是固定的, 在3秒后执行任务,以后每隔2秒重新执行一次</span></span><br><span class="line">        <span class="comment">// 这里的任务时间和间隔时间，以时间长的为准</span></span><br><span class="line">        scheduledExecutorService.scheduleAtFixedRate(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getId() + <span class="string">&quot;----在固定频率开启任务---&quot;</span> + <span class="keyword">new</span> Date());</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// 任务时间一秒，效果是每间隔2秒打印一次</span></span><br><span class="line">                    TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">                    <span class="comment">// 相当于任务间隔是3秒，效果相当于每隔三秒打印一次</span></span><br><span class="line">                    <span class="comment">// TimeUnit.SECONDS.sleep(3);</span></span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="number">3</span>, <span class="number">2</span>, TimeUnit.SECONDS);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//在上次任务结束后,在固定延迟后再次执行该任务,不管执行任务耗时多长,总是在任务结束后的2秒再次开启新的任务</span></span><br><span class="line">        <span class="comment">// 效果是 3 + 2 秒打印一次</span></span><br><span class="line">        scheduledExecutorService.scheduleWithFixedDelay(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getId() + <span class="string">&quot;----在固定频率开启任务---&quot;</span> + <span class="keyword">new</span> Date());</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="number">3</span>, <span class="number">2</span>, TimeUnit.SECONDS);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>特点：</strong>    </p>
<p>（1）创建的是一个<strong>可调度线程池</strong>，一个提供<strong>延时</strong>和<strong>周期性</strong>任务的调度功能的ScheduledExecutorService 类型的线程池。</p>
<p>（2）当被调任务的执行时间大于指定的间隔时间时，ScheduleExecutorService 并不会在创建一个新的线程去并发执行这个任务，而是等待前一次调度执行完毕。</p>
<p><strong>使用场景：</strong></p>
<p>​        周期性执行任务的场景。SpringBoot 中的任务调度器，底层借助了 JUC 的 ScheduleExecutorService“可调度线程池”实现，并且可以通过@Configuration 配置类型的 Bean，对“可调度线程池”实例进行配置，下面是一个例子：</p>
<h2 id="Executors-返回线程池对象的为何不推荐使用？"><a href="#Executors-返回线程池对象的为何不推荐使用？" class="headerlink" title="Executors 返回线程池对象的为何不推荐使用？"></a>Executors 返回线程池对象的为何不推荐使用？</h2><ul>
<li><strong>FixedThreadPool 和 SingleThreadExecutor</strong> ： 它们都使用无界队列LinkedBlockingQueue作为线程池的工作队列（队列的容量为 Intger.MAX_VALUE）。允许请求的队列长度为 Integer.MAX_VALUE，可能堆积大量的任务，从而导致 OOM。</li>
<li><strong>CachedThreadPool 和 ScheduledThreadPool</strong> ： 允许创建的线程数量为 Integer.MAX_VALUE ，可能会创建大量线程，从而导致 OOM。</li>
</ul>
<h1 id="线程池标准使用方法"><a href="#线程池标准使用方法" class="headerlink" title="线程池标准使用方法"></a>线程池标准使用方法</h1><h2 id="ThreadPoolExecutor介绍"><a href="#ThreadPoolExecutor介绍" class="headerlink" title="ThreadPoolExecutor介绍"></a>ThreadPoolExecutor介绍</h2><p>线程池标准使用方法使用的构造器如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ThreadPoolExecutor</span><span class="params">( </span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">int</span> corePoolSize, // 核心线程数，即使线程空闲（Idle），也不会回收； </span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">int</span> maximumPoolSize, // 线程数的上限； </span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">long</span> keepAliveTime, TimeUnit unit, // 线程最大空闲（Idle）时长 </span></span></span><br><span class="line"><span class="function"><span class="params">    BlockingQueue&lt;Runnable&gt; workQueue, // 任务的排队队列 </span></span></span><br><span class="line"><span class="function"><span class="params">    ThreadFactory threadFactory, // 新线程的产生方式 </span></span></span><br><span class="line"><span class="function"><span class="params">    RejectedExecutionHandler handler)</span> <span class="comment">// 拒绝策略</span></span></span><br><span class="line"><span class="function">)</span>;</span><br></pre></td></tr></table></figure>

<p>简单使用：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadPoolExecutorDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建线程池</span></span><br><span class="line">        ThreadPoolExecutor threadPool = <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">3</span>, <span class="number">5</span>, <span class="number">5</span>, TimeUnit.SECONDS,</span><br><span class="line">                <span class="keyword">new</span> ArrayBlockingQueue&lt;Runnable&gt;(<span class="number">5</span>));</span><br><span class="line">        <span class="comment">// 向线程池提交任务</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; threadPool.getCorePoolSize() + <span class="number">2</span>; i++) &#123;</span><br><span class="line">            threadPool.execute(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; <span class="number">2</span>; x++) &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;:&quot;</span> + x);</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 关闭线程池</span></span><br><span class="line">        threadPool.shutdown(); <span class="comment">// 设置线程池的状态为SHUTDOWN，然后中断所有没有正在执行任务的线程</span></span><br><span class="line">        <span class="comment">// threadPool.shutdownNow(); // 设置线程池的状态为STOP，然后尝试停止所有的正在执行或暂停任务的线程，并返回等待执行任务的列表，该方法要慎用，容易造成不可控的后果</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="常见参数介绍"><a href="#常见参数介绍" class="headerlink" title="常见参数介绍"></a>常见参数介绍</h3><p><strong>ThreadPoolExecutor 3 个最重要的参数：</strong></p>
<ul>
<li><strong>corePoolSize（必需）:</strong> 核心线程数，即池中一直保持存活的线程数，即使这些线程处于空闲。但是将<code>allowCoreThreadTimeOut</code>参数设置为<code>true</code>后，核心线程处于空闲一段时间以上，也会被回收。</li>
<li><strong>maximumPoolSize（必需）:</strong>  池中允许的最大线程数。当核心线程全部繁忙且任务队列打满之后，线程池会临时追加线程，直到总线程数达到<code>maximumPoolSize</code>这个上限。</li>
<li><strong>workQueue（必需）:</strong> 任务队列，采用阻塞队列实现。当核心线程全部繁忙时，后续由<code>execute</code>方法提交的<code>Runnable</code>将存放在任务队列中，等待被线程处理。</li>
</ul>
<p><strong>ThreadPoolExecutor其他常见参数:</strong></p>
<ol>
<li>**keepAliveTime（必需）: ** 线程空闲超时时间，当非核心线程处于空闲状态的时间超过这个时间后，该线程将被回收。将<code>allowCoreThreadTimeOut</code>参数设置为<code>true</code>后，核心线程也会被回收。</li>
<li><strong>unit（必需）:</strong> keepAliveTime 参数的时间单位。</li>
<li><strong>threadFactory（可选）:</strong> 线程工厂，指定线程池创建线程的方式，默认工厂为 DefaultThreadFactory，线程名称格式为 <strong>pool-n-thread-n</strong>。</li>
<li>**handler（可选）: ** 饱和策略，当线程池中线程数达到<code>maximumPoolSize</code>且<code>workQueue</code>打满时，后续提交的任务将被拒绝，<code>handler</code>可以指定用什么方式拒绝任务。</li>
</ol>
<h3 id="任务队列"><a href="#任务队列" class="headerlink" title="任务队列"></a>任务队列</h3><p>使用<strong>ThreadPoolExecutor</strong>需要指定一个实现了BlockingQueue接口的任务等待队列。在ThreadPoolExecutor线程池的API文档中，一共<strong>推荐</strong>了三种等待队列，它们是：<strong>SynchronousQueue、LinkedBlockingQueue和ArrayBlockingQueue</strong>；</p>
<ul>
<li><strong>SynchronousQueue</strong>：同步队列。这是一个内部没有任何容量的阻塞队列，任何一次插入操作的元素都要等待相对的删除/读取操作，否则进行插入操作的线程就要一直等待，反之亦然。</li>
<li><strong>LinkedBlockingQueue</strong>：无界队列（严格来说并非无界，上限是<strong>Integer.MAX_VALUE</strong>），基于链表结构。使用无界队列后，当核心线程都繁忙时，后续任务可以无限加入队列，因此线程池中线程数不会超过核心线程数。这种队列可以提高线程池吞吐量，但代价是牺牲内存空间，甚至会导致内存溢出。另外，使用它时可以指定容量，这样它也就是一种有界队列了。</li>
<li><strong>ArrayBlockingQueue</strong>：有界队列，基于数组实现。在线程池初始化时，指定队列的容量，后续无法再调整。这种有界队列有利于防止资源耗尽，但可能更难调整和控制。</li>
</ul>
<p>另外，Java还提供了另外4种队列：</p>
<ul>
<li><strong>PriorityBlockingQueue</strong>：支持优先级排序的无界阻塞队列，存放在<strong>PriorityBlockingQueue</strong>中的元素必须实现<strong>Comparable</strong>接口，这样才能通过实现<strong>compareTo()**方法进行排序。优先级最高的元素将始终排在队列的头部；</strong>PriorityBlockingQueue**不会保证优先级一样的元素的排序，也不保证当前队列中除了优先级最高的元素以外的元素，随时处于正确排序的位置。</li>
<li><strong>DelayQueue</strong>：延迟队列。基于二叉堆实现，同时具备：无界队列、阻塞队列、优先队列的特征。<strong>DelayQueue延迟队列中存放的对象，必须是实现Delayed接口的类对象。</strong>通过执行时延从队列中提取任务，时间没到任务取不出来。</li>
<li><strong>LinkedBlockingDeque</strong>：双端队列。基于链表实现，既可以从尾部插入/取出元素，还可以从头部插入元素/取出元素。</li>
<li><strong>LinkedTransferQueue</strong>：由链表结构组成的无界阻塞队列。这个队列比较特别的时，采用一种预占模式，意思就是消费者线程取元素时，如果队列不为空，则直接取走数据，若队列为空，那就生成一个节点（节点元素为null）入队，然后消费者线程被等待在这个节点上，后面生产者线程入队时发现有一个元素为null的节点，生产者线程就不入队了，直接就将元素填充到该节点，并唤醒该节点等待的线程，被唤醒的消费者线程取走元素。</li>
</ul>
<h3 id="线程工厂"><a href="#线程工厂" class="headerlink" title="线程工厂"></a>线程工厂</h3><p>​        上文介绍了Executors，这里我们介绍一下 ThreadFactory 。它俩的区别为：<strong>创建线程Executors 为线程池工厂类，用于快捷创建线程池（Thread Pool），ThreadFactory 为线程工厂类，用于创建线程（Thread）。</strong></p>
<p>​        在使用 ThreadFactory 的唯一方法 newThread()创建新线程时，<strong>可以更改所创建新线程的名称、 线程组、优先级、守护进程状态等</strong>。如果 newThread()返回值为 null，表示线程工厂未能成功创建线程，则线程池可能无法执行任何任务。</p>
<p>​        使用 Executors 创建新的线程池时，也可以基于 ThreadFactory（线程工厂）创建，在创建新线程池时可以指定将使用的 ThreadFactory 实例。只不过，如果没有做指定的话，则会使用Executors.defaultThreadFactory 默认实例。使用默认的线程工厂实例所创建的线程，全部位于同一个 ThreadGroup（线程组）中，具有相同的 NORM_PRIORITY（优先级为 5），而且都是非守护进程状态。</p>
<p><strong>自定义线程工厂：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadPoolExecutorDemo3</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> AtomicInteger threadNo = <span class="keyword">new</span> AtomicInteger(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleThreadFactory</span> <span class="keyword">implements</span> <span class="title">ThreadFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Thread <span class="title">newThread</span><span class="params">(Runnable target)</span> </span>&#123;</span><br><span class="line">            String threadName = <span class="string">&quot;simpleThread-&quot;</span> + threadNo.get();</span><br><span class="line">            System.out.println(<span class="string">&quot;创建一个线程，名称为：&quot;</span> + threadName);</span><br><span class="line">            threadNo.incrementAndGet(); <span class="comment">//设置线程名称，和异步执行目标</span></span><br><span class="line">            Thread thread = <span class="keyword">new</span> Thread(target, threadName);</span><br><span class="line">            <span class="comment">//设置为守护线程</span></span><br><span class="line">            thread.setDaemon(<span class="keyword">true</span>);</span><br><span class="line">            <span class="keyword">return</span> thread;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Task</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;线程:&quot;</span> + Thread.currentThread().getName() + <span class="string">&quot;开始...&quot;</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;线程:&quot;</span> + Thread.currentThread().getName() + <span class="string">&quot;结束...&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        ExecutorService pool = Executors.newFixedThreadPool(<span class="number">2</span>, <span class="keyword">new</span> SimpleThreadFactory());</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            pool.submit(<span class="keyword">new</span> Task());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//等待 10 秒</span></span><br><span class="line">        Thread.sleep(<span class="number">10000</span>);</span><br><span class="line">        <span class="comment">// 关闭线程池</span></span><br><span class="line">        pool.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 运行结果</span></span><br><span class="line">创建一个线程，名称为：simpleThread-<span class="number">1</span></span><br><span class="line">创建一个线程，名称为：simpleThread-<span class="number">2</span></span><br><span class="line">线程:simpleThread-<span class="number">1</span>开始...</span><br><span class="line">线程:simpleThread-<span class="number">2</span>开始...</span><br><span class="line">线程:simpleThread-<span class="number">1</span>结束...</span><br><span class="line">线程:simpleThread-<span class="number">2</span>结束...</span><br><span class="line">线程:simpleThread-<span class="number">2</span>开始...</span><br><span class="line">线程:simpleThread-<span class="number">1</span>开始...</span><br><span class="line">线程:simpleThread-<span class="number">1</span>结束...</span><br><span class="line">线程:simpleThread-<span class="number">2</span>结束...</span><br><span class="line">线程:simpleThread-<span class="number">1</span>开始...</span><br><span class="line">线程:simpleThread-<span class="number">1</span>结束...</span><br></pre></td></tr></table></figure>

<h3 id="拒绝策略"><a href="#拒绝策略" class="headerlink" title="拒绝策略"></a><strong>拒绝策略</strong></h3><p>针对当前同时运行的<strong>线程数量达到最大线程数量并且队列也已经被放满</strong>了任务的情况，<code>ThreadPoolTaskExecutor</code> 定义一些策略:</p>
<ul>
<li><strong>ThreadPoolExecutor.AbortPolicy</strong>：拒绝策略，抛出 <code>RejectedExecutionException</code>来拒绝新任务的处理。</li>
<li><strong>ThreadPoolExecutor.CallerRunsPolicy</strong>：调用者执行策略，调用执行自己的线程运行任务，也就是直接在调用<code>execute</code>方法的线程中运行(<code>run</code>)被拒绝的任务，如果执行程序已关闭，则会丢弃该任务。因此这种策略会降低对于新任务提交速度，影响程序的整体性能。如果您的应用程序可以承受此延迟并且你要求任何一个任务请求都要被执行的话，你可以选择这个策略。</li>
<li><strong>ThreadPoolExecutor.DiscardPolicy：</strong> 抛弃策略，不处理新任务，直接丢弃掉。</li>
<li><strong>ThreadPoolExecutor.DiscardOldestPolicy：</strong> 抛弃最老任务策略 。</li>
<li><strong>自定义策略</strong>：如果以上拒绝策略都不符合需求，则可自定义一个拒绝策略，<strong>实现 RejectedExecutionHandler接口的 rejectedExecution 方法即可。</strong></li>
</ul>
<p><strong>举个例子：</strong></p>
<p>Spring 通过 <code>ThreadPoolTaskExecutor</code> 或者我们直接通过 <code>ThreadPoolExecutor</code> 的构造函数创建线程池的时候，当我们不指定 <code>RejectedExecutionHandler</code> 饱和策略的话来配置线程池的时候默认使用的是 <code>ThreadPoolExecutor.AbortPolicy</code>。在默认情况下，<code>ThreadPoolExecutor</code> 将抛出 <code>RejectedExecutionException</code> 来拒绝新来的任务 ，这代表你将丢失对这个任务的处理。 对于可伸缩的应用程序，建议使用 <code>ThreadPoolExecutor.CallerRunsPolicy</code>。当最大池被填满时，此策略为我们提供可伸缩队列。（这个直接查看 <code>ThreadPoolExecutor</code> 的构造函数源码就可以看出，比较简单的原因，这里就不贴代码了。）</p>
<h3 id="钩子方法"><a href="#钩子方法" class="headerlink" title="钩子方法"></a>钩子方法</h3><p>ThreadPoolExecutor 线 程 池 调 度 器 为 每 个 任 务 执 行 前 后 ， 都提供了钩子方法 。 ThreadPoolExecutor 类提供了三个钩子方法（空方法），这三个空方法一般用作被子类重写：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 下面三个方法 默认实现不执行任何操作</span></span><br><span class="line"><span class="comment">//任务执行之前的钩子方法（前钩子） </span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">beforeExecute</span><span class="params">(Thread t, Runnable r)</span> </span>&#123; &#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">//任务执行之后的钩子方法（后钩子） </span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">afterExecute</span><span class="params">(Runnable r, Throwable t)</span> </span>&#123; &#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">//线程池终止时的钩子方法（停止钩子） </span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">terminated</span><span class="params">()</span> </span>&#123; &#125; </span><br></pre></td></tr></table></figure>

<p><strong>注：</strong>beforeExecute 和 afterExecute 两个方法在每个任务执行前后被调用，如果钩子(回调方法)引发异常，内部工作线程可能进而失败并突然终止。</p>
<h3 id="线程池状态"><a href="#线程池状态" class="headerlink" title="线程池状态"></a>线程池状态</h3><p>线程池有5种状态：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">volatile</span> <span class="keyword">int</span> runState;</span><br><span class="line"><span class="comment">// runState is stored in the high-order bits</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> RUNNING    = -<span class="number">1</span> &lt;&lt; COUNT_BITS;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SHUTDOWN   =  <span class="number">0</span> &lt;&lt; COUNT_BITS;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> STOP       =  <span class="number">1</span> &lt;&lt; COUNT_BITS;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TIDYING    =  <span class="number">2</span> &lt;&lt; COUNT_BITS;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TERMINATED =  <span class="number">3</span> &lt;&lt; COUNT_BITS;</span><br></pre></td></tr></table></figure>

<p>unState表示当前线程池的状态，它是一个 volatile 变量用来保证线程之间的可见性。</p>
<p>下面的几个static final变量表示runState可能的几个取值，有以下几个状态：</p>
<ul>
<li><strong>RUNNING</strong>：当创建线程池后，初始时，线程池处于RUNNING状态；</li>
<li><strong>SHUTDOWN</strong>：如果调用了shutdown()方法，则线程池处于SHUTDOWN状态，此时线程池不能够接受新的任务，它会等待所有任务执行完毕；</li>
<li><strong>STOP</strong>：如果调用了shutdownNow()方法，则线程池处于STOP状态，此时线程池不能接受新的任务，并且会去尝试终止正在执行的任务；</li>
<li><strong>TIDYING</strong>：该状态下所有任务都已终止或者处理完成，将会执行terminated( )钩子方法。</li>
<li><strong>TERMINATED</strong>：当线程池处于SHUTDOWN或STOP状态，并且所有工作线程已经销毁，任务缓存队列已经清空或执行结束后，线程池被设置为TERMINATED状态。</li>
</ul>
<h4 id="如何优雅关闭线程池"><a href="#如何优雅关闭线程池" class="headerlink" title="如何优雅关闭线程池"></a>如何优雅关闭线程池</h4><p>可以结合 shutdown、shutdownNow、awaitTermination 三个方法去优雅关闭一个线程池， </p>
<p>大致分为以下几步： </p>
<ul>
<li><p>执行 shutdown 方法，拒绝新任务的提交，并等待所有任务有序执行完毕。 </p>
</li>
<li><p>执行 awaitTermination(long timeout,TimeUnit unit) 方法，指定超时时间，判断是否已经关闭所有任务，线程池关闭完成。 </p>
</li>
<li><p>如果 awaitTermination 方法返回 fasle，或者被中断。调用 shutDownNow 方法立即关闭线程池所有任务。</p>
</li>
<li><p>补充执行 awaitTermination(long timeout,TimeUnit unit) 方法，判断线程池是否关闭完成。如果超时，则可以进入循环关闭，循环一定的次数（如 1000 次），不断关闭线程池，直到其关闭或者循环结束。 </p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">shutdownThreadPoolGracefully</span><span class="params">(ExecutorService threadPool)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (threadPool == <span class="keyword">null</span> || threadPool.isTerminated()) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        threadPool.shutdown();   <span class="comment">//拒绝接受新任务</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (SecurityException | NullPointerException e) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 等待 60 s，等待线程池中的任务完成执行</span></span><br><span class="line">        <span class="keyword">if</span> (!threadPool.awaitTermination(<span class="number">60</span>, TimeUnit.SECONDS)) &#123;</span><br><span class="line">            <span class="comment">// 调用 shutdownNow 取消正在执行的任务</span></span><br><span class="line">            threadPool.shutdownNow();</span><br><span class="line">            <span class="comment">// 再次等待 60 s，如果还未结束，可以再次尝试，或则直接放弃</span></span><br><span class="line">            <span class="keyword">if</span> (!threadPool.awaitTermination(<span class="number">60</span>, TimeUnit.SECONDS)) &#123;</span><br><span class="line">                System.err.println(<span class="string">&quot;线程池任务未正常执行结束&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException ie) &#123;</span><br><span class="line">        <span class="comment">// 捕获异常，重新调用 shutdownNow</span></span><br><span class="line">        threadPool.shutdownNow();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//任然没有关闭，循环关闭1000次，每次等待10毫秒</span></span><br><span class="line">    <span class="keyword">if</span> (!threadPool.isTerminated()) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (threadPool.awaitTermination(<span class="number">10</span>, TimeUnit.MILLISECONDS)) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                threadPool.shutdownNow();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            System.err.println(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="线程池任务调度？"><a href="#线程池任务调度？" class="headerlink" title="线程池任务调度？"></a>线程池任务调度？</h3><p>任务调度是线程池的主要入口，当用户提交了一个任务，接下来这个任务将如何执行都是由这个阶段决定的。了解这部分就相当于了解了线程池的核心运行机制。</p>
<p>首先，所有任务的调度都是由execute方法完成的，这部分完成的工作是：检查现在线程池的运行状态、运行线程数、运行策略，决定接下来执行的流程，是直接申请线程执行，或是缓冲到队列中执行，亦或是直接拒绝该任务。其执行过程如下：</p>
<ol>
<li>首先检测线程池运行状态，如果不是RUNNING，则直接拒绝，线程池要保证在RUNNING的状态下执行任务。</li>
<li>如果workerCount &lt; corePoolSize，则创建并启动一个线程来执行新提交的任务。</li>
<li>如果workerCount &gt;= corePoolSize，且线程池内的阻塞队列未满，则将任务添加到该阻塞队列中。</li>
<li>如果workerCount &gt;= corePoolSize &amp;&amp; workerCount &lt; maximumPoolSize，且线程池内的阻塞队列已满，则创建并启动一个线程来执行新提交的任务。</li>
<li>如果workerCount &gt;= maximumPoolSize，并且线程池内的阻塞队列已满, 则根据拒绝策略来处理该任务, 默认的处理方式是直接抛异常。</li>
</ol>
<img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/202201251733037.png" alt="image-20220125173313967" style="zoom: 75%;" />

<h3 id="思考题"><a href="#思考题" class="headerlink" title="思考题"></a>思考题</h3><ul>
<li>为什么以下示例中仅仅 1 个任务在执行</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadPoolExecutorDemo2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        ThreadPoolExecutor executor = <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">1</span>, <span class="comment">//corePoolSize</span></span><br><span class="line">                <span class="number">100</span>, <span class="comment">//maximumPoolSize</span></span><br><span class="line">                <span class="number">100</span>, <span class="comment">//keepAliveTime 空闲保活时长</span></span><br><span class="line">                TimeUnit.SECONDS, <span class="comment">//空闲保活时长的单位</span></span><br><span class="line">                <span class="keyword">new</span> LinkedBlockingDeque&lt;&gt;(<span class="number">100</span>));<span class="comment">//workQueue</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> taskIndex = i;</span><br><span class="line">            executor.execute(()-&gt;&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;taskIndex = &quot;</span> + taskIndex);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// 模拟一个基本不可能停止的任务</span></span><br><span class="line">                    Thread.sleep(Long.MAX_VALUE);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 每隔1秒打印一下 工作任务数量、总计的任务数量</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;activeCount:&quot;</span> + executor.getActiveCount()+ <span class="string">&quot; - taskCount:&quot;</span> + executor.getTaskCount());</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 运行结果</span></span><br><span class="line">taskIndex = <span class="number">0</span></span><br><span class="line">activeCount:<span class="number">1</span> - taskCount:<span class="number">5</span></span><br><span class="line">activeCount:<span class="number">1</span> - taskCount:<span class="number">5</span></span><br><span class="line">activeCount:<span class="number">1</span> - taskCount:<span class="number">5</span></span><br><span class="line">.......    </span><br><span class="line">activeCount:<span class="number">1</span> - taskCount:<span class="number">5</span>    </span><br></pre></td></tr></table></figure>

<p>​        以上示例创建了最大线程数量 maximumPoolSize 为 100 的线程池，仅仅向其中提交了 5 个任务，理论上，这 5 个任务都会被执行到。奇怪的是：示例中仅仅 1 个任务在执行，其他的 4 个任务都在等待。其他任务被加入到了阻塞队列中，需要等 pool-1-thread-1 线程执行完成第一个任务后，才能依次从阻塞队列取出执行。可是，实例中的第一个任务是一个永远也没有办法完成的任务，所以其他的 4 个任务也只能永远在阻塞队列里边呆着。由于参数配置得不合理，就出现了以上的奇怪现象。 </p>
<p>​        为什么会出现上面奇怪的现象呢？ 因为例子中的 corePoolSize 为 1，阻塞队列的大小为 100， 按照线程创建的规则，需要等阻塞队列已满，才会为去创建新的线程。例子中加入 5 个任务，阻塞队列大小为 4（&lt;100），所以线程池的调度器不会去创建新的线程，后面的 4 个任务只能等待。 </p>
<p><strong>以上的示例，传递出两个知识点：</strong> </p>
<ul>
<li><p>核心和最大线程数量、BlockingQueue 队列等参数，如果配置不合理，可以会造成异步任务得不到预期的并发执行，造成严重的排队等待现象。 </p>
</li>
<li><p><strong>在 corePoolSize 已满之后，还需要等阻塞队列已满，才会为去创建新的线程。</strong></p>
</li>
</ul>
<p>修改上述例子中的阻塞队列大小为3，则得到下面的结果：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">taskIndex = 0</span><br><span class="line">taskIndex = 4</span><br><span class="line">activeCount:2 - taskCount:5</span><br><span class="line">activeCount:2 - taskCount:5</span><br><span class="line">......</span><br><span class="line">activeCount:2 - taskCount:5</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>多线程</category>
      </categories>
      <tags>
        <tag>多线程</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis-知识汇总</title>
    <url>/posts/af9b4eba.html</url>
    <content><![CDATA[<h2 id="Redis简介"><a href="#Redis简介" class="headerlink" title="Redis简介"></a>Redis简介</h2><h3 id="简单介绍"><a href="#简单介绍" class="headerlink" title="简单介绍"></a>简单介绍</h3><p>Redis：开源、免费、非关系型数据库、K-V数据库、内存数据库，支持持久化、事务和备份，集群(支持16个库)等高可用功能。并且性能极高(可以达到100000+的QPS)，易扩展，丰富的数据类型，所有操作都是单线程,原子性的。</p>
<p><strong>NOSQL</strong>：非关系型数据库，数据与数据之间没有关联关系。就是为了解决大规模数据集合多重数据种类带来的挑战，尤其是大数据应用难题</p>
<p>类型</p>
<ol>
<li>键值(key-value)存储数据库</li>
<li>列存储数据库：键仍然存在，但是指向了多个列，HBase (eg：博客平台(标签和文章)，日志)</li>
<li>文档型数据库 MongoDb  (eg：淘宝商品的评价)</li>
<li>图形数据库 Neo4j  （eg：好友列表）</li>
</ol>
<blockquote>
<p>扩展:</p>
<p>MongoDB是一个基于分布式文件存储的数据库。有C++语言编写。旨在为WEB应用提供可扩展的高性能数据存储解决方案。</p>
<p>MongoDB是一个介于关系型数据库和非关系型数据库之间的产品，是非关系数据库当中功能最丰富，最像关系型数据库的。</p>
<p>文档(document)是MongoDB中数据的基本单元，非常类似于关系型数据库系统中的行(但是比行要复杂的多);<br>集合(collection)就是一组文档，如果说MongoDB中的文档类似于关系型数据库中的行，那么集合就如同表;</p>
</blockquote>
<p>使用场景:</p>
<ol>
<li>数据模型比较简单</li>
<li>需要灵活更强的IT系统</li>
<li>对数据库性能要求比较高</li>
<li>不需要高度的数据一致性</li>
<li>对于给定的key，比较容易映射复杂值的环境</li>
</ol>
<p><strong>SQL</strong>:关系型数据库，表与表之间建立关联关系</p>
<h3 id="redis的安装"><a href="#redis的安装" class="headerlink" title="redis的安装"></a>redis的安装</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">拉取镜像</span></span><br><span class="line">docker pull redis</span><br><span class="line"><span class="meta">#</span><span class="bash">挂载数据卷并运行容器</span></span><br><span class="line">docker run -p 6379:6379 --name redis -v /root/redis/data:/data -v /root/redis/conf/redis.conf:/usr/local/etc/redis/redis.conf -d redis redis-server /usr/local/etc/redis/redis.conf --appendonly yes --requirepass &quot;xxx&quot;</span><br></pre></td></tr></table></figure>

<h3 id="为什么使用NOSQL"><a href="#为什么使用NOSQL" class="headerlink" title="为什么使用NOSQL"></a>为什么使用NOSQL</h3><h4 id="单机-MySQL-的美好时代"><a href="#单机-MySQL-的美好时代" class="headerlink" title="单机 MySQL 的美好时代"></a>单机 MySQL 的美好时代</h4><p>在90年代，一个网站的访问量一般都不大，用单个数据库完全可以轻松应付。<br> 在那个时候，更多的都是静态网页，动态交互类型的网站不多。</p>
<p><img src="https://img-blog.csdnimg.cn/20200326205200880.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0NzY2ODgz,size_16,color_FFFFFF,t_70" alt="创建"></p>
<p>DAL : Data Access Layer（数据访问层 – Hibernate，MyBatis）</p>
<p>上述架构下，我们来看看<code>数据存储的瓶颈</code>是什么？</p>
<blockquote>
<ol>
<li>数据量的总大小一个机器放不下时。</li>
<li>数据的索引（B+ Tree）一个机器的内存放不下时。</li>
<li>访问量(读写混合)一个实例不能承受。</li>
</ol>
</blockquote>
<p>如果满足了上述1 or 3个时，只能对数据库的整体架构进行重构。</p>
<h4 id="Memcached-缓存-MySQL-垂直拆分"><a href="#Memcached-缓存-MySQL-垂直拆分" class="headerlink" title="Memcached(缓存)+MySQL+垂直拆分"></a>Memcached(缓存)+MySQL+垂直拆分</h4><p><a href="http://codekiller.top/2020/03/29/mysql-split/">关于垂直拆分和水平拆分的简单介绍</a></p>
<p>后来，随着访问量的上升，几乎大部分使用MySQL架构的网站在数据库上都开始出现了性能问题，web程序不再仅仅专注在功能上，同时也在追求性能。程序员们开始大量的使用缓存技术来缓解数据库的压力，优化数据库的结构和索引。开始比较流行的是通过文件缓存来缓解数据库压力，但是当访问量继续增大的时候，多台web机器通过文件缓存不能共享，大量的小文件缓存也带了了比较高的IO压力。在这个时候，Memcached就自然的成为一个非常时尚的技术产品。</p>
<p><img src="https://img-blog.csdnimg.cn/20200326205550678.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0NzY2ODgz,size_16,color_FFFFFF,t_70"></p>
<p>Memcached作为一个独立的分布式的缓存服务器，为多个web服务器提供了一个共享的高性能缓存服务，在Memcached服务器上，又发展了根据hash算法来进行多台Memcached缓存服务的扩展，然后又出现了一致性hash来解决增加或减少缓存服务器导致重新hash带来的大量缓存失效的弊端。</p>
<h4 id="Mysql主从读写分离"><a href="#Mysql主从读写分离" class="headerlink" title="Mysql主从读写分离"></a>Mysql主从读写分离</h4><p>由于数据库的写入压力增加，Memcached只能缓解数据库的读取压力。读写集中在一个数据库上让数据库不堪重负，大部分网站开始使用主从复制技术来达到读写分离，以提高读写性能和读库的可扩展性。Mysql的master-slave模式成为这个时候的网站标配了。</p>
<p><img src="https://cdn.jsdelivr.net/gh/suolongY/warehouse@master/zk/format,png.png" alt="img"></p>
<h4 id="分库分表-水平拆分-mysql集群"><a href="#分库分表-水平拆分-mysql集群" class="headerlink" title="分库分表+水平拆分+mysql集群"></a>分库分表+水平拆分+mysql集群</h4><p>在Memcached的高速缓存，MySQL的主从复制，读写分离的基础之上，这时MySQL主库的写压力开始出现瓶颈，而数据量的持续猛增，由于MyISAM在写数据的时候会使用表锁，在高并发写数据的情况下会出现严重的锁问题，大量的高并发MySQL应用开始使用InnoDB引擎代替MyISAM。</p>
<blockquote>
<p>ps：这就是为什么 MySQL 在 5.6 版本之后使用 InnoDB 做为默认存储引擎的原因 – MyISAM 写会锁表，InnoDB 有行锁，，并且是事务优先，发生冲突的几率低，并发性能高。</p>
<p>注意锁的几个概念：行锁和表锁，读锁和写锁，乐观锁和悲观锁，还有一个间隙锁 </p>
<p>详情请看<a href="#http://codekiller.top/2020/03/27/mysql-lock/">锁的介绍</a></p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20200328165125982.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0NzY2ODgz,size_16,color_FFFFFF,t_70"></p>
<h3 id="四种NoSQL对比"><a href="#四种NoSQL对比" class="headerlink" title="四种NoSQL对比"></a>四种NoSQL对比</h3><p><img src="https://img-blog.csdnimg.cn/20200328233415743.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0NzY2ODgz,size_16,color_FFFFFF,t_70" alt="Nosql对比"></p>
<h3 id="3V-3高"><a href="#3V-3高" class="headerlink" title="3V+3高"></a>3V+3高</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">graph TB</span><br><span class="line">subgraph 互联网需求的3高</span><br><span class="line">3h((3高))--&gt;h1[高并发]</span><br><span class="line">3h--&gt;h2[高可用]</span><br><span class="line">3h--&gt;h3[高性能]</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">subgraph 大数据时代的3V</span><br><span class="line">3v((3v))--&gt;V1[海量Volumn]</span><br><span class="line">3v--&gt;v2[多样Variety]</span><br><span class="line">3v--&gt;v3[实时Velocity]</span><br><span class="line">end</span><br></pre></td></tr></table></figure>



<h3 id="ACID"><a href="#ACID" class="headerlink" title="ACID"></a>ACID</h3><p>事务是由一组SQL语句组成的逻辑处理单元，事务具有4属性，通常称为事务的ACID属性。</p>
<ul>
<li><p><code>原子性</code>（Actomicity）：事务是一个原子操作单元，其对数据的修改，要么全都执行，要么全都不执行。</p>
</li>
<li><p><code>一致性</code>（Consistent）：在事务开始和完成时，数据都必须保持一致状态。这意味着所有相关的数据规则都必须应用于事务的修改，以操持完整性；事务结束时，所有的内部数据结构（如B树索引或双向链表）也都必须是正确的。</p>
<p>  eg：有3个人进行转账操作，为了保证一致性（即3个人 的账号金额总数不变），那在我写代码的时候，如果写了代码：A=A-5000;此时数据时不一致的。那就必须要写上，B=B+5000，或者是C=C+5000，这样的代码才能保证了数据库的一致性状态。</p>
</li>
<li><p><code>隔离性</code>（Isolation）：数据库系统提供一定的隔离机制，保证事务在不受外部并发操作影响的“独立”环境执行。这意味着事务处理过程中的中间状态对外部是不可见的，反之亦然。具体看下面的几个隔离级别和并发问题。</p>
</li>
<li><p><code>持久性</code>（Durable）：事务完成之后，它对于数据的修改是永久性的，即使出现系统故障也能够保持</p>
</li>
</ul>
<h3 id="CAP"><a href="#CAP" class="headerlink" title="CAP"></a>CAP</h3><p>C：consistency，数据在多个副本中能保持一致的状态。</p>
<p>A：Availability，整个系统在任何时刻都能提供可用的服务，通常达到99.99%四个九可以称为<strong>高可用</strong></p>
<p>P：Partition tolerance，分区容错性，在分布式中，由于网络的原因无法避免有时候出现数据不一致的情况，系统如果不能在时限内达成数据一致性，就意味着发生了分区的情况，必须就当前操作在C和A之间做出选择，换句话说，系统可以跨网络分区线性的伸缩和扩展。</p>
<p>CAP理论的核心：一个分布式系统<code>不可能同时</code>很好的满足一致性，可用性和分区容错性这三个需求，<code>最多只能同时较好的满足两个</code>。</p>
<ul>
<li>CA：单点集群，满足一致性，可用性的系统，通常在可扩展上不太强大。应用：传统的Oracle数据库</li>
<li>CP：满足一致性，分区容错性的系统，通常性能不是特别高。应用：Redis，MongoDB，银行</li>
<li>AP：满足可用性，分区容错性，通常可能对一致性要求低一些。应用：大多数网站架构的选择</li>
</ul>
<p><img src="https://img-blog.csdnimg.cn/20200329004954237.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0NzY2ODgz,size_16,color_FFFFFF,t_70"></p>
<p>CAP理论就是说在分布式存储系统中，最多只能实现上面的两个。而由于当前的网络硬件肯定会出现延迟丢包等问题。所以</p>
<p><code>分区容忍性是我们必须需要实现的</code></p>
<p>所以我们只能在一致性和高可用之间进行权衡，没有NoSQL系统能同时保证三点。<a href="#sandian">为什么呢？</a></p>
<h3 id="为何CAP三者不可兼得"><a href="#为何CAP三者不可兼得" class="headerlink" title="为何CAP三者不可兼得"></a><span id="sandian">为何CAP三者不可兼得</span></h3><p>现在我们就来证明一下，为什么不能同时满足三个特性？</p>
<p>假设有两台服务器，一台放着应用A和数据库V，一台放着应用B和数据库V，他们之间的网络可以互通，也就相当于分布式系统的两个部分。</p>
<p>在满足一致性的时候，两台服务器 N1和N2，一开始两台服务器的数据是一样的，DB0=DB0。在满足可用性的时候，用户不管是请求N1或者N2，都会得到立即响应。在满足分区容错性的情况下，N1和N2有任何一方宕机，或者网络不通的时候，都不会影响N1和N2彼此之间的正常运作。           </p>
<p><img src="https://img-blog.csdnimg.cn/20200329012120473.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0NzY2ODgz,size_16,color_FFFFFF,t_70"></p>
<p>当用户通过N1中的A应用请求数据更新到服务器DB0后，这时N1中的服务器DB0变为DB1，通过分布式系统的数据同步更新操作，N2服务器中的数据库V0也更新为了DB1，这时，用户通过B向数据库发起请求得到的数据就是即时更新后的数据DB1。</p>
<p>上面是正常运作的情况，但分布式系统中，最大的问题就是网络传输问题，现在假设一种极端情况，N1和N2之间的网络断开了，但我们仍要支持这种网络异常，也就是满足分区容错性，那么这样能不能同时满足一致性和可用性呢？</p>
<p><img src="https://img-blog.csdnimg.cn/20200329012231781.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0NzY2ODgz,size_16,color_FFFFFF,t_70"></p>
<p>假设N1和N2之间通信的时候网络突然出现故障，有用户向N1发送数据更新请求，那N1中的数据DB0将被更新为DB1，由于网络是断开的，N2中的数据库仍旧是DB0；</p>
<p>如果这个时候，有用户向N2发送数据读取请求，由于数据还没有进行同步，应用程序没办法立即给用户返回最新的数据DB1，怎么办呢？有二种选择，第一，牺牲数据一致性，响应旧的数据DB0给用户；第二，牺牲可用性，阻塞等待，直到网络连接恢复，数据更新操作完成之后，再给用户响应最新的数据DB1。</p>
<p>上面的过程比较简单，但也说明了要满足分区容错性的分布式系统，只能在一致性和可用性两者中，选择其中一个。也就是说分布式系统不可能同时满足三个特性。这就需要我们在搭建系统时进行取舍了。</p>
<h3 id="Base"><a href="#Base" class="headerlink" title="Base"></a>Base</h3><p>Base就是为了解决关系型数据库强一致性引起的问题而引起的可用性降低而提出的解决方案。</p>
<p>Base其实是下面三个术语的缩写：</p>
<ul>
<li>基本可用（Basically Available）</li>
<li>软状态（Soft state）状态可以有一段时间不同步</li>
<li>最终一致（Eventually consistent）最终数据是一致的就可以了，而不是时时保持强一致</li>
</ul>
<p>它的思想是通过让系统放松对某一时刻数据一致性的要求来换取系统整体伸缩性和性能上改观。为什么这么说呢，缘由就在于大型系统往往由于地域分布和极高性能的要求，不可能采用分布式事务来完成这些指标，要想获得这些指标，我们必须采用另外一种方式来完成，这里BASE就是解决这个问题的办法。</p>
<p>以<em>案例转账</em>为例，我们把用户A给用户B转账分成四个阶段，第一个阶段用户A准备转账，第二个阶段从用户A账户扣减余额，第三个阶段对用户B增加余额，第四个阶段完成转账。系统需要记录操作过程中每一步骤的状态，一旦系统出现故障，系统能够自动发现没有完成的任务，然后，根据任务所处的状态，继续执行任务，最终完成任务，达到一致的最终状态。</p>
<p>在实际应用中，上面这个过程通常是通过持久化执行任务的状态和环境信息，一旦出现问题，定时任务会捞取未执行完的任务，继续未执行完的任务，直到执行完成为止，或者取消已经完成的部分操作回到原始状态。这种方法在任务完成每个阶段的时候，都要更新数据库中任务的状态，这在大规模高并发系统中不会有太好的性能，一个更好的办法是用Write-Ahead Log（写前日志），这和数据库的Bin  Log（操作日志）相似，在做每一个操作步骤，都先写入日志，如果操作遇到问题而停止的时候，可以读取日志按照步骤进行恢复，并且继续执行未完成的工作，最后达到一致。写前日志可以利用机械硬盘的追加写而达到较好性能，因此，这是一种专业化的实现方式，多数业务系系统还是使用数据库记录的字段来记录任务的执行状态，也就是记录中间的“软状态”，一个任务的状态流转一般可以通过数据库的行级锁来实现，这比使用Write-Ahead Log实现更简单、更快速。</p>
<h3 id="分布式和集群"><a href="#分布式和集群" class="headerlink" title="分布式和集群"></a>分布式和集群</h3><p>分布式：不同的多台服务器上面部署不同的服务模块（工程）</p>
<p>集群：不同的多台服务器上面部署相同的服务模块。通过分布式调度软件进行统一的调度，对外提供服务和访问。</p>
<h2 id="解析配置文件"><a href="#解析配置文件" class="headerlink" title="解析配置文件"></a>解析配置文件</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">是否在后台运行；no：不是后台运行</span></span><br><span class="line">daemonize yes</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">是否开启保护模式，默认开启。要是配置里没有指定<span class="built_in">bind</span>和密码。开启该参数后，redis只会本地进行访问，拒绝外部访问。</span></span><br><span class="line">protected-mode yes</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">redis的进程文件</span></span><br><span class="line">pidfile /var/run/redis/redis-server.pid</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">redis监听的端口号。</span></span><br><span class="line">port 6379</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">此参数确定了TCP连接中已完成队列(完成三次握手之后)的长度， 当然此值必须不大于Linux系统定义的/proc/sys/net/core/somaxconn值，默认是511，而Linux的默认参数值是128。当系统并发量大并且客户端速度缓慢的时候，可以将这二个参数一起参考设定。该内核参数默认值一般是128，对于负载很大的服务程序来说大大的不够。一般会将它修改为2048或者更大。在/etc/sysctl.conf中添加:net.core.somaxconn = 2048，然后在终端中执行sysctl -p。</span></span><br><span class="line">tcp-backlog 511</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">指定 redis 只接收来自于该 IP 地址的请求，如果不进行设置，那么将处理所有请求</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="built_in">bind</span> 127.0.0.1</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="built_in">bind</span> 0.0.0.0</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">配置unix socket来让redis支持监听本地连接。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> unixsocket /var/run/redis/redis.sock</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">配置unix socket使用文件的权限</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> unixsocketperm 700</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash"> 此参数为设置客户端空闲超过timeout，服务端会断开连接，为0则服务端不会主动断开连接，不能小于0。</span></span><br><span class="line">timeout 0</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">tcp keepalive参数。如果设置不为0，就使用配置tcp的SO_KEEPALIVE值，使用keepalive有两个好处:检测挂掉的对端。降低中间设备出问题而导致网络看似连接却已经与对端端口的问题。在Linux内核中，设置了keepalive，redis会定时给对端发送ack。检测到对端关闭需要两倍的设置值。</span></span><br><span class="line">tcp-keepalive 0</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">指定了服务端日志的级别。级别包括：debug（很多信息，方便开发、测试），verbose（许多有用的信息，但是没有debug级别信息多），notice（适当的日志级别，适合生产环境），warn（只有非常重要的信息）</span></span><br><span class="line">loglevel notice</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">指定了记录日志的文件。空字符串的话，日志会打印到标准输出设备。后台运行的redis标准输出是/dev/null。</span></span><br><span class="line">logfile /var/log/redis/redis-server.log</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">是否打开记录syslog功能</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> syslog-enabled no</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">syslog的标识符。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> syslog-ident redis</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">日志的来源、设备</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> syslog-facility local0</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">数据库的数量，默认使用的数据库是DB 0。可以通过SELECT命令选择一个db</span></span><br><span class="line">databases 16</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash"> redis是基于内存的数据库，可以通过设置该值定期写入磁盘。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 注释掉“save”这一行配置项就可以让保存数据库功能失效</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 900秒（15分钟）内至少1个key值改变（则进行数据库保存--持久化） </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 300秒（5分钟）内至少10个key值改变（则进行数据库保存--持久化） </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 60秒（1分钟）内至少10000个key值改变（则进行数据库保存--持久化）</span></span><br><span class="line">save 900 1</span><br><span class="line">save 300 10</span><br><span class="line">save 60 10000</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">当RDB持久化出现错误后，是否依然进行继续进行工作，yes：不能进行工作，no：可以继续进行工作，可以通过info中的rdb_last_bgsave_status了解RDB持久化是否有错误</span></span><br><span class="line">stop-writes-on-bgsave-error yes</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">使用压缩rdb文件，rdb文件压缩使用LZF压缩算法，yes：压缩，但是需要一些cpu的消耗。no：不压缩，需要更多的磁盘空间</span></span><br><span class="line">rdbcompression yes</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">是否校验rdb文件。从rdb格式的第五个版本开始，在rdb文件的末尾会带上CRC64的校验和。这跟有利于文件的容错性，但是在保存rdb文件的时候，会有大概10%的性能损耗，所以如果你追求高性能，可以关闭该配置。</span></span><br><span class="line">rdbchecksum yes</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">rdb文件的名称</span></span><br><span class="line">dbfilename dump.rdb</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">数据目录，数据库的写入会在这个目录。rdb、aof文件也会写在这个目录</span></span><br><span class="line">dir /data</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">############## 主从复制 ###############</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">复制选项，slave复制对应的master。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> slaveof &lt;masterip&gt; &lt;masterport&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">如果master设置了requirepass，那么slave要连上master，需要有master的密码才行。masterauth就是用来配置master的密码，这样可以在连上master后进行认证。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> masterauth &lt;master-password&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">当从库同主机失去连接或者复制正在进行，从机库有两种运行方式：1) 如果slave-serve-stale-data设置为yes(默认设置)，从库会继续响应客户端的请求。2) 如果slave-serve-stale-data设置为no，除去INFO和SLAVOF命令之外的任何请求都会返回一个错误”SYNC with master <span class="keyword">in</span> progress”。</span></span><br><span class="line">slave-serve-stale-data yes</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">作为从服务器，默认情况下是只读的（yes），可以修改成NO，用于写（不建议）。</span></span><br><span class="line">slave-read-only yes</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">是否使用socket方式复制数据。目前redis复制提供两种方式，disk和socket。如果新的slave连上来或者重连的slave无法部分同步，就会执行全量同步，master会生成rdb文件。有2种方式：disk方式是master创建一个新的进程把rdb文件保存到磁盘，再把磁盘上的rdb文件传递给slave。socket是master创建一个新的进程，直接把rdb文件以socket的方式发给slave。disk方式的时候，当一个rdb保存的过程中，多个slave都能共享这个rdb文件。socket的方式就的一个个slave顺序复制。在磁盘速度缓慢，网速快的情况下推荐用socket方式。</span></span><br><span class="line">repl-diskless-sync no</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">diskless复制的延迟时间，防止设置为0。一旦复制开始，节点不会再接收新slave的复制请求直到下一个rdb传输。所以最好等待一段时间，等更多的slave连上来。</span></span><br><span class="line">repl-diskless-sync-delay 5</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">slave根据指定的时间间隔向服务器发送ping请求。时间间隔可以通过 repl_ping_slave_period 来设置，默认10秒。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> repl-ping-slave-period 10</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">复制连接超时时间。master和slave都有超时时间的设置。master检测到slave上次发送的时间超过repl-timeout，即认为slave离线，清除该slave信息。slave检测到上次和master交互的时间超过repl-timeout，则认为master离线。需要注意的是repl-timeout需要设置一个比repl-ping-slave-period更大的值，不然会经常检测到超时。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> repl-timeout 60</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">是否禁止复制tcp链接的tcp nodelay参数，可传递yes或者no。默认是no，即使用tcp nodelay。如果master设置了yes来禁止tcp nodelay设置，在把数据复制给slave的时候，会减少包的数量和更小的网络带宽。但是这也可能带来数据的延迟。默认我们推荐更小的延迟，但是在数据量传输很大的场景下，建议选择yes。</span></span><br><span class="line">repl-disable-tcp-nodelay no</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">复制缓冲区大小，这是一个环形复制缓冲区，用来保存最新复制的命令。这样在slave离线的时候，不需要完全复制master的数据，如果可以执行部分同步，只需要把缓冲区的部分数据复制给slave，就能恢复正常复制状态。缓冲区的大小越大，slave离线的时间可以更长，复制缓冲区只有在有slave连接的时候才分配内存。没有slave的一段时间，内存会被释放出来，默认1m。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> repl-backlog-size 5mb</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">master没有slave一段时间会释放复制缓冲区的内存，repl-backlog-ttl用来设置该时间长度。单位为秒。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> repl-backlog-ttl 3600</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">当master不可用，Sentinel会根据slave的优先级选举一个master。最低的优先级的slave，当选master。而配置成0，永远不会被选举。</span></span><br><span class="line">slave-priority 100</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">redis提供了可以让master停止写入的方式，如果配置了min-slaves-to-write，健康的slave的个数小于N，mater就禁止写入。master最少得有多少个健康的slave存活才能执行写命令。这个配置虽然不能保证N个slave都一定能接收到master的写操作，但是能避免没有足够健康的slave的时候，master不能写入来避免数据丢失。设置为0是关闭该功能。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> min-slaves-to-write 3</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">延迟小于min-slaves-max-lag秒的slave才认为是健康的slave。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> min-slaves-max-lag 10</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置1或另一个设置为0禁用这个特性。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Setting one or the other to 0 disables the feature.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> By default min-slaves-to-write is <span class="built_in">set</span> to 0 (feature disabled) and</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> min-slaves-max-lag is <span class="built_in">set</span> to 10.</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">############## 安全相关 ###############</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">requirepass配置可以让用户使用AUTH命令来认证密码，才能使用其他命令。这让redis可以使用在不受信任的网络中。为了保持向后的兼容性，可以注释该命令，因为大部分用户也不需要认证。使用requirepass的时候需要注意，因为redis太快了，每秒可以认证15w次密码，简单的密码很容易被攻破，所以最好使用一个更复杂的密码。注意只有密码没有用户名。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> requirepass foobared</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">把危险的命令给修改成其他名称。比如CONFIG命令可以重命名为一个很难被猜到的命令，这样用户不能使用，而内部工具还能接着使用。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> rename-command CONFIG b840fc02d524045429941cc15f59e41cb7be6c52</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">设置成一个空的值，可以禁止一个命令</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> rename-command CONFIG <span class="string">&quot;&quot;</span></span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">############## 进程限制相关 ###############</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置能连上redis的最大客户端连接数量。默认是10000个客户端连接。由于redis不区分连接是客户端连接还是内部打开文件或者和slave连接等，所以maxclients最小建议设置到32。如果超过了maxclients，redis会给新的连接发送’max number of clients reached’，并关闭连接。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> maxclients 10000</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">redis配置的最大内存容量。当内存满了，需要配合maxmemory-policy策略进行处理。注意slave的输出缓冲区是不计算在maxmemory内的。所以为了防止主机内存使用完，建议设置的maxmemory需要更小一些。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> maxmemory &lt;bytes&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">内存容量超过maxmemory后的处理策略。</span></span><br><span class="line"><span class="meta">#</span><span class="bash">volatile-lru：利用LRU算法移除设置过过期时间的key。</span></span><br><span class="line"><span class="meta">#</span><span class="bash">volatile-random：随机移除设置过过期时间的key。</span></span><br><span class="line"><span class="meta">#</span><span class="bash">volatile-ttl：移除即将过期的key，根据最近过期时间来删除（辅以TTL）</span></span><br><span class="line"><span class="meta">#</span><span class="bash">allkeys-lru：利用LRU算法移除任何key。</span></span><br><span class="line"><span class="meta">#</span><span class="bash">allkeys-random：随机移除任何key。</span></span><br><span class="line"><span class="meta">#</span><span class="bash">noeviction：不移除任何key，只是返回一个写错误。</span></span><br><span class="line"><span class="meta">#</span><span class="bash">上面的这些驱逐策略，如果redis没有合适的key驱逐，对于写命令，还是会返回错误。redis将不再接收写请求，只接收get请求。写命令包括：<span class="built_in">set</span> setnx setex append incr decr rpush lpush rpushx lpushx linsert lset rpoplpush sadd sinter sinterstore sunion sunionstore sdiff sdiffstore zadd zincrby zunionstore zinterstore hset hsetnx hmset hincrby incrby decrby getset mset msetnx <span class="built_in">exec</span> sort。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> maxmemory-policy noeviction</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">lru检测的样本数。使用lru或者ttl淘汰算法，从需要淘汰的列表中随机选择sample个key，选出闲置时间最长的key移除。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> maxmemory-samples 5</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">############## APPEND ONLY 持久化方式 ###############</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">默认redis使用的是rdb方式持久化，这种方式在许多应用中已经足够用了。但是redis如果中途宕机，会导致可能有几分钟的数据丢失，根据save来策略进行持久化，Append Only File是另一种持久化方式，可以提供更好的持久化特性。Redis会把每次写入的数据在接收后都写入 appendonly.aof 文件，每次启动时Redis都会先把这个文件的数据读入内存里，先忽略RDB文件。</span></span><br><span class="line">appendonly no</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">aof文件名</span></span><br><span class="line">appendfilename &quot;appendonly.aof&quot;</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">aof持久化策略的配置</span></span><br><span class="line"><span class="meta">#</span><span class="bash">no表示不执行fsync，由操作系统保证数据同步到磁盘，速度最快。</span></span><br><span class="line"><span class="meta">#</span><span class="bash">always表示每次写入都执行fsync，以保证数据同步到磁盘。</span></span><br><span class="line"><span class="meta">#</span><span class="bash">everysec表示每秒执行一次fsync，可能会导致丢失这1s数据。</span></span><br><span class="line">appendfsync everysec</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash"> 在aof重写或者写入rdb文件的时候，会执行大量IO，此时对于everysec和always的aof模式来说，执行fsync会造成阻塞过长时间，no-appendfsync-on-rewrite字段设置为默认设置为no，是最安全的方式，不会丢失数据，但是要忍受阻塞的问题。如果对延迟要求很高的应用，这个字段可以设置为yes，，设置为yes表示rewrite期间对新写操作不fsync,暂时存在内存中,不会造成阻塞的问题（因为没有磁盘竞争），等rewrite完成后再写入，这个时候redis会丢失数据。Linux的默认fsync策略是30秒。可能丢失30秒数据。因此，如果应用系统无法忍受延迟，而可以容忍少量的数据丢失，则设置为yes。如果应用系统无法忍受数据丢失，则设置为no。</span></span><br><span class="line">no-appendfsync-on-rewrite no</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">aof自动重写配置。当目前aof文件大小超过上一次重写的aof文件大小的百分之多少进行重写，即当aof文件增长到一定大小的时候Redis能够调用bgrewriteaof对日志文件进行重写。当前AOF文件大小是上次日志重写得到AOF文件大小的二倍（设置为100）时，自动启动新的日志重写过程。</span></span><br><span class="line">auto-aof-rewrite-percentage 100</span><br><span class="line"><span class="meta">#</span><span class="bash">设置允许重写的最小aof文件大小，避免了达到约定百分比但尺寸仍然很小的情况还要重写</span></span><br><span class="line">auto-aof-rewrite-min-size 64mb</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">aof文件可能在尾部是不完整的，当redis启动的时候，aof文件的数据被载入内存。重启可能发生在redis所在的主机操作系统宕机后，尤其在ext4文件系统没有加上data=ordered选项（redis宕机或者异常终止不会造成尾部不完整现象。）出现这种现象，可以选择让redis退出，或者导入尽可能多的数据。如果选择的是yes，当截断的aof文件被导入的时候，会自动发布一个<span class="built_in">log</span>给客户端然后load。如果是no，用户必须手动redis-check-aof修复AOF文件才可以。</span></span><br><span class="line">aof-load-truncated yes</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">############## LUA SCRIPTING ###############</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果达到最大时间限制（毫秒），redis会记个<span class="built_in">log</span>，然后返回error。当一个脚本超过了最大时限。只有SCRIPT KILL和SHUTDOWN NOSAVE可以用。第一个可以杀没有调write命令的东西。要是已经调用了write，只能用第二个命令杀。</span></span><br><span class="line">lua-time-limit 5000</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">############## 集群相关 ###############</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">集群开关，默认是不开启集群模式。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> cluster-enabled yes</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">集群配置文件的名称，每个节点都有一个集群相关的配置文件，持久化保存集群的信息。这个文件并不需要手动配置，这个配置文件有Redis生成并更新，每个Redis集群节点需要一个单独的配置文件，请确保与实例运行的系统中配置文件名称不冲突</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> cluster-config-file nodes-6379.conf</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">节点互连超时的阀值。集群节点超时毫秒数</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> cluster-node-timeout 15000</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">在进行故障转移的时候，全部slave都会请求申请为master，但是有些slave可能与master断开连接一段时间了，导致数据过于陈旧，这样的slave不应该被提升为master。该参数就是用来判断slave节点与master断线的时间是否过长。判断方法是：</span></span><br><span class="line"><span class="meta">#</span><span class="bash">比较slave断开连接的时间和(node-timeout * slave-validity-factor) + repl-ping-slave-period</span></span><br><span class="line"><span class="meta">#</span><span class="bash">如果节点超时时间为三十秒, 并且slave-validity-factor为10,假设默认的repl-ping-slave-period是10秒，即如果超过310秒slave将不会尝试进行故障转移 </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> cluster-slave-validity-factor 10</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">master的slave数量大于该值，slave才能迁移到其他孤立master上，如这个参数若被设为2，那么只有当一个主节点拥有2 个可工作的从节点时，它的一个从节点会尝试迁移。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> cluster-migration-barrier 1</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">默认情况下，集群全部的slot有节点负责，集群状态才为ok，才能提供服务。设置为no，可以在slot没有全部分配的时候提供服务。不建议打开该配置。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> cluster-require-full-coverage yes</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">############## SLOW LOG 慢查询日志 ###############</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">##slog log是用来记录redis运行中执行比较慢的命令耗时。当命令的执行超过了指定时间，就记录在slow log中，slog log保存在内存中，所以没有IO操作。</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">执行时间比slowlog-log-slower-than大的请求记录到slowlog里面，单位是微秒，所以1000000就是1秒。注意，负数时间会禁用慢查询日志，而0则会强制记录所有命令。</span></span><br><span class="line">slowlog-log-slower-than 10000</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">慢查询日志长度。当一个新的命令被写进日志的时候，最老的那个记录会被删掉。这个长度没有限制。只要有足够的内存就行。你可以通过 SLOWLOG RESET 来释放内存。</span></span><br><span class="line">slowlog-max-len 128</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">############## 延迟监控 ###############</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">延迟监控功能是用来监控redis中执行比较缓慢的一些操作，用LATENCY打印redis实例在跑命令时的耗时图表。只记录大于等于下边设置的值的操作。0的话，就是关闭监视。默认延迟监控功能是关闭的，如果你需要打开，也可以通过CONFIG SET命令动态设置。</span></span><br><span class="line">latency-monitor-threshold 0</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">############## EVENT NOTIFICATION 订阅通知 ###############</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">键空间通知使得客户端可以通过订阅频道或模式，来接收那些以某种方式改动了 Redis 数据集的事件。因为开启键空间通知功能需要消耗一些 CPU ，所以在默认配置下，该功能处于关闭状态。</span></span><br><span class="line"><span class="meta">#</span><span class="bash">notify-keyspace-events 的参数可以是以下字符的任意组合，它指定了服务器该发送哪些类型的通知：</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#K 键空间通知，所有通知以 __keyspace@__ 为前缀</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#E 键事件通知，所有通知以 __keyevent@__ 为前缀</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#g DEL 、 EXPIRE 、 RENAME 等类型无关的通用命令的通知</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#$ 字符串命令的通知</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#l 列表命令的通知</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#s 集合命令的通知</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#h 哈希命令的通知</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#z 有序集合命令的通知</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#x 过期事件：每当有过期键被删除时发送</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#e 驱逐(evict)事件：每当有键因为 maxmemory 政策而被删除时发送</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#A 参数 g$lshzxe 的别名</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">输入的参数中至少要有一个 K 或者 E，否则的话，不管其余的参数是什么，都不会有任何 通知被分发。详细使用可以参考http://redis.io/topics/notifications</span></span><br><span class="line"> </span><br><span class="line">notify-keyspace-events &quot;&quot;</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">############## ADVANCED CONFIG 高级配置 ###############</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">数据量小于等于hash-max-ziplist-entries的用ziplist，大于hash-max-ziplist-entries用<span class="built_in">hash</span></span></span><br><span class="line">hash-max-ziplist-entries 512</span><br><span class="line"><span class="meta">#</span><span class="bash">value大小小于等于hash-max-ziplist-value的用ziplist，大于hash-max-ziplist-value用<span class="built_in">hash</span>。</span></span><br><span class="line">hash-max-ziplist-value 64</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">数据量小于等于list-max-ziplist-entries用ziplist，大于list-max-ziplist-entries用list。</span></span><br><span class="line">list-max-ziplist-entries 512</span><br><span class="line"><span class="meta">#</span><span class="bash">value大小小于等于list-max-ziplist-value的用ziplist，大于list-max-ziplist-value用list。</span></span><br><span class="line">list-max-ziplist-value 64</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">数据量小于等于set-max-intset-entries用iniset，大于set-max-intset-entries用<span class="built_in">set</span>。</span></span><br><span class="line">set-max-intset-entries 512</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">数据量小于等于zset-max-ziplist-entries用ziplist，大于zset-max-ziplist-entries用zset。</span></span><br><span class="line">zset-max-ziplist-entries 128</span><br><span class="line"><span class="meta">#</span><span class="bash">value大小小于等于zset-max-ziplist-value用ziplist，大于zset-max-ziplist-value用zset。</span></span><br><span class="line">zset-max-ziplist-value 64</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">value大小小于等于hll-sparse-max-bytes使用稀疏数据结构（sparse），大于hll-sparse-max-bytes使用稠密的数据结构（dense）。一个比16000大的value是几乎没用的，建议的value大概为3000。如果对CPU要求不高，对空间要求较高的，建议设置到10000左右。</span></span><br><span class="line">hll-sparse-max-bytes 3000</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">Redis将在每100毫秒时使用1毫秒的CPU时间来对redis的<span class="built_in">hash</span>表进行重新<span class="built_in">hash</span>，可以降低内存的使用。当你的使用场景中，有非常严格的实时性需要，不能够接受Redis时不时的对请求有2毫秒的延迟的话，把这项配置为no。如果没有这么严格的实时性要求，可以设置为yes，以便能够尽可能快的释放内存。</span></span><br><span class="line">activerehashing yes</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#对客户端输出缓冲进行限制可以强迫那些不从服务器读取数据的客户端断开连接，用来强制关闭传输缓慢的客户端。</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">对于normal client，第一个0表示取消hard <span class="built_in">limit</span>，第二个0和第三个0表示取消soft <span class="built_in">limit</span>，normal client默认取消限制，因为如果没有寻问，他们是不会接收数据的。</span></span><br><span class="line">client-output-buffer-limit normal 0 0 0</span><br><span class="line"><span class="meta">#</span><span class="bash">对于slave client和MONITER client，如果client-output-buffer一旦超过256mb，又或者超过64mb持续60秒，那么服务器就会立即断开客户端连接。</span></span><br><span class="line">client-output-buffer-limit slave 256mb 64mb 60</span><br><span class="line"><span class="meta">#</span><span class="bash">对于pubsub client，如果client-output-buffer一旦超过32mb，又或者超过8mb持续60秒，那么服务器就会立即断开客户端连接。</span></span><br><span class="line">client-output-buffer-limit pubsub 32mb 8mb 60</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">redis执行任务的频率为1s除以hz。</span></span><br><span class="line">hz 10</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">在aof重写的时候，如果打开了aof-rewrite-incremental-fsync开关，系统会每32MB执行一次fsync。这对于把文件写入磁盘是有帮助的，可以避免过大的延迟峰值。</span></span><br><span class="line">aof-rewrite-incremental-fsync yes</span><br></pre></td></tr></table></figure>

<h2 id="Redis的持久化"><a href="#Redis的持久化" class="headerlink" title="Redis的持久化"></a>Redis的持久化</h2><h2 id="Redis的事务"><a href="#Redis的事务" class="headerlink" title="Redis的事务"></a>Redis的事务</h2><h3 id="是什么？"><a href="#是什么？" class="headerlink" title="是什么？"></a>是什么？</h3><p>可以一次执行多个命令，本质是一组命令的集合。一个事物中的所有命令都会被序列化，按顺序的串行执行而不会被其他命令插入，不许加塞。</p>
<h3 id="能干嘛？"><a href="#能干嘛？" class="headerlink" title="能干嘛？"></a>能干嘛？</h3><p>一个队列中，一次性的，顺序的，排他的执行一系列命令。</p>
<h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><table>
<thead>
<tr>
<th>命令</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>multi</td>
<td>标记一个事务的开始</td>
</tr>
<tr>
<td>exec</td>
<td>执行所有事务块内的命令</td>
</tr>
<tr>
<td>discard</td>
<td>取消事务，放弃执行事务块内的所有命令</td>
</tr>
<tr>
<td>watch key [key]</td>
<td>监视一个(或多个) key ，如果在事务执行之前这个(或这些) key 被其他命令所改动，那么事务将被打断。</td>
</tr>
<tr>
<td>unwatch</td>
<td>取消watch命令对所有 key 的监视。</td>
</tr>
</tbody></table>
<h3 id="这么玩？"><a href="#这么玩？" class="headerlink" title="这么玩？"></a>这么玩？</h3><ol>
<li><p><strong>正常执行</strong></p>
<p><img src="https://img-blog.csdnimg.cn/20200329153535143.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0NzY2ODgz,size_16,color_FFFFFF,t_70"></p>
</li>
<li><p><strong>放弃事务</strong></p>
<p><img src="https://img-blog.csdnimg.cn/20200329153617123.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0NzY2ODgz,size_16,color_FFFFFF,t_70"></p>
</li>
<li><p><strong>全体连坐</strong></p>
<p><img src="C:\Users\DELL\AppData\Roaming\Typora\typora-user-images\image-20200329153701009.png"></p>
</li>
<li><p><span id="yuan"><b>冤头债主</b></span></p>
</li>
</ol>
<p><img src="https://img-blog.csdnimg.cn/20200329153742186.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0NzY2ODgz,size_16,color_FFFFFF,t_70"></p>
<h3 id="乐观锁和悲观锁"><a href="#乐观锁和悲观锁" class="headerlink" title="乐观锁和悲观锁"></a>乐观锁和悲观锁</h3><p><a href="http://codekiller.top/2020/03/27/mysql-lock/#toc-heading-24">参考</a></p>
<h3 id="Watch监控"><a href="#Watch监控" class="headerlink" title="Watch监控"></a>Watch监控</h3><p>watch指令，<code>类似乐观锁</code>，如果key的值已经被修改了，那么<strong>整个事务队列都不会被执行</strong>,同时返回一个Nullmulti-bulk应答以通知调用者事务执行失败。</p>
<p>注意：<strong>一旦执行了exec或者discard，之前加的所有监控锁都会被取消掉了。</strong></p>
<p>例子：</p>
<ul>
<li><p>初始化信用卡的可用余额和欠额</p>
<p><img src="https://img-blog.csdnimg.cn/2020032915483754.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0NzY2ODgz,size_16,color_FFFFFF,t_70"></p>
</li>
<li><p>无加塞篡改</p>
<p><img src="https://img-blog.csdnimg.cn/20200329154925759.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0NzY2ODgz,size_16,color_FFFFFF,t_70"></p>
</li>
<li><p>有加塞篡改，当watch的key被修改，后面的那个事务全部执行失败</p>
<p><img src="https://img-blog.csdnimg.cn/20200329155110938.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0NzY2ODgz,size_16,color_FFFFFF,t_70"></p>
</li>
<li><p>unwatch</p>
<p><img src="https://img-blog.csdnimg.cn/20200329155227451.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0NzY2ODgz,size_16,color_FFFFFF,t_70"></p>
</li>
</ul>
<h3 id="3阶段"><a href="#3阶段" class="headerlink" title="3阶段"></a>3阶段</h3><p>开启:以multi开启事务</p>
<p>入队:将多个命令入队到事务中,接到这些命令不会立刻执行,而是放到等待执行的事务队列里面</p>
<p>执行：有exec命令触发事务</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">graph LR </span><br><span class="line">kai((开启))&#x3D;&#x3D;&gt;ru((入队))</span><br><span class="line">ru&#x3D;&#x3D;&gt;zhi((执行))</span><br></pre></td></tr></table></figure>

<h3 id="3特性"><a href="#3特性" class="headerlink" title="3特性"></a>3特性</h3><p>单独的隔离操作：事务中的所有命令都会序列化，按顺序的执行。事务在等待执行的时候，不会被其他客户端发送来的米命令请求打断</p>
<p>没有隔离级别的概念：队列中的所有命令没有提交exec之前都是不会被执行的</p>
<p>不保证原子性：redis中如果一条命令执行失败，其后的命令仍然会被执行，没有回滚，参考<a href="#yuan">冤头债主</a></p>
<h2 id="Redis的发布订阅-一般不用"><a href="#Redis的发布订阅-一般不用" class="headerlink" title="Redis的发布订阅(一般不用)"></a>Redis的发布订阅(一般不用)</h2><h4><a id="_228"></a>发布订阅</h4>
<p>Redis 发布订阅(pub/sub)是一种消息通信模式：发送者(pub)发送消息，订阅者(sub)接收消息。</p>
<p>Redis 客户端可以订阅任意数量的频道。</p>
<p>下图展示了频道 channel1 ， 以及订阅这个频道的三个客户端 —— client2 、 client5 和 client1 之间的关系：<br>
<img src="https://img-blog.csdnimg.cn/20190925161943181.png" alt=""><br/><br/>
当有新消息通过 PUBLISH 命令发送给频道 channel1 时， 这个消息就会被发送给订阅它的三个客户端：<br/>
<img src="https://img-blog.csdnimg.cn/20190925161952995.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzNDIzNDE4,size_16,color_FFFFFF,t_70" alt=""><br/><br/><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<em><strong>命令</strong></em></p>
<blockquote>
<ul>
<li>subscribe channel [channel…]：订阅一个或多个频道的信息</li>
<li>psubscribe pattern [pattern…]：订阅一个或多个符合规定模式的频道</li>
<li>publish channel message ：将信息发送到指定频道</li>
<li>unsubscribe [channel[channel…]]：退订频道</li>
<li>punsubscribe [pattern[pattern…]]：退订所有给定模式的频道</li>
</ul>
</blockquote><br/>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<em><strong>应用场景</strong></em></p>
<blockquote>
构建实时的消息系统，比如普通聊天、群聊等功能。
1、博客网站订阅，当作者发布就可以推送给粉丝
2、微信公众号模式
</blockquote>



<h2 id="Redis的复制（Master-Slave）"><a href="#Redis的复制（Master-Slave）" class="headerlink" title="Redis的复制（Master/Slave）"></a>Redis的复制（Master/Slave）</h2><h3 id="是什么？-1"><a href="#是什么？-1" class="headerlink" title="是什么？"></a>是什么？</h3><p>​    就是我们常说的主从复制，主机数据更新后根据配置和策略，自动同步到备机的master/slaver机制，Master以写为主，Slave以读为主</p>
<h3 id="能干嘛？-1"><a href="#能干嘛？-1" class="headerlink" title="能干嘛？"></a>能干嘛？</h3><p>​    <code>读写分离</code></p>
<p>​     <code>容灾恢复</code></p>
<h3 id="怎么玩？"><a href="#怎么玩？" class="headerlink" title="怎么玩？"></a>怎么玩？</h3><p>配从(库)不配主(库)</p>
<p>从库配置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">配置从库</span></span><br><span class="line">slaveof 主库ip 主库端口</span><br><span class="line"><span class="meta">#</span><span class="bash">查看主从信息</span></span><br><span class="line">info replication</span><br></pre></td></tr></table></figure>

<p>​        每次与master断开后，都需要重新连接，除非你配置进redis.conf文件</p>
<h3 id="常用的主从方式"><a href="#常用的主从方式" class="headerlink" title="常用的主从方式"></a>常用的主从方式</h3><h4 id="一主二仆"><a href="#一主二仆" class="headerlink" title="一主二仆"></a>一主二仆</h4><p>含义：就是一个Master两个Slave</p>
<p><img src="https://cdn.jsdelivr.net/gh/suolongY/warehouse@master/zk/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0NzY2ODgz,size_16,color_FFFFFF,t_70.png" alt="一仆二主"></p>
<p>通过<code>info replication</code>查看主从信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Replication</span></span><br><span class="line">role:master</span><br><span class="line">connected_slaves:0</span><br><span class="line">master_replid:f6baff9abfda12ca58048cfce4b0e2c1f4683da1</span><br><span class="line">master_replid2:e8fe596d47d9d1d923d56d884b28128b78d2c1e0</span><br><span class="line">master_repl_offset:0</span><br><span class="line">second_repl_offset:1</span><br><span class="line">repl_backlog_active:0</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:0</span><br><span class="line">repl_backlog_histlen:0</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Replication</span></span><br><span class="line">role:slave</span><br><span class="line">master_host:127.0.0.1</span><br><span class="line">master_port:6379</span><br><span class="line">master_link_status:down</span><br><span class="line">master_last_io_seconds_ago:-1</span><br><span class="line">master_sync_in_progress:0</span><br><span class="line">slave_repl_offset:0</span><br><span class="line">master_link_down_since_seconds:1585217521</span><br><span class="line">slave_priority:100</span><br><span class="line">slave_read_only:1</span><br><span class="line">connected_slaves:0</span><br><span class="line">master_replid:adbec19afa734e84a333b07ea2f33c43c73fe743</span><br><span class="line">master_replid2:0000000000000000000000000000000000000000</span><br><span class="line">master_repl_offset:0</span><br><span class="line">second_repl_offset:-1</span><br><span class="line">repl_backlog_active:0</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:0</span><br><span class="line">repl_backlog_histlen:0</span><br></pre></td></tr></table></figure>



<p><span id="zhuyi">注意:</span></p>
<ol>
<li><p>第一次slave1 和slave2切入点，是全量复制，之后是增量复制</p>
<p><img src="https://cdn.jsdelivr.net/gh/suolongY/warehouse@master/zk/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0NzY2ODgz,size_16,color_FFFFFF,t_70-20201122134433424.png" alt="一主二仆"></p>
</li>
<li><p>主机可以写，但是从机不可以写，从机只能读</p>
<p><img src="https://img-blog.csdnimg.cn/20200326181813787.png" alt="从机写的报错"></p>
</li>
<li><p>主机shutdowm后从机待机状态，等主机回来后，主机新增记录从机可以顺利复制 </p>
</li>
<li><p>从机shutdowm后，每次与master断开之后，都需要重新连接，除非你配置进redis.conf文件</p>
</li>
<li><p>从机复制到的数据，会被本机持久化。就算shutdown断开连接依然会有数据。</p>
</li>
<li><p>重新连接或者变更master，会清除之前的数据，重新建立拷贝最新的数据</p>
</li>
</ol>
<h4 id="薪火相传"><a href="#薪火相传" class="headerlink" title="薪火相传"></a>薪火相传</h4><p>含义:就是上一个Slave可以是下一个slave的Master，Slave同样可以接收其他slaves的连接和同步请求，那么该slave作为了链条中下一个的master,可以有效减轻master的写压力。</p>
<p><img src="https://img-blog.csdnimg.cn/20200326185522463.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0NzY2ODgz,size_16,color_FFFFFF,t_70" alt="薪火相传"></p>
<p><code>注意事项和一主二仆差不多,但注意虽然有slave是相对master，但是依然是slave</code>    [查看](#zhu yi)</p>
<h4 id="反客为主"><a href="#反客为主" class="headerlink" title="反客为主"></a>反客为主</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">SLAVEOF no one</span><br></pre></td></tr></table></figure>

<p> 使当前数据库停止与其他数据库的同步，转成主数据库</p>
<h4 id="哨兵模式（sentinel）"><a href="#哨兵模式（sentinel）" class="headerlink" title="哨兵模式（sentinel）"></a>哨兵模式（sentinel）</h4><p>反客为主的自动版，能够后台监控Master库是否故障，如果故障了根据投票数自动将slave库转换为主库。一组sentinel能</p>
<p>同时监控多个Master。</p>
<p>使用步骤：</p>
<ol>
<li><p>在Master对应redis.conf同目录下新建sentinel.conf文件，名字绝对不能错；</p>
</li>
<li><p>配置哨兵，在sentinel.conf文件中填入内容(可以配置多个)：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">说明：最后一个数字1，表示主机挂掉后slave投票看让谁接替成为主机，得票数多少后成为主机。</span></span><br><span class="line">sentinel monitor 被监控数据库名字（自己起名字） ip port 1</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动哨兵模式(路径按照自己的需求进行配置)：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">redis-sentinel  /myredis/sentinel.conf</span><br></pre></td></tr></table></figure>



</li>
</ol>
<p>注意：</p>
<ol>
<li><p>当master挂掉后，会通过选票进行选出下一个master。而且只有使用了sentinel.conf启动的才能开启选票</p>
</li>
<li><p>当原来的master后来后，很不幸变成了slave。</p>
</li>
</ol>
<h3 id="复制原理"><a href="#复制原理" class="headerlink" title="复制原理"></a>复制原理</h3><ol>
<li><p>Slave启动成功连接到master后会发送一个sync命令；</p>
</li>
<li><p>Master接到命令启动后的存盘进程，同时收集所有接收到的用于修改数据集命令，在后台进程执行完毕之后，master</p>
<p>将传送整个数据文件到slave，以完成一次完全同步；</p>
</li>
<li><p><code>全量复制</code>：而slave服务在数据库文件数据后，将其存盘并加载到内存中；</p>
</li>
<li><p><code>增量复制</code>：Master继续将新的所有收集到的修改命令依次传给slave，完成同步；</p>
</li>
<li><p>但是只要是重新连接master，一次完全同步（全量复制）将被自动执行。</p>
<p>[结合这几个注意事项](#zhu yi)</p>
</li>
</ol>
<h3 id="复制的缺点"><a href="#复制的缺点" class="headerlink" title="复制的缺点"></a>复制的缺点</h3><p>​       延时，由于所有的写操作都是在Master上操作，然后同步更新到Slave上，所以从Master同步到Slave机器有一定的延迟，当系统很繁忙的时候，延迟问题会更加严重，Slave机器数量的增加也会使得这个问题更加严重。</p>
<h3 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h3><table>
<thead>
<tr>
<th>命令</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>slaveof 主库ip  主库端口</td>
<td>配置从库</td>
</tr>
<tr>
<td>info replication</td>
<td>查看redis主从复制的情况</td>
</tr>
<tr>
<td>slaveof  no one</td>
<td>使当前数据库停止与其他数据库的同步，转成主数据库</td>
</tr>
<tr>
<td>sentinel monitor 被监控数据库名字(自己起名字) 127.0.0.1 6379 1</td>
<td>配置哨兵，监视master</td>
</tr>
<tr>
<td>redis-sentinel /myredis/sentinel.conf</td>
<td>以哨兵模式启动redis</td>
</tr>
</tbody></table>
<h2 id="Redis集群"><a href="#Redis集群" class="headerlink" title="Redis集群"></a>Redis集群</h2><p>容量不够，redis如何扩容？</p>
<p>并发写操作，redis如何分摊？</p>
<h3 id="什么是Redis集群？"><a href="#什么是Redis集群？" class="headerlink" title="什么是Redis集群？"></a>什么是Redis集群？</h3><p>Redis集群实现了对Redis的水平扩容，即启动N个redis节点，将整个数据库分布存储在这N个节点中，每个节点存储总数据的1/N</p>
<p>Redis集群通过分区（partition）来提供一定程度的可用性（availability）：即使集群中有一部分节点失效或者无法进行通讯，集群也可以继续处理命令请求。</p>
<h3 id="集群搭建"><a href="#集群搭建" class="headerlink" title="集群搭建"></a>集群搭建</h3><p><a href="http://codekiller.top/2020/03/30/redis-cluster/">搭建看这篇文章,有效</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">graph LR</span><br><span class="line">yi((导入安装包))--&gt;er((修改配置文件))</span><br><span class="line">er((修改配置文件))--&gt;san((创建基本镜像))</span><br><span class="line">san--&gt;si((创建节点镜像))</span><br><span class="line">si--&gt;|启动6个容器|wu((进入一个redis-cli))</span><br><span class="line">wu--&gt;|cluster meet|liu((集群添加节点))</span><br><span class="line">liu--&gt;qi((配置槽点))</span><br><span class="line">qi--&gt;ba((配置主从高可用))</span><br></pre></td></tr></table></figure>





<h3 id="集群命令"><a href="#集群命令" class="headerlink" title="集群命令"></a>集群命令</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">CLUSTER INFO 打印集群的信息 </span><br><span class="line">CLUSTER NODES 列出集群当前已知的所有节点（node），以及这些节点的相关信息。  </span><br><span class="line"></span><br><span class="line">//节点(node) </span><br><span class="line">CLUSTER MEET &lt;ip&gt; &lt;port&gt; 将 ip 和 port 所指定的节点添加到集群当中，让它成为集群的一份子。 </span><br><span class="line">CLUSTER FORGET &lt;node_id&gt; 从集群中移除 node_id 指定的节点。 </span><br><span class="line">CLUSTER REPLICATE &lt;node_id&gt; 将当前节点设置为 node_id 指定的节点的从节点。 </span><br><span class="line">CLUSTER SAVECONFIG 将节点的配置文件保存到硬盘里面。  </span><br><span class="line"></span><br><span class="line">//槽(slot) </span><br><span class="line">CLUSTER ADDSLOTS &lt;slot&gt; [slot ...] 将一个或多个槽（slot）指派（assign）给当前节点。 </span><br><span class="line">CLUSTER DELSLOTS &lt;slot&gt; [slot ...] 移除一个或多个槽对当前节点的指派。 </span><br><span class="line">CLUSTER FLUSHSLOTS 移除指派给当前节点的所有槽，让当前节点变成一个没有指派任何槽的节点。 </span><br><span class="line">CLUSTER SETSLOT &lt;slot&gt; NODE &lt;node_id&gt; 将槽 slot 指派给 node_id 指定的节点，如果槽已经指派给另一个节点，那么先让另一个节点删除该槽&gt;，然后再进行指派。 </span><br><span class="line">CLUSTER SETSLOT &lt;slot&gt; MIGRATING &lt;node_id&gt; 将本节点的槽 slot 迁移到 node_id 指定的节点中。 </span><br><span class="line">CLUSTER SETSLOT &lt;slot&gt; IMPORTING &lt;node_id&gt; 从 node_id 指定的节点中导入槽 slot 到本节点。 </span><br><span class="line">CLUSTER SETSLOT &lt;slot&gt; STABLE 取消对槽 slot 的导入（import）或者迁移（migrate）。  </span><br><span class="line"></span><br><span class="line">//键 (key) </span><br><span class="line">CLUSTER KEYSLOT &lt;key&gt; 计算键 key 应该被放置在哪个槽上。 </span><br><span class="line">CLUSTER COUNTKEYSINSLOT &lt;slot&gt; 返回槽 slot 目前包含的键值对数量。 </span><br><span class="line">CLUSTER GETKEYSINSLOT &lt;slot&gt; &lt;count&gt; 返回 count 个 slot 槽中的键。</span><br></pre></td></tr></table></figure>



<h3 id="节点"><a href="#节点" class="headerlink" title="节点"></a>节点</h3><ol>
<li><p>一个集群至少要有三个主节点，即要有六个节点。</p>
</li>
<li><p>分配原则尽量保证每个主数据库运行在不同的ip地址，每个从库和主库不在一个ip地址。</p>
</li>
<li><p>当主节点崩了，从节点能自动升为主节点；当主节点再次恢复时，主节点变为slave。参考哨兵模式。</p>
</li>
<li><p>redis.conf有个参数cluster-require-full-coverage</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">默认情况下，集群全部的slot有节点负责，集群状态才为ok，才能提供服务。设置为no，可以在slot没有全部分配的时候提供服务。不建议打开该配置。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> cluster-require-full-coverage yes</span></span><br></pre></td></tr></table></figure>







</li>
</ol>
<h3 id="SLOTS"><a href="#SLOTS" class="headerlink" title="SLOTS"></a>SLOTS</h3><ul>
<li><p>一个Redis 集群包含16384个插槽(hash slot)， 数据库中的每个键都属于这16384个插槽的其中一个，集群使用公式CRC1 6(key)% 16384来计算键key属于哪个槽(如果有组的话就只算组的部分)，其中<code>CRC16(key)</code>语句用于计算键key的CRC16校验和。</p>
</li>
<li><p>集群中的每个节点负责处理一部分插槽。 举个例子， 如果一个集群可以有主节点。其中:</p>
<ul>
<li>节点A负责处理0号至5500号插槽</li>
<li>节点B负责处理5501号至11000号插槽</li>
<li>节点C负责处理11001号至16383号插槽</li>
</ul>
</li>
</ul>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(注意：每个节点分配的插槽具体数字可能不同，当然可以通过一个小脚本来指定)</p>
<p><strong>一个疑问：为什么是16384(2^14)，而不是65535(2^16)呢？</strong></p>
<p>在redis节点发送心跳包时需要把所有的槽放到这个心跳包里，以便让节点知道当前集群信息，16384=16k，在发送心跳包时使用char进行bitmap压缩后是2kb（16384÷8÷1024=2kb），也就是说使用2k的空间创建了16k的槽数65535=65k，压缩后就是8kb（65536÷8÷1024=8kb），也就是说需要需要8k的心跳包。</p>
<h3 id="Redis-Cluster原理"><a href="#Redis-Cluster原理" class="headerlink" title="Redis Cluster原理"></a>Redis Cluster原理</h3><ol>
<li>node1和node2首先进行握手meet，知道彼此的存在</li>
<li>握手成功后，两个节点会定期发送ping/pong消息，交换数据信息(消息头，消息体)</li>
<li>消息头里面有个字段：unsigned char myslots[CLUSTER_SLOTS/8]，每一位代表一个槽，如果该位是1，代表该槽属于这个节点</li>
<li>消息体中会携带一定数量的其他节点的信息，大约占集群节点总数量的十分之一，至少是3个节点的信息。节点数量越多，消息体内容越大。</li>
<li>每秒都在发送ping消息。每秒随机选取5个节点，找出最久没有通信的节点发送ping消息。</li>
<li>每100毫秒都会扫描本地节点列表，如果发现节点最近一次接受pong消息的时间大于cluster-node-timeout/2,则立即发送ping消息</li>
</ol>
<p>redis集群的主节点数量基本不可能超过1000个，超过的话可能会导致网络拥堵。</p>
<h3 id="在集群中录入值-组的概念"><a href="#在集群中录入值-组的概念" class="headerlink" title="在集群中录入值(组的概念)"></a>在集群中录入值(组的概念)</h3><p>redis-cli客户端提供-c参数实现自动重定向</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">redis-cli -c -p 6379</span><br></pre></td></tr></table></figure>

<p>不在一个slot下的键值，是不能使用mget，mset等多键操作</p>
<p>可以通过{}来定义<code>组的概念</code>，从而使key中{}内相同内容的键值对放到一个slot中去。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">set user:&#123;info&#125;:name xxx</span><br><span class="line">set age&#123;info&#125; 12</span><br><span class="line">set &#123;info&#125;email 12345@qq.com</span><br><span class="line">hset user&#123;info&#125; name jiang</span><br><span class="line">hset user&#123;info&#125; age 19</span><br><span class="line">hset user&#123;info&#125; eamil 12345@qq.com</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">结果</span></span><br><span class="line">172.17.0.3:6379&gt; keys *</span><br><span class="line">1) &quot;user&#123;info&#125;&quot;</span><br><span class="line">2) &quot;&#123;info&#125;email&quot;</span><br><span class="line">3) &quot;user:&#123;info&#125;:name&quot;</span><br><span class="line">4) &quot;age&#123;info&#125;&quot;</span><br><span class="line">------------------------------------------------------</span><br><span class="line">172.17.0.3:6379&gt; hkeys user&#123;info&#125;</span><br><span class="line">1) &quot;name&quot;</span><br><span class="line">2) &quot;age&quot;</span><br><span class="line">3) &quot;eamil&quot;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>RabbitMQ</title>
    <url>/posts/b543ced0.html</url>
    <content><![CDATA[<h1 id="MQ简介"><a href="#MQ简介" class="headerlink" title="MQ简介"></a>MQ简介</h1><h2 id="什么是MQ"><a href="#什么是MQ" class="headerlink" title="什么是MQ?"></a>什么是MQ?</h2><p>​        MQ通过典型的 <code>生产者</code>和<code>消费者</code>模型，生产者不断向消息队列中生产消息，消费者不断的从队列中获取消息。因为消息的生产和消费都是异步的，而且只关心消息的发送和接收，没有业务逻辑的侵入，轻松的实现系统间解耦。</p>
<h2 id="为什么要用MQ"><a href="#为什么要用MQ" class="headerlink" title="为什么要用MQ?"></a>为什么要用MQ?</h2><p>​        我们在使用MQ时主要就是为了<strong>异步、解耦和削峰</strong>。</p>
<h3 id="解耦"><a href="#解耦" class="headerlink" title="解耦"></a>解耦</h3><p>​        可以在多个系统之间进行解耦，将原本通过网络之间的调用的方式改为使用MQ进行消息的异步通讯，只要该操作不是需要同步的，就可以改为使用MQ进行不同系统之间的联系，这样项目之间不会存在耦合，系统之间不会产生太大的影响，就算一个系统挂了，也只是消息挤压在MQ里面没人进行消费而已，不会对其他的系统产生影响。</p>
<p>不使用MQ的情况：</p>
<img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/8494967-8a6c27beefa1978e.png" alt="img" style="zoom:75%;" />

<p>使用MQ进行解耦之后：</p>
<img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/8494967-73713abdc4ccf927-20210226091712319.png" alt="img" style="zoom:75%;" />

<h3 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h3><p>​        加入一个操作设计到好几个步骤，这些步骤之间不需要同步完成，比如客户去创建了一个订单，还要去客户轨迹系统添加一条轨迹、去库存系统更新库存、去客户系统修改客户的状态等等。这样如果这个系统都直接进行调用，那么将会产生大量的时间，这样对于客户是无法接收的；并且像添加客户轨迹这种操作是不需要去同步操作的，如果使用MQ将客户创建订单时，将后面的轨迹、库存、状态等信息的更新全都放到MQ里面然后去异步操作，这样就可加快系统的访问速度，提供更好的客户体验。</p>
<p>不使用MQ时：</p>
<img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/8494967-248455c8863c542e.png" alt="img" style="zoom: 75%;" />

<p>使用MQ进行异步：</p>
<img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/8494967-9840c1edd9d24125-20210225150915098.png" alt="img" style="zoom:75%;" />



<h3 id="削峰"><a href="#削峰" class="headerlink" title="削峰"></a>削峰</h3><p>​        一个系统访问流量有高峰时期，也有低峰时期，比如说，中午整点有一个抢购活动等等。比如系统平时流量并不高，一秒钟只有100多个并发请求，系统处理没有任何压力，一切风平浪静，到了某个抢购活动时间，系统并发访问了剧增，比如达到了每秒5000个并发请求，而我们的系统每秒只能处理2000个请求，那么由于流量太大，我们的系统、数据库可能就会崩溃。这时如果使用MQ进行流量削峰，将用户的大量消息直接放到MQ里面，然后我们的系统去按自己的最大消费能力去消费这些消息，就可以保证系统的稳定，只是可能要跟进业务逻辑，给用户返回特定页面或者稍后通过其他方式通知其结果。</p>
<img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/8494967-5e386c784e984ab3.png" alt="使用MQ进行削峰.png" style="zoom:50%;" />

<h2 id="使用消息队列带来的一些问题"><a href="#使用消息队列带来的一些问题" class="headerlink" title="使用消息队列带来的一些问题"></a>使用消息队列带来的一些问题</h2><ul>
<li><strong>系统复杂性提高：</strong> 加入MQ之后，你需要保证消息没有被重复消费、处理消息丢失的情况、保证消息传递的顺序性等等问题！</li>
<li><strong>一致性问题：</strong> 消息队列可以实现异步，消息队列带来的异步确实可以提高系统响应速度。但是，万一消息的真正消费者并没有正确消费消息就会导致数据不一致的情况了。</li>
</ul>
<h2 id="主流MQ对比"><a href="#主流MQ对比" class="headerlink" title="主流MQ对比"></a>主流MQ对比</h2><table>
<thead>
<tr>
<th>对比方向</th>
<th>概要</th>
</tr>
</thead>
<tbody><tr>
<td>吞吐量</td>
<td>万级的 ActiveMQ 和 RabbitMQ 的吞吐量（ActiveMQ 的性能最差）要比 十万级甚至是百万级的 RocketMQ 和 Kafka 低一个数量级。</td>
</tr>
<tr>
<td>可用性</td>
<td>都可以实现高可用。ActiveMQ 和 RabbitMQ 都是基于主从架构实现高可用性。RocketMQ 基于分布式架构。 kafka 也是分布式的，一个数据多个副本，少数机器宕机，不会丢失数据，不会导致不可用</td>
</tr>
<tr>
<td>时效性</td>
<td>RabbitMQ 基于erlang开发，所以并发能力很强，性能极其好，延时很低，达到微秒级。其他三个都是 ms 级。</td>
</tr>
<tr>
<td>功能支持</td>
<td>除了 Kafka，其他三个功能都较为完备。 Kafka 功能较为简单，主要支持简单的MQ功能，在大数据领域的实时计算以及日志采集被大规模使用，是事实上的标准</td>
</tr>
<tr>
<td>消息丢失</td>
<td>ActiveMQ 和 RabbitMQ 丢失的可能性非常低， RocketMQ 和 Kafka 理论上不会丢失。</td>
</tr>
</tbody></table>
<h1 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>​        RabbitMQ 是采用 Erlang 语言实现 AMQP(Advanced Message Queuing Protocol，高级消息队列协议）的消息中间件，它最初起源于金融系统，用于在分布式系统中存储转发消息。</p>
<p>​        RabbitMQ被越来越多的人认可，这和它在易用性、扩展性、可靠性和高可用性等方面的卓著表现是分不开的。RabbitMQ 的具体特点可以概括为以下几点：</p>
<ul>
<li><strong>可靠性：</strong> RabbitMQ使用一些机制来保证消息的可靠性，如持久化、传输确认及发布确认等。</li>
<li><strong>灵活的路由：</strong> 在消息进入队列之前，通过交换器来路由消息。对于典型的路由功能，RabbitMQ 己经提供了一些内置的交换器来实现。针对更复杂的路由功能，可以将多个交换器绑定在一起，也可以通过插件机制来实现自己的交换器。这个后面会在我们将 RabbitMQ 核心概念的时候详细介绍到。</li>
<li><strong>扩展性：</strong> 多个RabbitMQ节点可以组成一个集群，也可以根据实际业务情况动态地扩展集群中节点。</li>
<li><strong>高可用性：</strong> 队列可以在集群中的机器上设置镜像，使得在部分节点出现问题的情况下队列仍然可用。</li>
<li><strong>支持多种协议：</strong> RabbitMQ 除了原生支持 AMQP 协议，还支持 STOMP、MQTT 等多种消息中间件协议。</li>
<li><strong>多语言客户端：</strong> RabbitMQ几乎支持所有常用语言，比如 Java、Python、Ruby、PHP、C#、JavaScript等。</li>
<li><strong>易用的管理界面：</strong> RabbitMQ提供了一个易用的用户界面，使得用户可以监控和管理消息、集群中的节点等。在安装 RabbitMQ 的时候会介绍到，安装好 RabbitMQ 就自带管理界面。</li>
<li><strong>插件机制：</strong> RabbitMQ 提供了许多插件，以实现从多方面进行扩展，当然也可以编写自己的插件。感觉这个有点类似 Dubbo 的 SPI机制。</li>
</ul>
<h2 id="AMQP和JMS"><a href="#AMQP和JMS" class="headerlink" title="AMQP和JMS"></a>AMQP和JMS</h2><h3 id="JMS"><a href="#JMS" class="headerlink" title="JMS"></a>JMS</h3><h4 id="JMS简介"><a href="#JMS简介" class="headerlink" title="JMS简介"></a>JMS简介</h4><p>​        JMS（JAVA Message Service,java消息服务）是java的消息服务，JMS的客户端之间可以通过JMS服务进行异步的消息传输。<strong>JMS（JAVA Message Service，Java消息服务）API是一个消息服务的标准或者说是规范</strong>，允许应用程序组件基于JavaEE平台创建、发送、接收和读取消息。它使分布式通信耦合度更低，消息服务更加可靠以及异步性。<strong>ActiveMQ 就是基于 JMS 规范实现的。</strong></p>
<h4 id="JMS两种消息模型"><a href="#JMS两种消息模型" class="headerlink" title="JMS两种消息模型"></a>JMS两种消息模型</h4><p><strong>①点到点（P2P）模型</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/162e7185572ca37d.gif" alt="点到点（P2P）模型"> 　</p>
<p>​        使用<strong>队列（Queue）</strong>作为消息通信载体；满足<strong>生产者与消费者模式</strong>，一条消息只能被一个消费者使用，未被消费的消息在队列中保留直到被消费或超时。比如：我们生产者发送100条消息的话，两个消费者来消费一般情况下两个消费者会按照消息发送的顺序各自消费一半（也就是你一个我一个的消费。）</p>
<p><strong>② 发布/订阅（Pub/Sub）模型</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/162e7187c268eaa5.gif" alt="发布/订阅（Pub/Sub）模型"> 　</p>
<p>​        发布订阅模型（Pub/Sub） 使用<strong>主题（Topic）</strong>作为消息通信载体，类似于<strong>广播模式</strong>；发布者发布一条消息，该消息通过主题传递给所有的订阅者，<strong>在一条消息广播之后才订阅的用户则是收不到该条消息的</strong>。</p>
<h4 id="JMS-五种不同的消息正文格式"><a href="#JMS-五种不同的消息正文格式" class="headerlink" title="JMS 五种不同的消息正文格式"></a>JMS 五种不同的消息正文格式</h4><p>​        JMS定义了五种不同的消息正文格式，以及调用的消息类型，允许你发送并接收以一些不同形式的数据，提供现有消息格式的一些级别的兼容性。</p>
<ul>
<li>StreamMessage —— Java原始值的数据流</li>
<li>MapMessage——一套名称-值对</li>
<li>TextMessage——一个字符串对象</li>
<li>ObjectMessage——一个序列化的 Java对象</li>
<li>BytesMessage——一个字节的数据流</li>
</ul>
<h3 id="AMQP"><a href="#AMQP" class="headerlink" title="AMQP"></a>AMQP</h3><p>​        AMQP，即Advanced Message Queuing Protocol，一个提供统一消息服务的应用层标准 <strong>高级消息队列协议</strong>（二进制应用层协议），是应用层协议的一个开放标准,为面向消息的中间件设计，兼容 JMS。基于此协议的客户端与消息中间件可传递消息，并不受客户端/中间件同产品，不同的开发语言等条件的限制。<strong>RabbitMQ 就是基于 AMQP 协议实现的。</strong></p>
<h3 id="JMS和AMQP对比"><a href="#JMS和AMQP对比" class="headerlink" title="JMS和AMQP对比"></a>JMS和AMQP对比</h3><table>
<thead>
<tr>
<th>对比方向</th>
<th>JMS</th>
<th>AMQP</th>
</tr>
</thead>
<tbody><tr>
<td>定义</td>
<td>Java API</td>
<td>协议</td>
</tr>
<tr>
<td>跨语言</td>
<td>否</td>
<td>是</td>
</tr>
<tr>
<td>跨平台</td>
<td>否</td>
<td>是</td>
</tr>
<tr>
<td>支持消息类型</td>
<td>提供两种消息模型：①Peer-2-Peer;②Pub/sub</td>
<td>提供了五种消息模型：①direct exchange；②fanout exchange；③topic change；④headers exchange；⑤system exchange。本质来讲，后四种和JMS的pub/sub模型没有太大差别，仅是在路由机制上做了更详细的划分；</td>
</tr>
<tr>
<td>支持消息类型</td>
<td>支持多种消息类型 ，我们在上面提到过</td>
<td>byte[]（二进制）</td>
</tr>
</tbody></table>
<p><strong>总结：</strong></p>
<ul>
<li>AMQP 为消息定义了线路层（wire-level protocol）的协议，而JMS所定义的是API规范。在 Java 体系中，多个client均可以通过JMS进行交互，不需要应用修改代码，但是其对跨平台的支持较差。而AMQP天然具有跨平台、跨语言特性。</li>
<li>JMS 支持TextMessage、MapMessage 等复杂的消息类型；而 AMQP 仅支持 byte[] 消息类型（复杂的类型可序列化后发送）。</li>
<li>由于Exchange 提供的路由算法，AMQP可以提供多样化的路由方式来传递消息到消息队列，而 JMS 仅支持 队列 和 主题/订阅 方式两种。</li>
</ul>
<h2 id="RabbitMQ安装"><a href="#RabbitMQ安装" class="headerlink" title="RabbitMQ安装"></a>RabbitMQ安装</h2><h3 id="docker安装"><a href="#docker安装" class="headerlink" title="docker安装"></a>docker安装</h3><p><strong>安装</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker pull rabbitmq:3.8.12-management</span><br></pre></td></tr></table></figure>

<p><strong>运行镜像</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run -d --name rabbit -p 5672:5672 -p 15672:15672 rabbitmq:3.8.12-management</span><br></pre></td></tr></table></figure>

<p>5672：应用访问端口；15672：控制台Web端口号 。浏览器访问的管理后台地址为：<a href="http://host-ip:15672/">http://host-ip:15672</a> ，默认用户名密码为 guest/guest</p>
<h2 id="RabbitMQ常见命令行介绍"><a href="#RabbitMQ常见命令行介绍" class="headerlink" title="RabbitMQ常见命令行介绍"></a>RabbitMQ常见命令行介绍</h2><h3 id="开启-关闭-RabbitMQ"><a href="#开启-关闭-RabbitMQ" class="headerlink" title="开启/关闭 RabbitMQ"></a>开启/关闭 RabbitMQ</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rabbitmq-server -detached # 开启</span><br><span class="line">rabbitmq-server stop		# 关闭</span><br></pre></td></tr></table></figure>

<h3 id="查看-RabbitMQ-状态"><a href="#查看-RabbitMQ-状态" class="headerlink" title="查看 RabbitMQ 状态"></a>查看 RabbitMQ 状态</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rabbitmqctl status</span><br></pre></td></tr></table></figure>

<h3 id="用户相关操作"><a href="#用户相关操作" class="headerlink" title="用户相关操作"></a>用户相关操作</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 添加用户</span></span><br><span class="line">rabbitmqctl add_user 账户名 密码</span><br><span class="line">eg: rabbitmqctl add_user guest2 guest2</span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除用户</span></span><br><span class="line">rabbitmqctl delete_user root</span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改密码</span></span><br><span class="line">rabbitmqctl change_password 用户名 新密码</span><br><span class="line"><span class="meta">#</span><span class="bash">查看所有用户</span></span><br><span class="line">rabbitmqctl list_users</span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除用户</span></span><br><span class="line">rabbitmqctl delete_user 用户名</span><br></pre></td></tr></table></figure>

<h3 id="权限"><a href="#权限" class="headerlink" title="权限"></a>权限</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 设置用户权限</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> rabbitmqctl set_permissions -p &lt;虚拟机&gt; &lt;用户名&gt; <span class="string">&quot;.*&quot;</span> <span class="string">&quot;.*&quot;</span> <span class="string">&quot;.*&quot;</span></span></span><br><span class="line">rabbitmqctl set_permissions -p &quot;/&quot; 用户名 &quot;.*&quot; &quot;.*&quot; &quot;.*&quot;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看用户权限</span></span><br><span class="line">rabbitmqctl list_user_permissions 用户名</span><br><span class="line"><span class="meta">#</span><span class="bash"> 例如 rabbitmqctl list_user_permissions guest结果如下：</span></span><br><span class="line">Listing permissions for user &quot;guest&quot; ...</span><br><span class="line">vhost	configure	write	read</span><br><span class="line">/	.*	.*	.*</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除用户权限</span></span><br><span class="line">rabbitmqctl clear_permissions -p &lt;虚拟机&gt; &lt;用户名&gt;</span><br></pre></td></tr></table></figure>

<h3 id="设置tag"><a href="#设置tag" class="headerlink" title="设置tag"></a>设置tag</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rabbitmqctl set_user_tags 用户名 administrator</span><br></pre></td></tr></table></figure>

<h3 id="虚拟主机操作"><a href="#虚拟主机操作" class="headerlink" title="虚拟主机操作"></a>虚拟主机操作</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 增加一个虚拟主机 </span></span><br><span class="line">rabbitmqctl add_vhost /cloudmall</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看所有的虚拟主机</span></span><br><span class="line">rabbitmqctl list_vhosts;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看虚拟主机的权限</span></span><br><span class="line">rabbitmqctl list_permissions -p /cloudmall</span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除虚拟主机</span></span><br><span class="line">rabbitmqctl delete_vhost /cloudmall </span><br></pre></td></tr></table></figure>

<h2 id="在开启RabbitMQ-的基础上开启-web-插件"><a href="#在开启RabbitMQ-的基础上开启-web-插件" class="headerlink" title="在开启RabbitMQ 的基础上开启 web 插件"></a>在开启RabbitMQ 的基础上开启 web 插件</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rabbitmq-plugins enable rabbitmq_management</span><br></pre></td></tr></table></figure>

<h1 id="RabbitMQ-web后台"><a href="#RabbitMQ-web后台" class="headerlink" title="RabbitMQ web后台"></a>RabbitMQ web后台</h1><p>​        web后台就比较人性化了，我们通过<a href="http://host-ip:15672访问，并且登录上以后会看到如下界面：">http://host-ip:15672访问，并且登录上以后会看到如下界面：</a></p>
<img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/007S8ZIlgy1gixzuyzbl6j31k40u0wob.jpg" alt="image-20200921090257107" style="zoom:67%;" />

<h2 id="Java操作RabbitMQ"><a href="#Java操作RabbitMQ" class="headerlink" title="Java操作RabbitMQ"></a>Java操作RabbitMQ</h2><p>​        访问<a href="https://www.rabbitmq.com/getstarted.html">RabbitMQ官网</a>会发现首页有七种模式，且每一种模式都有，下面我们来逐个使用一下，其中RabbitMQUtils代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabbitMQUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> IOException, TimeoutException </span>&#123;</span><br><span class="line">        <span class="comment">//1. 创建连接工厂</span></span><br><span class="line">        ConnectionFactory connectionFactory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        <span class="comment">//2. 配置连接工厂</span></span><br><span class="line">        connectionFactory.setHost(<span class="string">&quot;127.0.0.1&quot;</span>);</span><br><span class="line">        connectionFactory.setPort(<span class="number">5672</span>);</span><br><span class="line">        connectionFactory.setUsername(<span class="string">&quot;guest&quot;</span>);</span><br><span class="line">        connectionFactory.setPassword(<span class="string">&quot;guest&quot;</span>);</span><br><span class="line">        connectionFactory.setVirtualHost(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">        <span class="comment">//3. 获取连接对象</span></span><br><span class="line">        <span class="keyword">return</span> connectionFactory.newConnection();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">closeChannelAndConnection</span><span class="params">(Channel channel, Connection connection)</span> <span class="keyword">throws</span> IOException, TimeoutException </span>&#123;</span><br><span class="line">        <span class="comment">//5. 关闭通道</span></span><br><span class="line">        channel.close();</span><br><span class="line">        <span class="comment">//6. 关闭连接</span></span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Hello-World-模型"><a href="#Hello-World-模型" class="headerlink" title="Hello World 模型"></a>Hello World 模型</h3><p><img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/python-one.png" alt="img"></p>
<p>在上图的模型中，有以下概念：</p>
<ul>
<li>P：生产者，也就是要发送消息的程序</li>
<li>C：消费者：消息的接受者，会一直等待消息到来。</li>
<li>queue：图中红色部分就是消息队列，类似一个邮箱，可以缓存消息；生产者向其中投递消息，消费者从其中取出消息。</li>
</ul>
<p>首先我们定义一个生产者，写入如下的代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Provider</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException </span>&#123;</span><br><span class="line">        <span class="comment">//1. 获取连接对象</span></span><br><span class="line">        Connection connection = RabbitMQUtils.getConnection();</span><br><span class="line">        <span class="comment">//2. 创建通道</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 3. 申明队列</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * 参数1（queue）：队列名，没有的话会自动创建</span></span><br><span class="line"><span class="comment">         * 参数2（durable）：是否持久化，在 RabbitMQ 重启时是否会自动删除该队列（即使保存队列，队列中的消息还是会被清空）</span></span><br><span class="line"><span class="comment">         * 参数3（exclusive）：是否独占队列</span></span><br><span class="line"><span class="comment">         * 参数4（autoDelete）：当队列中没有消息时是否自动删除</span></span><br><span class="line"><span class="comment">         * 参数5（arguments）：队列的其他属性，这里可以填构造方法中的一些参数</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.queueDeclare(<span class="string">&quot;hello&quot;</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 4. 发布信息</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * 参数1（exchange）：交换机，直连模式不需要交换机</span></span><br><span class="line"><span class="comment">         * 参数2（routingKey）：路由key，直连模式就是对列名称</span></span><br><span class="line"><span class="comment">         * 参数3（props）：其他属性</span></span><br><span class="line"><span class="comment">         * 参数4（body）：要发布的信息，需要转为字节码</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.basicPublish(<span class="string">&quot;&quot;</span>, <span class="string">&quot;hello&quot;</span>, <span class="keyword">null</span>, <span class="string">&quot;hello rabbitmq&quot;</span>.getBytes());</span><br><span class="line">        <span class="comment">// 关闭</span></span><br><span class="line">        RabbitMQUtils.closeChannelAndConnection(channel, connection);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行两次以后，这里会出现对应的消息条数：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/image-20210225165628141.png" alt="image-20210225165628141"></p>
<p>定义一个消费者：</p>
<p>代码就基本一样了，只是把第四步的basicPublish方法改为了basicConsume方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException </span>&#123;</span><br><span class="line">        <span class="comment">//1. 获取连接对象</span></span><br><span class="line">        Connection connection = RabbitMQUtils.getConnection();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 创建通道</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 3. 申明队列 =&gt; 这里需要跟发布者一一对应</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * 参数1（queue）：队列名，没有的话会自动创建</span></span><br><span class="line"><span class="comment">         * 参数2（durable）：是否持久化，在 RabbitMQ 重启时是否会自动删除该队列（即使保存队列，队列中的消息还是会被清空）</span></span><br><span class="line"><span class="comment">         * 参数3（exclusive）：是否独占队列</span></span><br><span class="line"><span class="comment">         * 参数4（autoDelete）：当队列中没有消息时是否自动删除</span></span><br><span class="line"><span class="comment">         * 参数5（arguments）：队列的其他属性，这里可以填构造方法中的一些参数</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.queueDeclare(<span class="string">&quot;hello&quot;</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 4. 获取消息</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * 参数1（queue）：队列名</span></span><br><span class="line"><span class="comment">         * 参数2（autoAck）：如果服务器应考虑消息传递后已确认，则为true</span></span><br><span class="line"><span class="comment">         * 参数3（callback）：一个实现了 Consumer 接口的对象</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.basicConsume(<span class="string">&quot;hello&quot;</span>,<span class="keyword">true</span>,<span class="keyword">new</span> DefaultConsumer(channel)&#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 5. 处理信息的接收</span></span><br><span class="line"><span class="comment">             *</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> consumerTag  消费者标签</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> envelope     消息的打包数据</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> properties   AMQP的属性，消息的内容头信息</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> body         信息的内容</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                <span class="comment">//输出消息</span></span><br><span class="line">                System.out.println(<span class="keyword">new</span> String(body));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//这里不关闭的话会一直监听，一但有消息进入，就会输出。</span></span><br><span class="line">        <span class="comment">// RabbitMQUtils.closeChannelAndConnection(channel, connection);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行以后就会，只要生产者推送了消息，消费者这边就会打印。</p>
<h3 id="Work-Queues-模型"><a href="#Work-Queues-模型" class="headerlink" title="Work Queues 模型"></a>Work Queues 模型</h3><p><img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/python-two.png" alt="img"></p>
<p>​        <code>Work queues</code>，也被称为（<code>Task queues</code>），<strong>任务模型</strong>。当消息处理比较耗时的时候，可能生产消息的速度会远远大于消息的消费速度。长此以往，消息就会堆积越来越多，无法及时处理。此时就可以使用work 模型：<strong>让多个消费者绑定到一个队列，共同消费队列中的消息</strong>。队列中的消息一旦消费，就会消失，因此任务是不会被重复执行的。</p>
<h4 id="平均消费模式"><a href="#平均消费模式" class="headerlink" title="平均消费模式"></a>平均消费模式</h4><ul>
<li>生产者</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WorkerProvider</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException </span>&#123;</span><br><span class="line">        <span class="comment">//1. 通过自行封装的方法获取连接对象</span></span><br><span class="line">        Connection connection = RabbitMQUtils.getConnection();</span><br><span class="line">        <span class="comment">//2. 获取通道对象</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        <span class="comment">//3. 申明队列</span></span><br><span class="line">        channel.queueDeclare(<span class="string">&quot;work&quot;</span>,<span class="keyword">true</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">//4. 发布信息</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            channel.basicPublish(<span class="string">&quot;&quot;</span>,<span class="string">&quot;work&quot;</span>,<span class="keyword">null</span>,(<span class="string">&quot;发布消息&quot;</span>+i).getBytes());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//5. 通过自行封装的方法关闭资源</span></span><br><span class="line">        RabbitMQUtils.closeChannelAndConnection(channel,connection);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>消费者（代码拷贝几份就行）</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WorkerCustomer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException </span>&#123;</span><br><span class="line">        <span class="comment">//1. 通过自行封装的方法获取连接对象</span></span><br><span class="line">        Connection connection = RabbitMQUtils.getConnection();</span><br><span class="line">        <span class="comment">//2. 获取通道对象</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        <span class="comment">//3. 申明队列</span></span><br><span class="line">        channel.queueDeclare(<span class="string">&quot;work&quot;</span>,<span class="keyword">true</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">//4. 消费消息</span></span><br><span class="line">        channel.basicConsume(<span class="string">&quot;work&quot;</span>,<span class="keyword">new</span> DefaultConsumer(channel)&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;这是消费者1在消费信息：&quot;</span> + <span class="keyword">new</span> String(body));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行后发现如下结果：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/image-20210225172134307.png" alt="image-20210225172134307"></p>
<p><img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/image-20210225172149906.png" alt="image-20210225172149906"></p>
<p>​        从结果中可以发现 work 模型在默认情况下，RabbitMQ 会按顺序将每个消息发送给下一个消费者者。平均而言，每个消费者都会收到相同数量的消息。这种分发消息的方式称为轮询。</p>
<h4 id="能者多劳"><a href="#能者多劳" class="headerlink" title="能者多劳"></a>能者多劳</h4><p>​        在平均消费模式中，消费者只要从队列中拿到消息，就立刻发送确认机制，但是他也会出现如下的问题：</p>
<ol>
<li><p>在处理消息的时候就突然宕机了或者出现意外了，这样消息还没来得及消费就遗失了，就造成业务数据的失。</p>
</li>
<li><p><strong>两个消费者处理消息的效率不一样</strong>，就有可能造成一个消费者已经消费完消息然后闲着，而另外一个消费者拿到了消息，却一直处于处理消息的状态，造成资源的浪费。</p>
</li>
</ol>
<p>要实现这个模式，我们需要对消费者进行改造：</p>
<ul>
<li>关闭消息自动确认机制</li>
<li>不一次性把消息交给消费者</li>
<li>主动进行确认</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/image-20210225173949169.png" alt="image-20210225173949169"></p>
<p>再次测试：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/image-20210225174024151.png" alt="image-20210225174024151"></p>
<img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/image-20210225174040070.png" alt="image-20210225174040070" style="zoom:150%;" />

<p>​        从上述结果中可以发现，由于处理能力的不同，所以消费者1就只来得及接收并处理很少信息，其他信息都被消费者2接收并处理了，这样就达到了“能者多劳”的效果了。</p>
<h3 id="Publish-Subscribe广播模型（fanout（扇出模型））"><a href="#Publish-Subscribe广播模型（fanout（扇出模型））" class="headerlink" title="Publish/Subscribe广播模型（fanout（扇出模型））"></a>Publish/Subscribe广播模型（fanout（扇出模型））</h3><p><img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/python-three-overall.png" alt="img"></p>
<p>​        在工作队列模式中，我们的设想是每一条消息只会被转发给一个消费者，而Publish/Subscribe模型是一种广播模型，也就是一个生产者可以发一个消息，进行广播，让多个消费者消费同一个消息。</p>
<p>在广播模式下，消息发送流程是这样的：</p>
<ul>
<li>可以有多个消费者</li>
<li>每个<strong>消费者有自己的queue</strong>（队列）</li>
<li>每个<strong>队列都要绑定到Exchange</strong>（交换机）</li>
<li><strong>生产者发送的消息，只能发送到交换机</strong>，并且<strong>交换机来决定要发给哪个队列，生产者无法决定</strong>。</li>
<li>交换机把消息发送给绑定过的所有队列</li>
<li>队列的消费者都能拿到消息。实现一条消息被多个消费者消费</li>
</ul>
<p><strong>生产者</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Provider</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException </span>&#123;</span><br><span class="line">        <span class="comment">//1. 通过自行封装的方法获取连接对象</span></span><br><span class="line">        Connection connection = RabbitMQUtils.getConnection();</span><br><span class="line">        <span class="comment">//2. 获取通道对象</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        <span class="comment">//3. 声明交换机 =&gt; fanout 模式的交换机 type 需要制定为 fanout</span></span><br><span class="line">        channel.exchangeDeclare(<span class="string">&quot;logs&quot;</span>,<span class="string">&quot;fanout&quot;</span>);</span><br><span class="line">        <span class="comment">//4. 广播消息</span></span><br><span class="line">        channel.basicPublish(<span class="string">&quot;logs&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="keyword">null</span>,<span class="string">&quot;这是一条测试广播....&quot;</span>.getBytes());</span><br><span class="line">        <span class="comment">//5. 通过自行封装的方法关闭资源</span></span><br><span class="line">        RabbitMQUtils.closeChannelAndConnection(channel,connection);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>新建几个消费者</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException </span>&#123;</span><br><span class="line">        <span class="comment">//1. 通过自行封装的方法获取连接对象</span></span><br><span class="line">        Connection connection = RabbitMQUtils.getConnection();</span><br><span class="line">        <span class="comment">//2. 获取通道对象</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        <span class="comment">//3. 绑定交换机 =&gt; fanout 模式的交换机 type 需要制定为 fanout</span></span><br><span class="line">        channel.exchangeDeclare(<span class="string">&quot;logs&quot;</span>,<span class="string">&quot;fanout&quot;</span>);</span><br><span class="line">        <span class="comment">//4. 创建临时队列，这里会随机生成一个队列名称</span></span><br><span class="line">        String queue = channel.queueDeclare().getQueue();</span><br><span class="line">        <span class="comment">//5. 将临时队列绑定到交换机上，fanout模式暂时还不需要routingKey</span></span><br><span class="line">        channel.queueBind(queue,<span class="string">&quot;logs&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="comment">//6. 消费消息</span></span><br><span class="line">        channel.basicConsume(queue,<span class="keyword">true</span>,<span class="keyword">new</span> DefaultConsumer(channel)&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;消费者1接收到消息：&quot;</span>+<span class="keyword">new</span> String(body));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行消费者，然后再运行生产者，就会发现每一个消费者都能接收到消息了。</p>
<h3 id="Routing-模型"><a href="#Routing-模型" class="headerlink" title="Routing 模型"></a>Routing 模型</h3><p>​        在广播/扇出模式中，一条消息，会被所有订阅的队列都消费。但是，在某些场景下，我们希望不同的消息被不同的队列消费。这时就要用到 Direct 类型的Exchange。</p>
<p>在 Direct 模型下：</p>
<ul>
<li>队列与交换机的绑定，不能是任意绑定了，而是要指定一个<code>RoutingKey</code>（路由key）</li>
<li>消息的发送方在 向 Exchange发送消息时，也必须指定消息的 <code>RoutingKey</code>。</li>
<li>Exchange不再把消息交给每一个绑定的队列，而是根据消息的<code>Routing Key</code>进行判断，只有队列的<code>Routingkey</code>与消息的 <code>Routing key</code>完全一致，才会接收到消息</li>
</ul>
<p><strong>Routing模式的图解如下：</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/python-four.png" alt="img"></p>
<ul>
<li>P：生产者，向Exchange发送消息，发送消息时，会指定一个routing key。</li>
<li>X：Exchange（交换机），接收生产者的消息，然后把消息递交给 与routing key完全匹配的队列</li>
<li>C1：消费者，其所在队列指定了需要routing key 为 error 的消息</li>
<li>C2：消费者，其所在队列指定了需要routing key 为 info、error、warning 的消息</li>
</ul>
<p><strong>生产者</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Provider</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException </span>&#123;</span><br><span class="line">        <span class="comment">//1. 通过自行封装的方法获取连接对象</span></span><br><span class="line">        Connection connection = RabbitMQUtils.getConnection();</span><br><span class="line">        <span class="comment">//2. 获取通道对象</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        <span class="comment">//3. 声明交换机 =&gt; routing 模型的交换机类型是 direct</span></span><br><span class="line">        channel.exchangeDeclare(<span class="string">&quot;ex_direct&quot;</span>,<span class="string">&quot;direct&quot;</span>);</span><br><span class="line">        <span class="comment">//4. 广播消息</span></span><br><span class="line">        channel.basicPublish(<span class="string">&quot;ex_direct&quot;</span>,<span class="string">&quot;error&quot;</span>,<span class="keyword">null</span>,<span class="string">&quot;这是一条error广播....&quot;</span>.getBytes());</span><br><span class="line">        channel.basicPublish(<span class="string">&quot;ex_direct&quot;</span>,<span class="string">&quot;info&quot;</span>,<span class="keyword">null</span>,<span class="string">&quot;这是一条info广播....&quot;</span>.getBytes());</span><br><span class="line">        channel.basicPublish(<span class="string">&quot;ex_direct&quot;</span>,<span class="string">&quot;warning&quot;</span>,<span class="keyword">null</span>,<span class="string">&quot;这是一条warning广播....&quot;</span>.getBytes());</span><br><span class="line">        <span class="comment">//5. 通过自行封装的方法关闭资源</span></span><br><span class="line">        RabbitMQUtils.closeChannelAndConnection(channel,connection);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>消费者1 (只消费error信息)</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException </span>&#123;</span><br><span class="line">        <span class="comment">//1. 通过自行封装的方法获取连接对象</span></span><br><span class="line">        Connection connection = RabbitMQUtils.getConnection();</span><br><span class="line">        <span class="comment">//2. 获取通道对象</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        <span class="comment">//3. 绑定交换机 =&gt; routing 模型的交换机类型是 direct</span></span><br><span class="line">        channel.exchangeDeclare(<span class="string">&quot;ex_direct&quot;</span>,<span class="string">&quot;direct&quot;</span>);</span><br><span class="line">        <span class="comment">//4. 创建临时队列</span></span><br><span class="line">        String queue = channel.queueDeclare().getQueue();</span><br><span class="line">        <span class="comment">//5. 将临时队列绑定到交换机上 =&gt; 消费者1只能消费 routingKey 为 error 的消息</span></span><br><span class="line">        channel.queueBind(queue,<span class="string">&quot;ex_direct&quot;</span>,<span class="string">&quot;error&quot;</span>);</span><br><span class="line">        <span class="comment">//6. 消费消息</span></span><br><span class="line">        channel.basicConsume(queue,<span class="keyword">true</span>,<span class="keyword">new</span> DefaultConsumer(channel)&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;消费者1接收到消息：&quot;</span>+<span class="keyword">new</span> String(body));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>消费者2(消费error、info、warning信息)</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException </span>&#123;</span><br><span class="line">        <span class="comment">//1. 通过自行封装的方法获取连接对象</span></span><br><span class="line">        Connection connection = RabbitMQUtils.getConnection();</span><br><span class="line">        <span class="comment">//2. 获取通道对象</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        <span class="comment">//3. 绑定交换机 =&gt; routing 模型的交换机类型是 direct</span></span><br><span class="line">        channel.exchangeDeclare(<span class="string">&quot;ex_direct&quot;</span>, <span class="string">&quot;direct&quot;</span>);</span><br><span class="line">        <span class="comment">//4. 创建临时队列</span></span><br><span class="line">        String queue = channel.queueDeclare().getQueue();</span><br><span class="line">        <span class="comment">//5. 消费者2可以消费 routingKey 为 info、error 和 warning 的消息</span></span><br><span class="line">        channel.queueBind(queue, <span class="string">&quot;ex_direct&quot;</span>, <span class="string">&quot;info&quot;</span>);</span><br><span class="line">        channel.queueBind(queue, <span class="string">&quot;ex_direct&quot;</span>, <span class="string">&quot;error&quot;</span>);</span><br><span class="line">        channel.queueBind(queue, <span class="string">&quot;ex_direct&quot;</span>, <span class="string">&quot;warning&quot;</span>);</span><br><span class="line">        <span class="comment">//6. 消费消息</span></span><br><span class="line">        channel.basicConsume(queue, <span class="keyword">true</span>, <span class="keyword">new</span> DefaultConsumer(channel) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;消费者2接收到消息：&quot;</span> + <span class="keyword">new</span> String(body));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>测试结果</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/image-20210226100714320.png" alt="image-20210226100714320"></p>
<p><img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/image-20210226100729738.png" alt="image-20210226100729738"></p>
<h3 id="Topics-模型"><a href="#Topics-模型" class="headerlink" title="Topics 模型"></a>Topics 模型</h3><p><img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/python-five.png" alt="img"></p>
<p>​        <code>Topics</code>类型的<code>Exchange</code>与<code>Direct</code>相比，都是可以根据<code>RoutingKey</code>把消息路由到不同的队列。只不过<code>Topic</code>类型<code>Exchange</code>可以让队列在绑定<code>Routing key</code> 的时候使用通配符。这种模型<code>Routingkey</code> 一般都是由一个或多个单词组成，多个单词之间以”.”分割，例如： <code>item.insert</code></p>
<table>
<thead>
<tr>
<th>通配符名称</th>
<th>功能</th>
<th>举例</th>
</tr>
</thead>
<tbody><tr>
<td>*</td>
<td>匹配不多不少恰好1个词</td>
<td>msg.*    只能匹配 msg.log或者msg.info等</td>
</tr>
<tr>
<td>#</td>
<td>匹配一个或多个词</td>
<td>msg.#    匹配msg、msg.log、msg.log.info、msg.log.error.system 等</td>
</tr>
</tbody></table>
<p><strong>生成者</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Provider</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException </span>&#123;</span><br><span class="line">        <span class="comment">//1. 通过自行封装的方法获取连接对象</span></span><br><span class="line">        Connection connection = RabbitMQUtils.getConnection();</span><br><span class="line">        <span class="comment">//2. 获取通道对象</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        <span class="comment">//3. 声明交换机 =&gt; topics 模型的交换机类型为 topic</span></span><br><span class="line">        channel.exchangeDeclare(<span class="string">&quot;ex_topic&quot;</span>,<span class="string">&quot;topic&quot;</span>);</span><br><span class="line">        <span class="comment">//4. 广播消息</span></span><br><span class="line">        channel.basicPublish(<span class="string">&quot;ex_topic&quot;</span>,<span class="string">&quot;msg&quot;</span>,<span class="keyword">null</span>,<span class="string">&quot;这是一条 msg 广播&quot;</span>.getBytes());</span><br><span class="line">        channel.basicPublish(<span class="string">&quot;ex_topic&quot;</span>,<span class="string">&quot;msg.info&quot;</span>,<span class="keyword">null</span>,<span class="string">&quot;这是一条 msg.info 信息&quot;</span>.getBytes());</span><br><span class="line">        channel.basicPublish(<span class="string">&quot;ex_topic&quot;</span>,<span class="string">&quot;msg.info.error&quot;</span>,<span class="keyword">null</span>,<span class="string">&quot;这是一条 msg.info.error 广播&quot;</span>.getBytes());</span><br><span class="line">        channel.basicPublish(<span class="string">&quot;ex_topic&quot;</span>,<span class="string">&quot;msg.info.error.system&quot;</span>,<span class="keyword">null</span>,<span class="string">&quot;这是一条 msg.info.error.system 广播&quot;</span>.getBytes());</span><br><span class="line">        <span class="comment">//5. 关闭资源</span></span><br><span class="line">        RabbitMQUtils.closeChannelAndConnection(channel,connection);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>消费者1</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException </span>&#123;</span><br><span class="line">        <span class="comment">//1. 通过自行封装的方法获取连接对象</span></span><br><span class="line">        Connection connection = RabbitMQUtils.getConnection();</span><br><span class="line">        <span class="comment">//2. 获取通道对象</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        <span class="comment">//3. 绑定交换机 =&gt; topic 模型的交换机类型是 topic</span></span><br><span class="line">        channel.exchangeDeclare(<span class="string">&quot;ex_topic&quot;</span>,<span class="string">&quot;topic&quot;</span>);</span><br><span class="line">        <span class="comment">//4. 创建临时队列</span></span><br><span class="line">        String queue = channel.queueDeclare().getQueue();</span><br><span class="line">        <span class="comment">//5. 将临时队列绑定到交换机上 =&gt; 消费者1只能消费 routingKey 为 msg.* 的消息</span></span><br><span class="line">        <span class="comment">// routingKey 的每个单词之间用&quot;.&quot;来分割，通配符 * 表示只能匹配1个单词，如 msg.info</span></span><br><span class="line">        channel.queueBind(queue,<span class="string">&quot;ex_topic&quot;</span>,<span class="string">&quot;msg.*&quot;</span>);</span><br><span class="line">        <span class="comment">//6. 消费消息</span></span><br><span class="line">        channel.basicConsume(queue,<span class="keyword">true</span>,<span class="keyword">new</span> DefaultConsumer(channel)&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;消费者1接收到消息：&quot;</span>+<span class="keyword">new</span> String(body));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>消费者2</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException </span>&#123;</span><br><span class="line">        <span class="comment">//1. 通过自行封装的方法获取连接对象</span></span><br><span class="line">        Connection connection = RabbitMQUtils.getConnection();</span><br><span class="line">        <span class="comment">//2. 获取通道对象</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        <span class="comment">//3. 绑定交换机 =&gt; topic 模型的交换机类型是 topic</span></span><br><span class="line">        channel.exchangeDeclare(<span class="string">&quot;ex_topic&quot;</span>, <span class="string">&quot;topic&quot;</span>);</span><br><span class="line">        <span class="comment">//4. 创建临时队列</span></span><br><span class="line">        String queue = channel.queueDeclare().getQueue();</span><br><span class="line">        <span class="comment">//5. 将临时队列绑定到交换机上 =&gt; 消费者2只能消费 routingKey 为 msg.# 的消息</span></span><br><span class="line">        <span class="comment">// routingKey 的每个单词之间用&quot;.&quot;来分割，通配符 # 表示只能匹配1个单词或多个，</span></span><br><span class="line">        <span class="comment">// 如 msg、msg.info, msg.info.error、msg.info.error.system</span></span><br><span class="line">        channel.queueBind(queue, <span class="string">&quot;ex_topic&quot;</span>, <span class="string">&quot;msg.#&quot;</span>);</span><br><span class="line">        <span class="comment">//6. 消费消息</span></span><br><span class="line">        channel.basicConsume(queue, <span class="keyword">true</span>, <span class="keyword">new</span> DefaultConsumer(channel) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;消费者2接收到消息：&quot;</span> + <span class="keyword">new</span> String(body));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>测试结果</strong></p>
<img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/image-20210226102414135.png" alt="image-20210226102414135" style="zoom:150%;" />

<p><img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/image-20210226102523549.png" alt="image-20210226102523549"></p>
<h3 id="RPC-模型"><a href="#RPC-模型" class="headerlink" title="RPC 模型"></a>RPC 模型</h3><p>​        在 Work Queues 模型中，我们学习了如何使用工作队列在多个工作人员之间分配耗时的任务。但是，如果我们需要在远程计算机上运行功能并等待结果怎么办？那就可以用 RPC 模型（远程过程调用）。</p>
<p>​        我们将使用 RabbitMQ 构建RPC系统：客户端和可伸缩 RPC 服务器。由于我们没有值得分配的耗时任务，因此我们将创建一个虚拟 RPC服务，该服务返回斐波那契数。</p>
<p><img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/python-six.png" alt="img"></p>
<ul>
<li>对于RPC请求，客户端发送一条消息，该消息具有两个属性：replyTo（设置为仅为该请求创建的匿名互斥队列）和correlationId（设置为每个请求的唯一值）。</li>
<li>该请求被发送到rpc_queue队列。</li>
<li>RPC工作程序（又名：服务器）正在等待该队列上的请求。出现请求时，它会使用 replyTo 字段中的队列来完成工作，并将消息和结果发送回客户端。</li>
<li>客户端等待答复队列中的数据。出现消息时，它将检查correlationId属性。如果它与请求中的值匹配，则将响应返回给应用程序。</li>
</ul>
<p><strong>生产者</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RpcClient</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Connection connection;</span><br><span class="line">    <span class="keyword">private</span> Channel channel;</span><br><span class="line">    <span class="comment">//发送请求的队列名称</span></span><br><span class="line">    <span class="keyword">private</span> String requestQueueName = <span class="string">&quot;rpc_queue&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, InterruptedException, TimeoutException </span>&#123;</span><br><span class="line">        <span class="comment">//初始化 RPCClient</span></span><br><span class="line">        RpcClient rpcClient = <span class="keyword">new</span> RpcClient();</span><br><span class="line">        rpcClient.connection = RabbitMQUtils.getConnection();</span><br><span class="line">        rpcClient.channel = rpcClient.connection.createChannel();</span><br><span class="line">        <span class="comment">//发送 request 请求信息</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;现在客户端希望计算 &quot;</span> + i + <span class="string">&quot; * 10&quot;</span>);</span><br><span class="line">            String response = rpcClient.call(Integer.toString(i));</span><br><span class="line">            System.out.println(<span class="string">&quot;计算结果为： &quot;</span> + i + <span class="string">&quot; * 10 = &quot;</span> + response);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        close(rpcClient);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//发送请求，希望调用远程的函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">(String message)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">//定义一个相关ID</span></span><br><span class="line">        <span class="keyword">final</span> String correlationId = UUID.randomUUID().toString();</span><br><span class="line">        <span class="comment">//回调队列</span></span><br><span class="line">        String replyQueueName = channel.queueDeclare().getQueue();</span><br><span class="line">        <span class="comment">//定义消息属性</span></span><br><span class="line">        AMQP.BasicProperties basicProperties = <span class="keyword">new</span> AMQP.BasicProperties</span><br><span class="line">                .Builder()</span><br><span class="line">                <span class="comment">//设置相关ID</span></span><br><span class="line">                .correlationId(correlationId)</span><br><span class="line">                <span class="comment">//设置回调队列</span></span><br><span class="line">                .replyTo(replyQueueName)</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//存储相应信息</span></span><br><span class="line">        <span class="keyword">final</span> BlockingQueue&lt;String&gt; response = <span class="keyword">new</span> ArrayBlockingQueue&lt;&gt;(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//发送消息</span></span><br><span class="line">        channel.basicPublish(<span class="string">&quot;&quot;</span>, requestQueueName, basicProperties, message.getBytes(StandardCharsets.UTF_8));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//消费消息</span></span><br><span class="line">        String ctag = channel.basicConsume(replyQueueName, <span class="keyword">true</span></span><br><span class="line">                <span class="comment">//参数3：服务器端传过来的回调对象</span></span><br><span class="line">                , <span class="keyword">new</span> DeliverCallback() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(String consumerTag, Delivery message)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                        <span class="keyword">if</span> (message.getProperties().getCorrelationId().equals(correlationId)) &#123;</span><br><span class="line">                            response.offer(<span class="keyword">new</span> String(message.getBody(), StandardCharsets.UTF_8));</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, <span class="keyword">new</span> CancelCallback() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(String consumerTag)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">        String result = response.take();</span><br><span class="line">        channel.basicCancel(ctag);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//关闭资源</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(RpcClient rpcClient)</span> <span class="keyword">throws</span> IOException, TimeoutException </span>&#123;</span><br><span class="line">        RabbitMQUtils.closeChannelAndConnection(rpcClient.channel, rpcClient.connection);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>消费者</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RpcServer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义队列名称</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String RPC_QUEUE_NAME = <span class="string">&quot;rpc_queue&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException </span>&#123;</span><br><span class="line">        <span class="comment">//调用自行封装的工具类获取连接对象</span></span><br><span class="line">        Connection connection = RabbitMQUtils.getConnection();</span><br><span class="line">        <span class="comment">//获取通道</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        <span class="comment">//声明队列</span></span><br><span class="line">        channel.queueDeclare(RPC_QUEUE_NAME, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">//清除队列</span></span><br><span class="line">        channel.queuePurge(RPC_QUEUE_NAME);</span><br><span class="line">        <span class="comment">//每次处理一条信息</span></span><br><span class="line">        channel.basicQos(<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//定义一个监听器</span></span><br><span class="line">        Object monitor = <span class="keyword">new</span> Object();</span><br><span class="line">        <span class="comment">//定义回调信息</span></span><br><span class="line">        DeliverCallback deliverCallback = <span class="keyword">new</span> DeliverCallback() &#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> consumerTag 消费者标签，可以与消费者建立联系</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> message     消费者发送过来的消息(消息属性、消息封装体、消息没人)</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(String consumerTag, Delivery message)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                <span class="comment">//定义信息属性</span></span><br><span class="line">                AMQP.BasicProperties basicProperties = <span class="keyword">new</span> AMQP.BasicProperties</span><br><span class="line">                        .Builder()</span><br><span class="line">                        .correlationId(message.getProperties().getCorrelationId()) <span class="comment">//指明关联ID</span></span><br><span class="line">                        .build();</span><br><span class="line">                <span class="comment">//定义相应信息</span></span><br><span class="line">                String response = <span class="string">&quot;&quot;</span>;</span><br><span class="line">                <span class="comment">//解析request信息</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    String s = <span class="keyword">new</span> String(message.getBody(), StandardCharsets.UTF_8);</span><br><span class="line">                    <span class="keyword">int</span> i = Integer.parseInt(s);</span><br><span class="line">                    System.out.println(<span class="string">&quot;正在计算 &quot;</span> + i + <span class="string">&quot; * &quot;</span> + <span class="number">10</span>);</span><br><span class="line">                    response = String.valueOf(i * <span class="number">10</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    <span class="comment">//发布 response 消息</span></span><br><span class="line">                    channel.basicPublish(<span class="string">&quot;&quot;</span>, message.getProperties().getReplyTo(), basicProperties, response.getBytes(<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">                    <span class="comment">//手动确认信息</span></span><br><span class="line">                    channel.basicAck(message.getEnvelope().getDeliveryTag(), <span class="keyword">false</span>);</span><br><span class="line">                    <span class="comment">//RabbitMq 消费者工作线程通知 RPC 服务器所有者线程</span></span><br><span class="line">                    <span class="keyword">synchronized</span> (monitor) &#123;</span><br><span class="line">                        <span class="comment">/**</span></span><br><span class="line"><span class="comment">                         * notify()</span></span><br><span class="line"><span class="comment">                         *</span></span><br><span class="line"><span class="comment">                         * 唤醒处于等待的线程</span></span><br><span class="line"><span class="comment">                         */</span></span><br><span class="line">                        monitor.notify();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">//消费客户端发送过来的请求消息</span></span><br><span class="line">        channel.basicConsume(RPC_QUEUE_NAME, <span class="keyword">false</span>, deliverCallback, <span class="keyword">new</span> CancelCallback() &#123;</span><br><span class="line">            <span class="comment">// 等待并准备好使用来自RPC客户端的消息</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(String consumerTag)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                    <span class="keyword">synchronized</span> (monitor) &#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            <span class="comment">/**</span></span><br><span class="line"><span class="comment">                             * wait()</span></span><br><span class="line"><span class="comment">                             *</span></span><br><span class="line"><span class="comment">                             * 使得当前线程立刻停止运行，处于等待状态（WAIT），</span></span><br><span class="line"><span class="comment">                             * 并将当前线程置入锁对象的等待队列中，</span></span><br><span class="line"><span class="comment">                             * 直到被通知（notify）或被中断为止。</span></span><br><span class="line"><span class="comment">                             */</span></span><br><span class="line">                            monitor.wait();</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                            e.printStackTrace();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>计算结果</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/image-20210226104700633.png" alt="image-20210226104700633"></p>
<p><img src="https://cdn.jsdelivr.net/gh/Chave-Z/picture@master/data/image-20210226104724495.png" alt="image-20210226104724495"></p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/820533c7b41e94dd59eb5c6dc7e7e572.png" alt="image-20200923112003146"></p>
<h3 id="Publisher-Confirms-模型"><a href="#Publisher-Confirms-模型" class="headerlink" title="Publisher Confirms 模型"></a>Publisher Confirms 模型</h3><h2 id="Spring-Boot整合RabbitMQ"><a href="#Spring-Boot整合RabbitMQ" class="headerlink" title="Spring Boot整合RabbitMQ"></a>Spring Boot整合RabbitMQ</h2><ul>
<li>创建项目、引入依赖</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>在application.yml配置RabbitMQ</li>
</ul>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">rabbitmq-test</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">guest</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">guest</span></span><br><span class="line">    <span class="comment">#虚拟host 可以不设置,使用server默认host</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/</span></span><br></pre></td></tr></table></figure>

<p>​        基本上这个时候我们使用RabbitTemplate就可以进行相关操作了，但是我们还得了解几个概念，首先我们查看Spring Boot中RabbitMQ的自动配置类RabbitAutoConfiguration：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnSingleCandidate(ConnectionFactory.class)</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean(RabbitOperations.class)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> RabbitTemplate <span class="title">rabbitTemplate</span><span class="params">(RabbitTemplateConfigurer configurer, ConnectionFactory connectionFactory)</span> </span>&#123;</span><br><span class="line">    RabbitTemplate template = <span class="keyword">new</span> RabbitTemplate();</span><br><span class="line">    configurer.configure(template, connectionFactory);</span><br><span class="line">    <span class="keyword">return</span> template;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnSingleCandidate(ConnectionFactory.class)</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty(prefix = &quot;spring.rabbitmq&quot;, name = &quot;dynamic&quot;, matchIfMissing = true)</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> AmqpAdmin <span class="title">amqpAdmin</span><span class="params">(ConnectionFactory connectionFactory)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> RabbitAdmin(connectionFactory);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到其向容器中注入了两个组件：RabbitTemplate和AmqpAdmin，这两个组件的作用如下：</p>
<p><strong>RabbitTemplate</strong>：可以发送消息、接收消息。</p>
<p><strong>AmqpAdmin</strong>：负责操作Exchange、Queue、Binding等，比如创建、删除、解绑。</p>
<h3 id="RabbitTemplate使用"><a href="#RabbitTemplate使用" class="headerlink" title="RabbitTemplate使用"></a>RabbitTemplate使用</h3><p>我们先来看一下RabbitTemplate，它主要有两个方法：</p>
<p>**1. send(String exchange, String routingKey, Message message)**：需要自己定义一个Message,比较麻烦。</p>
<p>**2. convertAndSend(String exchange, String routingKey, Object object)**：只需要传入一个Object,自动序列化发送给rabbitmq，object默认被当成消息体。</p>
<h4 id="Hello-World模式"><a href="#Hello-World模式" class="headerlink" title="Hello World模式"></a>Hello World模式</h4><ul>
<li>生产者</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RabbitmqHelloWordTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Hello World 模型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testHelloWorld</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 参数1：队列名称</span></span><br><span class="line"><span class="comment">         * 参数2：消息内容</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * 注意：当没有消费者在监听的时候，生产者的运行是不会有任何效果的。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">         <span class="comment">// 发送字符串</span></span><br><span class="line">        <span class="comment">// rabbitTemplate.convertAndSend(&quot;hello&quot;,&quot;hello world&quot;);</span></span><br><span class="line">        <span class="comment">// 也可以发送map</span></span><br><span class="line">        HashMap&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;age&quot;</span>, <span class="number">22</span>);</span><br><span class="line">        rabbitTemplate.convertAndSend(<span class="string">&quot;hello&quot;</span>, map);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>消费者</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="comment">// 注明消费者在监听 hello 这个队列</span></span><br><span class="line"><span class="meta">@RabbitListener(queuesToDeclare = @Queue(value = &quot;hello&quot;,durable = &quot;false&quot;,autoDelete = &quot;true&quot;))</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloConsumer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * RabbitHandler 注解指明这是接收到消息时的回调方法</span></span><br><span class="line"><span class="comment">     * message 参数是传过来的消息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="comment">// 字符串类型用这个接收 </span></span><br><span class="line">    <span class="comment">// public void receive(String message)&#123;</span></span><br><span class="line">    <span class="comment">// 接收map</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receive</span><span class="params">(Map message)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;message = &quot;</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Work-Queues-模型-1"><a href="#Work-Queues-模型-1" class="headerlink" title="Work Queues 模型"></a>Work Queues 模型</h4><h5 id="平均消费模式-1"><a href="#平均消费模式-1" class="headerlink" title="平均消费模式"></a>平均消费模式</h5><ul>
<li><strong>生产者</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WorkQueuesTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Work Queues 模型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testWorkQueues</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            rabbitTemplate.convertAndSend(<span class="string">&quot;work-queues&quot;</span>,<span class="string">&quot;消息&quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>消费者</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WorkConsumer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 如果直接在方法上加  <span class="doctag">@RabbitListener</span> 注解的话，那就不需要加 <span class="doctag">@RabbitHandler</span> 注解了，默认就加上了。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RabbitListener(queuesToDeclare = @Queue(value = &quot;work-queues&quot;))</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receive1</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;这是 work 模型的消息者1得到的 message = &quot;</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener(queuesToDeclare = @Queue(value = &quot;work-queues&quot;))</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receive2</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;这是 work 模型的消息者2得到的 message = &quot;</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>测试结果为：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">这是 work 模型的消息者2得到的 message &#x3D; 消息0</span><br><span class="line">这是 work 模型的消息者1得到的 message &#x3D; 消息1</span><br><span class="line">这是 work 模型的消息者2得到的 message &#x3D; 消息2</span><br><span class="line">这是 work 模型的消息者1得到的 message &#x3D; 消息3</span><br><span class="line">这是 work 模型的消息者2得到的 message &#x3D; 消息4</span><br></pre></td></tr></table></figure>

<h5 id="能者多劳-1"><a href="#能者多劳-1" class="headerlink" title="能者多劳"></a>能者多劳</h5><p>TODO</p>
<h4 id="Fanout-模型"><a href="#Fanout-模型" class="headerlink" title="Fanout 模型"></a>Fanout 模型</h4><ul>
<li>生产者</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FanoutTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Fanout 模型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testWorkQueues</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        rabbitTemplate.convertAndSend(<span class="string">&quot;ex_logs&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;这是 Fanout 模型发送的消息&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>消费者</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FanoutConsumer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//因为是临时队列，所以不需要进行 queuesToDeclare</span></span><br><span class="line">    <span class="meta">@RabbitListener(bindings = &#123;</span></span><br><span class="line"><span class="meta">            @QueueBinding(</span></span><br><span class="line"><span class="meta">                    //不指定名称的话就会给我们随机创建临时队列</span></span><br><span class="line"><span class="meta">                    value = @Queue,</span></span><br><span class="line"><span class="meta">                    //指定绑定的交换机</span></span><br><span class="line"><span class="meta">                    exchange = @Exchange(value = &quot;ex_logs&quot;, type = &quot;fanout&quot;)</span></span><br><span class="line"><span class="meta">            )</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receive1</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;消费者1 message = &quot;</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener(bindings = &#123;</span></span><br><span class="line"><span class="meta">            //不指定名称的话就会给我们随机创建临时队列</span></span><br><span class="line"><span class="meta">            @QueueBinding(</span></span><br><span class="line"><span class="meta">                    value = @Queue,</span></span><br><span class="line"><span class="meta">                    //指定绑定的交换机</span></span><br><span class="line"><span class="meta">                    exchange = @Exchange(value = &quot;ex_logs&quot;, type = &quot;fanout&quot;)</span></span><br><span class="line"><span class="meta">            )</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receive2</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;消费者2 message = &quot;</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Routing-模型-1"><a href="#Routing-模型-1" class="headerlink" title="Routing 模型"></a>Routing 模型</h4><ul>
<li>生产者</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RoutingTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Routing 模型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testRouting</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        rabbitTemplate.convertAndSend(<span class="string">&quot;routing_directs&quot;</span>, <span class="string">&quot;info&quot;</span>, <span class="string">&quot;这是 Routing 模型 发送 info 的 key 的信息&quot;</span>);</span><br><span class="line">        rabbitTemplate.convertAndSend(<span class="string">&quot;routing_directs&quot;</span>, <span class="string">&quot;error&quot;</span>, <span class="string">&quot;这是 Routing 模型 发送 error 的 key 的信息&quot;</span>);</span><br><span class="line">        rabbitTemplate.convertAndSend(<span class="string">&quot;routing_directs&quot;</span>, <span class="string">&quot;warning&quot;</span>, <span class="string">&quot;这是 Routing 模型 发送 warning 的 key 的信息&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>消费者</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RoutingConsumer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener(bindings = &#123;</span></span><br><span class="line"><span class="meta">            @QueueBinding(</span></span><br><span class="line"><span class="meta">                    value = @Queue,</span></span><br><span class="line"><span class="meta">                    //默认就是 direct 类型的</span></span><br><span class="line"><span class="meta">                    exchange = @Exchange(value = &quot;routing_directs&quot;, type = &quot;direct&quot;),</span></span><br><span class="line"><span class="meta">                    //接收 3 种类型的 routingKey 信息</span></span><br><span class="line"><span class="meta">                    key = &#123;&quot;info&quot;, &quot;error&quot;, &quot;warning&quot;&#125;</span></span><br><span class="line"><span class="meta">            )</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receive1</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;消费者1 接受到的消息 message = &quot;</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener(bindings = &#123;</span></span><br><span class="line"><span class="meta">            @QueueBinding(</span></span><br><span class="line"><span class="meta">                    value = @Queue,</span></span><br><span class="line"><span class="meta">                    //默认就是 direct 类型的</span></span><br><span class="line"><span class="meta">                    exchange = @Exchange(value = &quot;routing_directs&quot;, type = &quot;direct&quot;),</span></span><br><span class="line"><span class="meta">                    //只接收 info 类型的 routingKey 信息</span></span><br><span class="line"><span class="meta">                    key = &#123;&quot;info&quot;&#125;</span></span><br><span class="line"><span class="meta">            )</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receive2</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;消费者2 接受到的消息 message = &quot;</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Topics-模型-1"><a href="#Topics-模型-1" class="headerlink" title="Topics 模型"></a>Topics 模型</h4><ul>
<li>生产者</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TopicsTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Routing 模型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testRouting</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        rabbitTemplate.convertAndSend(<span class="string">&quot;ex_topics&quot;</span>, <span class="string">&quot;msg&quot;</span>, <span class="string">&quot;这是 Topics 模型发送的 msg 类型信息&quot;</span>);</span><br><span class="line">        rabbitTemplate.convertAndSend(<span class="string">&quot;ex_topics&quot;</span>, <span class="string">&quot;msg.info&quot;</span>, <span class="string">&quot;这是 Topics 模型发送的 msg.info 类型信息&quot;</span>);</span><br><span class="line">        rabbitTemplate.convertAndSend(<span class="string">&quot;ex_topics&quot;</span>, <span class="string">&quot;msg.info.error&quot;</span>, <span class="string">&quot;这是 Topics 模型发送的 msg.info.error 类型信息&quot;</span>);</span><br><span class="line">        rabbitTemplate.convertAndSend(<span class="string">&quot;ex_topics&quot;</span>, <span class="string">&quot;msg.info.error.system&quot;</span>, <span class="string">&quot;这是 Topics 模型发送的 msg.info.error.system 类型信息&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>消费者</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TopicsConsumer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RabbitListener(bindings = &#123;</span></span><br><span class="line"><span class="meta">            @QueueBinding(</span></span><br><span class="line"><span class="meta">                    value = @Queue,</span></span><br><span class="line"><span class="meta">                    exchange = @Exchange(value = &quot;ex_topics&quot;,type = &quot;topic&quot;),</span></span><br><span class="line"><span class="meta">                    // # 可以匹配 n 个单词</span></span><br><span class="line"><span class="meta">                    key = &#123;&quot;msg.#&quot;&#125;</span></span><br><span class="line"><span class="meta">            )</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receive1</span><span class="params">(String message)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;这是消费者1收到的消息 message = &quot;</span>+message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener(bindings = &#123;</span></span><br><span class="line"><span class="meta">            @QueueBinding(</span></span><br><span class="line"><span class="meta">                    value = @Queue,</span></span><br><span class="line"><span class="meta">                    exchange = @Exchange(value = &quot;ex_topics&quot;,type = &quot;topic&quot;),</span></span><br><span class="line"><span class="meta">                    // * 只能匹配 1 个单词</span></span><br><span class="line"><span class="meta">                    key = &#123;&quot;msg.*&quot;&#125;</span></span><br><span class="line"><span class="meta">            )</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receive2</span><span class="params">(String message)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;这是消费者2收到的消息 message = &quot;</span>+message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="RPC-模型-1"><a href="#RPC-模型-1" class="headerlink" title="RPC 模型"></a>RPC 模型</h4><p>Todo</p>
<h4 id="Publisher-Confirms-模型-1"><a href="#Publisher-Confirms-模型-1" class="headerlink" title="Publisher Confirms 模型"></a>Publisher Confirms 模型</h4><p>Todo</p>
<h1 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h1><h2 id="消息队列中，如何保证消息的顺序性？"><a href="#消息队列中，如何保证消息的顺序性？" class="headerlink" title="消息队列中，如何保证消息的顺序性？"></a>消息队列中，如何保证消息的顺序性？</h2><p>拆分多个 queue，每个 queue 一个 consumer，就是多一些 queue 而已，确实是麻烦点；或者就一个 queue 但是对应一个 consumer，然后这个 consumer 内部用内存队列做排队，然后分发给底层不同的 worker 来处理。</p>
<p><a href="http://mp.weixin.qq.com/s?__biz=MzIyNDU2ODA4OQ==&mid=2247483922&idx=1&sn=09214b2223b780afe441d481ae367c0b&chksm=e80db464df7a3d72b57bf1158478ad3f55c546be15af811f10dc262e0262832c9d67ff887047&scene=21#wechat_redirect">消息队列中，如何保证消息的顺序性？</a></p>
<h2 id="RabbitMQ如何保证消息不被重复消费"><a href="#RabbitMQ如何保证消息不被重复消费" class="headerlink" title="RabbitMQ如何保证消息不被重复消费"></a>RabbitMQ如何保证消息不被重复消费</h2><p><a href="https://www.cnblogs.com/zhixie/p/13444213.html">《RabbitMQ》如何保证消息不被重复消费</a></p>
<h2 id="rabbitmq系列（三）消息幂等性处理"><a href="#rabbitmq系列（三）消息幂等性处理" class="headerlink" title="rabbitmq系列（三）消息幂等性处理"></a>rabbitmq系列（三）消息幂等性处理</h2><p><a href="https://www.cnblogs.com/zhixie/p/12204095.html">rabbitmq系列（三）消息幂等性处理</a></p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.jianshu.com/p/fdd94be6037a">消息队列的用途、优缺点、技术选型</a></p>
<p><a href="https://www.bilibili.com/video/BV1dE411K7MG">B站编程不良人的MQ消息中间件之RabbitMQ以及整合SpringBoot2.x实战教程》</a></p>
]]></content>
      <categories>
        <category>消息队列</category>
      </categories>
      <tags>
        <tag>消息队列</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Cloud面试题</title>
    <url>/posts/37f13255.html</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="密码不正确，请重新输入！" data-whm="文章不能被校验, 不过您还是能看看解密后的内容！">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">该文章还未完全完成, 请输入密码查看。</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="cb51a1992f6ac3d755c8a1cf9b2ac34685d71954c0ab0fb510c3b182a78c9d84"></script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>面试</category>
      </categories>
      <tags>
        <tag>面试</tag>
      </tags>
  </entry>
</search>
